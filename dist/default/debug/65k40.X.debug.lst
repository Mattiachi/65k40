

Microchip Technology PIC18 PRO Macro Assembler V1.38 build -256452561 
                                                                                               Fri May 19 11:04:16 2023

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	18LF65K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	text172,global,reloc=2,class=CODE,delta=1
   196                           	psect	text173,global,reloc=2,class=CODE,delta=1
   197                           	psect	text174,global,reloc=2,class=CODE,delta=1
   198                           	psect	text175,global,reloc=2,class=CODE,delta=1
   199                           	psect	text176,global,reloc=2,class=CODE,delta=1
   200                           	psect	text177,global,reloc=2,class=CODE,delta=1
   201                           	psect	text178,global,reloc=2,class=CODE,delta=1
   202                           	psect	text179,global,reloc=2,class=CODE,delta=1
   203                           	psect	text180,global,reloc=2,class=CODE,delta=1
   204                           	psect	text181,global,reloc=2,class=CODE,delta=1
   205                           	psect	text182,global,reloc=2,class=CODE,delta=1
   206                           	psect	text183,global,reloc=2,class=CODE,delta=1
   207                           	psect	text184,global,reloc=2,class=CODE,delta=1
   208                           	psect	text185,global,reloc=2,class=CODE,delta=1
   209                           	psect	text186,global,reloc=2,class=CODE,delta=1
   210                           	psect	text187,global,reloc=2,class=CODE,delta=1
   211                           	psect	text188,global,reloc=2,class=CODE,delta=1
   212                           	psect	text189,global,reloc=2,class=CODE,delta=1
   213                           	psect	text190,global,reloc=2,class=CODE,delta=1
   214                           	psect	text191,global,reloc=2,class=CODE,delta=1
   215                           	psect	text192,global,reloc=2,class=CODE,delta=1
   216                           	psect	text193,global,reloc=2,class=CODE,delta=1
   217                           	psect	text194,global,reloc=2,class=CODE,delta=1
   218                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   219                           	psect	text196,global,reloc=2,class=CODE,delta=1
   220                           	psect	text197,global,reloc=2,class=CODE,delta=1
   221                           	psect	text198,global,reloc=2,class=CODE,delta=1
   222                           	psect	text199,global,reloc=2,class=CODE,delta=1
   223                           	psect	text200,global,reloc=2,class=CODE,delta=1
   224                           	psect	text201,global,reloc=2,class=CODE,delta=1
   225                           	psect	text202,global,reloc=2,class=CODE,delta=1
   226                           	psect	text203,global,reloc=2,class=CODE,delta=1
   227                           	psect	text204,global,reloc=2,class=CODE,delta=1
   228                           	psect	text205,global,reloc=2,class=CODE,delta=1
   229                           	psect	text206,global,reloc=2,class=CODE,delta=1
   230                           	psect	text207,global,reloc=2,class=CODE,delta=1
   231                           	psect	text208,global,reloc=2,class=CODE,delta=1
   232                           	psect	text209,global,reloc=2,class=CODE,delta=1
   233                           	psect	text210,global,reloc=2,class=CODE,delta=1
   234                           	psect	text211,global,reloc=2,class=CODE,delta=1
   235                           	psect	text212,global,reloc=2,class=CODE,delta=1
   236                           	psect	text213,global,reloc=2,class=CODE,delta=1
   237                           	psect	text214,global,reloc=2,class=CODE,delta=1
   238                           	psect	text215,global,reloc=2,class=CODE,delta=1
   239                           	psect	text216,global,reloc=2,class=CODE,delta=1
   240                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   241                           	psect	text217,global,reloc=2,class=CODE,delta=1
   242                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   243                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   244  0000                     
   245 ;; Function _INT0_DefaultInterruptHandler is unused but had its address taken
   246  0000                     
   247 ;; Function _DIO0_ISR_Lora is unused but had its address taken
   248  0000                     
   249 ;; Function _DIO1_ISR_Lora is unused but had its address taken
   250  0000                     
   251 ;; Function _DIO2_ISR_Lora is unused but had its address taken
   252  0000                     
   253 ;; Function _DIO5_ISR_Lora is unused but had its address taken
   254  0000                     
   255 ;;UnconfirmedTransmissionCallback@param	offset=-1 (param)
   256 ;;RADIO_WatchdogTimeout@param	offset=-1 (param)
   257 ;;RADIO_RxFSKTimeout@irqFlags	offset	0
   258 ;;RADIO_RxFSKTimeout@param	offset=-1 (param)
   259 ;;LORAWAN_ReceiveWindow1Callback@freq	offset	0
   260 ;;LORAWAN_ReceiveWindow1Callback@param	offset=-1 (param)
   261 ;;_LORAWAN_LinkCheckCallback$3299	offset	0
   262 ;;LORAWAN_LinkCheckCallback@iCtr	offset	4
   263 ;;LORAWAN_LinkCheckCallback@param	offset=-1 (param)
   264 ;;_DutyCycleCallback$2124	offset	0
   265 ;;DutyCycleCallback@minim	offset	4
   266 ;;DutyCycleCallback@i	offset	8
   267 ;;DutyCycleCallback@found	offset	9
   268 ;;DutyCycleCallback@param	offset=-1 (param)
   269 ;;AutomaticReplyCallback@param	offset=-1 (param)
   270 ;;AckRetransmissionCallback@maximumPacketSize	offset	0
   271 ;;AckRetransmissionCallback@param	offset=-1 (param)
   272 ;;_param	offset=-1 (param)
   273 ;;_UpdateJoinSuccessState$3316	offset	0
   274 ;;UpdateJoinSuccessState@param	offset=-1 (param)
   275                           
   276                           	psect	idataCOMRAM
   277  007842                     __pidataCOMRAM:
   278                           	opt stack 0
   279                           
   280                           ;initializer for _randx
   281  007842  0001               	dw	1
   282  007844  0000               	dw	0
   283                           
   284                           ;initializer for _ticksToScheduledInterrupt
   285  007846  FFFF               	dw	65535
   286  007848  FFFF               	dw	65535
   287                           
   288                           	psect	idataBANK1
   289  0070CC                     __pidataBANK1:
   290                           	opt stack 0
   291                           
   292                           ;initializer for GenerateSubkey@F17044
   293  0070CC  00                 	db	0
   294  0070CD  00                 	db	0
   295  0070CE  00                 	db	0
   296  0070CF  00                 	db	0
   297  0070D0  00                 	db	0
   298  0070D1  00                 	db	0
   299  0070D2  00                 	db	0
   300  0070D3  00                 	db	0
   301  0070D4  00                 	db	0
   302  0070D5  00                 	db	0
   303  0070D6  00                 	db	0
   304  0070D7  00                 	db	0
   305  0070D8  00                 	db	0
   306  0070D9  00                 	db	0
   307  0070DA  00                 	db	0
   308  0070DB  87                 	db	135
   309                           
   310                           ;initializer for _count
   311  0070DC  0001               	dw	1
   312                           
   313                           ;initializer for _appSKey
   314  0070DE  45                 	db	69
   315  0070DF  37                 	db	55
   316  0070E0  1A                 	db	26
   317  0070E1  44                 	db	68
   318  0070E2  B2                 	db	178
   319  0070E3  99                 	db	153
   320  0070E4  80                 	db	128
   321  0070E5  1D                 	db	29
   322  0070E6  2E                 	db	46
   323  0070E7  5C                 	db	92
   324  0070E8  A1                 	db	161
   325  0070E9  9E                 	db	158
   326  0070EA  38                 	db	56
   327  0070EB  A5                 	db	165
   328  0070EC  03                 	db	3
   329  0070ED  2A                 	db	42
   330                           
   331                           ;initializer for _nwkSKey
   332  0070EE  DC                 	db	220
   333  0070EF  98                 	db	152
   334  0070F0  06                 	db	6
   335  0070F1  0B                 	db	11
   336  0070F2  22                 	db	34
   337  0070F3  B5                 	db	181
   338  0070F4  BA                 	db	186
   339  0070F5  21                 	db	33
   340  0070F6  61                 	db	97
   341  0070F7  B3                 	db	179
   342  0070F8  A9                 	db	169
   343  0070F9  95                 	db	149
   344  0070FA  7C                 	db	124
   345  0070FB  88                 	db	136
   346  0070FC  03                 	db	3
   347  0070FD  1F                 	db	31
   348                           
   349                           	psect	mediumconst
   350  007E6C                     __pmediumconst:
   351                           	opt stack 0
   352  007E6C  00                 	db	0
   353  007E6D                     _STable:
   354                           	opt stack 0
   355  007E6D  63                 	db	99
   356  007E6E  7C                 	db	124
   357  007E6F  77                 	db	119
   358  007E70  7B                 	db	123
   359  007E71  F2                 	db	242
   360  007E72  6B                 	db	107
   361  007E73  6F                 	db	111
   362  007E74  C5                 	db	197
   363  007E75  30                 	db	48
   364  007E76  01                 	db	1
   365  007E77  67                 	db	103
   366  007E78  2B                 	db	43
   367  007E79  FE                 	db	254
   368  007E7A  D7                 	db	215
   369  007E7B  AB                 	db	171
   370  007E7C  76                 	db	118
   371  007E7D  CA                 	db	202
   372  007E7E  82                 	db	130
   373  007E7F  C9                 	db	201
   374  007E80  7D                 	db	125
   375  007E81  FA                 	db	250
   376  007E82  59                 	db	89
   377  007E83  47                 	db	71
   378  007E84  F0                 	db	240
   379  007E85  AD                 	db	173
   380  007E86  D4                 	db	212
   381  007E87  A2                 	db	162
   382  007E88  AF                 	db	175
   383  007E89  9C                 	db	156
   384  007E8A  A4                 	db	164
   385  007E8B  72                 	db	114
   386  007E8C  C0                 	db	192
   387  007E8D  B7                 	db	183
   388  007E8E  FD                 	db	253
   389  007E8F  93                 	db	147
   390  007E90  26                 	db	38
   391  007E91  36                 	db	54
   392  007E92  3F                 	db	63
   393  007E93  F7                 	db	247
   394  007E94  CC                 	db	204
   395  007E95  34                 	db	52
   396  007E96  A5                 	db	165
   397  007E97  E5                 	db	229
   398  007E98  F1                 	db	241
   399  007E99  71                 	db	113
   400  007E9A  D8                 	db	216
   401  007E9B  31                 	db	49
   402  007E9C  15                 	db	21
   403  007E9D  04                 	db	4
   404  007E9E  C7                 	db	199
   405  007E9F  23                 	db	35
   406  007EA0  C3                 	db	195
   407  007EA1  18                 	db	24
   408  007EA2  96                 	db	150
   409  007EA3  05                 	db	5
   410  007EA4  9A                 	db	154
   411  007EA5  07                 	db	7
   412  007EA6  12                 	db	18
   413  007EA7  80                 	db	128
   414  007EA8  E2                 	db	226
   415  007EA9  EB                 	db	235
   416  007EAA  27                 	db	39
   417  007EAB  B2                 	db	178
   418  007EAC  75                 	db	117
   419  007EAD  09                 	db	9
   420  007EAE  83                 	db	131
   421  007EAF  2C                 	db	44
   422  007EB0  1A                 	db	26
   423  007EB1  1B                 	db	27
   424  007EB2  6E                 	db	110
   425  007EB3  5A                 	db	90
   426  007EB4  A0                 	db	160
   427  007EB5  52                 	db	82
   428  007EB6  3B                 	db	59
   429  007EB7  D6                 	db	214
   430  007EB8  B3                 	db	179
   431  007EB9  29                 	db	41
   432  007EBA  E3                 	db	227
   433  007EBB  2F                 	db	47
   434  007EBC  84                 	db	132
   435  007EBD  53                 	db	83
   436  007EBE  D1                 	db	209
   437  007EBF  00                 	db	0
   438  007EC0  ED                 	db	237
   439  007EC1  20                 	db	32
   440  007EC2  FC                 	db	252
   441  007EC3  B1                 	db	177
   442  007EC4  5B                 	db	91
   443  007EC5  6A                 	db	106
   444  007EC6  CB                 	db	203
   445  007EC7  BE                 	db	190
   446  007EC8  39                 	db	57
   447  007EC9  4A                 	db	74
   448  007ECA  4C                 	db	76
   449  007ECB  58                 	db	88
   450  007ECC  CF                 	db	207
   451  007ECD  D0                 	db	208
   452  007ECE  EF                 	db	239
   453  007ECF  AA                 	db	170
   454  007ED0  FB                 	db	251
   455  007ED1  43                 	db	67
   456  007ED2  4D                 	db	77
   457  007ED3  33                 	db	51
   458  007ED4  85                 	db	133
   459  007ED5  45                 	db	69
   460  007ED6  F9                 	db	249
   461  007ED7  02                 	db	2
   462  007ED8  7F                 	db	127
   463  007ED9  50                 	db	80
   464  007EDA  3C                 	db	60
   465  007EDB  9F                 	db	159
   466  007EDC  A8                 	db	168
   467  007EDD  51                 	db	81
   468  007EDE  A3                 	db	163
   469  007EDF  40                 	db	64
   470  007EE0  8F                 	db	143
   471  007EE1  92                 	db	146
   472  007EE2  9D                 	db	157
   473  007EE3  38                 	db	56
   474  007EE4  F5                 	db	245
   475  007EE5  BC                 	db	188
   476  007EE6  B6                 	db	182
   477  007EE7  DA                 	db	218
   478  007EE8  21                 	db	33
   479  007EE9  10                 	db	16
   480  007EEA  FF                 	db	255
   481  007EEB  F3                 	db	243
   482  007EEC  D2                 	db	210
   483  007EED  CD                 	db	205
   484  007EEE  0C                 	db	12
   485  007EEF  13                 	db	19
   486  007EF0  EC                 	db	236
   487  007EF1  5F                 	db	95
   488  007EF2  97                 	db	151
   489  007EF3  44                 	db	68
   490  007EF4  17                 	db	23
   491  007EF5  C4                 	db	196
   492  007EF6  A7                 	db	167
   493  007EF7  7E                 	db	126
   494  007EF8  3D                 	db	61
   495  007EF9  64                 	db	100
   496  007EFA  5D                 	db	93
   497  007EFB  19                 	db	25
   498  007EFC  73                 	db	115
   499  007EFD  60                 	db	96
   500  007EFE  81                 	db	129
   501  007EFF  4F                 	db	79
   502  007F00  DC                 	db	220
   503  007F01  22                 	db	34
   504  007F02  2A                 	db	42
   505  007F03  90                 	db	144
   506  007F04  88                 	db	136
   507  007F05  46                 	db	70
   508  007F06  EE                 	db	238
   509  007F07  B8                 	db	184
   510  007F08  14                 	db	20
   511  007F09  DE                 	db	222
   512  007F0A  5E                 	db	94
   513  007F0B  0B                 	db	11
   514  007F0C  DB                 	db	219
   515  007F0D  E0                 	db	224
   516  007F0E  32                 	db	50
   517  007F0F  3A                 	db	58
   518  007F10  0A                 	db	10
   519  007F11  49                 	db	73
   520  007F12  06                 	db	6
   521  007F13  24                 	db	36
   522  007F14  5C                 	db	92
   523  007F15  C2                 	db	194
   524  007F16  D3                 	db	211
   525  007F17  AC                 	db	172
   526  007F18  62                 	db	98
   527  007F19  91                 	db	145
   528  007F1A  95                 	db	149
   529  007F1B  E4                 	db	228
   530  007F1C  79                 	db	121
   531  007F1D  E7                 	db	231
   532  007F1E  C8                 	db	200
   533  007F1F  37                 	db	55
   534  007F20  6D                 	db	109
   535  007F21  8D                 	db	141
   536  007F22  D5                 	db	213
   537  007F23  4E                 	db	78
   538  007F24  A9                 	db	169
   539  007F25  6C                 	db	108
   540  007F26  56                 	db	86
   541  007F27  F4                 	db	244
   542  007F28  EA                 	db	234
   543  007F29  65                 	db	101
   544  007F2A  7A                 	db	122
   545  007F2B  AE                 	db	174
   546  007F2C  08                 	db	8
   547  007F2D  BA                 	db	186
   548  007F2E  78                 	db	120
   549  007F2F  25                 	db	37
   550  007F30  2E                 	db	46
   551  007F31  1C                 	db	28
   552  007F32  A6                 	db	166
   553  007F33  B4                 	db	180
   554  007F34  C6                 	db	198
   555  007F35  E8                 	db	232
   556  007F36  DD                 	db	221
   557  007F37  74                 	db	116
   558  007F38  1F                 	db	31
   559  007F39  4B                 	db	75
   560  007F3A  BD                 	db	189
   561  007F3B  8B                 	db	139
   562  007F3C  8A                 	db	138
   563  007F3D  70                 	db	112
   564  007F3E  3E                 	db	62
   565  007F3F  B5                 	db	181
   566  007F40  66                 	db	102
   567  007F41  48                 	db	72
   568  007F42  03                 	db	3
   569  007F43  F6                 	db	246
   570  007F44  0E                 	db	14
   571  007F45  61                 	db	97
   572  007F46  35                 	db	53
   573  007F47  57                 	db	87
   574  007F48  B9                 	db	185
   575  007F49  86                 	db	134
   576  007F4A  C1                 	db	193
   577  007F4B  1D                 	db	29
   578  007F4C  9E                 	db	158
   579  007F4D  E1                 	db	225
   580  007F4E  F8                 	db	248
   581  007F4F  98                 	db	152
   582  007F50  11                 	db	17
   583  007F51  69                 	db	105
   584  007F52  D9                 	db	217
   585  007F53  8E                 	db	142
   586  007F54  94                 	db	148
   587  007F55  9B                 	db	155
   588  007F56  1E                 	db	30
   589  007F57  87                 	db	135
   590  007F58  E9                 	db	233
   591  007F59  CE                 	db	206
   592  007F5A  55                 	db	85
   593  007F5B  28                 	db	40
   594  007F5C  DF                 	db	223
   595  007F5D  8C                 	db	140
   596  007F5E  A1                 	db	161
   597  007F5F  89                 	db	137
   598  007F60  0D                 	db	13
   599  007F61  BF                 	db	191
   600  007F62  E6                 	db	230
   601  007F63  42                 	db	66
   602  007F64  68                 	db	104
   603  007F65  41                 	db	65
   604  007F66  99                 	db	153
   605  007F67  2D                 	db	45
   606  007F68  0F                 	db	15
   607  007F69  B0                 	db	176
   608  007F6A  54                 	db	84
   609  007F6B  BB                 	db	187
   610  007F6C  16                 	db	22
   611  007F6D                     __end_of_STable:
   612                           	opt stack 0
   613  007F6D                     _maxPayloadSize:
   614                           	opt stack 0
   615  007F6D  33                 	db	51
   616  007F6E  33                 	db	51
   617  007F6F  33                 	db	51
   618  007F70  73                 	db	115
   619  007F71  F2                 	db	242
   620  007F72  F2                 	db	242
   621  007F73  F2                 	db	242
   622  007F74  38                 	db	56
   623  007F75                     __end_of_maxPayloadSize:
   624                           	opt stack 0
   625  007F75                     _modulation:
   626                           	opt stack 0
   627  007F75  01                 	db	1
   628  007F76  01                 	db	1
   629  007F77  01                 	db	1
   630  007F78  01                 	db	1
   631  007F79  01                 	db	1
   632  007F7A  01                 	db	1
   633  007F7B  01                 	db	1
   634  007F7C  00                 	db	0
   635  007F7D                     __end_of_modulation:
   636                           	opt stack 0
   637  007F7D                     _rxWindowOffset:
   638                           	opt stack 0
   639  007F7D  DF                 	db	223
   640  007F7E  CE                 	db	206
   641  007F7F  C6                 	db	198
   642  007F80  C2                 	db	194
   643  007F81  BE                 	db	190
   644  007F82  BC                 	db	188
   645  007F83  F1                 	db	241
   646  007F84  FE                 	db	254
   647  007F85                     __end_of_rxWindowOffset:
   648                           	opt stack 0
   649  007F85                     _rxWindowSize:
   650                           	opt stack 0
   651  007F85  08                 	db	8
   652  007F86  0A                 	db	10
   653  007F87  0E                 	db	14
   654  007F88  1A                 	db	26
   655  007F89  31                 	db	49
   656  007F8A  58                 	db	88
   657  007F8B  3C                 	db	60
   658  007F8C  08                 	db	8
   659  007F8D                     __end_of_rxWindowSize:
   660                           	opt stack 0
   661  007F8D                     _bandwidth:
   662                           	opt stack 0
   663  007F8D  07                 	db	7
   664  007F8E  07                 	db	7
   665  007F8F  07                 	db	7
   666  007F90  07                 	db	7
   667  007F91  07                 	db	7
   668  007F92  07                 	db	7
   669  007F93  08                 	db	8
   670  007F94                     __end_of_bandwidth:
   671                           	opt stack 0
   672  007F94                     _macEndDevCmdReplyLen:
   673                           	opt stack 0
   674  007F94  01                 	db	1
   675  007F95  02                 	db	2
   676  007F96  01                 	db	1
   677  007F97  02                 	db	2
   678  007F98  03                 	db	3
   679  007F99  02                 	db	2
   680  007F9A  01                 	db	1
   681  007F9B                     __end_of_macEndDevCmdReplyLen:
   682                           	opt stack 0
   683  007F9B                     _spreadingFactor:
   684                           	opt stack 0
   685  007F9B  0C                 	db	12
   686  007F9C  0B                 	db	11
   687  007F9D  0A                 	db	10
   688  007F9E  09                 	db	9
   689  007F9F  08                 	db	8
   690  007FA0  07                 	db	7
   691  007FA1  07                 	db	7
   692  007FA2                     __end_of_spreadingFactor:
   693                           	opt stack 0
   694  007FA2                     _txPower868:
   695                           	opt stack 0
   696  007FA2  14                 	db	20
   697  007FA3  0E                 	db	14
   698  007FA4  0B                 	db	11
   699  007FA5  08                 	db	8
   700  007FA6  05                 	db	5
   701  007FA7  02                 	db	2
   702  007FA8                     __end_of_txPower868:
   703                           	opt stack 0
   704  007FA8                     _DefaultChannels433:
   705                           	opt stack 0
   706  007FA8  B9D8               	dw	47576
   707  007FAA  19D1               	dw	6609
   708  007FAC  01                 	db	1
   709  007FAD  50                 	db	80
   710  007FAE  012E               	dw	302
   711  007FB0  0000               	dw	0
   712  007FB2  0000               	dw	0
   713  007FB4  01                 	db	1
   714  007FB5  FF                 	db	255
   715  007FB6  C718               	dw	50968
   716  007FB8  19D4               	dw	6612
   717  007FBA  01                 	db	1
   718  007FBB  50                 	db	80
   719  007FBC  012E               	dw	302
   720  007FBE  0000               	dw	0
   721  007FC0  0000               	dw	0
   722  007FC2  01                 	db	1
   723  007FC3  FF                 	db	255
   724  007FC4  D458               	dw	54360
   725  007FC6  19D7               	dw	6615
   726  007FC8  01                 	db	1
   727  007FC9  50                 	db	80
   728  007FCA  012E               	dw	302
   729  007FCC  0000               	dw	0
   730  007FCE  0000               	dw	0
   731  007FD0  01                 	db	1
   732  007FD1  FF                 	db	255
   733  007FD2                     __end_of_DefaultChannels433:
   734                           	opt stack 0
   735  007FD2                     _DefaultChannels868:
   736                           	opt stack 0
   737  007FD2  27A0               	dw	10144
   738  007FD4  33BE               	dw	13246
   739  007FD6  01                 	db	1
   740  007FD7  50                 	db	80
   741  007FD8  0063               	dw	99
   742  007FDA  0000               	dw	0
   743  007FDC  0000               	dw	0
   744  007FDE  01                 	db	1
   745  007FDF  FF                 	db	255
   746  007FE0  34E0               	dw	13536
   747  007FE2  33C1               	dw	13249
   748  007FE4  01                 	db	1
   749  007FE5  50                 	db	80
   750  007FE6  FFFF               	dw	65535
   751  007FE8  0000               	dw	0
   752  007FEA  0000               	dw	0
   753  007FEC  01                 	db	1
   754  007FED  FF                 	db	255
   755  007FEE  4220               	dw	16928
   756  007FF0  33C4               	dw	13252
   757  007FF2  01                 	db	1
   758  007FF3  50                 	db	80
   759  007FF4  FFFF               	dw	65535
   760  007FF6  0000               	dw	0
   761  007FF8  0000               	dw	0
   762  007FFA  01                 	db	1
   763  007FFB  FF                 	db	255
   764  007FFC                     __end_of_DefaultChannels868:
   765                           	opt stack 0
   766  007FFC                     _FskSyncWordBuff:
   767                           	opt stack 0
   768  007FFC  C1                 	db	193
   769  007FFD  94                 	db	148
   770  007FFE  C1                 	db	193
   771  007FFF                     __end_of_FskSyncWordBuff:
   772                           	opt stack 0
   773  007FFF  00                 	db	0	; dummy byte at the end
   774  0000                     
   775                           	psect	nvCOMRAM
   776  00005E                     __pnvCOMRAM:
   777                           	opt stack 0
   778  00005E                     _timer1ReloadVal:
   779                           	opt stack 0
   780  00005E                     	ds	2
   781                           
   782                           	psect	nvBANK1
   783  0001EF                     __pnvBANK1:
   784                           	opt stack 0
   785  0001EF                     _INT1_InterruptHandler:
   786                           	opt stack 0
   787  0001EF                     	ds	2
   788  0001F1                     _INT2_InterruptHandler:
   789                           	opt stack 0
   790  0001F1                     	ds	2
   791  0001F3                     _INT3_InterruptHandler:
   792                           	opt stack 0
   793  0001F3                     	ds	2
   794  0001F5                     _IOCBF4_InterruptHandler:
   795                           	opt stack 0
   796  0001F5                     	ds	2
   797  0001F7                     _TMR1_InterruptHandler:
   798                           	opt stack 0
   799  0001F7                     	ds	2
   800  0000                     _INT0PPSbits	set	3568
   801  0000                     _INT1PPSbits	set	3569
   802  0000                     _INT2PPSbits	set	3570
   803  0000                     _INT3PPSbits	set	3571
   804  0000                     _PPSLOCK	set	3567
   805  0000                     _PPSLOCKbits	set	3567
   806  0000                     _ANSELA	set	3730
   807  0000                     _ANSELB	set	3738
   808  0000                     _ANSELD	set	3751
   809  0000                     _ANSELE	set	3759
   810  0000                     _ANSELF	set	3764
   811  0000                     _ANSELG	set	3772
   812  0000                     _IOCBFbits	set	3731
   813  0000                     _IOCBNbits	set	3732
   814  0000                     _IOCBPbits	set	3733
   815  0000                     _ODCONA	set	3728
   816  0000                     _ODCONB	set	3736
   817  0000                     _ODCONC	set	3744
   818  0000                     _ODCOND	set	3749
   819  0000                     _ODCONE	set	3757
   820  0000                     _ODCONF	set	3762
   821  0000                     _ODCONG	set	3770
   822  0000                     _ODCONH	set	3775
   823  0000                     _OSCCON1	set	3651
   824  0000                     _OSCCON3	set	3653
   825  0000                     _OSCEN	set	3655
   826  0000                     _OSCFRQ	set	3657
   827  0000                     _OSCTUNE	set	3656
   828  0000                     _PIE0bits	set	3625
   829  0000                     _PIE5bits	set	3630
   830  0000                     _PIR0bits	set	3635
   831  0000                     _PIR5bits	set	3640
   832  0000                     _RD5PPS	set	3695
   833  0000                     _RD6PPS	set	3696
   834  0000                     _SSP2ADD	set	3798
   835  0000                     _SSP2BUF	set	3797
   836  0000                     _SSP2CON1	set	3801
   837  0000                     _SSP2CON1bits	set	3801
   838  0000                     _SSP2DATPPSbits	set	3613
   839  0000                     _SSP2STAT	set	3800
   840  0000                     _SSP2STATbits	set	3800
   841  0000                     _WPUA	set	3729
   842  0000                     _WPUB	set	3737
   843  0000                     _WPUC	set	3745
   844  0000                     _WPUD	set	3750
   845  0000                     _WPUE	set	3758
   846  0000                     _WPUF	set	3763
   847  0000                     _WPUG	set	3771
   848  0000                     _WPUH	set	3776
   849  0000                     _INTCONbits	set	4082
   850  0000                     _LATA	set	3961
   851  0000                     _LATB	set	3962
   852  0000                     _LATC	set	3963
   853  0000                     _LATCbits	set	3963
   854  0000                     _LATD	set	3964
   855  0000                     _LATE	set	3965
   856  0000                     _LATF	set	3966
   857  0000                     _LATG	set	3967
   858  0000                     _LATH	set	3968
   859  0000                     _PORTBbits	set	3978
   860  0000                     _T1CLK	set	4050
   861  0000                     _T1CON	set	4047
   862  0000                     _T1CONbits	set	4047
   863  0000                     _T1GATE	set	4049
   864  0000                     _T1GCON	set	4048
   865  0000                     _TMR1H	set	4046
   866  0000                     _TMR1L	set	4045
   867  0000                     _TRISA	set	3969
   868  0000                     _TRISB	set	3970
   869  0000                     _TRISC	set	3971
   870  0000                     _TRISD	set	3972
   871  0000                     _TRISE	set	3973
   872  0000                     _TRISF	set	3974
   873  0000                     _TRISG	set	3975
   874  0000                     _TRISH	set	3976
   875  0000                     _GIE	set	32663
   876  0000                     _LATC0	set	31704
   877  0000                     _LATC1	set	31705
   878  0000                     _TRISC0	set	31768
   879                           
   880                           ; #config settings
   881  0000                     
   882                           	psect	cinit
   883  005C40                     __pcinit:
   884                           	opt stack 0
   885  005C40                     start_initialization:
   886                           	opt stack 0
   887  005C40                     __initialization:
   888                           	opt stack 0
   889                           
   890                           ; Initialize objects allocated to BANK1 (50 bytes)
   891                           ; load TBLPTR registers with __pidataBANK1
   892  005C40  0ECC               	movlw	low __pidataBANK1
   893  005C42  6EF6               	movwf	tblptrl,c
   894  005C44  0E70               	movlw	high __pidataBANK1
   895  005C46  6EF7               	movwf	tblptrh,c
   896  005C48  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   897  005C4A  6EF8               	movwf	tblptru,c
   898  005C4C  EE01  F0BD         	lfsr	0,__pdataBANK1
   899  005C50  EE20 F032          	lfsr	2,50
   900  005C54                     copy_data0:
   901  005C54  0009               	tblrd		*+
   902  005C56  CFF5 FFEE          	movff	tablat,postinc0
   903  005C5A  50DD               	movf	postdec2,w,c
   904  005C5C  50D9               	movf	fsr2l,w,c
   905  005C5E  E1FA               	bnz	copy_data0
   906                           
   907                           ; Initialize objects allocated to COMRAM (8 bytes)
   908                           ; load TBLPTR registers with __pidataCOMRAM
   909  005C60  0E42               	movlw	low __pidataCOMRAM
   910  005C62  6EF6               	movwf	tblptrl,c
   911  005C64  0E78               	movlw	high __pidataCOMRAM
   912  005C66  6EF7               	movwf	tblptrh,c
   913  005C68  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   914  005C6A  6EF8               	movwf	tblptru,c
   915  005C6C  EE00  F056         	lfsr	0,__pdataCOMRAM
   916  005C70  EE20 F008          	lfsr	2,8
   917  005C74                     copy_data1:
   918  005C74  0009               	tblrd		*+
   919  005C76  CFF5 FFEE          	movff	tablat,postinc0
   920  005C7A  50DD               	movf	postdec2,w,c
   921  005C7C  50D9               	movf	fsr2l,w,c
   922  005C7E  E1FA               	bnz	copy_data1
   923                           
   924                           ; Clear objects allocated to BIGRAM (542 bytes)
   925  005C80  EE04  F0E0         	lfsr	0,__pbssBIGRAM
   926  005C84  EE22 F01E          	lfsr	2,542
   927  005C88                     clear_0:
   928  005C88  6AEE               	clrf	postinc0,c
   929  005C8A  50DD               	movf	postdec2,w,c
   930  005C8C  50D9               	movf	fsr2l,w,c
   931  005C8E  E1FC               	bnz	clear_0
   932  005C90  50DA               	movf	fsr2h,w,c
   933  005C92  E1FA               	bnz	clear_0
   934                           
   935                           ; Clear objects allocated to BANK4 (224 bytes)
   936  005C94  EE04  F000         	lfsr	0,__pbssBANK4
   937  005C98  0EE0               	movlw	224
   938  005C9A                     clear_1:
   939  005C9A  6AEE               	clrf	postinc0,c
   940  005C9C  06E8               	decf	wreg,f,c
   941  005C9E  E1FD               	bnz	clear_1
   942                           
   943                           ; Clear objects allocated to BANK3 (160 bytes)
   944  005CA0  EE03  F000         	lfsr	0,__pbssBANK3
   945  005CA4  0EA0               	movlw	160
   946  005CA6                     clear_2:
   947  005CA6  6AEE               	clrf	postinc0,c
   948  005CA8  06E8               	decf	wreg,f,c
   949  005CAA  E1FD               	bnz	clear_2
   950                           
   951                           ; Clear objects allocated to BANK2 (245 bytes)
   952  005CAC  EE02  F000         	lfsr	0,__pbssBANK2
   953  005CB0  0EF5               	movlw	245
   954  005CB2                     clear_3:
   955  005CB2  6AEE               	clrf	postinc0,c
   956  005CB4  06E8               	decf	wreg,f,c
   957  005CB6  E1FD               	bnz	clear_3
   958                           
   959                           ; Clear objects allocated to BANK1 (79 bytes)
   960  005CB8  EE01  F06E         	lfsr	0,__pbssBANK1
   961  005CBC  0E4F               	movlw	79
   962  005CBE                     clear_4:
   963  005CBE  6AEE               	clrf	postinc0,c
   964  005CC0  06E8               	decf	wreg,f,c
   965  005CC2  E1FD               	bnz	clear_4
   966                           
   967                           ; Clear objects allocated to COMRAM (26 bytes)
   968  005CC4  EE00  F030         	lfsr	0,__pbssCOMRAM
   969  005CC8  0E1A               	movlw	26
   970  005CCA                     clear_5:
   971  005CCA  6AEE               	clrf	postinc0,c
   972  005CCC  06E8               	decf	wreg,f,c
   973  005CCE  E1FD               	bnz	clear_5
   974  005CD0                     end_of_initialization:
   975                           	opt stack 0
   976  005CD0                     __end_of__initialization:
   977                           	opt stack 0
   978  005CD0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   979  005CD2  6EF8               	movwf	tblptru,c
   980  005CD4  0100               	movlb	0
   981  005CD6  EFFE  F028         	goto	_main	;jump to C main() function
   982                           tblptru	equ	0xFF8
   983                           tblptrh	equ	0xFF7
   984                           tblptrl	equ	0xFF6
   985                           tablat	equ	0xFF5
   986                           postinc0	equ	0xFEE
   987                           wreg	equ	0xFE8
   988                           postdec2	equ	0xFDD
   989                           fsr2h	equ	0xFDA
   990                           fsr2l	equ	0xFD9
   991                           
   992                           	psect	bssCOMRAM
   993  000030                     __pbssCOMRAM:
   994                           	opt stack 0
   995  000030                     TMR_GetDeltaTime@retVal:
   996                           	opt stack 0
   997  000030                     	ds	4
   998  000034                     _ticksAccounted:
   999                           	opt stack 0
  1000  000034                     	ds	4
  1001  000038                     _ticksAdded:
  1002                           	opt stack 0
  1003  000038                     	ds	4
  1004  00003C                     TMR1_ISR@CountCallBack:
  1005                           	opt stack 0
  1006  00003C                     	ds	2
  1007  00003E                     TMR_GetDeltaTime@tmrVal:
  1008                           	opt stack 0
  1009  00003E                     	ds	2
  1010  000040                     TMR_SwapTimer@oldVal:
  1011                           	opt stack 0
  1012  000040                     	ds	2
  1013  000042                     TMR_SwapTimer@retVal:
  1014                           	opt stack 0
  1015  000042                     	ds	2
  1016  000044                     _reloadVal:
  1017                           	opt stack 0
  1018  000044                     	ds	2
  1019  000046                     __rcon:
  1020                           	opt stack 0
  1021  000046                     	ds	1
  1022  000047                     __roundCounter:
  1023                           	opt stack 0
  1024  000047                     	ds	1
  1025  000048                     _dioStatus:
  1026                           	opt stack 0
  1027  000048                     	ds	1
  1028  000049                     _timerOverflow:
  1029                           	opt stack 0
  1030  000049                     	ds	1
  1031                           tblptru	equ	0xFF8
  1032                           tblptrh	equ	0xFF7
  1033                           tblptrl	equ	0xFF6
  1034                           tablat	equ	0xFF5
  1035                           postinc0	equ	0xFEE
  1036                           wreg	equ	0xFE8
  1037                           postdec2	equ	0xFDD
  1038                           fsr2h	equ	0xFDA
  1039                           fsr2l	equ	0xFD9
  1040                           
  1041                           	psect	dataCOMRAM
  1042  000056                     __pdataCOMRAM:
  1043                           	opt stack 0
  1044  000056                     _randx:
  1045                           	opt stack 0
  1046  000056                     	ds	4
  1047  00005A                     _ticksToScheduledInterrupt:
  1048                           	opt stack 0
  1049  00005A                     	ds	4
  1050                           tblptru	equ	0xFF8
  1051                           tblptrh	equ	0xFF7
  1052                           tblptrl	equ	0xFF6
  1053                           tablat	equ	0xFF5
  1054                           postinc0	equ	0xFEE
  1055                           wreg	equ	0xFE8
  1056                           postdec2	equ	0xFDD
  1057                           fsr2h	equ	0xFDA
  1058                           fsr2l	equ	0xFD9
  1059                           
  1060                           	psect	bssBANK1
  1061  00016E                     __pbssBANK1:
  1062                           	opt stack 0
  1063  00016E                     _rxPayload:
  1064                           	opt stack 0
  1065  00016E                     	ds	4
  1066  000172                     _JoinedServer:
  1067                           	opt stack 0
  1068  000172                     	ds	1
  1069  000173                     _allocatedTimers:
  1070                           	opt stack 0
  1071  000173                     	ds	1
  1072  000174                     _localDioStatus:
  1073                           	opt stack 0
  1074  000174                     	ds	1
  1075  000175                     _RadioConfiguration:
  1076                           	opt stack 0
  1077  000175                     	ds	54
  1078  0001AB                     _aesBuffer:
  1079                           	opt stack 0
  1080  0001AB                     	ds	16
  1081  0001BB                     _payload:
  1082                           	opt stack 0
  1083  0001BB                     	ds	2
  1084                           tblptru	equ	0xFF8
  1085                           tblptrh	equ	0xFF7
  1086                           tblptrl	equ	0xFF6
  1087                           tablat	equ	0xFF5
  1088                           postinc0	equ	0xFEE
  1089                           wreg	equ	0xFE8
  1090                           postdec2	equ	0xFDD
  1091                           fsr2h	equ	0xFDA
  1092                           fsr2l	equ	0xFD9
  1093                           
  1094                           	psect	dataBANK1
  1095  0001BD                     __pdataBANK1:
  1096                           	opt stack 0
  1097  0001BD                     GenerateSubkey@F17044:
  1098                           	opt stack 0
  1099  0001BD                     	ds	16
  1100  0001CD                     _count:
  1101                           	opt stack 0
  1102  0001CD                     	ds	2
  1103  0001CF                     _appSKey:
  1104                           	opt stack 0
  1105  0001CF                     	ds	16
  1106  0001DF                     _nwkSKey:
  1107                           	opt stack 0
  1108  0001DF                     	ds	16
  1109                           tblptru	equ	0xFF8
  1110                           tblptrh	equ	0xFF7
  1111                           tblptrl	equ	0xFF6
  1112                           tablat	equ	0xFF5
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           postdec2	equ	0xFDD
  1116                           fsr2h	equ	0xFDA
  1117                           fsr2l	equ	0xFD9
  1118                           
  1119                           	psect	bssBANK2
  1120  000200                     __pbssBANK2:
  1121                           	opt stack 0
  1122  000200                     _loRa:
  1123                           	opt stack 0
  1124  000200                     	ds	245
  1125                           tblptru	equ	0xFF8
  1126                           tblptrh	equ	0xFF7
  1127                           tblptrl	equ	0xFF6
  1128                           tablat	equ	0xFF5
  1129                           postinc0	equ	0xFEE
  1130                           wreg	equ	0xFE8
  1131                           postdec2	equ	0xFDD
  1132                           fsr2h	equ	0xFDA
  1133                           fsr2l	equ	0xFD9
  1134                           
  1135                           	psect	bssBANK3
  1136  000300                     __pbssBANK3:
  1137                           	opt stack 0
  1138  000300                     _swTimers:
  1139                           	opt stack 0
  1140  000300                     	ds	160
  1141                           tblptru	equ	0xFF8
  1142                           tblptrh	equ	0xFF7
  1143                           tblptrl	equ	0xFF6
  1144                           tablat	equ	0xFF5
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           postdec2	equ	0xFDD
  1148                           fsr2h	equ	0xFDA
  1149                           fsr2l	equ	0xFD9
  1150                           
  1151                           	psect	bssBANK4
  1152  000400                     __pbssBANK4:
  1153                           	opt stack 0
  1154  000400                     _Channels:
  1155                           	opt stack 0
  1156  000400                     	ds	224
  1157                           tblptru	equ	0xFF8
  1158                           tblptrh	equ	0xFF7
  1159                           tblptrl	equ	0xFF6
  1160                           tablat	equ	0xFF5
  1161                           postinc0	equ	0xFEE
  1162                           wreg	equ	0xFE8
  1163                           postdec2	equ	0xFDD
  1164                           fsr2h	equ	0xFDA
  1165                           fsr2l	equ	0xFD9
  1166                           
  1167                           	psect	bssBIGRAM
  1168  0004E0                     __pbssBIGRAM:
  1169                           	opt stack 0
  1170  0004E0                     _macBuffer:
  1171                           	opt stack 0
  1172  0004E0                     	ds	271
  1173  0005EF                     _radioBuffer:
  1174                           	opt stack 0
  1175  0005EF                     	ds	271
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           tblptrl	equ	0xFF6
  1179                           tablat	equ	0xFF5
  1180                           postinc0	equ	0xFEE
  1181                           wreg	equ	0xFE8
  1182                           postdec2	equ	0xFDD
  1183                           fsr2h	equ	0xFDA
  1184                           fsr2l	equ	0xFD9
  1185                           
  1186                           	psect	cstackBANK3
  1187  0003A0                     __pcstackBANK3:
  1188                           	opt stack 0
  1189  0003A0                     LORAWAN_RxDone@fPort:
  1190                           	opt stack 0
  1191                           
  1192                           ; 1 bytes @ 0x0
  1193  0003A0                     	ds	1
  1194  0003A1                     LORAWAN_RxDone@channelIndex:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0x1
  1198  0003A1                     	ds	1
  1199  0003A2                     LORAWAN_RxDone@mhdr:
  1200                           	opt stack 0
  1201                           
  1202                           ; 1 bytes @ 0x2
  1203  0003A2                     	ds	1
  1204  0003A3                     LORAWAN_RxDone@extractedMic:
  1205                           	opt stack 0
  1206                           
  1207                           ; 4 bytes @ 0x3
  1208  0003A3                     	ds	4
  1209  0003A7                     LORAWAN_RxDone@bufferIndex:
  1210                           	opt stack 0
  1211                           
  1212                           ; 1 bytes @ 0x7
  1213  0003A7                     	ds	1
  1214  0003A8                     LORAWAN_RxDone@temp:
  1215                           	opt stack 0
  1216                           
  1217                           ; 1 bytes @ 0x8
  1218  0003A8                     	ds	1
  1219  0003A9                     LORAWAN_RxDone@packet:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x9
  1223  0003A9                     	ds	2
  1224  0003AB                     LORAWAN_RxDone@computedMic:
  1225                           	opt stack 0
  1226                           
  1227                           ; 4 bytes @ 0xB
  1228  0003AB                     	ds	4
  1229  0003AF                     LORAWAN_RxDone@joinAccept:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0xF
  1233  0003AF                     	ds	2
  1234  0003B1                     LORAWAN_RxDone@frmPayloadLength:
  1235                           	opt stack 0
  1236                           
  1237                           ; 1 bytes @ 0x11
  1238  0003B1                     	ds	1
  1239  0003B2                     LORAWAN_RxDone@hdr:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x12
  1243  0003B2                     	ds	2
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           postinc0	equ	0xFEE
  1249                           wreg	equ	0xFE8
  1250                           postdec2	equ	0xFDD
  1251                           fsr2h	equ	0xFDA
  1252                           fsr2l	equ	0xFD9
  1253                           
  1254                           	psect	cstackBANK1
  1255  000100                     __pcstackBANK1:
  1256                           	opt stack 0
  1257  000100                     AESCmac@k2:
  1258                           	opt stack 0
  1259                           
  1260                           ; 16 bytes @ 0x0
  1261  000100                     	ds	16
  1262  000110                     AESCmac@k1:
  1263                           	opt stack 0
  1264                           
  1265                           ; 16 bytes @ 0x10
  1266  000110                     	ds	16
  1267  000120                     AESCmac@mLast:
  1268                           	opt stack 0
  1269                           
  1270                           ; 16 bytes @ 0x20
  1271  000120                     	ds	16
  1272  000130                     AESCmac@padded:
  1273                           	opt stack 0
  1274                           
  1275                           ; 16 bytes @ 0x30
  1276  000130                     	ds	16
  1277  000140                     AESCmac@y:
  1278                           	opt stack 0
  1279                           
  1280                           ; 16 bytes @ 0x40
  1281  000140                     	ds	16
  1282  000150                     AESCmac@x:
  1283                           	opt stack 0
  1284                           
  1285                           ; 16 bytes @ 0x50
  1286  000150                     	ds	16
  1287  000160                     AESCmac@ptr:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x60
  1291  000160                     	ds	2
  1292  000162                     AESCmac@flag:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x62
  1296  000162                     	ds	1
  1297  000163                     AESCmac@n:
  1298                           	opt stack 0
  1299                           
  1300                           ; 1 bytes @ 0x63
  1301  000163                     	ds	1
  1302  000164                     AESCmac@j:
  1303                           	opt stack 0
  1304                           
  1305                           ; 1 bytes @ 0x64
  1306  000164                     	ds	1
  1307  000165                     AESCmac@i:
  1308                           	opt stack 0
  1309                           
  1310                           ; 1 bytes @ 0x65
  1311  000165                     	ds	1
  1312  000166                     AssemblePacket@port:
  1313                           	opt stack 0
  1314                           
  1315                           ; 1 bytes @ 0x66
  1316  000166                     	ds	1
  1317  000167                     AssemblePacket@buffer:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x67
  1321  000167                     	ds	2
  1322  000169                     AssemblePacket@bufferLength:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x69
  1326  000169                     	ds	2
  1327  00016B                     LORAWAN_RxDone@buffer:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x6B
  1331  00016B                     	ds	2
  1332  00016D                     LORAWAN_RxDone@bufferLength:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x6D
  1336  00016D                     	ds	1
  1337                           tblptru	equ	0xFF8
  1338                           tblptrh	equ	0xFF7
  1339                           tblptrl	equ	0xFF6
  1340                           tablat	equ	0xFF5
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           postdec2	equ	0xFDD
  1344                           fsr2h	equ	0xFDA
  1345                           fsr2l	equ	0xFD9
  1346                           
  1347                           	psect	cstackBANK0
  1348  000060                     __pcstackBANK0:
  1349                           	opt stack 0
  1350  000060                     	ds	4
  1351  000064                     ??_UpdateMinMaxChDataRate:
  1352  000064                     ??_FindSmallestDataRate:
  1353  000064                     ??_UpdateReceiveDelays:
  1354  000064                     ??_CountfOptsLength:
  1355  000064                     ??_flash:
  1356  000064                     ?_TMR1_ReadTimer:
  1357                           	opt stack 0
  1358  000064                     ?_ExecuteLinkCheck:
  1359                           	opt stack 0
  1360  000064                     ?_ExecuteDutyCycle:
  1361                           	opt stack 0
  1362  000064                     ?_ExecuteDevStatus:
  1363                           	opt stack 0
  1364  000064                     ?_GetRx1Freq:
  1365                           	opt stack 0
  1366  000064                     ?___lmul:
  1367                           	opt stack 0
  1368  000064                     ?___lldiv:
  1369                           	opt stack 0
  1370  000064                     ?___llmod:
  1371                           	opt stack 0
  1372  000064                     SwTimerCreate@retVal:
  1373                           	opt stack 0
  1374  000064                     SwTimerIsRunning@timerId:
  1375                           	opt stack 0
  1376  000064                     SwTimerStop@timerId:
  1377                           	opt stack 0
  1378  000064                     SPI2_Exchange8bit@data:
  1379                           	opt stack 0
  1380  000064                     HALResetPinOutputValue@value:
  1381                           	opt stack 0
  1382  000064                     RADIO_SetLoRaSyncWord@syncWord:
  1383                           	opt stack 0
  1384  000064                     RADIO_SetSpreadingFactor@spreadingFactor:
  1385                           	opt stack 0
  1386  000064                     RADIO_SetOutputPower@power:
  1387                           	opt stack 0
  1388  000064                     RADIO_SetCRC@crc:
  1389                           	opt stack 0
  1390  000064                     RADIO_SetIQInverted@iqInverted:
  1391                           	opt stack 0
  1392  000064                     RADIO_SetBandwidth@bandwidth:
  1393                           	opt stack 0
  1394  000064                     RADIO_SetModulation@modulation:
  1395                           	opt stack 0
  1396  000064                     ValidateDataRate@dataRate:
  1397                           	opt stack 0
  1398  000064                     ValidateTxPower@result:
  1399                           	opt stack 0
  1400  000064                     UpdateDLSettings@dlRx1DrOffset:
  1401                           	opt stack 0
  1402  000064                     UpdateDataRange@dataRangeNew:
  1403                           	opt stack 0
  1404  000064                     UpdateChannelIdStatus@statusNew:
  1405                           	opt stack 0
  1406  000064                     ValidateRxOffset@rxOffset:
  1407                           	opt stack 0
  1408  000064                     ValidateChannelId@allowedForDefaultChannels:
  1409                           	opt stack 0
  1410  000064                     ValidateChannelMaskCntl@result:
  1411                           	opt stack 0
  1412  000064                     UpdateCurrentDataRate@valueNew:
  1413                           	opt stack 0
  1414  000064                     UpdateTxPower@txPowerNew:
  1415                           	opt stack 0
  1416  000064                     UpdateJoinInProgress@state:
  1417                           	opt stack 0
  1418  000064                     INTERRUPT_GetDioStatus@a:
  1419                           	opt stack 0
  1420  000064                     EncKeySchedule@key:
  1421                           	opt stack 0
  1422  000064                     ___abdiv@divisor:
  1423                           	opt stack 0
  1424  000064                     INT1_SetInterruptHandler@InterruptHandler:
  1425                           	opt stack 0
  1426  000064                     INT2_SetInterruptHandler@InterruptHandler:
  1427                           	opt stack 0
  1428  000064                     INT0_SetInterruptHandler@InterruptHandler:
  1429                           	opt stack 0
  1430  000064                     INT3_SetInterruptHandler@InterruptHandler:
  1431                           	opt stack 0
  1432  000064                     SwTimerSetCallback@callback:
  1433                           	opt stack 0
  1434  000064                     RADIO_SetFrequencyHopPeriod@frequencyHopPeriod:
  1435                           	opt stack 0
  1436  000064                     ExecuteDutyCycle@ptr:
  1437                           	opt stack 0
  1438  000064                     ExecuteDevStatus@ptr:
  1439                           	opt stack 0
  1440  000064                     UpdateDutyCycle@dutyCycleNew:
  1441                           	opt stack 0
  1442  000064                     ValidateChannelMask@channelMask:
  1443                           	opt stack 0
  1444  000064                     TMR1_WriteTimer@timerVal:
  1445                           	opt stack 0
  1446  000064                     TMR1_SetInterruptHandler@InterruptHandler:
  1447                           	opt stack 0
  1448  000064                     FillSubKey@source:
  1449                           	opt stack 0
  1450  000064                     IOCBF4_SetInterruptHandler@InterruptHandler:
  1451                           	opt stack 0
  1452  000064                     ExecuteLinkCheck@ptr:
  1453                           	opt stack 0
  1454  000064                     IncludeMacCommandsResponse@macBuffer:
  1455                           	opt stack 0
  1456  000064                     CheckFlags@hdr:
  1457                           	opt stack 0
  1458  000064                     CheckMcastFlags@hdr:
  1459                           	opt stack 0
  1460  000064                     EncodeShiftRow@stateTable:
  1461                           	opt stack 0
  1462  000064                     RxDataDone@pData:
  1463                           	opt stack 0
  1464  000064                     memcpy@d1:
  1465                           	opt stack 0
  1466  000064                     memset@p1:
  1467                           	opt stack 0
  1468  000064                     SystemBlockingWaitMs@ms:
  1469                           	opt stack 0
  1470  000064                     RADIO_SetChannelFrequency@frequency:
  1471                           	opt stack 0
  1472  000064                     ValidateFrequency@frequencyNew:
  1473                           	opt stack 0
  1474  000064                     UpdateFrequency@frequencyNew:
  1475                           	opt stack 0
  1476  000064                     LORAWAN_SetDeviceAddress@deviceAddressNew:
  1477                           	opt stack 0
  1478  000064                     UpdateReceiveWindow2Parameters@frequency:
  1479                           	opt stack 0
  1480  000064                     ___lmul@multiplier:
  1481                           	opt stack 0
  1482  000064                     ___lldiv@dividend:
  1483                           	opt stack 0
  1484  000064                     ___llmod@dividend:
  1485                           	opt stack 0
  1486                           
  1487                           ; 4 bytes @ 0x4
  1488  000064                     	ds	1
  1489  000065                     ??_UpdateDataRange:
  1490  000065                     ??_UpdateChannelIdStatus:
  1491  000065                     ??_EncKeySchedule:
  1492  000065                     SwTimerIsRunning@isRunning:
  1493                           	opt stack 0
  1494  000065                     HALSPISend@data:
  1495                           	opt stack 0
  1496  000065                     ValidateDataRate@result:
  1497                           	opt stack 0
  1498  000065                     ValidateTxPower@txPowerNew:
  1499                           	opt stack 0
  1500  000065                     UpdateDLSettings@dlRx2Dr:
  1501                           	opt stack 0
  1502  000065                     ValidateRxOffset@result:
  1503                           	opt stack 0
  1504  000065                     ValidateChannelId@result:
  1505                           	opt stack 0
  1506  000065                     ValidateChannelMaskCntl@channelMaskCntl:
  1507                           	opt stack 0
  1508  000065                     UpdateMinMaxChDataRate@i:
  1509                           	opt stack 0
  1510  000065                     FindSmallestDataRate@found:
  1511                           	opt stack 0
  1512  000065                     flash@x:
  1513                           	opt stack 0
  1514  000065                     ___abdiv@counter:
  1515                           	opt stack 0
  1516                           
  1517                           ; 1 bytes @ 0x5
  1518  000065                     	ds	1
  1519  000066                     ??_TMR1_ReadTimer:
  1520  000066                     ??_TMR1_Initialize:
  1521  000066                     ??_ExecuteDutyCycle:
  1522  000066                     SwTimerSetCallback@callbackParameter:
  1523                           	opt stack 0
  1524  000066                     RADIO_RegisterWrite@value:
  1525                           	opt stack 0
  1526  000066                     RADIO_RegisterRead@reg:
  1527                           	opt stack 0
  1528  000066                     UpdateDataRange@channelId:
  1529                           	opt stack 0
  1530  000066                     UpdateChannelIdStatus@channelId:
  1531                           	opt stack 0
  1532  000066                     ValidateDataRange@result:
  1533                           	opt stack 0
  1534  000066                     ValidateChannelId@channelId:
  1535                           	opt stack 0
  1536  000066                     UpdateDutyCycle@channelId:
  1537                           	opt stack 0
  1538  000066                     ValidateChannelMask@i:
  1539                           	opt stack 0
  1540  000066                     PIN_MANAGER_Initialize@state:
  1541                           	opt stack 0
  1542  000066                     IncludeMacCommandsResponse@pBufferIndex:
  1543                           	opt stack 0
  1544  000066                     FindSmallestDataRate@i:
  1545                           	opt stack 0
  1546  000066                     EncodeShiftRow@temp:
  1547                           	opt stack 0
  1548  000066                     RxDataDone@dataLength:
  1549                           	opt stack 0
  1550  000066                     ___abdiv@sign:
  1551                           	opt stack 0
  1552  000066                     FillSubKey@key:
  1553                           	opt stack 0
  1554  000066                     memcpy@s1:
  1555                           	opt stack 0
  1556  000066                     memset@c:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x6
  1560  000066                     	ds	1
  1561  000067                     SwTimerSetCallback@timerId:
  1562                           	opt stack 0
  1563  000067                     RADIO_RegisterWrite@reg:
  1564                           	opt stack 0
  1565  000067                     RADIO_RegisterRead@readValue:
  1566                           	opt stack 0
  1567  000067                     UpdateDataRange@i:
  1568                           	opt stack 0
  1569  000067                     UpdateChannelIdStatus@i:
  1570                           	opt stack 0
  1571  000067                     ValidateDataRange@dataRangeNew:
  1572                           	opt stack 0
  1573  000067                     IncludeMacCommandsResponse@bIncludeInFopts:
  1574                           	opt stack 0
  1575  000067                     FindSmallestDataRate@dataRate:
  1576                           	opt stack 0
  1577  000067                     RxDataDone@status:
  1578                           	opt stack 0
  1579  000067                     ___abdiv@quotient:
  1580                           	opt stack 0
  1581                           
  1582                           ; 1 bytes @ 0x7
  1583  000067                     	ds	1
  1584  000068                     ??_IncludeMacCommandsResponse:
  1585  000068                     ??_SystemBlockingWaitMs:
  1586  000068                     RADIO_WritePower@ocp:
  1587                           	opt stack 0
  1588  000068                     RADIO_UnhandledInterrupt@modulation:
  1589                           	opt stack 0
  1590  000068                     LORAWAN_SetChannelIdStatus@statusNew:
  1591                           	opt stack 0
  1592  000068                     ValidateFrequency@result:
  1593                           	opt stack 0
  1594  000068                     ValidateDataRange@dataRateMax:
  1595                           	opt stack 0
  1596  000068                     UpdateFrequency@channelId:
  1597                           	opt stack 0
  1598  000068                     FillSubKey@size:
  1599                           	opt stack 0
  1600  000068                     UpdateReceiveWindow2Parameters@dataRate:
  1601                           	opt stack 0
  1602  000068                     UpdateReceiveDelays@delay:
  1603                           	opt stack 0
  1604  000068                     ___abdiv@dividend:
  1605                           	opt stack 0
  1606  000068                     EnableChannels1@channelMask:
  1607                           	opt stack 0
  1608  000068                     TMR1_ReadTimer@readVal:
  1609                           	opt stack 0
  1610  000068                     _EncKeySchedule$3767:
  1611                           	opt stack 0
  1612  000068                     memcpy@n:
  1613                           	opt stack 0
  1614  000068                     memset@n:
  1615                           	opt stack 0
  1616  000068                     ___lmul@multiplicand:
  1617                           	opt stack 0
  1618  000068                     ___lldiv@divisor:
  1619                           	opt stack 0
  1620  000068                     ___llmod@divisor:
  1621                           	opt stack 0
  1622                           
  1623                           ; 4 bytes @ 0x8
  1624  000068                     	ds	1
  1625  000069                     ??_FillSubKey:
  1626  000069                     ??_RADIO_DIO3:
  1627  000069                     ??_RADIO_DIO4:
  1628  000069                     ??_RADIO_DIO5:
  1629  000069                     ?_ExecuteRxTimingSetup:
  1630                           	opt stack 0
  1631  000069                     RADIO_WriteMode@newModulation:
  1632                           	opt stack 0
  1633  000069                     RADIO_WritePower@paDac:
  1634                           	opt stack 0
  1635  000069                     ExecuteDutyCycle@maxDCycle:
  1636                           	opt stack 0
  1637  000069                     ValidateDataRange@dataRateMin:
  1638                           	opt stack 0
  1639  000069                     ExecuteRxTimingSetup@ptr:
  1640                           	opt stack 0
  1641                           
  1642                           ; 2 bytes @ 0x9
  1643  000069                     	ds	1
  1644  00006A                     ?_TMR_SwapTimer:
  1645                           	opt stack 0
  1646  00006A                     ?_TMR_GetDeltaTime:
  1647                           	opt stack 0
  1648  00006A                     RADIO_WriteMode@blocking:
  1649                           	opt stack 0
  1650  00006A                     RADIO_WritePower@power:
  1651                           	opt stack 0
  1652  00006A                     LORAWAN_SetChannelIdStatus@channelId:
  1653                           	opt stack 0
  1654  00006A                     EnableChannels1@channelMaskCntl:
  1655                           	opt stack 0
  1656  00006A                     FillSubKey@carry:
  1657                           	opt stack 0
  1658  00006A                     CountfOptsLength@macCommandLength:
  1659                           	opt stack 0
  1660  00006A                     TMR_SwapTimer@timerVal:
  1661                           	opt stack 0
  1662  00006A                     AESEncode@block:
  1663                           	opt stack 0
  1664  00006A                     memcpy@d:
  1665                           	opt stack 0
  1666  00006A                     memset@p:
  1667                           	opt stack 0
  1668                           
  1669                           ; 2 bytes @ 0xA
  1670  00006A                     	ds	1
  1671  00006B                     RADIO_WriteMode@currentModulation:
  1672                           	opt stack 0
  1673  00006B                     EnableChannels1@channelIndexMin:
  1674                           	opt stack 0
  1675  00006B                     FillSubKey@i:
  1676                           	opt stack 0
  1677  00006B                     ExecuteRxTimingSetup@delay:
  1678                           	opt stack 0
  1679  00006B                     CountfOptsLength@i:
  1680                           	opt stack 0
  1681                           
  1682                           ; 1 bytes @ 0xB
  1683  00006B                     	ds	1
  1684  00006C                     ??_LORAWAN_GetMaxPayloadSize:
  1685  00006C                     RADIO_WriteMode@dioMapping:
  1686                           	opt stack 0
  1687  00006C                     EnableChannels1@channelIndexMax:
  1688                           	opt stack 0
  1689  00006C                     AESEncode@masterKey:
  1690                           	opt stack 0
  1691  00006C                     ___llmod@counter:
  1692                           	opt stack 0
  1693  00006C                     memcpy@s:
  1694                           	opt stack 0
  1695  00006C                     TMR_OverrideRemaining@ticksRemaining:
  1696                           	opt stack 0
  1697  00006C                     ___lmul@product:
  1698                           	opt stack 0
  1699  00006C                     ___lldiv@quotient:
  1700                           	opt stack 0
  1701                           
  1702                           ; 4 bytes @ 0xC
  1703  00006C                     	ds	1
  1704  00006D                     ??_AESEncode:
  1705  00006D                     RADIO_WriteMode@currentMode:
  1706                           	opt stack 0
  1707  00006D                     EnableChannels1@i:
  1708                           	opt stack 0
  1709  00006D                     LORAWAN_GetMaxPayloadSize@macCommandsLength:
  1710                           	opt stack 0
  1711                           
  1712                           ; 1 bytes @ 0xD
  1713  00006D                     	ds	1
  1714  00006E                     ??_TMR_GetDeltaTime:
  1715  00006E                     ?_ExtractMic:
  1716                           	opt stack 0
  1717  00006E                     RADIO_WriteMode@newMode:
  1718                           	opt stack 0
  1719  00006E                     InitDefault868Channels@i:
  1720                           	opt stack 0
  1721  00006E                     InitDefault433Channels@i:
  1722                           	opt stack 0
  1723  00006E                     LORAWAN_GetMaxPayloadSize@result:
  1724                           	opt stack 0
  1725  00006E                     IncludeMacCommandsResponse@i:
  1726                           	opt stack 0
  1727  00006E                     RADIO_SetFSKSyncWord@syncWord:
  1728                           	opt stack 0
  1729  00006E                     EnableChannels@channelMask:
  1730                           	opt stack 0
  1731  00006E                     LORAWAN_SetNetworkSessionKey@networkSessionKeyNew:
  1732                           	opt stack 0
  1733  00006E                     LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew:
  1734                           	opt stack 0
  1735  00006E                     PrepareSessionKeys@sessionKey:
  1736                           	opt stack 0
  1737  00006E                     ExtractMic@buffer:
  1738                           	opt stack 0
  1739  00006E                     AssembleEncryptionBlock@frameCounter:
  1740                           	opt stack 0
  1741                           
  1742                           ; 4 bytes @ 0xE
  1743  00006E                     	ds	1
  1744  00006F                     RADIO_WriteMode@opMode:
  1745                           	opt stack 0
  1746  00006F                     IncludeMacCommandsResponse@bufferIndex:
  1747                           	opt stack 0
  1748                           
  1749                           ; 1 bytes @ 0xF
  1750  00006F                     	ds	1
  1751  000070                     ??_TMR_OverrideRemaining:
  1752  000070                     ?_rand:
  1753                           	opt stack 0
  1754  000070                     ?_RADIO_ReadRandom:
  1755                           	opt stack 0
  1756  000070                     ?_ExecuteNewChannel:
  1757                           	opt stack 0
  1758  000070                     ?_ExecuteRxParamSetupReq:
  1759                           	opt stack 0
  1760  000070                     RADIO_SetFSKSyncWord@syncWordLen:
  1761                           	opt stack 0
  1762  000070                     EnableChannels@channelMaskCntl:
  1763                           	opt stack 0
  1764  000070                     ExtractMic@bufferLength:
  1765                           	opt stack 0
  1766  000070                     ___lldiv@counter:
  1767                           	opt stack 0
  1768  000070                     ExecuteNewChannel@ptr:
  1769                           	opt stack 0
  1770  000070                     ExecuteRxParamSetupReq@ptr:
  1771                           	opt stack 0
  1772  000070                     UpdateCfList@joinAccept:
  1773                           	opt stack 0
  1774  000070                     PrepareSessionKeys@appNonce:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0x10
  1778  000070                     	ds	1
  1779  000071                     ?_ExecuteLinkAdr:
  1780                           	opt stack 0
  1781  000071                     ExecuteLinkAdr@ptr:
  1782                           	opt stack 0
  1783  000071                     SwTimerSetTimeout@timeout:
  1784                           	opt stack 0
  1785  000071                     RADIO_WriteFrequency@frequency:
  1786                           	opt stack 0
  1787  000071                     RADIO_WriteFSKFrequencyDeviation@frequencyDeviation:
  1788                           	opt stack 0
  1789  000071                     RADIO_WriteFSKBitRate@bitRate:
  1790                           	opt stack 0
  1791  000071                     ConfigureRadio@freq:
  1792                           	opt stack 0
  1793                           
  1794                           ; 4 bytes @ 0x11
  1795  000071                     	ds	1
  1796  000072                     ??_ExtractMic:
  1797  000072                     ??_UpdateCfList:
  1798  000072                     ?___lwmod:
  1799                           	opt stack 0
  1800  000072                     ExecuteNewChannel@drRange:
  1801                           	opt stack 0
  1802  000072                     AssembleEncryptionBlock@blockId:
  1803                           	opt stack 0
  1804  000072                     TMR_OverrideRemaining@tmrVal:
  1805                           	opt stack 0
  1806  000072                     RADIO_ReadRandom@retVal:
  1807                           	opt stack 0
  1808  000072                     PrepareSessionKeys@networkId:
  1809                           	opt stack 0
  1810  000072                     ___lwmod@dividend:
  1811                           	opt stack 0
  1812  000072                     ExecuteRxParamSetupReq@frequency:
  1813                           	opt stack 0
  1814                           
  1815                           ; 4 bytes @ 0x12
  1816  000072                     	ds	1
  1817  000073                     ??_ExecuteLinkAdr:
  1818  000073                     AssembleEncryptionBlock@firstByte:
  1819                           	opt stack 0
  1820  000073                     ExecuteNewChannel@frequency:
  1821                           	opt stack 0
  1822                           
  1823                           ; 4 bytes @ 0x13
  1824  000073                     	ds	1
  1825  000074                     RADIO_ReadRandom@i:
  1826                           	opt stack 0
  1827  000074                     UpdateCfList@bufferLength:
  1828                           	opt stack 0
  1829  000074                     PrepareSessionKeys@index:
  1830                           	opt stack 0
  1831  000074                     AssembleEncryptionBlock@multicastStatus:
  1832                           	opt stack 0
  1833  000074                     TMR_OverrideRemaining@oldReloadVal:
  1834                           	opt stack 0
  1835  000074                     ExecuteLinkAdr@channelMask:
  1836                           	opt stack 0
  1837  000074                     ___lwmod@divisor:
  1838                           	opt stack 0
  1839  000074                     ExtractMic@mic:
  1840                           	opt stack 0
  1841                           
  1842                           ; 4 bytes @ 0x14
  1843  000074                     	ds	1
  1844  000075                     ??_SwTimerSetTimeout:
  1845  000075                     ConfigureRadio@dataRate:
  1846                           	opt stack 0
  1847  000075                     AssembleEncryptionBlock@dir:
  1848                           	opt stack 0
  1849  000075                     srand@x:
  1850                           	opt stack 0
  1851  000075                     RADIO_WriteFrequency@num_mod:
  1852                           	opt stack 0
  1853  000075                     RADIO_WriteFSKFrequencyDeviation@num:
  1854                           	opt stack 0
  1855  000075                     RADIO_WriteFSKBitRate@num:
  1856                           	opt stack 0
  1857  000075                     UpdateCfList@frequency:
  1858                           	opt stack 0
  1859  000075                     AESEncode@key:
  1860                           	opt stack 0
  1861                           
  1862                           ; 16 bytes @ 0x15
  1863  000075                     	ds	1
  1864  000076                     ExecuteLinkAdr@txPower:
  1865                           	opt stack 0
  1866  000076                     ExecuteRxParamSetupReq@dlSettings:
  1867                           	opt stack 0
  1868  000076                     AssembleEncryptionBlock@bufferIndex:
  1869                           	opt stack 0
  1870  000076                     ___lwmod@counter:
  1871                           	opt stack 0
  1872  000076                     ConfigureRadioTx@freq:
  1873                           	opt stack 0
  1874  000076                     ConfigureRadioRx@freq:
  1875                           	opt stack 0
  1876                           
  1877                           ; 4 bytes @ 0x16
  1878  000076                     	ds	1
  1879  000077                     ?_Random:
  1880                           	opt stack 0
  1881  000077                     ExecuteNewChannel@channelIndex:
  1882                           	opt stack 0
  1883  000077                     ExecuteLinkAdr@redundancy:
  1884                           	opt stack 0
  1885  000077                     Random@max:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x17
  1889  000077                     	ds	2
  1890  000079                     SwTimerSetTimeout@timerId:
  1891                           	opt stack 0
  1892  000079                     ExecuteLinkAdr@dataRate:
  1893                           	opt stack 0
  1894  000079                     SearchAvailableChannel@transmissionType:
  1895                           	opt stack 0
  1896  000079                     UpdateCfList@channelIndex:
  1897                           	opt stack 0
  1898  000079                     RADIO_WriteFrequency@num:
  1899                           	opt stack 0
  1900                           
  1901                           ; 4 bytes @ 0x19
  1902  000079                     	ds	1
  1903  00007A                     ?_MacExecuteCommands:
  1904                           	opt stack 0
  1905  00007A                     ?_SwTimersInterrupt:
  1906                           	opt stack 0
  1907  00007A                     UpdateCfList@i:
  1908                           	opt stack 0
  1909  00007A                     ConfigureRadioTx@dataRate:
  1910                           	opt stack 0
  1911  00007A                     ConfigureRadioRx@dataRate:
  1912                           	opt stack 0
  1913  00007A                     SearchAvailableChannel@channelIndex:
  1914                           	opt stack 0
  1915  00007A                     MacExecuteCommands@buffer:
  1916                           	opt stack 0
  1917                           
  1918                           ; 2 bytes @ 0x1A
  1919  00007A                     	ds	1
  1920  00007B                     ConfigureRadioTx@txPower:
  1921                           	opt stack 0
  1922                           
  1923                           ; 1 bytes @ 0x1B
  1924  00007B                     	ds	1
  1925  00007C                     ??_SearchAvailableChannel:
  1926  00007C                     MacExecuteCommands@fOptsLen:
  1927                           	opt stack 0
  1928                           
  1929                           ; 1 bytes @ 0x1C
  1930  00007C                     	ds	1
  1931  00007D                     ??_MacExecuteCommands:
  1932  00007D                     ??_RADIO_DIO2:
  1933  00007D                     RADIO_Init@radioBuffer:
  1934                           	opt stack 0
  1935  00007D                     RADIO_WriteConfiguration@symbolTimeout:
  1936                           	opt stack 0
  1937                           
  1938                           ; 2 bytes @ 0x1D
  1939  00007D                     	ds	1
  1940  00007E                     RADIO_DIO2@dioMapping:
  1941                           	opt stack 0
  1942                           
  1943                           ; 1 bytes @ 0x1E
  1944  00007E                     	ds	1
  1945  00007F                     ??_RADIO_WriteConfiguration:
  1946  00007F                     MacExecuteCommands@done:
  1947                           	opt stack 0
  1948  00007F                     RADIO_Init@frequency:
  1949                           	opt stack 0
  1950                           
  1951                           ; 4 bytes @ 0x1F
  1952  00007F                     	ds	1
  1953  000080                     SearchAvailableChannel@randomNumberCopy:
  1954                           	opt stack 0
  1955  000080                     MacExecuteCommands@ptr:
  1956                           	opt stack 0
  1957                           
  1958                           ; 2 bytes @ 0x20
  1959  000080                     	ds	1
  1960  000081                     RADIO_WriteConfiguration@i:
  1961                           	opt stack 0
  1962  000081                     SearchAvailableChannel@result:
  1963                           	opt stack 0
  1964                           
  1965                           ; 1 bytes @ 0x21
  1966  000081                     	ds	1
  1967  000082                     SearchAvailableChannel@maxChannels:
  1968                           	opt stack 0
  1969  000082                     SwTimersInterrupt@timeElapsed:
  1970                           	opt stack 0
  1971  000082                     RADIO_WriteConfiguration@tempValue:
  1972                           	opt stack 0
  1973                           
  1974                           ; 4 bytes @ 0x22
  1975  000082                     	ds	1
  1976  000083                     ??_RADIO_Init:
  1977  000083                     SearchAvailableChannel@randomNumber:
  1978                           	opt stack 0
  1979                           
  1980                           ; 1 bytes @ 0x23
  1981  000083                     	ds	1
  1982  000084                     SearchAvailableChannel@i:
  1983                           	opt stack 0
  1984                           
  1985                           ; 1 bytes @ 0x24
  1986  000084                     	ds	1
  1987  000085                     SelectChannelForTransmission@transmissionType:
  1988                           	opt stack 0
  1989  000085                     _AESEncode$3781:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x25
  1993  000085                     	ds	1
  1994  000086                     RADIO_WriteConfiguration@regValue:
  1995                           	opt stack 0
  1996  000086                     SelectChannelForTransmission@result:
  1997                           	opt stack 0
  1998  000086                     SwTimersInterrupt@ticksToNextTimerEvent:
  1999                           	opt stack 0
  2000                           
  2001                           ; 4 bytes @ 0x26
  2002  000086                     	ds	1
  2003  000087                     SelectChannelForTransmission@channelIndex:
  2004                           	opt stack 0
  2005  000087                     _AESEncode$3782:
  2006                           	opt stack 0
  2007                           
  2008                           ; 2 bytes @ 0x27
  2009  000087                     	ds	2
  2010  000089                     _AESEncode$3783:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x29
  2014  000089                     	ds	1
  2015  00008A                     SwTimersInterrupt@i:
  2016                           	opt stack 0
  2017                           
  2018                           ; 1 bytes @ 0x2A
  2019  00008A                     	ds	1
  2020  00008B                     ?_SwTimerReadValue:
  2021                           	opt stack 0
  2022  00008B                     AESEncode@aux:
  2023                           	opt stack 0
  2024                           
  2025                           ; 1 bytes @ 0x2B
  2026  00008B                     	ds	1
  2027  00008C                     AESEncode@aux2:
  2028                           	opt stack 0
  2029                           
  2030                           ; 1 bytes @ 0x2C
  2031  00008C                     	ds	1
  2032  00008D                     AESEncode@aux1:
  2033                           	opt stack 0
  2034                           
  2035                           ; 1 bytes @ 0x2D
  2036  00008D                     	ds	1
  2037  00008E                     AESEncode@aux3:
  2038                           	opt stack 0
  2039                           
  2040                           ; 1 bytes @ 0x2E
  2041  00008E                     	ds	1
  2042  00008F                     AESEncode@i:
  2043                           	opt stack 0
  2044  00008F                     SwTimerReadValue@ticksCount:
  2045                           	opt stack 0
  2046  00008F                     SwTimerStart@ticksRemaining:
  2047                           	opt stack 0
  2048                           
  2049                           ; 4 bytes @ 0x2F
  2050  00008F                     	ds	1
  2051  000090                     AESEncodeLoRa@block:
  2052                           	opt stack 0
  2053                           
  2054                           ; 2 bytes @ 0x30
  2055  000090                     	ds	2
  2056  000092                     AESEncodeLoRa@key:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x32
  2060  000092                     	ds	1
  2061  000093                     SwTimerReadValue@timerId:
  2062                           	opt stack 0
  2063  000093                     SwTimerStart@timerId:
  2064                           	opt stack 0
  2065                           
  2066                           ; 1 bytes @ 0x33
  2067  000093                     	ds	1
  2068  000094                     ??_UpdateRetransmissionAckTimeoutState:
  2069  000094                     ??_StartReTxTimer:
  2070  000094                     ?_RADIO_Transmit:
  2071                           	opt stack 0
  2072  000094                     ?_RADIO_ReceiveStart:
  2073                           	opt stack 0
  2074  000094                     RADIO_Transmit@buffer:
  2075                           	opt stack 0
  2076  000094                     RADIO_ReceiveStart@rxWindowSize:
  2077                           	opt stack 0
  2078  000094                     LORAWAN_LinkCheckConfigure@period:
  2079                           	opt stack 0
  2080  000094                     AESEncodeLoRa@useKey:
  2081                           	opt stack 0
  2082                           
  2083                           ; 16 bytes @ 0x34
  2084  000094                     	ds	2
  2085  000096                     ??_LORAWAN_LinkCheckConfigure:
  2086  000096                     ??_RADIO_ReceiveStart:
  2087  000096                     RADIO_Transmit@bufferLen:
  2088                           	opt stack 0
  2089                           
  2090                           ; 1 bytes @ 0x36
  2091  000096                     	ds	1
  2092  000097                     ??_RADIO_Transmit:
  2093                           
  2094                           ; 1 bytes @ 0x37
  2095  000097                     	ds	1
  2096  000098                     StartReTxTimer@minim:
  2097                           	opt stack 0
  2098                           
  2099                           ; 4 bytes @ 0x38
  2100  000098                     	ds	2
  2101  00009A                     _RADIO_ReceiveStart$1055:
  2102                           	opt stack 0
  2103                           
  2104                           ; 4 bytes @ 0x3A
  2105  00009A                     	ds	2
  2106  00009C                     StartReTxTimer@i:
  2107                           	opt stack 0
  2108                           
  2109                           ; 1 bytes @ 0x3C
  2110  00009C                     	ds	2
  2111  00009E                     LORAWAN_TxDone@timeOnAir:
  2112                           	opt stack 0
  2113  00009E                     _LORAWAN_LinkCheckConfigure$3285:
  2114                           	opt stack 0
  2115                           
  2116                           ; 4 bytes @ 0x3E
  2117  00009E                     	ds	1
  2118  00009F                     _RADIO_Transmit$1052:
  2119                           	opt stack 0
  2120                           
  2121                           ; 4 bytes @ 0x3F
  2122  00009F                     	ds	1
  2123  0000A0                     ??_LORAWAN_TxDone:
  2124                           
  2125                           ; 1 bytes @ 0x40
  2126  0000A0                     	ds	2
  2127  0000A2                     LORAWAN_LinkCheckConfigure@iCtr:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x42
  2131  0000A2                     	ds	1
  2132  0000A3                     RADIO_Transmit@regValue:
  2133                           	opt stack 0
  2134  0000A3                     LORAWAN_Reset@ismBandNew:
  2135                           	opt stack 0
  2136                           
  2137                           ; 1 bytes @ 0x43
  2138  0000A3                     	ds	1
  2139  0000A4                     RADIO_Transmit@i:
  2140                           	opt stack 0
  2141  0000A4                     LORAWAN_Init@RxPayload:
  2142                           	opt stack 0
  2143  0000A4                     GenerateSubkey@key:
  2144                           	opt stack 0
  2145  0000A4                     ComputeSessionKeys@joinAcceptBuffer:
  2146                           	opt stack 0
  2147  0000A4                     EncryptFRMPayload@buffer:
  2148                           	opt stack 0
  2149                           
  2150                           ; 2 bytes @ 0x44
  2151  0000A4                     	ds	1
  2152  0000A5                     ??_LORAWAN_RxTimeout:
  2153                           
  2154                           ; 1 bytes @ 0x45
  2155  0000A5                     	ds	1
  2156  0000A6                     EncryptFRMPayload@bufferLength:
  2157                           	opt stack 0
  2158  0000A6                     LORAWAN_Init@RxJoinResponse:
  2159                           	opt stack 0
  2160  0000A6                     GenerateSubkey@k1:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x46
  2164  0000A6                     	ds	1
  2165  0000A7                     EncryptFRMPayload@dir:
  2166                           	opt stack 0
  2167                           
  2168                           ; 1 bytes @ 0x47
  2169  0000A7                     	ds	1
  2170  0000A8                     GenerateSubkey@k2:
  2171                           	opt stack 0
  2172  0000A8                     EncryptFRMPayload@frameCounter:
  2173                           	opt stack 0
  2174                           
  2175                           ; 4 bytes @ 0x48
  2176  0000A8                     	ds	1
  2177  0000A9                     LORAWAN_RxTimeout@minim:
  2178                           	opt stack 0
  2179                           
  2180                           ; 4 bytes @ 0x49
  2181  0000A9                     	ds	1
  2182  0000AA                     ??_GenerateSubkey:
  2183                           
  2184                           ; 1 bytes @ 0x4A
  2185  0000AA                     	ds	1
  2186  0000AB                     GenerateSubkey@const_Rb:
  2187                           	opt stack 0
  2188                           
  2189                           ; 16 bytes @ 0x4B
  2190  0000AB                     	ds	1
  2191  0000AC                     EncryptFRMPayload@key:
  2192                           	opt stack 0
  2193                           
  2194                           ; 2 bytes @ 0x4C
  2195  0000AC                     	ds	1
  2196  0000AD                     LORAWAN_RxTimeout@i:
  2197                           	opt stack 0
  2198                           
  2199                           ; 1 bytes @ 0x4D
  2200  0000AD                     	ds	1
  2201  0000AE                     ??_RADIO_DIO1:
  2202  0000AE                     EncryptFRMPayload@macBufferIndex:
  2203                           	opt stack 0
  2204                           
  2205                           ; 1 bytes @ 0x4E
  2206  0000AE                     	ds	1
  2207  0000AF                     RADIO_DIO1@dioMapping:
  2208                           	opt stack 0
  2209  0000AF                     EncryptFRMPayload@bufferToBeEncrypted:
  2210                           	opt stack 0
  2211                           
  2212                           ; 2 bytes @ 0x4F
  2213  0000AF                     	ds	2
  2214  0000B1                     EncryptFRMPayload@multicastStatus:
  2215                           	opt stack 0
  2216                           
  2217                           ; 1 bytes @ 0x51
  2218  0000B1                     	ds	1
  2219  0000B2                     ??_EncryptFRMPayload:
  2220                           
  2221                           ; 1 bytes @ 0x52
  2222  0000B2                     	ds	5
  2223  0000B7                     EncryptFRMPayload@k:
  2224                           	opt stack 0
  2225                           
  2226                           ; 1 bytes @ 0x57
  2227  0000B7                     	ds	1
  2228  0000B8                     EncryptFRMPayload@i:
  2229                           	opt stack 0
  2230                           
  2231                           ; 1 bytes @ 0x58
  2232  0000B8                     	ds	1
  2233  0000B9                     EncryptFRMPayload@j:
  2234                           	opt stack 0
  2235                           
  2236                           ; 1 bytes @ 0x59
  2237  0000B9                     	ds	1
  2238  0000BA                     _LORAWAN_TxDone$1948:
  2239                           	opt stack 0
  2240                           
  2241                           ; 4 bytes @ 0x5A
  2242  0000BA                     	ds	1
  2243  0000BB                     GenerateSubkey@l:
  2244                           	opt stack 0
  2245                           
  2246                           ; 16 bytes @ 0x5B
  2247  0000BB                     	ds	3
  2248  0000BE                     _LORAWAN_TxDone$1949:
  2249                           	opt stack 0
  2250                           
  2251                           ; 4 bytes @ 0x5E
  2252  0000BE                     	ds	4
  2253  0000C2                     LORAWAN_TxDone@found:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x62
  2257  0000C2                     	ds	1
  2258  0000C3                     LORAWAN_TxDone@delta:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0x63
  2262  0000C3                     	ds	4
  2263  0000C7                     LORAWAN_TxDone@ticks:
  2264                           	opt stack 0
  2265                           
  2266                           ; 4 bytes @ 0x67
  2267  0000C7                     	ds	4
  2268  0000CB                     GenerateSubkey@i:
  2269                           	opt stack 0
  2270  0000CB                     LORAWAN_TxDone@minim:
  2271                           	opt stack 0
  2272                           
  2273                           ; 4 bytes @ 0x6B
  2274  0000CB                     	ds	1
  2275  0000CC                     AESCmac@key:
  2276                           	opt stack 0
  2277                           
  2278                           ; 2 bytes @ 0x6C
  2279  0000CC                     	ds	2
  2280  0000CE                     AESCmac@output:
  2281                           	opt stack 0
  2282                           
  2283                           ; 2 bytes @ 0x6E
  2284  0000CE                     	ds	1
  2285  0000CF                     LORAWAN_TxDone@i:
  2286                           	opt stack 0
  2287                           
  2288                           ; 1 bytes @ 0x6F
  2289  0000CF                     	ds	1
  2290  0000D0                     ??_RADIO_TxDone:
  2291  0000D0                     ??_RADIO_FSKPacketSent:
  2292  0000D0                     AESCmac@input:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x70
  2296  0000D0                     	ds	2
  2297  0000D2                     AESCmac@size:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x72
  2301  0000D2                     	ds	1
  2302  0000D3                     ??_AESCmac:
  2303                           
  2304                           ; 1 bytes @ 0x73
  2305  0000D3                     	ds	1
  2306  0000D4                     RADIO_TxDone@timeOnAir:
  2307                           	opt stack 0
  2308  0000D4                     RADIO_FSKPacketSent@timeOnAir:
  2309                           	opt stack 0
  2310                           
  2311                           ; 4 bytes @ 0x74
  2312  0000D4                     	ds	4
  2313  0000D8                     _RADIO_TxDone$1067:
  2314                           	opt stack 0
  2315  0000D8                     _RADIO_FSKPacketSent$1071:
  2316                           	opt stack 0
  2317                           
  2318                           ; 4 bytes @ 0x78
  2319  0000D8                     	ds	2
  2320  0000DA                     ??_AssemblePacket:
  2321  0000DA                     ?_ComputeMic:
  2322                           	opt stack 0
  2323  0000DA                     ComputeMic@key:
  2324                           	opt stack 0
  2325                           
  2326                           ; 2 bytes @ 0x7A
  2327  0000DA                     	ds	2
  2328  0000DC                     RADIO_FSKPacketSent@irqFlags:
  2329                           	opt stack 0
  2330  0000DC                     AssemblePacket@confirmed:
  2331                           	opt stack 0
  2332  0000DC                     ComputeMic@buffer:
  2333                           	opt stack 0
  2334                           
  2335                           ; 2 bytes @ 0x7C
  2336  0000DC                     	ds	1
  2337  0000DD                     AssemblePacket@mhdr:
  2338                           	opt stack 0
  2339                           
  2340                           ; 1 bytes @ 0x7D
  2341  0000DD                     	ds	1
  2342  0000DE                     AssemblePacket@fCtrl:
  2343                           	opt stack 0
  2344  0000DE                     ComputeMic@bufferLength:
  2345                           	opt stack 0
  2346                           
  2347                           ; 1 bytes @ 0x7E
  2348  0000DE                     	ds	1
  2349  0000DF                     AssemblePacket@macCmdIdx:
  2350                           	opt stack 0
  2351  0000DF                     ComputeMic@mic:
  2352                           	opt stack 0
  2353                           
  2354                           ; 4 bytes @ 0x7F
  2355  0000DF                     	ds	1
  2356  0000E0                     AssemblePacket@bufferIndex:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x80
  2360  0000E0                     	ds	1
  2361  0000E1                     LORAWAN_Send@port:
  2362                           	opt stack 0
  2363                           
  2364                           ; 1 bytes @ 0x81
  2365  0000E1                     	ds	1
  2366  0000E2                     LORAWAN_Send@buffer:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x82
  2370  0000E2                     	ds	1
  2371  0000E3                     ??_PrepareJoinRequestFrame:
  2372                           
  2373                           ; 1 bytes @ 0x83
  2374  0000E3                     	ds	1
  2375  0000E4                     LORAWAN_Send@bufferLength:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0x84
  2379  0000E4                     	ds	1
  2380  0000E5                     ??_LORAWAN_Send:
  2381  0000E5                     PrepareJoinRequestFrame@mic:
  2382                           	opt stack 0
  2383                           
  2384                           ; 4 bytes @ 0x85
  2385  0000E5                     	ds	1
  2386  0000E6                     LORAWAN_Send@result:
  2387                           	opt stack 0
  2388                           
  2389                           ; 1 bytes @ 0x86
  2390  0000E6                     	ds	1
  2391  0000E7                     LORAWAN_Send@confirmed:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x87
  2395  0000E7                     	ds	1
  2396  0000E8                     ??_LORAWAN_RxDone:
  2397  0000E8                     
  2398                           ; 1 bytes @ 0x88
  2399  0000E8                     	ds	1
  2400  0000E9                     PrepareJoinRequestFrame@mhdr:
  2401                           	opt stack 0
  2402                           
  2403                           ; 1 bytes @ 0x89
  2404  0000E9                     	ds	1
  2405  0000EA                     PrepareJoinRequestFrame@bufferIndex:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0x8A
  2409  0000EA                     	ds	1
  2410  0000EB                     PrepareJoinRequestFrame@iCtr:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x8B
  2414  0000EB                     	ds	1
  2415  0000EC                     SwTimersExecute@i:
  2416                           	opt stack 0
  2417  0000EC                     LORAWAN_Join@bufferIndex:
  2418                           	opt stack 0
  2419                           
  2420                           ; 1 bytes @ 0x8C
  2421  0000EC                     	ds	1
  2422  0000ED                     RADIO_RxDone@irqFlags:
  2423                           	opt stack 0
  2424  0000ED                     RADIO_FSKPayloadReady@irqFlags:
  2425                           	opt stack 0
  2426  0000ED                     LORAWAN_Join@result:
  2427                           	opt stack 0
  2428                           
  2429                           ; 1 bytes @ 0x8D
  2430  0000ED                     	ds	1
  2431  0000EE                     RADIO_RxDone@i:
  2432                           	opt stack 0
  2433  0000EE                     RADIO_FSKPayloadReady@i:
  2434                           	opt stack 0
  2435  0000EE                     LORAWAN_Join@activationTypeNew:
  2436                           	opt stack 0
  2437                           
  2438                           ; 1 bytes @ 0x8E
  2439  0000EE                     	ds	1
  2440  0000EF                     ??_RADIO_DIO0:
  2441                           
  2442                           ; 1 bytes @ 0x8F
  2443  0000EF                     	ds	2
  2444  0000F1                     RADIO_DIO0@dioMapping:
  2445                           	opt stack 0
  2446                           
  2447                           ; 1 bytes @ 0x91
  2448  0000F1                     	ds	1
  2449  0000F2                     RADIO_DIO0@opMode:
  2450                           	opt stack 0
  2451                           
  2452                           ; 1 bytes @ 0x92
  2453  0000F2                     	ds	1
  2454  0000F3                     ??_main:
  2455                           
  2456                           ; 1 bytes @ 0x93
  2457  0000F3                     	ds	1
  2458  0000F4                     main@timeToSend:
  2459                           	opt stack 0
  2460                           
  2461                           ; 1 bytes @ 0x94
  2462  0000F4                     	ds	1
  2463  0000F5                     main@x:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0x95
  2467  0000F5                     	ds	2
  2468                           tblptru	equ	0xFF8
  2469                           tblptrh	equ	0xFF7
  2470                           tblptrl	equ	0xFF6
  2471                           tablat	equ	0xFF5
  2472                           postinc0	equ	0xFEE
  2473                           wreg	equ	0xFE8
  2474                           postdec2	equ	0xFDD
  2475                           fsr2h	equ	0xFDA
  2476                           fsr2l	equ	0xFD9
  2477                           
  2478                           	psect	cstackCOMRAM
  2479  000001                     __pcstackCOMRAM:
  2480                           	opt stack 0
  2481  000001                     ?i2_TMR1_ReadTimer:
  2482                           	opt stack 0
  2483  000001                     i2TMR1_WriteTimer@timerVal:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x0
  2487  000001                     	ds	2
  2488  000003                     ??i2_TMR1_ReadTimer:
  2489  000003                     
  2490                           ; 1 bytes @ 0x2
  2491  000003                     	ds	2
  2492  000005                     i2TMR1_ReadTimer@readVal:
  2493                           	opt stack 0
  2494                           
  2495                           ; 2 bytes @ 0x4
  2496  000005                     	ds	2
  2497  000007                     ?i2_TMR_SwapTimer:
  2498                           	opt stack 0
  2499  000007                     ?i2_TMR_GetDeltaTime:
  2500                           	opt stack 0
  2501  000007                     i2TMR_SwapTimer@timerVal:
  2502                           	opt stack 0
  2503                           
  2504                           ; 2 bytes @ 0x6
  2505  000007                     	ds	2
  2506  000009                     
  2507                           ; 1 bytes @ 0x8
  2508  000009                     	ds	2
  2509  00000B                     ??i2_TMR_GetDeltaTime:
  2510                           
  2511                           ; 1 bytes @ 0xA
  2512  00000B                     	ds	12
  2513  000017                     ?i2_SwTimersInterrupt:
  2514                           	opt stack 0
  2515                           
  2516                           ; 4 bytes @ 0x16
  2517  000017                     	ds	4
  2518  00001B                     
  2519                           ; 1 bytes @ 0x1A
  2520  00001B                     	ds	4
  2521  00001F                     i2SwTimersInterrupt@timeElapsed:
  2522                           	opt stack 0
  2523                           
  2524                           ; 4 bytes @ 0x1E
  2525  00001F                     	ds	4
  2526  000023                     i2SwTimersInterrupt@ticksToNextTimerEvent:
  2527                           	opt stack 0
  2528                           
  2529                           ; 4 bytes @ 0x22
  2530  000023                     	ds	4
  2531  000027                     i2SwTimersInterrupt@i:
  2532                           	opt stack 0
  2533                           
  2534                           ; 1 bytes @ 0x26
  2535  000027                     	ds	1
  2536  000028                     ??_INTERRUPT_InterruptManager:
  2537                           
  2538                           ; 1 bytes @ 0x27
  2539  000028                     	ds	8
  2540                           tblptru	equ	0xFF8
  2541                           tblptrh	equ	0xFF7
  2542                           tblptrl	equ	0xFF6
  2543                           tablat	equ	0xFF5
  2544                           postinc0	equ	0xFEE
  2545                           wreg	equ	0xFE8
  2546                           postdec2	equ	0xFDD
  2547                           fsr2h	equ	0xFDA
  2548                           fsr2l	equ	0xFD9
  2549                           
  2550 ;;
  2551 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2552 ;;
  2553 ;; *************** function _main *****************
  2554 ;; Defined at:
  2555 ;;		line 60 in file "main.c"
  2556 ;; Parameters:    Size  Location     Type
  2557 ;;		None
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;  x               2  149[BANK0 ] int 
  2560 ;;  timeToSend      1  148[BANK0 ] unsigned char 
  2561 ;; Return value:  Size  Location     Type
  2562 ;;                  1    wreg      void 
  2563 ;; Registers used:
  2564 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+4, btemp+5, btemp
      ++6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2565 ;; Tracked objects:
  2566 ;;		On entry : 0/0
  2567 ;;		On exit  : F/0
  2568 ;;		Unchanged: 0/0
  2569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2570 ;;      Params:         0       0       0       0       0       0       0       0       0
  2571 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2572 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2573 ;;      Totals:         0       4       0       0       0       0       0       0       0
  2574 ;;Total ram usage:        4 bytes
  2575 ;; Hardware stack levels required when called:   19
  2576 ;; This function calls:
  2577 ;;		_LORAWAN_GetState
  2578 ;;		_LORAWAN_Init
  2579 ;;		_LORAWAN_Join
  2580 ;;		_LORAWAN_Mainloop
  2581 ;;		_LORAWAN_Reset
  2582 ;;		_LORAWAN_SetApplicationSessionKey
  2583 ;;		_LORAWAN_SetDeviceAddress
  2584 ;;		_LORAWAN_SetNetworkSessionKey
  2585 ;;		_SYSTEM_Initialize
  2586 ;;		_flash
  2587 ;;		_sendPacket
  2588 ;; This function is called by:
  2589 ;;		Startup code after reset
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           	psect	text0
  2594  0051FC                     __ptext0:
  2595                           	opt stack 0
  2596  0051FC                     _main:
  2597                           	opt stack 12
  2598                           
  2599                           ;main.c: 63: SYSTEM_Initialize();
  2600                           
  2601                           ; BSR set to: 1
  2602                           ;incstack = 0
  2603  0051FC  ECE5  F03A         	call	_SYSTEM_Initialize	;wreg free
  2604                           
  2605                           ; BSR set to: 1
  2606                           ;main.c: 66: (INTCONbits.GIE = 1);
  2607  005200  8EF2               	bsf	intcon,7,c	;volatile
  2608                           
  2609                           ; BSR set to: 1
  2610                           ;main.c: 67: (INTCONbits.PEIE = 1);
  2611  005202  8CF2               	bsf	intcon,6,c	;volatile
  2612                           
  2613                           ; BSR set to: 1
  2614  005204  847B               	bsf	3963,2,c	;volatile
  2615                           
  2616                           ; BSR set to: 1
  2617                           ;main.c: 70: LORAWAN_Init(RxDataDone, RxJoinResponse);
  2618  005206  0EF6               	movlw	low _RxDataDone
  2619  005208  0100               	movlb	0	; () banked
  2620  00520A  6FA4               	movwf	LORAWAN_Init@RxPayload& (0+255),b
  2621  00520C  0E78               	movlw	high _RxDataDone
  2622  00520E  6FA5               	movwf	(LORAWAN_Init@RxPayload+1)& (0+255),b
  2623  005210  0EA8               	movlw	low _RxJoinResponse
  2624  005212  6FA6               	movwf	LORAWAN_Init@RxJoinResponse& (0+255),b
  2625  005214  0E78               	movlw	high _RxJoinResponse
  2626  005216  6FA7               	movwf	(LORAWAN_Init@RxJoinResponse+1)& (0+255),b
  2627  005218  ECBF  F033         	call	_LORAWAN_Init	;wreg free
  2628                           
  2629                           ;main.c: 71: LORAWAN_SetNetworkSessionKey(nwkSKey);
  2630  00521C  0EDF               	movlw	low _nwkSKey
  2631  00521E  0100               	movlb	0	; () banked
  2632  005220  6F6E               	movwf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),b
  2633  005222  0E01               	movlw	high _nwkSKey
  2634  005224  6F6F               	movwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),b
  2635  005226  EC0C  F039         	call	_LORAWAN_SetNetworkSessionKey	;wreg free
  2636                           
  2637                           ;main.c: 72: LORAWAN_SetApplicationSessionKey(appSKey);
  2638  00522A  0ECF               	movlw	low _appSKey
  2639  00522C  0100               	movlb	0	; () banked
  2640  00522E  6F6E               	movwf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),b
  2641  005230  0E01               	movlw	high _appSKey
  2642  005232  6F6F               	movwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),b
  2643  005234  EC21  F039         	call	_LORAWAN_SetApplicationSessionKey	;wreg free
  2644                           
  2645                           ;main.c: 73: LORAWAN_SetDeviceAddress(devAddr);
  2646  005238  0E40               	movlw	64
  2647  00523A  0100               	movlb	0	; () banked
  2648  00523C  6F64               	movwf	LORAWAN_SetDeviceAddress@deviceAddressNew& (0+255),b
  2649  00523E  0E65               	movlw	101
  2650  005240  6F65               	movwf	(LORAWAN_SetDeviceAddress@deviceAddressNew+1)& (0+255),b
  2651  005242  0E00               	movlw	0
  2652  005244  6B66               	clrf	(LORAWAN_SetDeviceAddress@deviceAddressNew+2)& (0+255),b
  2653  005246  6B67               	clrf	(LORAWAN_SetDeviceAddress@deviceAddressNew+3)& (0+255),b
  2654  005248  EC37  F03B         	call	_LORAWAN_SetDeviceAddress	;wreg free
  2655                           
  2656                           ; BSR set to: 2
  2657                           ;main.c: 74: LORAWAN_Join(ABP);
  2658  00524C  0E01               	movlw	1
  2659  00524E  EC6D  F02E         	call	_LORAWAN_Join
  2660                           
  2661                           ;main.c: 76: while(JoinedServer == 0){
  2662  005252  D003               	goto	l16482
  2663  005254                     l16478:
  2664                           
  2665                           ; BSR set to: 1
  2666                           ;main.c: 77: LORAWAN_Mainloop();
  2667  005254  EC87  F037         	call	_LORAWAN_Mainloop	;wreg free
  2668  005258  947B               	bcf	3963,2,c	;volatile
  2669  00525A                     l16482:
  2670  00525A  0101               	movlb	1	; () banked
  2671  00525C  5172               	movf	_JoinedServer& (0+255),w,b
  2672  00525E  E0FA               	bz	l16478
  2673                           
  2674                           ; BSR set to: 1
  2675                           ;main.c: 79: }
  2676                           ;main.c: 82: bool timeToSend = 1;
  2677  005260  0E01               	movlw	1
  2678  005262  0100               	movlb	0	; () banked
  2679  005264  6FF4               	movwf	main@timeToSend& (0+255),b
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;main.c: 83: count = 0;
  2683  005266  0101               	movlb	1	; () banked
  2684  005268  6BCD               	clrf	_count& (0+255),b
  2685  00526A  6BCE               	clrf	(_count+1)& (0+255),b
  2686  00526C                     l16488:
  2687                           
  2688                           ;main.c: 86: {
  2689                           ;main.c: 87: LORAWAN_Mainloop();
  2690  00526C  EC87  F037         	call	_LORAWAN_Mainloop	;wreg free
  2691                           
  2692                           ;main.c: 88: count++;
  2693  005270  0101               	movlb	1	; () banked
  2694  005272  4BCD               	infsnz	_count& (0+255),f,b
  2695  005274  2BCE               	incf	(_count+1)& (0+255),f,b
  2696                           
  2697                           ; BSR set to: 1
  2698                           ;main.c: 90: if(timeToSend == 1){
  2699  005276  0100               	movlb	0	; () banked
  2700  005278  05F4               	decf	main@timeToSend& (0+255),w,b
  2701  00527A  E105               	bnz	l16500
  2702                           
  2703                           ; BSR set to: 0
  2704                           ;main.c: 91: timeToSend = 0;
  2705  00527C  6BF4               	clrf	main@timeToSend& (0+255),b
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;main.c: 92: flash();
  2709  00527E  EC22  F036         	call	_flash	;wreg free
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;main.c: 93: sendPacket();
  2713  005282  ECF7  F038         	call	_sendPacket	;wreg free
  2714  005286                     l16500:
  2715                           
  2716                           ;main.c: 94: }
  2717                           ;main.c: 96: if(LORAWAN_GetState() == IDLE){
  2718  005286  EC3D  F03C         	call	_LORAWAN_GetState	;wreg free
  2719  00528A  0900               	iorlw	0
  2720  00528C  E101               	bnz	l16502
  2721                           
  2722                           ; BSR set to: 2
  2723                           
  2724                           ;main.c: 97: do { LATCbits.LATC2 = 1; } while(0);
  2725  00528E  847B               	bsf	3963,2,c	;volatile
  2726  005290                     l16502:
  2727                           
  2728                           ; BSR set to: 2
  2729                           ;main.c: 98: }
  2730                           ;main.c: 101: if(count == 20){
  2731  005290  0E14               	movlw	20
  2732  005292  0101               	movlb	1	; () banked
  2733  005294  19CD               	xorwf	_count& (0+255),w,b
  2734  005296  11CE               	iorwf	(_count+1)& (0+255),w,b
  2735  005298  E108               	bnz	l16510
  2736                           
  2737                           ; BSR set to: 1
  2738                           ;main.c: 102: count = 0;
  2739  00529A  6BCD               	clrf	_count& (0+255),b
  2740  00529C  6BCE               	clrf	(_count+1)& (0+255),b
  2741                           
  2742                           ; BSR set to: 1
  2743                           ;main.c: 103: timeToSend = 1;
  2744  00529E  0E01               	movlw	1
  2745  0052A0  0100               	movlb	0	; () banked
  2746  0052A2  6FF4               	movwf	main@timeToSend& (0+255),b
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;main.c: 104: LORAWAN_Reset(ISM_EU868);
  2750  0052A4  0E00               	movlw	0
  2751  0052A6  EC67  F01F         	call	_LORAWAN_Reset
  2752  0052AA                     l16510:
  2753                           
  2754                           ;main.c: 105: }
  2755                           ;main.c: 106: for(int x = 0; x < 1000; x++) _delay((unsigned long)((1)*(16000000/4000.0)
      +                          ));
  2756  0052AA  0100               	movlb	0	; () banked
  2757  0052AC  6BF5               	clrf	main@x& (0+255),b
  2758  0052AE  6BF6               	clrf	(main@x+1)& (0+255),b
  2759  0052B0                     l16516:
  2760                           
  2761                           ; BSR set to: 0
  2762  0052B0  0E06               	movlw	6
  2763  0052B2  6FF3               	movwf	??_main& (0+255),b
  2764  0052B4  0E30               	movlw	48
  2765  0052B6                     u19977:
  2766  0052B6  2EE8               	decfsz	wreg,f,c
  2767  0052B8  D7FE               	goto	u19977
  2768  0052BA  2FF3               	decfsz	??_main& (0+255),f,b
  2769  0052BC  D7FC               	goto	u19977
  2770  0052BE  D000               	nop2	
  2771  0052C0  0100               	movlb	0	; () banked
  2772  0052C2  4BF5               	infsnz	main@x& (0+255),f,b
  2773  0052C4  2BF6               	incf	(main@x+1)& (0+255),f,b
  2774  0052C6  BFF6               	btfsc	(main@x+1)& (0+255),7,b
  2775  0052C8  D7F3               	goto	l16516
  2776  0052CA  0EE8               	movlw	232
  2777  0052CC  5DF5               	subwf	main@x& (0+255),w,b
  2778  0052CE  0E03               	movlw	3
  2779  0052D0  59F6               	subwfb	(main@x+1)& (0+255),w,b
  2780  0052D2  E2CC               	bc	l16488
  2781  0052D4  D7ED               	goto	l16516
  2782  0052D6                     __end_of_main:
  2783                           	opt stack 0
  2784                           tblptru	equ	0xFF8
  2785                           tblptrh	equ	0xFF7
  2786                           tblptrl	equ	0xFF6
  2787                           tablat	equ	0xFF5
  2788                           intcon	equ	0xFF2
  2789                           postinc0	equ	0xFEE
  2790                           wreg	equ	0xFE8
  2791                           postdec2	equ	0xFDD
  2792                           fsr2h	equ	0xFDA
  2793                           fsr2l	equ	0xFD9
  2794                           
  2795 ;; *************** function _sendPacket *****************
  2796 ;; Defined at:
  2797 ;;		line 116 in file "main.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;		None
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;		None
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2806 ;; Tracked objects:
  2807 ;;		On entry : F/0
  2808 ;;		On exit  : F/1
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2811 ;;      Params:         0       0       0       0       0       0       0       0       0
  2812 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2813 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2814 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2815 ;;Total ram usage:        0 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:   14
  2818 ;; This function calls:
  2819 ;;		_LORAWAN_Send
  2820 ;; This function is called by:
  2821 ;;		_main
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text1
  2826  0071EE                     __ptext1:
  2827                           	opt stack 0
  2828  0071EE                     _sendPacket:
  2829                           	opt stack 16
  2830                           
  2831                           ; BSR set to: 0
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;incstack = 0
  2835                           ;main.c: 117: do { LATCbits.LATC2 = 1; } while(0);
  2836  0071EE  847B               	bsf	3963,2,c	;volatile
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;main.c: 118: payload[0] = 0xFFFF;
  2840  0071F0  0101               	movlb	1	; () banked
  2841  0071F2  69BB               	setf	_payload& (0+255),b
  2842  0071F4  69BC               	setf	(_payload+1)& (0+255),b
  2843                           
  2844                           ; BSR set to: 1
  2845                           ;main.c: 119: LORAWAN_Send(UNCNF, portNumber, &payload, sizeof(payload));
  2846  0071F6  0E02               	movlw	2
  2847  0071F8  0100               	movlb	0	; () banked
  2848  0071FA  6FE1               	movwf	LORAWAN_Send@port& (0+255),b
  2849  0071FC  0EBB               	movlw	low _payload
  2850  0071FE  6FE2               	movwf	LORAWAN_Send@buffer& (0+255),b
  2851  007200  0E01               	movlw	high _payload
  2852  007202  6FE3               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  2853  007204  0E02               	movlw	2
  2854  007206  6FE4               	movwf	LORAWAN_Send@bufferLength& (0+255),b
  2855  007208  0E00               	movlw	0
  2856  00720A  EC0A  F02B         	call	_LORAWAN_Send
  2857                           
  2858                           ;main.c: 121: count++;
  2859  00720E  0101               	movlb	1	; () banked
  2860  007210  4BCD               	infsnz	_count& (0+255),f,b
  2861  007212  2BCE               	incf	(_count+1)& (0+255),f,b
  2862                           
  2863                           ; BSR set to: 1
  2864  007214  947B               	bcf	3963,2,c	;volatile
  2865                           
  2866                           ; BSR set to: 1
  2867  007216  0012               	return		;funcret
  2868  007218                     __end_of_sendPacket:
  2869                           	opt stack 0
  2870                           tblptru	equ	0xFF8
  2871                           tblptrh	equ	0xFF7
  2872                           tblptrl	equ	0xFF6
  2873                           tablat	equ	0xFF5
  2874                           intcon	equ	0xFF2
  2875                           postinc0	equ	0xFEE
  2876                           wreg	equ	0xFE8
  2877                           postdec2	equ	0xFDD
  2878                           fsr2h	equ	0xFDA
  2879                           fsr2l	equ	0xFD9
  2880                           
  2881 ;; *************** function _flash *****************
  2882 ;; Defined at:
  2883 ;;		line 134 in file "main.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;		None
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;  x               1    5[BANK0 ] unsigned char 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg, status,2, status,0
  2892 ;; Tracked objects:
  2893 ;;		On entry : F/0
  2894 ;;		On exit  : F/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2897 ;;      Params:         0       0       0       0       0       0       0       0       0
  2898 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2899 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2900 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2901 ;;Total ram usage:        2 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    7
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		_main
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text2
  2912  006C44                     __ptext2:
  2913                           	opt stack 0
  2914  006C44                     _flash:
  2915                           	opt stack 23
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;main.c: 135: for(uint8_t x = 0; x < 10; x++){
  2919                           
  2920                           ; BSR set to: 1
  2921                           ;incstack = 0
  2922  006C44  6B65               	clrf	flash@x& (0+255),b
  2923  006C46                     l15892:
  2924  006C46  0E01               	movlw	1
  2925                           
  2926                           ; BSR set to: 0
  2927  006C48  A47B               	btfss	3963,2,c	;volatile
  2928  006C4A  0E00               	movlw	0
  2929  006C4C  0AFF               	xorlw	255
  2930  006C4E  6F64               	movwf	??_flash& (0+255),b
  2931  006C50  4764               	rlncf	??_flash& (0+255),f,b
  2932  006C52  4764               	rlncf	??_flash& (0+255),f,b
  2933  006C54  507B               	movf	3963,w,c	;volatile
  2934  006C56  1964               	xorwf	??_flash& (0+255),w,b
  2935  006C58  0BFB               	andlw	-5
  2936  006C5A  1964               	xorwf	??_flash& (0+255),w,b
  2937  006C5C  6E7B               	movwf	3963,c	;volatile
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;main.c: 137: _delay((unsigned long)((25)*(16000000/4000.0)));
  2941  006C5E  0E82               	movlw	130
  2942  006C60  6F64               	movwf	??_flash& (0+255),b
  2943  006C62  0EDE               	movlw	222
  2944  006C64                     u19987:
  2945  006C64  2EE8               	decfsz	wreg,f,c
  2946  006C66  D7FE               	goto	u19987
  2947  006C68  2F64               	decfsz	??_flash& (0+255),f,b
  2948  006C6A  D7FC               	goto	u19987
  2949                           
  2950                           ;main.c: 138: _delay((unsigned long)((25)*(16000000/4000.0)));
  2951  006C6C  0E82               	movlw	130
  2952  006C6E  0100               	movlb	0	; () banked
  2953  006C70  6F64               	movwf	??_flash& (0+255),b
  2954  006C72  0EDE               	movlw	222
  2955  006C74                     u19997:
  2956  006C74  2EE8               	decfsz	wreg,f,c
  2957  006C76  D7FE               	goto	u19997
  2958  006C78  2F64               	decfsz	??_flash& (0+255),f,b
  2959  006C7A  D7FC               	goto	u19997
  2960  006C7C  0100               	movlb	0	; () banked
  2961  006C7E  2B65               	incf	flash@x& (0+255),f,b
  2962                           
  2963                           ; BSR set to: 0
  2964  006C80  0E09               	movlw	9
  2965  006C82  6565               	cpfsgt	flash@x& (0+255),b
  2966  006C84  D7E0               	goto	l15892
  2967                           
  2968                           ; BSR set to: 0
  2969                           
  2970                           ;main.c: 139: }
  2971                           ;main.c: 140: do { LATCbits.LATC2 = 0; } while(0);
  2972  006C86  947B               	bcf	3963,2,c	;volatile
  2973                           
  2974                           ; BSR set to: 0
  2975  006C88  0C09               	retlw	9	;funcret
  2976  006C8A                     __end_of_flash:
  2977                           	opt stack 0
  2978                           tblptru	equ	0xFF8
  2979                           tblptrh	equ	0xFF7
  2980                           tblptrl	equ	0xFF6
  2981                           tablat	equ	0xFF5
  2982                           intcon	equ	0xFF2
  2983                           postinc0	equ	0xFEE
  2984                           wreg	equ	0xFE8
  2985                           postdec2	equ	0xFDD
  2986                           fsr2h	equ	0xFDA
  2987                           fsr2l	equ	0xFD9
  2988                           
  2989 ;; *************** function _SYSTEM_Initialize *****************
  2990 ;; Defined at:
  2991 ;;		line 107 in file "mcc_generated_files/mcc.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;		None
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;		None
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      void 
  2998 ;; Registers used:
  2999 ;;		wreg, status,2, status,0, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : F/1
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3005 ;;      Params:         0       0       0       0       0       0       0       0       0
  3006 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3007 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3008 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3009 ;;Total ram usage:        0 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:   10
  3012 ;; This function calls:
  3013 ;;		_EXT_INT_Initialize
  3014 ;;		_INTERRUPT_Initialize
  3015 ;;		_LORAWAN_PlatformInit
  3016 ;;		_OSCILLATOR_Initialize
  3017 ;;		_PIN_MANAGER_Initialize
  3018 ;;		_SPI2_Initialize
  3019 ;;		_TMR1_Initialize
  3020 ;; This function is called by:
  3021 ;;		_main
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text3
  3026  0075CA                     __ptext3:
  3027                           	opt stack 0
  3028  0075CA                     _SYSTEM_Initialize:
  3029                           	opt stack 20
  3030                           
  3031                           ;mcc.c: 110: INTERRUPT_Initialize();
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;incstack = 0
  3035  0075CA  EC6E  F03C         	call	_INTERRUPT_Initialize	;wreg free
  3036                           
  3037                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  3038  0075CE  EC22  F028         	call	_PIN_MANAGER_Initialize	;wreg free
  3039                           
  3040                           ;mcc.c: 112: OSCILLATOR_Initialize();
  3041  0075D2  ECA7  F03B         	call	_OSCILLATOR_Initialize	;wreg free
  3042                           
  3043                           ; BSR set to: 14
  3044                           ;mcc.c: 113: SPI2_Initialize();
  3045  0075D6  ECDE  F03B         	call	_SPI2_Initialize	;wreg free
  3046                           
  3047                           ; BSR set to: 14
  3048                           ;mcc.c: 114: EXT_INT_Initialize();
  3049  0075DA  EC48  F034         	call	_EXT_INT_Initialize	;wreg free
  3050                           
  3051                           ; BSR set to: 14
  3052                           ;mcc.c: 115: TMR1_Initialize();
  3053  0075DE  EC45  F036         	call	_TMR1_Initialize	;wreg free
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;mcc.c: 116: LORAWAN_PlatformInit();
  3057  0075E2  EF2D  F03A         	goto	_LORAWAN_PlatformInit	;wreg free
  3058  0075E6                     __end_of_SYSTEM_Initialize:
  3059                           	opt stack 0
  3060                           tblptru	equ	0xFF8
  3061                           tblptrh	equ	0xFF7
  3062                           tblptrl	equ	0xFF6
  3063                           tablat	equ	0xFF5
  3064                           intcon	equ	0xFF2
  3065                           postinc0	equ	0xFEE
  3066                           wreg	equ	0xFE8
  3067                           postdec2	equ	0xFDD
  3068                           fsr2h	equ	0xFDA
  3069                           fsr2l	equ	0xFD9
  3070                           
  3071 ;; *************** function _TMR1_Initialize *****************
  3072 ;; Defined at:
  3073 ;;		line 63 in file "mcc_generated_files/tmr1.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;		None
  3076 ;; Auto vars:     Size  Location     Type
  3077 ;;		None
  3078 ;; Return value:  Size  Location     Type
  3079 ;;                  1    wreg      void 
  3080 ;; Registers used:
  3081 ;;		wreg, status,2, status,0, cstack
  3082 ;; Tracked objects:
  3083 ;;		On entry : F/E
  3084 ;;		On exit  : F/0
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3087 ;;      Params:         0       0       0       0       0       0       0       0       0
  3088 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3089 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3090 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3091 ;;Total ram usage:        2 bytes
  3092 ;; Hardware stack levels used:    1
  3093 ;; Hardware stack levels required when called:    8
  3094 ;; This function calls:
  3095 ;;		_TMR1_SetInterruptHandler
  3096 ;;		_TMR1_StartTimer
  3097 ;; This function is called by:
  3098 ;;		_SYSTEM_Initialize
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text4
  3103  006C8A                     __ptext4:
  3104                           	opt stack 0
  3105  006C8A                     _TMR1_Initialize:
  3106                           	opt stack 21
  3107                           
  3108                           ; BSR set to: 14
  3109                           ;tmr1.c: 68: T1CON = 0x34;
  3110                           
  3111                           ; BSR set to: 1
  3112                           ;incstack = 0
  3113  006C8A  0E34               	movlw	52
  3114  006C8C  6ECF               	movwf	4047,c	;volatile
  3115                           
  3116                           ; BSR set to: 14
  3117                           ;tmr1.c: 71: T1GCON = 0x00;
  3118  006C8E  6AD0               	clrf	4048,c	;volatile
  3119                           
  3120                           ; BSR set to: 14
  3121                           ;tmr1.c: 74: T1GATE = 0x00;
  3122  006C90  6AD1               	clrf	4049,c	;volatile
  3123                           
  3124                           ;tmr1.c: 77: T1CLK = 0x01;
  3125  006C92  0E01               	movlw	1
  3126  006C94  6ED2               	movwf	4050,c	;volatile
  3127                           
  3128                           ;tmr1.c: 80: TMR1H = 0x0B;
  3129  006C96  0E0B               	movlw	11
  3130  006C98  6ECE               	movwf	4046,c	;volatile
  3131                           
  3132                           ;tmr1.c: 83: TMR1L = 0xDC;
  3133  006C9A  0EDC               	movlw	220
  3134  006C9C  6ECD               	movwf	4045,c	;volatile
  3135                           
  3136                           ; BSR set to: 14
  3137                           ;tmr1.c: 86: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  3138  006C9E  50CD               	movf	4045,w,c	;volatile
  3139  006CA0  CFCE F066          	movff	4046,??_TMR1_Initialize	;volatile
  3140  006CA4  0100               	movlb	0	; () banked
  3141  006CA6  6B67               	clrf	(??_TMR1_Initialize+1)& (0+255),b
  3142  006CA8  C066  F067         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
  3143  006CAC  6B66               	clrf	??_TMR1_Initialize& (0+255),b
  3144  006CAE  1166               	iorwf	??_TMR1_Initialize& (0+255),w,b
  3145  006CB0  6E5E               	movwf	_timer1ReloadVal,c	;volatile
  3146  006CB2  5167               	movf	(??_TMR1_Initialize+1)& (0+255),w,b
  3147  006CB4  6E5F               	movwf	_timer1ReloadVal+1,c	;volatile
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;tmr1.c: 89: PIR5bits.TMR1IF = 0;
  3151  006CB6  010E               	movlb	14	; () banked
  3152  006CB8  9138               	bcf	56,0,b	;volatile
  3153                           
  3154                           ; BSR set to: 14
  3155                           ;tmr1.c: 92: PIE5bits.TMR1IE = 1;
  3156  006CBA  812E               	bsf	46,0,b	;volatile
  3157                           
  3158                           ; BSR set to: 14
  3159                           ;tmr1.c: 95: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  3160  006CBC  0EF8               	movlw	low _TMR1_DefaultInterruptHandler
  3161  006CBE  0100               	movlb	0	; () banked
  3162  006CC0  6F64               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  3163  006CC2  0E78               	movlw	high _TMR1_DefaultInterruptHandler
  3164  006CC4  6F65               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3165  006CC6  ECEF  F03B         	call	_TMR1_SetInterruptHandler	;wreg free
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;tmr1.c: 98: TMR1_StartTimer();
  3169  006CCA  EF6C  F03C         	goto	_TMR1_StartTimer	;wreg free
  3170  006CCE                     __end_of_TMR1_Initialize:
  3171                           	opt stack 0
  3172                           tblptru	equ	0xFF8
  3173                           tblptrh	equ	0xFF7
  3174                           tblptrl	equ	0xFF6
  3175                           tablat	equ	0xFF5
  3176                           intcon	equ	0xFF2
  3177                           postinc0	equ	0xFEE
  3178                           wreg	equ	0xFE8
  3179                           postdec2	equ	0xFDD
  3180                           fsr2h	equ	0xFDA
  3181                           fsr2l	equ	0xFD9
  3182                           
  3183 ;; *************** function _TMR1_StartTimer *****************
  3184 ;; Defined at:
  3185 ;;		line 101 in file "mcc_generated_files/tmr1.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		None
  3194 ;; Tracked objects:
  3195 ;;		On entry : F/0
  3196 ;;		On exit  : F/0
  3197 ;;		Unchanged: F/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3199 ;;      Params:         0       0       0       0       0       0       0       0       0
  3200 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3201 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3202 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3203 ;;Total ram usage:        0 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    7
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_TMR1_Initialize
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text5
  3214  0078D8                     __ptext5:
  3215                           	opt stack 0
  3216  0078D8                     _TMR1_StartTimer:
  3217                           	opt stack 21
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;tmr1.c: 104: T1CONbits.TMR1ON = 1;
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;incstack = 0
  3224  0078D8  80CF               	bsf	4047,0,c	;volatile
  3225                           
  3226                           ; BSR set to: 0
  3227  0078DA  0012               	return		;funcret
  3228  0078DC                     __end_of_TMR1_StartTimer:
  3229                           	opt stack 0
  3230                           tblptru	equ	0xFF8
  3231                           tblptrh	equ	0xFF7
  3232                           tblptrl	equ	0xFF6
  3233                           tablat	equ	0xFF5
  3234                           intcon	equ	0xFF2
  3235                           postinc0	equ	0xFEE
  3236                           wreg	equ	0xFE8
  3237                           postdec2	equ	0xFDD
  3238                           fsr2h	equ	0xFDA
  3239                           fsr2l	equ	0xFD9
  3240                           
  3241 ;; *************** function _SPI2_Initialize *****************
  3242 ;; Defined at:
  3243 ;;		line 63 in file "mcc_generated_files/spi2.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;		None
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;		None
  3248 ;; Return value:  Size  Location     Type
  3249 ;;                  1    wreg      void 
  3250 ;; Registers used:
  3251 ;;		wreg, status,2
  3252 ;; Tracked objects:
  3253 ;;		On entry : F/E
  3254 ;;		On exit  : F/E
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3257 ;;      Params:         0       0       0       0       0       0       0       0       0
  3258 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3259 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3260 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3261 ;;Total ram usage:        0 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    7
  3264 ;; This function calls:
  3265 ;;		Nothing
  3266 ;; This function is called by:
  3267 ;;		_SYSTEM_Initialize
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text6
  3272  0077BC                     __ptext6:
  3273                           	opt stack 0
  3274  0077BC                     _SPI2_Initialize:
  3275                           	opt stack 22
  3276                           
  3277                           ; BSR set to: 14
  3278                           ;spi2.c: 68: SSP2STAT = 0x40;
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;incstack = 0
  3282  0077BC  0E40               	movlw	64
  3283  0077BE  6FD8               	movwf	216,b	;volatile
  3284                           
  3285                           ;spi2.c: 71: SSP2CON1 = 0x20;
  3286  0077C0  0E20               	movlw	32
  3287  0077C2  6FD9               	movwf	217,b	;volatile
  3288                           
  3289                           ; BSR set to: 14
  3290                           ;spi2.c: 74: SSP2ADD = 0x00;
  3291  0077C4  6BD6               	clrf	214,b	;volatile
  3292                           
  3293                           ; BSR set to: 14
  3294  0077C6  0012               	return		;funcret
  3295  0077C8                     __end_of_SPI2_Initialize:
  3296                           	opt stack 0
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           intcon	equ	0xFF2
  3302                           postinc0	equ	0xFEE
  3303                           wreg	equ	0xFE8
  3304                           postdec2	equ	0xFDD
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           
  3308 ;; *************** function _PIN_MANAGER_Initialize *****************
  3309 ;; Defined at:
  3310 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;  state           1    6[BANK0 ] unsigned char 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      void 
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3324 ;;      Params:         0       0       0       0       0       0       0       0       0
  3325 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3326 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3327 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3328 ;;Total ram usage:        1 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    8
  3331 ;; This function calls:
  3332 ;;		_IOCBF4_SetInterruptHandler
  3333 ;; This function is called by:
  3334 ;;		_SYSTEM_Initialize
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text7
  3339  005044                     __ptext7:
  3340                           	opt stack 0
  3341  005044                     _PIN_MANAGER_Initialize:
  3342                           	opt stack 21
  3343                           
  3344                           ;pin_manager.c: 57: LATE = 0x00;
  3345                           
  3346                           ; BSR set to: 14
  3347                           ;incstack = 0
  3348  005044  6A7D               	clrf	3965,c	;volatile
  3349                           
  3350                           ;pin_manager.c: 58: LATD = 0x00;
  3351  005046  6A7C               	clrf	3964,c	;volatile
  3352                           
  3353                           ;pin_manager.c: 59: LATA = 0x00;
  3354  005048  6A79               	clrf	3961,c	;volatile
  3355                           
  3356                           ;pin_manager.c: 60: LATF = 0x00;
  3357  00504A  6A7E               	clrf	3966,c	;volatile
  3358                           
  3359                           ;pin_manager.c: 61: LATB = 0x00;
  3360  00504C  6A7A               	clrf	3962,c	;volatile
  3361                           
  3362                           ;pin_manager.c: 62: LATG = 0x00;
  3363  00504E  6A7F               	clrf	3967,c	;volatile
  3364                           
  3365                           ;pin_manager.c: 63: LATC = 0x00;
  3366  005050  6A7B               	clrf	3963,c	;volatile
  3367                           
  3368                           ;pin_manager.c: 64: LATH = 0x00;
  3369  005052  6A80               	clrf	3968,c	;volatile
  3370                           
  3371                           ;pin_manager.c: 69: TRISE = 0xFF;
  3372  005054  6885               	setf	3973,c	;volatile
  3373                           
  3374                           ;pin_manager.c: 70: TRISF = 0xFF;
  3375  005056  6886               	setf	3974,c	;volatile
  3376                           
  3377                           ;pin_manager.c: 71: TRISA = 0xFF;
  3378  005058  6881               	setf	3969,c	;volatile
  3379                           
  3380                           ;pin_manager.c: 72: TRISG = 0xDF;
  3381  00505A  0EDF               	movlw	223
  3382  00505C  6E87               	movwf	3975,c	;volatile
  3383                           
  3384                           ;pin_manager.c: 73: TRISB = 0xFF;
  3385  00505E  6882               	setf	3970,c	;volatile
  3386                           
  3387                           ;pin_manager.c: 74: TRISH = 0x0F;
  3388  005060  0E0F               	movlw	15
  3389  005062  6E88               	movwf	3976,c	;volatile
  3390                           
  3391                           ;pin_manager.c: 75: TRISC = 0xF9;
  3392  005064  0EF9               	movlw	249
  3393  005066  6E83               	movwf	3971,c	;volatile
  3394                           
  3395                           ;pin_manager.c: 76: TRISD = 0x9F;
  3396  005068  0E9F               	movlw	159
  3397  00506A  6E84               	movwf	3972,c	;volatile
  3398                           
  3399                           ;pin_manager.c: 81: ANSELB = 0xE0;
  3400  00506C  0EE0               	movlw	224
  3401  00506E  010E               	movlb	14	; () banked
  3402  005070  6F9A               	movwf	154,b	;volatile
  3403                           
  3404                           ;pin_manager.c: 82: ANSELD = 0x7F;
  3405  005072  0E7F               	movlw	127
  3406  005074  6FA7               	movwf	167,b	;volatile
  3407                           
  3408                           ; BSR set to: 14
  3409                           ;pin_manager.c: 83: ANSELE = 0xFF;
  3410  005076  69AF               	setf	175,b	;volatile
  3411                           
  3412                           ; BSR set to: 14
  3413                           ;pin_manager.c: 84: ANSELG = 0xFF;
  3414  005078  69BC               	setf	188,b	;volatile
  3415                           
  3416                           ; BSR set to: 14
  3417                           ;pin_manager.c: 85: ANSELF = 0xFF;
  3418  00507A  69B4               	setf	180,b	;volatile
  3419                           
  3420                           ; BSR set to: 14
  3421                           ;pin_manager.c: 86: ANSELA = 0xFF;
  3422  00507C  6992               	setf	146,b	;volatile
  3423                           
  3424                           ; BSR set to: 14
  3425                           ;pin_manager.c: 91: WPUD = 0xFF;
  3426  00507E  69A6               	setf	166,b	;volatile
  3427                           
  3428                           ; BSR set to: 14
  3429                           ;pin_manager.c: 92: WPUF = 0xFF;
  3430  005080  69B3               	setf	179,b	;volatile
  3431                           
  3432                           ; BSR set to: 14
  3433                           ;pin_manager.c: 93: WPUE = 0xFF;
  3434  005082  69AE               	setf	174,b	;volatile
  3435                           
  3436                           ; BSR set to: 14
  3437                           ;pin_manager.c: 94: WPUB = 0xFF;
  3438  005084  6999               	setf	153,b	;volatile
  3439                           
  3440                           ; BSR set to: 14
  3441                           ;pin_manager.c: 95: WPUG = 0xFF;
  3442  005086  69BB               	setf	187,b	;volatile
  3443                           
  3444                           ; BSR set to: 14
  3445                           ;pin_manager.c: 96: WPUA = 0xFF;
  3446  005088  6991               	setf	145,b	;volatile
  3447                           
  3448                           ; BSR set to: 14
  3449                           ;pin_manager.c: 97: WPUC = 0xFF;
  3450  00508A  69A1               	setf	161,b	;volatile
  3451                           
  3452                           ;pin_manager.c: 98: WPUH = 0x0F;
  3453  00508C  0E0F               	movlw	15
  3454  00508E  6FC0               	movwf	192,b	;volatile
  3455                           
  3456                           ; BSR set to: 14
  3457                           ;pin_manager.c: 103: ODCONE = 0x00;
  3458  005090  6BAD               	clrf	173,b	;volatile
  3459                           
  3460                           ; BSR set to: 14
  3461                           ;pin_manager.c: 104: ODCONF = 0x00;
  3462  005092  6BB2               	clrf	178,b	;volatile
  3463                           
  3464                           ; BSR set to: 14
  3465                           ;pin_manager.c: 105: ODCONA = 0x00;
  3466  005094  6B90               	clrf	144,b	;volatile
  3467                           
  3468                           ; BSR set to: 14
  3469                           ;pin_manager.c: 106: ODCONG = 0x00;
  3470  005096  6BBA               	clrf	186,b	;volatile
  3471                           
  3472                           ; BSR set to: 14
  3473                           ;pin_manager.c: 107: ODCONB = 0x00;
  3474  005098  6B98               	clrf	152,b	;volatile
  3475                           
  3476                           ; BSR set to: 14
  3477                           ;pin_manager.c: 108: ODCONH = 0x00;
  3478  00509A  6BBF               	clrf	191,b	;volatile
  3479                           
  3480                           ; BSR set to: 14
  3481                           ;pin_manager.c: 109: ODCONC = 0x00;
  3482  00509C  6BA0               	clrf	160,b	;volatile
  3483                           
  3484                           ; BSR set to: 14
  3485                           ;pin_manager.c: 110: ODCOND = 0x00;
  3486  00509E  6BA5               	clrf	165,b	;volatile
  3487                           
  3488                           ; BSR set to: 14
  3489                           ;pin_manager.c: 117: IOCBFbits.IOCBF4 = 0;
  3490  0050A0  9993               	bcf	147,4,b	;volatile
  3491                           
  3492                           ; BSR set to: 14
  3493                           ;pin_manager.c: 119: IOCBNbits.IOCBN4 = 1;
  3494  0050A2  8994               	bsf	148,4,b	;volatile
  3495                           
  3496                           ; BSR set to: 14
  3497                           ;pin_manager.c: 121: IOCBPbits.IOCBP4 = 1;
  3498  0050A4  8995               	bsf	149,4,b	;volatile
  3499                           
  3500                           ; BSR set to: 14
  3501                           ;pin_manager.c: 124: IOCBF4_SetInterruptHandler(IOCBF4_DefaultInterruptHandler);
  3502  0050A6  0EFA               	movlw	low _IOCBF4_DefaultInterruptHandler
  3503  0050A8  0100               	movlb	0	; () banked
  3504  0050AA  6F64               	movwf	IOCBF4_SetInterruptHandler@InterruptHandler& (0+255),b
  3505  0050AC  0E78               	movlw	high _IOCBF4_DefaultInterruptHandler
  3506  0050AE  6F65               	movwf	(IOCBF4_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3507  0050B0  ECEA  F03B         	call	_IOCBF4_SetInterruptHandler	;wreg free
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;pin_manager.c: 127: PIE0bits.IOCIE = 1;
  3511  0050B4  010E               	movlb	14	; () banked
  3512  0050B6  8929               	bsf	41,4,b	;volatile
  3513                           
  3514                           ; BSR set to: 14
  3515                           ;pin_manager.c: 130: bool state = GIE;
  3516  0050B8  0E00               	movlw	0
  3517  0050BA  BEF2               	btfsc	intcon,7,c	;volatile
  3518  0050BC  0E01               	movlw	1
  3519  0050BE  0100               	movlb	0	; () banked
  3520  0050C0  6F66               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;pin_manager.c: 131: GIE = 0;
  3524  0050C2  9EF2               	bcf	intcon,7,c	;volatile
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;pin_manager.c: 132: PPSLOCK = 0x55;
  3528  0050C4  0E55               	movlw	85
  3529  0050C6  010D               	movlb	13	; () banked
  3530  0050C8  6FEF               	movwf	239,b	;volatile
  3531                           
  3532                           ; BSR set to: 13
  3533                           ;pin_manager.c: 133: PPSLOCK = 0xAA;
  3534  0050CA  0EAA               	movlw	170
  3535  0050CC  6FEF               	movwf	239,b	;volatile
  3536                           
  3537                           ; BSR set to: 13
  3538                           ;pin_manager.c: 134: PPSLOCKbits.PPSLOCKED = 0x00;
  3539  0050CE  91EF               	bcf	239,0,b	;volatile
  3540                           
  3541                           ; BSR set to: 13
  3542                           ;pin_manager.c: 136: INT1PPSbits.INT1PPS = 0x09;
  3543  0050D0  51F1               	movf	241,w,b	;volatile
  3544  0050D2  0BC0               	andlw	-64
  3545  0050D4  0909               	iorlw	9
  3546  0050D6  6FF1               	movwf	241,b	;volatile
  3547                           
  3548                           ; BSR set to: 13
  3549                           ;pin_manager.c: 137: INT3PPSbits.INT3PPS = 0x0B;
  3550  0050D8  51F3               	movf	243,w,b	;volatile
  3551  0050DA  0BC0               	andlw	-64
  3552  0050DC  090B               	iorlw	11
  3553  0050DE  6FF3               	movwf	243,b	;volatile
  3554                           
  3555                           ; BSR set to: 13
  3556                           ;pin_manager.c: 138: RD5PPS = 0x1C;
  3557  0050E0  0E1C               	movlw	28
  3558  0050E2  010E               	movlb	14	; () banked
  3559  0050E4  6F6F               	movwf	111,b	;volatile
  3560                           
  3561                           ; BSR set to: 14
  3562                           ;pin_manager.c: 139: INT0PPSbits.INT0PPS = 0x08;
  3563  0050E6  010D               	movlb	13	; () banked
  3564  0050E8  51F0               	movf	240,w,b	;volatile
  3565  0050EA  0BC0               	andlw	-64
  3566  0050EC  0908               	iorlw	8
  3567  0050EE  6FF0               	movwf	240,b	;volatile
  3568                           
  3569                           ; BSR set to: 13
  3570                           ;pin_manager.c: 140: INT2PPSbits.INT2PPS = 0x0A;
  3571  0050F0  51F2               	movf	242,w,b	;volatile
  3572  0050F2  0BC0               	andlw	-64
  3573  0050F4  090A               	iorlw	10
  3574  0050F6  6FF2               	movwf	242,b	;volatile
  3575                           
  3576                           ; BSR set to: 13
  3577                           ;pin_manager.c: 141: RD6PPS = 0x1B;
  3578  0050F8  0E1B               	movlw	27
  3579  0050FA  010E               	movlb	14	; () banked
  3580  0050FC  6F70               	movwf	112,b	;volatile
  3581                           
  3582                           ; BSR set to: 14
  3583                           ;pin_manager.c: 142: SSP2DATPPSbits.SSP2DATPPS = 0x1F;
  3584  0050FE  511D               	movf	29,w,b	;volatile
  3585  005100  0BC0               	andlw	-64
  3586  005102  091F               	iorlw	31
  3587  005104  6F1D               	movwf	29,b	;volatile
  3588                           
  3589                           ; BSR set to: 14
  3590                           ;pin_manager.c: 144: PPSLOCK = 0x55;
  3591  005106  0E55               	movlw	85
  3592  005108  010D               	movlb	13	; () banked
  3593  00510A  6FEF               	movwf	239,b	;volatile
  3594                           
  3595                           ; BSR set to: 13
  3596                           ;pin_manager.c: 145: PPSLOCK = 0xAA;
  3597  00510C  0EAA               	movlw	170
  3598  00510E  6FEF               	movwf	239,b	;volatile
  3599                           
  3600                           ; BSR set to: 13
  3601                           ;pin_manager.c: 146: PPSLOCKbits.PPSLOCKED = 0x01;
  3602  005110  81EF               	bsf	239,0,b	;volatile
  3603                           
  3604                           ; BSR set to: 13
  3605                           ;pin_manager.c: 148: GIE = state;
  3606  005112  0100               	movlb	0	; () banked
  3607  005114  A166               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  3608  005116  D002               	goto	u18190
  3609  005118  8EF2               	bsf	intcon,7,c	;volatile
  3610  00511A  0CAA               	retlw	170
  3611  00511C                     u18190:
  3612  00511C  9EF2               	bcf	intcon,7,c	;volatile
  3613  00511E  0012               	return		;funcret
  3614  005120                     __end_of_PIN_MANAGER_Initialize:
  3615                           	opt stack 0
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           intcon	equ	0xFF2
  3621                           postinc0	equ	0xFEE
  3622                           wreg	equ	0xFE8
  3623                           postdec2	equ	0xFDD
  3624                           fsr2h	equ	0xFDA
  3625                           fsr2l	equ	0xFD9
  3626                           
  3627 ;; *************** function _IOCBF4_SetInterruptHandler *****************
  3628 ;; Defined at:
  3629 ;;		line 180 in file "mcc_generated_files/pin_manager.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  3632 ;;		 -> IOCBF4_DefaultInterruptHandler(1), 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;		None
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  1    wreg      void 
  3637 ;; Registers used:
  3638 ;;		wreg, status,2, status,0
  3639 ;; Tracked objects:
  3640 ;;		On entry : F/0
  3641 ;;		On exit  : F/0
  3642 ;;		Unchanged: F/0
  3643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3644 ;;      Params:         0       2       0       0       0       0       0       0       0
  3645 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3646 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3647 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3648 ;;Total ram usage:        2 bytes
  3649 ;; Hardware stack levels used:    1
  3650 ;; Hardware stack levels required when called:    7
  3651 ;; This function calls:
  3652 ;;		Nothing
  3653 ;; This function is called by:
  3654 ;;		_PIN_MANAGER_Initialize
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text8
  3659  0077D4                     __ptext8:
  3660                           	opt stack 0
  3661  0077D4                     _IOCBF4_SetInterruptHandler:
  3662                           	opt stack 21
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;pin_manager.c: 181: IOCBF4_InterruptHandler = InterruptHandler;
  3666                           
  3667                           ;incstack = 0
  3668  0077D4  C064  F1F5         	movff	IOCBF4_SetInterruptHandler@InterruptHandler,_IOCBF4_InterruptHandler
  3669  0077D8  C065  F1F6         	movff	IOCBF4_SetInterruptHandler@InterruptHandler+1,_IOCBF4_InterruptHandler+1
  3670                           
  3671                           ; BSR set to: 0
  3672  0077DC  0012               	return		;funcret
  3673  0077DE                     __end_of_IOCBF4_SetInterruptHandler:
  3674                           	opt stack 0
  3675                           tblptru	equ	0xFF8
  3676                           tblptrh	equ	0xFF7
  3677                           tblptrl	equ	0xFF6
  3678                           tablat	equ	0xFF5
  3679                           intcon	equ	0xFF2
  3680                           postinc0	equ	0xFEE
  3681                           wreg	equ	0xFE8
  3682                           postdec2	equ	0xFDD
  3683                           fsr2h	equ	0xFDA
  3684                           fsr2l	equ	0xFD9
  3685                           
  3686 ;; *************** function _OSCILLATOR_Initialize *****************
  3687 ;; Defined at:
  3688 ;;		line 119 in file "mcc_generated_files/mcc.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;		None
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      void 
  3695 ;; Registers used:
  3696 ;;		wreg, status,2
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : F/E
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3702 ;;      Params:         0       0       0       0       0       0       0       0       0
  3703 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3704 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3705 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3706 ;;Total ram usage:        0 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    7
  3709 ;; This function calls:
  3710 ;;		Nothing
  3711 ;; This function is called by:
  3712 ;;		_SYSTEM_Initialize
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           	psect	text9
  3717  00774E                     __ptext9:
  3718                           	opt stack 0
  3719  00774E                     _OSCILLATOR_Initialize:
  3720                           	opt stack 22
  3721                           
  3722                           ;mcc.c: 122: OSCCON1 = 0x60;
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;incstack = 0
  3726  00774E  0E60               	movlw	96
  3727  007750  010E               	movlb	14	; () banked
  3728  007752  6F43               	movwf	67,b	;volatile
  3729                           
  3730                           ; BSR set to: 14
  3731                           ;mcc.c: 124: OSCCON3 = 0x00;
  3732  007754  6B45               	clrf	69,b	;volatile
  3733                           
  3734                           ; BSR set to: 14
  3735                           ;mcc.c: 126: OSCEN = 0x00;
  3736  007756  6B47               	clrf	71,b	;volatile
  3737                           
  3738                           ;mcc.c: 128: OSCFRQ = 0x05;
  3739  007758  0E05               	movlw	5
  3740  00775A  6F49               	movwf	73,b	;volatile
  3741                           
  3742                           ; BSR set to: 14
  3743                           ;mcc.c: 130: OSCTUNE = 0x00;
  3744  00775C  6B48               	clrf	72,b	;volatile
  3745                           
  3746                           ; BSR set to: 14
  3747  00775E  0012               	return		;funcret
  3748  007760                     __end_of_OSCILLATOR_Initialize:
  3749                           	opt stack 0
  3750                           tblptru	equ	0xFF8
  3751                           tblptrh	equ	0xFF7
  3752                           tblptrl	equ	0xFF6
  3753                           tablat	equ	0xFF5
  3754                           intcon	equ	0xFF2
  3755                           postinc0	equ	0xFEE
  3756                           wreg	equ	0xFE8
  3757                           postdec2	equ	0xFDD
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           
  3761 ;; *************** function _LORAWAN_PlatformInit *****************
  3762 ;; Defined at:
  3763 ;;		line 72 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;		None
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;		None
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  1    wreg      void 
  3770 ;; Registers used:
  3771 ;;		wreg, status,2, status,0, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : F/0
  3774 ;;		On exit  : F/1
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3777 ;;      Params:         0       0       0       0       0       0       0       0       0
  3778 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3779 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3780 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3781 ;;Total ram usage:        0 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:    9
  3784 ;; This function calls:
  3785 ;;		_DIO0_ISR_Lora_Init
  3786 ;;		_DIO1_ISR_Lora_Init
  3787 ;;		_DIO2_ISR_Lora_Init
  3788 ;;		_DIO3_ISR_Lora_Init
  3789 ;;		_DIO4_ISR_Lora_Init
  3790 ;;		_DIO5_ISR_Lora_Init
  3791 ;;		_SystemTimerInit
  3792 ;;		_TMR_ISR_Lora_Init
  3793 ;; This function is called by:
  3794 ;;		_SYSTEM_Initialize
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           	psect	text10
  3799  00745A                     __ptext10:
  3800                           	opt stack 0
  3801  00745A                     _LORAWAN_PlatformInit:
  3802                           	opt stack 20
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;lorawan_init.c: 74: TMR_ISR_Lora_Init();
  3806                           
  3807                           ; BSR set to: 14
  3808                           ;incstack = 0
  3809  00745A  ECE4  F03B         	call	_TMR_ISR_Lora_Init	;wreg free
  3810                           
  3811                           ;lorawan_init.c: 75: DIO0_ISR_Lora_Init();
  3812  00745E  EC51  F03C         	call	_DIO0_ISR_Lora_Init	;wreg free
  3813                           
  3814                           ;lorawan_init.c: 76: DIO1_ISR_Lora_Init();
  3815  007462  EC4E  F03C         	call	_DIO1_ISR_Lora_Init	;wreg free
  3816                           
  3817                           ;lorawan_init.c: 77: DIO2_ISR_Lora_Init();
  3818  007466  EC4B  F03C         	call	_DIO2_ISR_Lora_Init	;wreg free
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;lorawan_init.c: 78: DIO3_ISR_Lora_Init();
  3822  00746A  EC79  F03C         	call	_DIO3_ISR_Lora_Init	;wreg free
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;lorawan_init.c: 79: DIO4_ISR_Lora_Init();
  3826  00746E  EC78  F03C         	call	_DIO4_ISR_Lora_Init	;wreg free
  3827                           
  3828                           ;lorawan_init.c: 80: DIO5_ISR_Lora_Init();
  3829  007472  EC48  F03C         	call	_DIO5_ISR_Lora_Init	;wreg free
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;lorawan_init.c: 81: SystemTimerInit();
  3833  007476  EF45  F03C         	goto	_SystemTimerInit	;wreg free
  3834  00747A                     __end_of_LORAWAN_PlatformInit:
  3835                           	opt stack 0
  3836                           tblptru	equ	0xFF8
  3837                           tblptrh	equ	0xFF7
  3838                           tblptrl	equ	0xFF6
  3839                           tablat	equ	0xFF5
  3840                           intcon	equ	0xFF2
  3841                           postinc0	equ	0xFEE
  3842                           wreg	equ	0xFE8
  3843                           postdec2	equ	0xFDD
  3844                           fsr2h	equ	0xFDA
  3845                           fsr2l	equ	0xFD9
  3846                           
  3847 ;; *************** function _TMR_ISR_Lora_Init *****************
  3848 ;; Defined at:
  3849 ;;		line 54 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;		None
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;		None
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      void 
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : F/0
  3860 ;;		On exit  : F/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3863 ;;      Params:         0       0       0       0       0       0       0       0       0
  3864 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3866 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3867 ;;Total ram usage:        0 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; Hardware stack levels required when called:    8
  3870 ;; This function calls:
  3871 ;;		_TMR1_SetInterruptHandler
  3872 ;; This function is called by:
  3873 ;;		_LORAWAN_PlatformInit
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text11
  3878  0077C8                     __ptext11:
  3879                           	opt stack 0
  3880  0077C8                     _TMR_ISR_Lora_Init:
  3881                           	opt stack 20
  3882                           
  3883                           ; BSR set to: 0
  3884                           ;tmr_lora_addons.c: 56: TMR1_SetInterruptHandler(TMR_ISR_lora);
  3885                           
  3886                           ; BSR set to: 1
  3887                           ;incstack = 0
  3888  0077C8  0E1C               	movlw	low _TMR_ISR_lora
  3889  0077CA  6F64               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  3890  0077CC  0E6B               	movlw	high _TMR_ISR_lora
  3891  0077CE  6F65               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3892  0077D0  EFEF  F03B         	goto	_TMR1_SetInterruptHandler	;wreg free
  3893  0077D4                     __end_of_TMR_ISR_Lora_Init:
  3894                           	opt stack 0
  3895                           tblptru	equ	0xFF8
  3896                           tblptrh	equ	0xFF7
  3897                           tblptrl	equ	0xFF6
  3898                           tablat	equ	0xFF5
  3899                           intcon	equ	0xFF2
  3900                           postinc0	equ	0xFEE
  3901                           wreg	equ	0xFE8
  3902                           postdec2	equ	0xFDD
  3903                           fsr2h	equ	0xFDA
  3904                           fsr2l	equ	0xFD9
  3905                           
  3906 ;; *************** function _TMR1_SetInterruptHandler *****************
  3907 ;; Defined at:
  3908 ;;		line 191 in file "mcc_generated_files/tmr1.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  3911 ;;		 -> TMR1_DefaultInterruptHandler(1), TMR_ISR_lora(1), 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;		None
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  1    wreg      void 
  3916 ;; Registers used:
  3917 ;;		wreg, status,2, status,0
  3918 ;; Tracked objects:
  3919 ;;		On entry : F/0
  3920 ;;		On exit  : F/0
  3921 ;;		Unchanged: F/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3923 ;;      Params:         0       2       0       0       0       0       0       0       0
  3924 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3925 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3926 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3927 ;;Total ram usage:        2 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:    7
  3930 ;; This function calls:
  3931 ;;		Nothing
  3932 ;; This function is called by:
  3933 ;;		_TMR_ISR_Lora_Init
  3934 ;;		_TMR1_Initialize
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           	psect	text12
  3939  0077DE                     __ptext12:
  3940                           	opt stack 0
  3941  0077DE                     _TMR1_SetInterruptHandler:
  3942                           	opt stack 21
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;tmr1.c: 192: TMR1_InterruptHandler = InterruptHandler;
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;incstack = 0
  3949  0077DE  C064  F1F7         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  3950  0077E2  C065  F1F8         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  3951                           
  3952                           ; BSR set to: 0
  3953  0077E6  0012               	return		;funcret
  3954  0077E8                     __end_of_TMR1_SetInterruptHandler:
  3955                           	opt stack 0
  3956                           tblptru	equ	0xFF8
  3957                           tblptrh	equ	0xFF7
  3958                           tblptrl	equ	0xFF6
  3959                           tablat	equ	0xFF5
  3960                           intcon	equ	0xFF2
  3961                           postinc0	equ	0xFEE
  3962                           wreg	equ	0xFE8
  3963                           postdec2	equ	0xFDD
  3964                           fsr2h	equ	0xFDA
  3965                           fsr2l	equ	0xFD9
  3966                           
  3967 ;; *************** function _SystemTimerInit *****************
  3968 ;; Defined at:
  3969 ;;		line 135 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  1    wreg      void 
  3976 ;; Registers used:
  3977 ;;		None
  3978 ;; Tracked objects:
  3979 ;;		On entry : F/0
  3980 ;;		On exit  : F/1
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3983 ;;      Params:         0       0       0       0       0       0       0       0       0
  3984 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3986 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3987 ;;Total ram usage:        0 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    7
  3990 ;; This function calls:
  3991 ;;		Nothing
  3992 ;; This function is called by:
  3993 ;;		_LORAWAN_PlatformInit
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           	psect	text13
  3998  00788A                     __ptext13:
  3999                           	opt stack 0
  4000  00788A                     _SystemTimerInit:
  4001                           	opt stack 21
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;sw_timer.c: 137: allocatedTimers = 0;
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;incstack = 0
  4008  00788A  0101               	movlb	1	; () banked
  4009  00788C  6B73               	clrf	_allocatedTimers& (0+255),b	;volatile
  4010                           
  4011                           ; BSR set to: 1
  4012  00788E  0012               	return		;funcret
  4013  007890                     __end_of_SystemTimerInit:
  4014                           	opt stack 0
  4015                           tblptru	equ	0xFF8
  4016                           tblptrh	equ	0xFF7
  4017                           tblptrl	equ	0xFF6
  4018                           tablat	equ	0xFF5
  4019                           intcon	equ	0xFF2
  4020                           postinc0	equ	0xFEE
  4021                           wreg	equ	0xFE8
  4022                           postdec2	equ	0xFDD
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           
  4026 ;; *************** function _DIO5_ISR_Lora_Init *****************
  4027 ;; Defined at:
  4028 ;;		line 67 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;		None
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;		None
  4033 ;; Return value:  Size  Location     Type
  4034 ;;                  1    wreg      void 
  4035 ;; Registers used:
  4036 ;;		wreg, status,2, status,0, cstack
  4037 ;; Tracked objects:
  4038 ;;		On entry : F/0
  4039 ;;		On exit  : F/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4042 ;;      Params:         0       0       0       0       0       0       0       0       0
  4043 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4044 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4045 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4046 ;;Total ram usage:        0 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; Hardware stack levels required when called:    8
  4049 ;; This function calls:
  4050 ;;		_INT0_SetInterruptHandler
  4051 ;; This function is called by:
  4052 ;;		_LORAWAN_PlatformInit
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text14
  4057  007890                     __ptext14:
  4058                           	opt stack 0
  4059  007890                     _DIO5_ISR_Lora_Init:
  4060                           	opt stack 20
  4061                           
  4062                           ; BSR set to: 0
  4063                           ;lorawan_init.c: 69: INT0_SetInterruptHandler(DIO5_ISR_Lora);
  4064                           
  4065                           ; BSR set to: 1
  4066                           ;incstack = 0
  4067  007890  6B64               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  4068  007892  6B65               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4069  007894  0C00               	retlw	0	;wreg free
  4070  007896                     __end_of_DIO5_ISR_Lora_Init:
  4071                           	opt stack 0
  4072                           tblptru	equ	0xFF8
  4073                           tblptrh	equ	0xFF7
  4074                           tblptrl	equ	0xFF6
  4075                           tablat	equ	0xFF5
  4076                           intcon	equ	0xFF2
  4077                           postinc0	equ	0xFEE
  4078                           wreg	equ	0xFE8
  4079                           postdec2	equ	0xFDD
  4080                           fsr2h	equ	0xFDA
  4081                           fsr2l	equ	0xFD9
  4082                           
  4083 ;; *************** function _DIO4_ISR_Lora_Init *****************
  4084 ;; Defined at:
  4085 ;;		line 63 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;		None
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;		None
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      void 
  4092 ;; Registers used:
  4093 ;;		None
  4094 ;; Tracked objects:
  4095 ;;		On entry : F/0
  4096 ;;		On exit  : F/0
  4097 ;;		Unchanged: F/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4099 ;;      Params:         0       0       0       0       0       0       0       0       0
  4100 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4102 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4103 ;;Total ram usage:        0 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    7
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_LORAWAN_PlatformInit
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text15
  4114  0078F0                     __ptext15:
  4115                           	opt stack 0
  4116  0078F0                     _DIO4_ISR_Lora_Init:
  4117                           	opt stack 21
  4118                           
  4119                           ; BSR set to: 0
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;incstack = 0
  4123  0078F0  0012               	return		;funcret
  4124  0078F2                     __end_of_DIO4_ISR_Lora_Init:
  4125                           	opt stack 0
  4126                           tblptru	equ	0xFF8
  4127                           tblptrh	equ	0xFF7
  4128                           tblptrl	equ	0xFF6
  4129                           tablat	equ	0xFF5
  4130                           intcon	equ	0xFF2
  4131                           postinc0	equ	0xFEE
  4132                           wreg	equ	0xFE8
  4133                           postdec2	equ	0xFDD
  4134                           fsr2h	equ	0xFDA
  4135                           fsr2l	equ	0xFD9
  4136                           
  4137 ;; *************** function _DIO3_ISR_Lora_Init *****************
  4138 ;; Defined at:
  4139 ;;		line 59 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4140 ;; Parameters:    Size  Location     Type
  4141 ;;		None
  4142 ;; Auto vars:     Size  Location     Type
  4143 ;;		None
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      void 
  4146 ;; Registers used:
  4147 ;;		None
  4148 ;; Tracked objects:
  4149 ;;		On entry : F/0
  4150 ;;		On exit  : F/0
  4151 ;;		Unchanged: F/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4153 ;;      Params:         0       0       0       0       0       0       0       0       0
  4154 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4155 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4156 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4157 ;;Total ram usage:        0 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    7
  4160 ;; This function calls:
  4161 ;;		Nothing
  4162 ;; This function is called by:
  4163 ;;		_LORAWAN_PlatformInit
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text16
  4168  0078F2                     __ptext16:
  4169                           	opt stack 0
  4170  0078F2                     _DIO3_ISR_Lora_Init:
  4171                           	opt stack 21
  4172                           
  4173                           ; BSR set to: 0
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;incstack = 0
  4177  0078F2  0012               	return		;funcret
  4178  0078F4                     __end_of_DIO3_ISR_Lora_Init:
  4179                           	opt stack 0
  4180                           tblptru	equ	0xFF8
  4181                           tblptrh	equ	0xFF7
  4182                           tblptrl	equ	0xFF6
  4183                           tablat	equ	0xFF5
  4184                           intcon	equ	0xFF2
  4185                           postinc0	equ	0xFEE
  4186                           wreg	equ	0xFE8
  4187                           postdec2	equ	0xFDD
  4188                           fsr2h	equ	0xFDA
  4189                           fsr2l	equ	0xFD9
  4190                           
  4191 ;; *************** function _DIO2_ISR_Lora_Init *****************
  4192 ;; Defined at:
  4193 ;;		line 54 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : F/0
  4204 ;;		On exit  : F/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4210 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4211 ;;Total ram usage:        0 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    8
  4214 ;; This function calls:
  4215 ;;		_INT0_SetInterruptHandler
  4216 ;; This function is called by:
  4217 ;;		_LORAWAN_PlatformInit
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text17
  4222  007896                     __ptext17:
  4223                           	opt stack 0
  4224  007896                     _DIO2_ISR_Lora_Init:
  4225                           	opt stack 20
  4226                           
  4227                           ; BSR set to: 0
  4228                           ;lorawan_init.c: 56: INT0_SetInterruptHandler(DIO2_ISR_Lora);
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;incstack = 0
  4232  007896  6B64               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  4233  007898  6B65               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4234  00789A  0C00               	retlw	0	;wreg free
  4235  00789C                     __end_of_DIO2_ISR_Lora_Init:
  4236                           	opt stack 0
  4237                           tblptru	equ	0xFF8
  4238                           tblptrh	equ	0xFF7
  4239                           tblptrl	equ	0xFF6
  4240                           tablat	equ	0xFF5
  4241                           intcon	equ	0xFF2
  4242                           postinc0	equ	0xFEE
  4243                           wreg	equ	0xFE8
  4244                           postdec2	equ	0xFDD
  4245                           fsr2h	equ	0xFDA
  4246                           fsr2l	equ	0xFD9
  4247                           
  4248 ;; *************** function _DIO1_ISR_Lora_Init *****************
  4249 ;; Defined at:
  4250 ;;		line 49 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;		None
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;		None
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      void 
  4257 ;; Registers used:
  4258 ;;		wreg, status,2, status,0, cstack
  4259 ;; Tracked objects:
  4260 ;;		On entry : F/0
  4261 ;;		On exit  : F/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4264 ;;      Params:         0       0       0       0       0       0       0       0       0
  4265 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4266 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4267 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4268 ;;Total ram usage:        0 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    8
  4271 ;; This function calls:
  4272 ;;		_INT0_SetInterruptHandler
  4273 ;; This function is called by:
  4274 ;;		_LORAWAN_PlatformInit
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           	psect	text18
  4279  00789C                     __ptext18:
  4280                           	opt stack 0
  4281  00789C                     _DIO1_ISR_Lora_Init:
  4282                           	opt stack 20
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;lorawan_init.c: 51: INT0_SetInterruptHandler(DIO1_ISR_Lora);
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;incstack = 0
  4289  00789C  6B64               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  4290  00789E  6B65               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4291  0078A0  0C00               	retlw	0	;wreg free
  4292  0078A2                     __end_of_DIO1_ISR_Lora_Init:
  4293                           	opt stack 0
  4294                           tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           intcon	equ	0xFF2
  4299                           postinc0	equ	0xFEE
  4300                           wreg	equ	0xFE8
  4301                           postdec2	equ	0xFDD
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           
  4305 ;; *************** function _DIO0_ISR_Lora_Init *****************
  4306 ;; Defined at:
  4307 ;;		line 44 in file "mcc_generated_files/LoRaWAN/lorawan_init.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;		None
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;		None
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  1    wreg      void 
  4314 ;; Registers used:
  4315 ;;		wreg, status,2, status,0, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : F/0
  4318 ;;		On exit  : F/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4321 ;;      Params:         0       0       0       0       0       0       0       0       0
  4322 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4323 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4324 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4325 ;;Total ram usage:        0 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    8
  4328 ;; This function calls:
  4329 ;;		_INT0_SetInterruptHandler
  4330 ;; This function is called by:
  4331 ;;		_LORAWAN_PlatformInit
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text19
  4336  0078A2                     __ptext19:
  4337                           	opt stack 0
  4338  0078A2                     _DIO0_ISR_Lora_Init:
  4339                           	opt stack 20
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;lorawan_init.c: 46: INT0_SetInterruptHandler(DIO0_ISR_Lora);
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;incstack = 0
  4346  0078A2  6B64               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  4347  0078A4  6B65               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4348  0078A6  0C00               	retlw	0	;wreg free
  4349  0078A8                     __end_of_DIO0_ISR_Lora_Init:
  4350                           	opt stack 0
  4351                           tblptru	equ	0xFF8
  4352                           tblptrh	equ	0xFF7
  4353                           tblptrl	equ	0xFF6
  4354                           tablat	equ	0xFF5
  4355                           intcon	equ	0xFF2
  4356                           postinc0	equ	0xFEE
  4357                           wreg	equ	0xFE8
  4358                           postdec2	equ	0xFDD
  4359                           fsr2h	equ	0xFDA
  4360                           fsr2l	equ	0xFD9
  4361                           
  4362 ;; *************** function _INTERRUPT_Initialize *****************
  4363 ;; Defined at:
  4364 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;		None
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;		None
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1    wreg      void 
  4371 ;; Registers used:
  4372 ;;		None
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4378 ;;      Params:         0       0       0       0       0       0       0       0       0
  4379 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4380 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4381 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4382 ;;Total ram usage:        0 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    7
  4385 ;; This function calls:
  4386 ;;		Nothing
  4387 ;; This function is called by:
  4388 ;;		_SYSTEM_Initialize
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text20
  4393  0078DC                     __ptext20:
  4394                           	opt stack 0
  4395  0078DC                     _INTERRUPT_Initialize:
  4396                           	opt stack 22
  4397                           
  4398                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;incstack = 0
  4402  0078DC  9AF2               	bcf	intcon,5,c	;volatile
  4403  0078DE  0012               	return		;funcret
  4404  0078E0                     __end_of_INTERRUPT_Initialize:
  4405                           	opt stack 0
  4406                           tblptru	equ	0xFF8
  4407                           tblptrh	equ	0xFF7
  4408                           tblptrl	equ	0xFF6
  4409                           tablat	equ	0xFF5
  4410                           intcon	equ	0xFF2
  4411                           postinc0	equ	0xFEE
  4412                           wreg	equ	0xFE8
  4413                           postdec2	equ	0xFDD
  4414                           fsr2h	equ	0xFDA
  4415                           fsr2l	equ	0xFD9
  4416                           
  4417 ;; *************** function _EXT_INT_Initialize *****************
  4418 ;; Defined at:
  4419 ;;		line 219 in file "mcc_generated_files/ext_int.c"
  4420 ;; Parameters:    Size  Location     Type
  4421 ;;		None
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;		None
  4424 ;; Return value:  Size  Location     Type
  4425 ;;                  1    wreg      void 
  4426 ;; Registers used:
  4427 ;;		wreg, status,2, status,0, cstack
  4428 ;; Tracked objects:
  4429 ;;		On entry : F/E
  4430 ;;		On exit  : F/E
  4431 ;;		Unchanged: 0/0
  4432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4433 ;;      Params:         0       0       0       0       0       0       0       0       0
  4434 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4435 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4436 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4437 ;;Total ram usage:        0 bytes
  4438 ;; Hardware stack levels used:    1
  4439 ;; Hardware stack levels required when called:    8
  4440 ;; This function calls:
  4441 ;;		_INT0_SetInterruptHandler
  4442 ;;		_INT1_SetInterruptHandler
  4443 ;;		_INT2_SetInterruptHandler
  4444 ;;		_INT3_SetInterruptHandler
  4445 ;; This function is called by:
  4446 ;;		_SYSTEM_Initialize
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           	psect	text21
  4451  006890                     __ptext21:
  4452                           	opt stack 0
  4453  006890                     _EXT_INT_Initialize:
  4454                           	opt stack 21
  4455                           
  4456                           ; BSR set to: 14
  4457                           ;ext_int.c: 228: (PIR0bits.INT1IF = 0);
  4458                           
  4459                           ;incstack = 0
  4460  006890  9333               	bcf	51,1,b	;volatile
  4461                           
  4462                           ;ext_int.c: 229: (INTCONbits.INT1EDG = 1);
  4463  006892  82F2               	bsf	intcon,1,c	;volatile
  4464                           
  4465                           ; BSR set to: 14
  4466                           ;ext_int.c: 231: INT1_SetInterruptHandler(INT1_DefaultInterruptHandler);
  4467  006894  0E00               	movlw	low _INT1_DefaultInterruptHandler
  4468  006896  0100               	movlb	0	; () banked
  4469  006898  6F64               	movwf	INT1_SetInterruptHandler@InterruptHandler& (0+255),b
  4470  00689A  0E79               	movlw	high _INT1_DefaultInterruptHandler
  4471  00689C  6F65               	movwf	(INT1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4472  00689E  ECFE  F03B         	call	_INT1_SetInterruptHandler	;wreg free
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;ext_int.c: 232: (PIE0bits.INT1IE = 1);
  4476  0068A2  010E               	movlb	14	; () banked
  4477  0068A4  8329               	bsf	41,1,b	;volatile
  4478                           
  4479                           ; BSR set to: 14
  4480                           ;ext_int.c: 243: (PIR0bits.INT2IF = 0);
  4481  0068A6  9533               	bcf	51,2,b	;volatile
  4482                           
  4483                           ; BSR set to: 14
  4484                           ;ext_int.c: 244: (INTCONbits.INT2EDG = 1);
  4485  0068A8  84F2               	bsf	intcon,2,c	;volatile
  4486                           
  4487                           ;ext_int.c: 246: INT2_SetInterruptHandler(INT2_DefaultInterruptHandler);
  4488  0068AA  0EFE               	movlw	low _INT2_DefaultInterruptHandler
  4489  0068AC  0100               	movlb	0	; () banked
  4490  0068AE  6F64               	movwf	INT2_SetInterruptHandler@InterruptHandler& (0+255),b
  4491  0068B0  0E78               	movlw	high _INT2_DefaultInterruptHandler
  4492  0068B2  6F65               	movwf	(INT2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4493  0068B4  ECF9  F03B         	call	_INT2_SetInterruptHandler	;wreg free
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;ext_int.c: 247: (PIE0bits.INT2IE = 1);
  4497  0068B8  010E               	movlb	14	; () banked
  4498  0068BA  8529               	bsf	41,2,b	;volatile
  4499                           
  4500                           ; BSR set to: 14
  4501                           ;ext_int.c: 258: (PIR0bits.INT0IF = 0);
  4502  0068BC  9133               	bcf	51,0,b	;volatile
  4503                           
  4504                           ; BSR set to: 14
  4505                           ;ext_int.c: 259: (INTCONbits.INT0EDG = 1);
  4506  0068BE  80F2               	bsf	intcon,0,c	;volatile
  4507                           
  4508                           ;ext_int.c: 261: INT0_SetInterruptHandler(INT0_DefaultInterruptHandler);
  4509  0068C0  0E00               	movlw	0
  4510  0068C2  0100               	movlb	0	; () banked
  4511  0068C4  6B64               	clrf	INT0_SetInterruptHandler@InterruptHandler& (0+255),b
  4512  0068C6  6B65               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4513  0068C8  EC7A  F03C         	call	_INT0_SetInterruptHandler	;wreg free
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;ext_int.c: 272: (PIR0bits.INT3IF = 0);
  4517  0068CC  010E               	movlb	14	; () banked
  4518  0068CE  9733               	bcf	51,3,b	;volatile
  4519                           
  4520                           ; BSR set to: 14
  4521                           ;ext_int.c: 273: (INTCONbits.INT3EDG = 1);
  4522  0068D0  86F2               	bsf	intcon,3,c	;volatile
  4523                           
  4524                           ;ext_int.c: 275: INT3_SetInterruptHandler(INT3_DefaultInterruptHandler);
  4525  0068D2  0EFC               	movlw	low _INT3_DefaultInterruptHandler
  4526  0068D4  0100               	movlb	0	; () banked
  4527  0068D6  6F64               	movwf	INT3_SetInterruptHandler@InterruptHandler& (0+255),b
  4528  0068D8  0E78               	movlw	high _INT3_DefaultInterruptHandler
  4529  0068DA  6F65               	movwf	(INT3_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4530  0068DC  ECF4  F03B         	call	_INT3_SetInterruptHandler	;wreg free
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;ext_int.c: 276: (PIE0bits.INT3IE = 1);
  4534  0068E0  010E               	movlb	14	; () banked
  4535  0068E2  8729               	bsf	41,3,b	;volatile
  4536                           
  4537                           ; BSR set to: 14
  4538  0068E4  0012               	return		;funcret
  4539  0068E6                     __end_of_EXT_INT_Initialize:
  4540                           	opt stack 0
  4541                           tblptru	equ	0xFF8
  4542                           tblptrh	equ	0xFF7
  4543                           tblptrl	equ	0xFF6
  4544                           tablat	equ	0xFF5
  4545                           intcon	equ	0xFF2
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           postdec2	equ	0xFDD
  4549                           fsr2h	equ	0xFDA
  4550                           fsr2l	equ	0xFD9
  4551                           
  4552 ;; *************** function _INT3_SetInterruptHandler *****************
  4553 ;; Defined at:
  4554 ;;		line 196 in file "mcc_generated_files/ext_int.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  4557 ;;		 -> INT3_DefaultInterruptHandler(1), 
  4558 ;; Auto vars:     Size  Location     Type
  4559 ;;		None
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  1    wreg      void 
  4562 ;; Registers used:
  4563 ;;		wreg, status,2, status,0
  4564 ;; Tracked objects:
  4565 ;;		On entry : F/0
  4566 ;;		On exit  : F/0
  4567 ;;		Unchanged: F/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4569 ;;      Params:         0       2       0       0       0       0       0       0       0
  4570 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4571 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4572 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4573 ;;Total ram usage:        2 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:    7
  4576 ;; This function calls:
  4577 ;;		Nothing
  4578 ;; This function is called by:
  4579 ;;		_EXT_INT_Initialize
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text22
  4584  0077E8                     __ptext22:
  4585                           	opt stack 0
  4586  0077E8                     _INT3_SetInterruptHandler:
  4587                           	opt stack 21
  4588                           
  4589                           ; BSR set to: 0
  4590                           ;ext_int.c: 197: INT3_InterruptHandler = InterruptHandler;
  4591                           
  4592                           ; BSR set to: 14
  4593                           ;incstack = 0
  4594  0077E8  C064  F1F3         	movff	INT3_SetInterruptHandler@InterruptHandler,_INT3_InterruptHandler
  4595  0077EC  C065  F1F4         	movff	INT3_SetInterruptHandler@InterruptHandler+1,_INT3_InterruptHandler+1
  4596                           
  4597                           ; BSR set to: 0
  4598  0077F0  0012               	return		;funcret
  4599  0077F2                     __end_of_INT3_SetInterruptHandler:
  4600                           	opt stack 0
  4601                           tblptru	equ	0xFF8
  4602                           tblptrh	equ	0xFF7
  4603                           tblptrl	equ	0xFF6
  4604                           tablat	equ	0xFF5
  4605                           intcon	equ	0xFF2
  4606                           postinc0	equ	0xFEE
  4607                           wreg	equ	0xFE8
  4608                           postdec2	equ	0xFDD
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           
  4612 ;; *************** function _INT2_SetInterruptHandler *****************
  4613 ;; Defined at:
  4614 ;;		line 114 in file "mcc_generated_files/ext_int.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  4617 ;;		 -> INT2_DefaultInterruptHandler(1), 
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;		None
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  1    wreg      void 
  4622 ;; Registers used:
  4623 ;;		wreg, status,2, status,0
  4624 ;; Tracked objects:
  4625 ;;		On entry : F/0
  4626 ;;		On exit  : F/0
  4627 ;;		Unchanged: F/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4629 ;;      Params:         0       2       0       0       0       0       0       0       0
  4630 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4631 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4632 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4633 ;;Total ram usage:        2 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    7
  4636 ;; This function calls:
  4637 ;;		Nothing
  4638 ;; This function is called by:
  4639 ;;		_EXT_INT_Initialize
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           	psect	text23
  4644  0077F2                     __ptext23:
  4645                           	opt stack 0
  4646  0077F2                     _INT2_SetInterruptHandler:
  4647                           	opt stack 21
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;ext_int.c: 115: INT2_InterruptHandler = InterruptHandler;
  4651                           
  4652                           ; BSR set to: 0
  4653                           ;incstack = 0
  4654  0077F2  C064  F1F1         	movff	INT2_SetInterruptHandler@InterruptHandler,_INT2_InterruptHandler
  4655  0077F6  C065  F1F2         	movff	INT2_SetInterruptHandler@InterruptHandler+1,_INT2_InterruptHandler+1
  4656                           
  4657                           ; BSR set to: 0
  4658  0077FA  0012               	return		;funcret
  4659  0077FC                     __end_of_INT2_SetInterruptHandler:
  4660                           	opt stack 0
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           intcon	equ	0xFF2
  4666                           postinc0	equ	0xFEE
  4667                           wreg	equ	0xFE8
  4668                           postdec2	equ	0xFDD
  4669                           fsr2h	equ	0xFDA
  4670                           fsr2l	equ	0xFD9
  4671                           
  4672 ;; *************** function _INT1_SetInterruptHandler *****************
  4673 ;; Defined at:
  4674 ;;		line 73 in file "mcc_generated_files/ext_int.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  4677 ;;		 -> INT1_DefaultInterruptHandler(1), 
  4678 ;; Auto vars:     Size  Location     Type
  4679 ;;		None
  4680 ;; Return value:  Size  Location     Type
  4681 ;;                  1    wreg      void 
  4682 ;; Registers used:
  4683 ;;		wreg, status,2, status,0
  4684 ;; Tracked objects:
  4685 ;;		On entry : F/0
  4686 ;;		On exit  : F/0
  4687 ;;		Unchanged: F/0
  4688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4689 ;;      Params:         0       2       0       0       0       0       0       0       0
  4690 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4691 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4692 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4693 ;;Total ram usage:        2 bytes
  4694 ;; Hardware stack levels used:    1
  4695 ;; Hardware stack levels required when called:    7
  4696 ;; This function calls:
  4697 ;;		Nothing
  4698 ;; This function is called by:
  4699 ;;		_EXT_INT_Initialize
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           	psect	text24
  4704  0077FC                     __ptext24:
  4705                           	opt stack 0
  4706  0077FC                     _INT1_SetInterruptHandler:
  4707                           	opt stack 21
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;ext_int.c: 74: INT1_InterruptHandler = InterruptHandler;
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;incstack = 0
  4714  0077FC  C064  F1EF         	movff	INT1_SetInterruptHandler@InterruptHandler,_INT1_InterruptHandler
  4715  007800  C065  F1F0         	movff	INT1_SetInterruptHandler@InterruptHandler+1,_INT1_InterruptHandler+1
  4716                           
  4717                           ; BSR set to: 0
  4718  007804  0012               	return		;funcret
  4719  007806                     __end_of_INT1_SetInterruptHandler:
  4720                           	opt stack 0
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           intcon	equ	0xFF2
  4726                           postinc0	equ	0xFEE
  4727                           wreg	equ	0xFE8
  4728                           postdec2	equ	0xFDD
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           
  4732 ;; *************** function _INT0_SetInterruptHandler *****************
  4733 ;; Defined at:
  4734 ;;		line 155 in file "mcc_generated_files/ext_int.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;  InterruptHan    2    4[BANK0 ] PTR void 
  4737 ;;		 -> DIO5_ISR_Lora(1), DIO2_ISR_Lora(1), DIO1_ISR_Lora(1), DIO0_ISR_Lora(1), 
  4738 ;;		 -> INT0_DefaultInterruptHandler(1), 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;		None
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      void 
  4743 ;; Registers used:
  4744 ;;		None
  4745 ;; Tracked objects:
  4746 ;;		On entry : F/0
  4747 ;;		On exit  : F/0
  4748 ;;		Unchanged: F/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4750 ;;      Params:         0       2       0       0       0       0       0       0       0
  4751 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4752 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4753 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4754 ;;Total ram usage:        2 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    7
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_EXT_INT_Initialize
  4761 ;;		_DIO0_ISR_Lora_Init
  4762 ;;		_DIO1_ISR_Lora_Init
  4763 ;;		_DIO2_ISR_Lora_Init
  4764 ;;		_DIO5_ISR_Lora_Init
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text25
  4769  0078F4                     __ptext25:
  4770                           	opt stack 0
  4771  0078F4                     _INT0_SetInterruptHandler:
  4772                           	opt stack 20
  4773                           
  4774                           ; BSR set to: 0
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;incstack = 0
  4778  0078F4  0012               	return		;funcret
  4779  0078F6                     __end_of_INT0_SetInterruptHandler:
  4780                           	opt stack 0
  4781                           tblptru	equ	0xFF8
  4782                           tblptrh	equ	0xFF7
  4783                           tblptrl	equ	0xFF6
  4784                           tablat	equ	0xFF5
  4785                           intcon	equ	0xFF2
  4786                           postinc0	equ	0xFEE
  4787                           wreg	equ	0xFE8
  4788                           postdec2	equ	0xFDD
  4789                           fsr2h	equ	0xFDA
  4790                           fsr2l	equ	0xFD9
  4791                           
  4792 ;; *************** function _LORAWAN_SetNetworkSessionKey *****************
  4793 ;; Defined at:
  4794 ;;		line 379 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  4795 ;; Parameters:    Size  Location     Type
  4796 ;;  networkSessi    2   14[BANK0 ] PTR unsigned char 
  4797 ;;		 -> nwkSKey(16), 
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;		None
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      void 
  4802 ;; Registers used:
  4803 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4804 ;; Tracked objects:
  4805 ;;		On entry : F/0
  4806 ;;		On exit  : D/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4809 ;;      Params:         0       2       0       0       0       0       0       0       0
  4810 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4812 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4813 ;;Total ram usage:        2 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:    8
  4816 ;; This function calls:
  4817 ;;		_memcpy
  4818 ;; This function is called by:
  4819 ;;		_main
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           	psect	text26
  4824  007218                     __ptext26:
  4825                           	opt stack 0
  4826  007218                     _LORAWAN_SetNetworkSessionKey:
  4827                           	opt stack 22
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;lorawan.c: 381: if (networkSessionKeyNew != (0))
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;incstack = 0
  4834  007218  516E               	movf	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew& (0+255),w,b
  4835  00721A  116F               	iorwf	(LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1)& (0+255),w,b
  4836  00721C  B4D8               	btfsc	status,2,c
  4837  00721E  0012               	return	
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;lorawan.c: 382: {
  4841                           ;lorawan.c: 383: memcpy(loRa.activationParameters.networkSessionKey, networkSessionKeyNe
      +                          w, 16);
  4842  007220  0E22               	movlw	low (_loRa+34)
  4843  007222  6F64               	movwf	memcpy@d1& (0+255),b
  4844  007224  0E02               	movlw	high (_loRa+34)
  4845  007226  6F65               	movwf	(memcpy@d1+1)& (0+255),b
  4846  007228  C06E  F066         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew,memcpy@s1
  4847  00722C  C06F  F067         	movff	LORAWAN_SetNetworkSessionKey@networkSessionKeyNew+1,memcpy@s1+1
  4848  007230  6B69               	clrf	(memcpy@n+1)& (0+255),b
  4849  007232  0E10               	movlw	16
  4850  007234  6F68               	movwf	memcpy@n& (0+255),b
  4851  007236  EC73  F034         	call	_memcpy	;wreg free
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;lorawan.c: 384: loRa.macKeys.networkSessionKey = 1;
  4855  00723A  0102               	movlb	2	; () banked
  4856  00723C  89A5               	bsf	(_loRa+165)& (0+255),4,b
  4857                           
  4858                           ; BSR set to: 2
  4859                           ;lorawan.c: 385: loRa.macStatus.networkJoined = 0;
  4860  00723E  9902               	bcf	(_loRa+2)& (0+255),4,b
  4861  007240  0012               	return		;funcret
  4862  007242                     __end_of_LORAWAN_SetNetworkSessionKey:
  4863                           	opt stack 0
  4864                           tblptru	equ	0xFF8
  4865                           tblptrh	equ	0xFF7
  4866                           tblptrl	equ	0xFF6
  4867                           tablat	equ	0xFF5
  4868                           intcon	equ	0xFF2
  4869                           postinc0	equ	0xFEE
  4870                           wreg	equ	0xFE8
  4871                           postdec2	equ	0xFDD
  4872                           fsr2h	equ	0xFDA
  4873                           fsr2l	equ	0xFD9
  4874                           status	equ	0xFD8
  4875                           
  4876 ;; *************** function _LORAWAN_SetDeviceAddress *****************
  4877 ;; Defined at:
  4878 ;;		line 367 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;  deviceAddres    4    4[BANK0 ] unsigned long 
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;		None
  4883 ;; Return value:  Size  Location     Type
  4884 ;;                  1    wreg      void 
  4885 ;; Registers used:
  4886 ;;		None
  4887 ;; Tracked objects:
  4888 ;;		On entry : F/0
  4889 ;;		On exit  : F/2
  4890 ;;		Unchanged: 0/0
  4891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4892 ;;      Params:         0       4       0       0       0       0       0       0       0
  4893 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4895 ;;      Totals:         0       4       0       0       0       0       0       0       0
  4896 ;;Total ram usage:        4 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; Hardware stack levels required when called:    7
  4899 ;; This function calls:
  4900 ;;		Nothing
  4901 ;; This function is called by:
  4902 ;;		_main
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           	psect	text27
  4907  00766E                     __ptext27:
  4908                           	opt stack 0
  4909  00766E                     _LORAWAN_SetDeviceAddress:
  4910                           	opt stack 23
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;lorawan.c: 369: loRa.activationParameters.deviceAddress.value = deviceAddressNew;
  4914                           
  4915                           ;incstack = 0
  4916  00766E  C064  F21E         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew,_loRa+30
  4917  007672  C065  F21F         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+1,_loRa+31
  4918  007676  C066  F220         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+2,_loRa+32
  4919  00767A  C067  F221         	movff	LORAWAN_SetDeviceAddress@deviceAddressNew+3,_loRa+33
  4920                           
  4921                           ;lorawan.c: 370: loRa.macKeys.deviceAddress = 1;
  4922  00767E  0102               	movlb	2	; () banked
  4923  007680  85A5               	bsf	(_loRa+165)& (0+255),2,b
  4924                           
  4925                           ;lorawan.c: 371: loRa.macStatus.networkJoined = 0;
  4926  007682  9902               	bcf	(_loRa+2)& (0+255),4,b
  4927                           
  4928                           ; BSR set to: 2
  4929  007684  0012               	return		;funcret
  4930  007686                     __end_of_LORAWAN_SetDeviceAddress:
  4931                           	opt stack 0
  4932                           tblptru	equ	0xFF8
  4933                           tblptrh	equ	0xFF7
  4934                           tblptrl	equ	0xFF6
  4935                           tablat	equ	0xFF5
  4936                           intcon	equ	0xFF2
  4937                           postinc0	equ	0xFEE
  4938                           wreg	equ	0xFE8
  4939                           postdec2	equ	0xFDD
  4940                           fsr2h	equ	0xFDA
  4941                           fsr2l	equ	0xFD9
  4942                           status	equ	0xFD8
  4943                           
  4944 ;; *************** function _LORAWAN_SetApplicationSessionKey *****************
  4945 ;; Defined at:
  4946 ;;		line 394 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  applicationS    2   14[BANK0 ] PTR unsigned char 
  4949 ;;		 -> appSKey(16), 
  4950 ;; Auto vars:     Size  Location     Type
  4951 ;;		None
  4952 ;; Return value:  Size  Location     Type
  4953 ;;                  1    wreg      void 
  4954 ;; Registers used:
  4955 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4956 ;; Tracked objects:
  4957 ;;		On entry : F/0
  4958 ;;		On exit  : D/0
  4959 ;;		Unchanged: 0/0
  4960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4961 ;;      Params:         0       2       0       0       0       0       0       0       0
  4962 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4964 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4965 ;;Total ram usage:        2 bytes
  4966 ;; Hardware stack levels used:    1
  4967 ;; Hardware stack levels required when called:    8
  4968 ;; This function calls:
  4969 ;;		_memcpy
  4970 ;; This function is called by:
  4971 ;;		_main
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text28
  4976  007242                     __ptext28:
  4977                           	opt stack 0
  4978  007242                     _LORAWAN_SetApplicationSessionKey:
  4979                           	opt stack 22
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;lorawan.c: 396: if (applicationSessionKeyNew != (0))
  4983                           
  4984                           ; BSR set to: 2
  4985                           ;incstack = 0
  4986  007242  516E               	movf	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew& (0+255),w,b
  4987  007244  116F               	iorwf	(LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1)& (0+255),w,b
  4988  007246  B4D8               	btfsc	status,2,c
  4989  007248  0012               	return	
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;lorawan.c: 397: {
  4993                           ;lorawan.c: 398: memcpy( loRa.activationParameters.applicationSessionKey, applicationSes
      +                          sionKeyNew, 16);
  4994  00724A  0E32               	movlw	low (_loRa+50)
  4995  00724C  6F64               	movwf	memcpy@d1& (0+255),b
  4996  00724E  0E02               	movlw	high (_loRa+50)
  4997  007250  6F65               	movwf	(memcpy@d1+1)& (0+255),b
  4998  007252  C06E  F066         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew,memcpy@s1
  4999  007256  C06F  F067         	movff	LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew+1,memcpy@s1+1
  5000  00725A  6B69               	clrf	(memcpy@n+1)& (0+255),b
  5001  00725C  0E10               	movlw	16
  5002  00725E  6F68               	movwf	memcpy@n& (0+255),b
  5003  007260  EC73  F034         	call	_memcpy	;wreg free
  5004                           
  5005                           ; BSR set to: 0
  5006                           ;lorawan.c: 399: loRa.macKeys.applicationSessionKey = 1;
  5007  007264  0102               	movlb	2	; () banked
  5008  007266  8BA5               	bsf	(_loRa+165)& (0+255),5,b
  5009                           
  5010                           ; BSR set to: 2
  5011                           ;lorawan.c: 400: loRa.macStatus.networkJoined = 0;
  5012  007268  9902               	bcf	(_loRa+2)& (0+255),4,b
  5013  00726A  0012               	return		;funcret
  5014  00726C                     __end_of_LORAWAN_SetApplicationSessionKey:
  5015                           	opt stack 0
  5016                           tblptru	equ	0xFF8
  5017                           tblptrh	equ	0xFF7
  5018                           tblptrl	equ	0xFF6
  5019                           tablat	equ	0xFF5
  5020                           intcon	equ	0xFF2
  5021                           postinc0	equ	0xFEE
  5022                           wreg	equ	0xFE8
  5023                           postdec2	equ	0xFDD
  5024                           fsr2h	equ	0xFDA
  5025                           fsr2l	equ	0xFD9
  5026                           status	equ	0xFD8
  5027                           
  5028 ;; *************** function _LORAWAN_Mainloop *****************
  5029 ;; Defined at:
  5030 ;;		line 2238 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;		None
  5033 ;; Auto vars:     Size  Location     Type
  5034 ;;		None
  5035 ;; Return value:  Size  Location     Type
  5036 ;;                  1    wreg      void 
  5037 ;; Registers used:
  5038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+4, btemp+5, btemp
      ++6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5039 ;; Tracked objects:
  5040 ;;		On entry : 0/1
  5041 ;;		On exit  : 0/0
  5042 ;;		Unchanged: 0/0
  5043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5044 ;;      Params:         0       0       0       0       0       0       0       0       0
  5045 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5046 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5047 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5048 ;;Total ram usage:        0 bytes
  5049 ;; Hardware stack levels used:    1
  5050 ;; Hardware stack levels required when called:   18
  5051 ;; This function calls:
  5052 ;;		_INTERRUPT_GetDioStatus
  5053 ;;		_RADIO_DIO0
  5054 ;;		_RADIO_DIO1
  5055 ;;		_RADIO_DIO2
  5056 ;;		_RADIO_DIO3
  5057 ;;		_RADIO_DIO4
  5058 ;;		_RADIO_DIO5
  5059 ;;		_SwTimersExecute
  5060 ;; This function is called by:
  5061 ;;		_main
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text29
  5066  006F0E                     __ptext29:
  5067                           	opt stack 0
  5068  006F0E                     _LORAWAN_Mainloop:
  5069                           	opt stack 12
  5070                           
  5071                           ;lorawan.c: 2240: SwTimersExecute();
  5072                           
  5073                           ;incstack = 0
  5074  006F0E  EC77  F02C         	call	_SwTimersExecute	;wreg free
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;lorawan.c: 2243: localDioStatus = INTERRUPT_GetDioStatus();
  5078  006F12  ECD0  F03B         	call	_INTERRUPT_GetDioStatus	;wreg free
  5079  006F16  0101               	movlb	1	; () banked
  5080  006F18  6F74               	movwf	_localDioStatus& (0+255),b
  5081                           
  5082                           ; BSR set to: 1
  5083                           ;lorawan.c: 2245: if ((localDioStatus & 0x01) != 0)
  5084  006F1A  B174               	btfsc	_localDioStatus& (0+255),0,b
  5085                           
  5086                           ; BSR set to: 1
  5087                           ;lorawan.c: 2246: {
  5088                           ;lorawan.c: 2247: RADIO_DIO0();
  5089  006F1C  EC9A  F032         	call	_RADIO_DIO0	;wreg free
  5090                           
  5091                           ;lorawan.c: 2248: }
  5092                           ;lorawan.c: 2249: if ((localDioStatus & 0x02) != 0)
  5093  006F20  0101               	movlb	1	; () banked
  5094  006F22  B374               	btfsc	_localDioStatus& (0+255),1,b
  5095                           
  5096                           ; BSR set to: 1
  5097                           ;lorawan.c: 2250: {
  5098                           ;lorawan.c: 2251: RADIO_DIO1();
  5099  006F24  ECA5  F037         	call	_RADIO_DIO1	;wreg free
  5100                           
  5101                           ;lorawan.c: 2252: }
  5102                           ;lorawan.c: 2253: if ((localDioStatus & 0x04) != 0)
  5103  006F28  0101               	movlb	1	; () banked
  5104  006F2A  B574               	btfsc	_localDioStatus& (0+255),2,b
  5105                           
  5106                           ; BSR set to: 1
  5107                           ;lorawan.c: 2254: {
  5108                           ;lorawan.c: 2255: RADIO_DIO2();
  5109  006F2C  ECFE  F035         	call	_RADIO_DIO2	;wreg free
  5110                           
  5111                           ;lorawan.c: 2256: }
  5112                           ;lorawan.c: 2257: if ((localDioStatus & 0x08) != 0)
  5113  006F30  0101               	movlb	1	; () banked
  5114  006F32  B774               	btfsc	_localDioStatus& (0+255),3,b
  5115                           
  5116                           ; BSR set to: 1
  5117                           ;lorawan.c: 2258: {
  5118                           ;lorawan.c: 2259: RADIO_DIO3();
  5119  006F34  EC5B  F03B         	call	_RADIO_DIO3	;wreg free
  5120                           
  5121                           ;lorawan.c: 2260: }
  5122                           ;lorawan.c: 2261: if ((localDioStatus & 0x10) != 0)
  5123  006F38  0101               	movlb	1	; () banked
  5124  006F3A  B974               	btfsc	_localDioStatus& (0+255),4,b
  5125                           
  5126                           ; BSR set to: 1
  5127                           ;lorawan.c: 2262: {
  5128                           ;lorawan.c: 2263: RADIO_DIO4();
  5129  006F3C  EC4F  F03B         	call	_RADIO_DIO4	;wreg free
  5130                           
  5131                           ;lorawan.c: 2264: }
  5132                           ;lorawan.c: 2265: if ((localDioStatus & 0x20) != 0)
  5133  006F40  0101               	movlb	1	; () banked
  5134  006F42  BB74               	btfsc	_localDioStatus& (0+255),5,b
  5135                           
  5136                           ; BSR set to: 1
  5137                           ;lorawan.c: 2266: {
  5138                           ;lorawan.c: 2267: RADIO_DIO5();
  5139  006F44  EC43  F03B         	call	_RADIO_DIO5	;wreg free
  5140  006F48  0012               	return		;funcret
  5141  006F4A                     __end_of_LORAWAN_Mainloop:
  5142                           	opt stack 0
  5143                           tblptru	equ	0xFF8
  5144                           tblptrh	equ	0xFF7
  5145                           tblptrl	equ	0xFF6
  5146                           tablat	equ	0xFF5
  5147                           intcon	equ	0xFF2
  5148                           postinc0	equ	0xFEE
  5149                           wreg	equ	0xFE8
  5150                           postdec2	equ	0xFDD
  5151                           fsr2h	equ	0xFDA
  5152                           fsr2l	equ	0xFD9
  5153                           status	equ	0xFD8
  5154                           
  5155 ;; *************** function _SwTimersExecute *****************
  5156 ;; Defined at:
  5157 ;;		line 260 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
  5158 ;; Parameters:    Size  Location     Type
  5159 ;;		None
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;  i               1  140[BANK0 ] unsigned char 
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  1    wreg      void 
  5164 ;; Registers used:
  5165 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+4, btemp+5, btemp
      ++6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/1
  5168 ;;		On exit  : F/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5171 ;;      Params:         0       0       0       0       0       0       0       0       0
  5172 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5173 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5174 ;;      Totals:         0       5       0       0       0       0       0       0       0
  5175 ;;Total ram usage:        5 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:   17
  5178 ;; This function calls:
  5179 ;;		Absolute function
  5180 ;;		_AckRetransmissionCallback
  5181 ;;		_AutomaticReplyCallback
  5182 ;;		_DutyCycleCallback
  5183 ;;		_LORAWAN_LinkCheckCallback
  5184 ;;		_LORAWAN_ReceiveWindow1Callback
  5185 ;;		_LORAWAN_ReceiveWindow2Callback
  5186 ;;		_RADIO_RxFSKTimeout
  5187 ;;		_RADIO_WatchdogTimeout
  5188 ;;		_UnconfirmedTransmissionCallback
  5189 ;;		_UpdateJoinSuccessState
  5190 ;; This function is called by:
  5191 ;;		_LORAWAN_Mainloop
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text30
  5196  0058EE                     __ptext30:
  5197                           	opt stack 0
  5198  0058EE                     _SwTimersExecute:
  5199                           	opt stack 12
  5200                           
  5201                           ;sw_timer.c: 262: uint8_t i;
  5202                           ;sw_timer.c: 264: (INTCONbits.GIE = 0);
  5203                           
  5204                           ;incstack = 0
  5205  0058EE  9EF2               	bcf	intcon,7,c	;volatile
  5206                           
  5207                           ;sw_timer.c: 265: for (i = 0; i < allocatedTimers; i++)
  5208  0058F0  0100               	movlb	0	; () banked
  5209  0058F2  6BEC               	clrf	SwTimersExecute@i& (0+255),b
  5210  0058F4  D04D               	goto	l16372
  5211  0058F6                     l16358:
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;sw_timer.c: 266: {
  5215                           ;sw_timer.c: 269: if (swTimers[i].running == 1)
  5216  0058F6  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  5217  0058F8  0D08               	mullw	8
  5218  0058FA  0E04               	movlw	low (_swTimers+4)
  5219  0058FC  24F3               	addwf	prodl,w,c
  5220  0058FE  6ED9               	movwf	fsr2l,c
  5221  005900  0E03               	movlw	high (_swTimers+4)
  5222  005902  20F4               	addwfc	prodh,w,c
  5223  005904  6EDA               	movwf	fsr2h,c
  5224  005906  04DE               	decf	postinc2,w,c
  5225  005908  E141               	bnz	l16370
  5226                           
  5227                           ; BSR set to: 0
  5228                           ;sw_timer.c: 270: {
  5229                           ;sw_timer.c: 271: if (0 == swTimers[i].ticksRemaining)
  5230  00590A  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  5231  00590C  0D08               	mullw	8
  5232  00590E  0E00               	movlw	low _swTimers
  5233  005910  24F3               	addwf	prodl,w,c
  5234  005912  6ED9               	movwf	fsr2l,c
  5235  005914  0E03               	movlw	high _swTimers
  5236  005916  20F4               	addwfc	prodh,w,c
  5237  005918  6EDA               	movwf	fsr2h,c
  5238  00591A  50DE               	movf	postinc2,w,c
  5239  00591C  10DE               	iorwf	postinc2,w,c
  5240  00591E  10DE               	iorwf	postinc2,w,c
  5241  005920  10DE               	iorwf	postinc2,w,c
  5242  005922  E134               	bnz	l16370
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;sw_timer.c: 272: {
  5246                           ;sw_timer.c: 273: swTimers[i].running = 0;
  5247  005924  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  5248  005926  0D08               	mullw	8
  5249  005928  0E04               	movlw	low (_swTimers+4)
  5250  00592A  24F3               	addwf	prodl,w,c
  5251  00592C  6ED9               	movwf	fsr2l,c
  5252  00592E  0E03               	movlw	high (_swTimers+4)
  5253  005930  20F4               	addwfc	prodh,w,c
  5254  005932  6EDA               	movwf	fsr2h,c
  5255  005934  6ADF               	clrf	indf2,c
  5256                           
  5257                           ;sw_timer.c: 274: if ((0) != swTimers[i].callback)
  5258  005936  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  5259  005938  0D08               	mullw	8
  5260  00593A  0E06               	movlw	low (_swTimers+6)
  5261  00593C  24F3               	addwf	prodl,w,c
  5262  00593E  6ED9               	movwf	fsr2l,c
  5263  005940  0E03               	movlw	high (_swTimers+6)
  5264  005942  20F4               	addwfc	prodh,w,c
  5265  005944  6EDA               	movwf	fsr2h,c
  5266  005946  50DE               	movf	postinc2,w,c
  5267  005948  10DE               	iorwf	postinc2,w,c
  5268  00594A  E020               	bz	l16370
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;sw_timer.c: 275: {
  5272                           ;sw_timer.c: 276: (INTCONbits.GIE = 1);
  5273  00594C  8EF2               	bsf	intcon,7,c	;volatile
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;sw_timer.c: 277: swTimers[i].callback(swTimers[i].callbackParameter);
  5277  00594E  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  5278  005950  0D08               	mullw	8
  5279  005952  0E05               	movlw	low (_swTimers+5)
  5280  005954  24F3               	addwf	prodl,w,c
  5281  005956  6ED9               	movwf	fsr2l,c
  5282  005958  0E03               	movlw	high (_swTimers+5)
  5283  00595A  20F4               	addwfc	prodh,w,c
  5284  00595C  6EDA               	movwf	fsr2h,c
  5285  00595E  50DF               	movf	indf2,w,c
  5286  005960  6EE6               	movwf	postinc1,c
  5287  005962  51EC               	movf	SwTimersExecute@i& (0+255),w,b
  5288  005964  0D08               	mullw	8
  5289  005966  0E06               	movlw	low (_swTimers+6)
  5290  005968  24F3               	addwf	prodl,w,c
  5291  00596A  6ED9               	movwf	fsr2l,c
  5292  00596C  0E03               	movlw	high (_swTimers+6)
  5293  00596E  20F4               	addwfc	prodh,w,c
  5294  005970  6EDA               	movwf	fsr2h,c
  5295  005972  D801               	call	u19678
  5296  005974  D00A               	goto	l16368
  5297  005976                     u19678:
  5298  005976  0005               	push	
  5299  005978  6EFA               	movwf	pclath,c
  5300  00597A  50DE               	movf	postinc2,w,c
  5301  00597C  6EFD               	movwf	tosl,c
  5302  00597E  50DE               	movf	postinc2,w,c
  5303  005980  6EFE               	movwf	tosh,c
  5304  005982  50F8               	movf	tblptru,w,c
  5305  005984  6EFF               	movwf	tosu,c
  5306  005986  50FA               	movf	pclath,w,c
  5307  005988  0012               	return		;indir
  5308  00598A                     l16368:
  5309                           
  5310                           ;sw_timer.c: 278: (INTCONbits.GIE = 0);
  5311  00598A  9EF2               	bcf	intcon,7,c	;volatile
  5312  00598C                     l16370:
  5313  00598C  0100               	movlb	0	; () banked
  5314  00598E  2BEC               	incf	SwTimersExecute@i& (0+255),f,b
  5315  005990                     l16372:
  5316                           
  5317                           ; BSR set to: 0
  5318  005990  0101               	movlb	1	; () banked
  5319  005992  5173               	movf	_allocatedTimers& (0+255),w,b	;volatile
  5320  005994  0100               	movlb	0	; () banked
  5321  005996  5DEC               	subwf	SwTimersExecute@i& (0+255),w,b
  5322  005998  E3AE               	bnc	l16358
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;sw_timer.c: 279: }
  5326                           ;sw_timer.c: 280: }
  5327                           ;sw_timer.c: 281: }
  5328                           ;sw_timer.c: 282: }
  5329                           ;sw_timer.c: 283: (INTCONbits.GIE = 1);
  5330  00599A  8EF2               	bsf	intcon,7,c	;volatile
  5331                           
  5332                           ; BSR set to: 0
  5333  00599C  0012               	return		;funcret
  5334  00599E                     __end_of_SwTimersExecute:
  5335                           	opt stack 0
  5336                           tosu	equ	0xFFF
  5337                           tosh	equ	0xFFE
  5338                           tosl	equ	0xFFD
  5339                           pclath	equ	0xFFA
  5340                           tblptru	equ	0xFF8
  5341                           tblptrh	equ	0xFF7
  5342                           tblptrl	equ	0xFF6
  5343                           tablat	equ	0xFF5
  5344                           prodh	equ	0xFF4
  5345                           prodl	equ	0xFF3
  5346                           intcon	equ	0xFF2
  5347                           postinc0	equ	0xFEE
  5348                           wreg	equ	0xFE8
  5349                           postinc1	equ	0xFE6
  5350                           indf2	equ	0xFDF
  5351                           postinc2	equ	0xFDE
  5352                           postdec2	equ	0xFDD
  5353                           fsr2h	equ	0xFDA
  5354                           fsr2l	equ	0xFD9
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function _DutyCycleCallback *****************
  5358 ;; Defined at:
  5359 ;;		line 1221 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;  param           1  [STACK] unsigned char 
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;  minim           4  [STACK] unsigned long 
  5364 ;;  i               1  [STACK] unsigned char 
  5365 ;;  found           1  [STACK] unsigned char 
  5366 ;; Return value:  Size  Location     Type
  5367 ;;                  1  [STACK] void 
  5368 ;; Registers used:
  5369 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9,
      + btemp+10, btemp+11, prodl, prodh, cstack
  5370 ;; Tracked objects:
  5371 ;;		On entry : F/0
  5372 ;;		On exit  : 0/0
  5373 ;;		Unchanged: 0/0
  5374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5375 ;;      Params:         0       0       0       0       0       0       0       0       0
  5376 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5378 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5379 ;;Total ram usage:        0 bytes
  5380 ;; Hardware stack levels used:    1
  5381 ;; Hardware stack levels required when called:   11
  5382 ;; This function calls:
  5383 ;;		_SwTimerSetTimeout
  5384 ;;		_SwTimerStart
  5385 ;;		___lldiv
  5386 ;; This function is called by:
  5387 ;;		_SetCallbackSoftwareTimers
  5388 ;;		_SwTimersExecute
  5389 ;; This function uses a reentrant model
  5390 ;;
  5391                           
  5392                           	psect	text31
  5393  00242A                     __ptext31:
  5394                           	opt stack 0
  5395  00242A                     _DutyCycleCallback:
  5396                           	opt stack 0
  5397                           
  5398                           ; BSR set to: 0
  5399                           ; autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 va
      +                          rgsize = 0, retsize = 0
  5400  00242A  0E0A               	movlw	10
  5401  00242C  26E1               	addwf	fsr1l,f,c
  5402  00242E  0E00               	movlw	0
  5403  002430  22E2               	addwfc	fsr1h,f,c
  5404                           
  5405                           ;lorawan_eu.c: 1223: uint32_t minim = (4294967295UL);
  5406                           
  5407                           ;incstack = 0
  5408  002432  6852               	setf	btemp+8,c
  5409  002434  6853               	setf	btemp+9,c
  5410  002436  6854               	setf	btemp+10,c
  5411  002438  6855               	setf	btemp+11,c
  5412                           
  5413                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5414  00243A  0EFA               	movlw	-6
  5415  00243C  C052  FFE3         	movff	btemp+8,plusw1
  5416  002440  0EFB               	movlw	-5
  5417  002442  C053  FFE3         	movff	btemp+9,plusw1
  5418  002446  0EFC               	movlw	-4
  5419  002448  C054  FFE3         	movff	btemp+10,plusw1
  5420  00244C  0EFD               	movlw	-3
  5421  00244E  C055  FFE3         	movff	btemp+11,plusw1
  5422                           
  5423                           ;lorawan_eu.c: 1224: bool found = 0;
  5424                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  5425  002452  0EFF               	movlw	-1
  5426  002454  6AE3               	clrf	plusw1,c
  5427                           
  5428                           ;lorawan_eu.c: 1225: uint8_t i;
  5429                           ;lorawan_eu.c: 1227: for (i=0; i < 16; i++)
  5430                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5431  002456  0EFE               	movlw	-2
  5432  002458  6AE3               	clrf	plusw1,c
  5433  00245A                     l15094:
  5434                           
  5435                           ;lorawan_eu.c: 1228: {
  5436                           ;lorawan_eu.c: 1230: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
  5437                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5438  00245A  0EFE               	movlw	-2
  5439  00245C  50E3               	movf	plusw1,w,c
  5440  00245E  0D0E               	mullw	14
  5441  002460  0E04               	movlw	low (_Channels+4)
  5442  002462  24F3               	addwf	prodl,w,c
  5443  002464  6ED9               	movwf	fsr2l,c
  5444  002466  0E04               	movlw	high (_Channels+4)
  5445  002468  20F4               	addwfc	prodh,w,c
  5446  00246A  6EDA               	movwf	fsr2h,c
  5447  00246C  04DE               	decf	postinc2,w,c
  5448  00246E  E001 D0AA          	bnz	l15112
  5449                           
  5450                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5451  002472  0EFE               	movlw	-2
  5452  002474  50E3               	movf	plusw1,w,c
  5453  002476  0D0E               	mullw	14
  5454  002478  0E08               	movlw	low (_Channels+8)
  5455  00247A  24F3               	addwf	prodl,w,c
  5456  00247C  6ED9               	movwf	fsr2l,c
  5457  00247E  0E04               	movlw	high (_Channels+8)
  5458  002480  20F4               	addwfc	prodh,w,c
  5459  002482  6EDA               	movwf	fsr2h,c
  5460  002484  50DE               	movf	postinc2,w,c
  5461  002486  10DE               	iorwf	postinc2,w,c
  5462  002488  10DE               	iorwf	postinc2,w,c
  5463  00248A  10DE               	iorwf	postinc2,w,c
  5464  00248C  E101 D09B          	bz	l15112
  5465                           
  5466                           ;lorawan_eu.c: 1231: {
  5467                           ;lorawan_eu.c: 1232: if ( Channels[i].channelTimer > loRa.lastTimerValue )
  5468                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5469  002490  0EFE               	movlw	-2
  5470  002492  50E3               	movf	plusw1,w,c
  5471  002494  0D0E               	mullw	14
  5472  002496  0E08               	movlw	low (_Channels+8)
  5473  002498  24F3               	addwf	prodl,w,c
  5474  00249A  6ED9               	movwf	fsr2l,c
  5475  00249C  0E04               	movlw	high (_Channels+8)
  5476  00249E  20F4               	addwfc	prodh,w,c
  5477  0024A0  6EDA               	movwf	fsr2h,c
  5478  0024A2  50DE               	movf	postinc2,w,c
  5479  0024A4  0102               	movlb	2	; () banked
  5480  0024A6  5DC8               	subwf	(_loRa+200)& (0+255),w,b
  5481  0024A8  50DE               	movf	postinc2,w,c
  5482  0024AA  59C9               	subwfb	(_loRa+201)& (0+255),w,b
  5483  0024AC  50DE               	movf	postinc2,w,c
  5484  0024AE  59CA               	subwfb	(_loRa+202)& (0+255),w,b
  5485  0024B0  50DE               	movf	postinc2,w,c
  5486  0024B2  59CB               	subwfb	(_loRa+203)& (0+255),w,b
  5487  0024B4  E22F               	bc	l15102
  5488                           
  5489                           ; BSR set to: 2
  5490                           ;lorawan_eu.c: 1233: {
  5491                           ;lorawan_eu.c: 1234: Channels[i].channelTimer = Channels[i].channelTimer - loRa.lastTime
      +                          rValue;
  5492                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5493  0024B6  0EFE               	movlw	-2
  5494  0024B8  50E3               	movf	plusw1,w,c
  5495  0024BA  0D0E               	mullw	14
  5496  0024BC  0E08               	movlw	low (_Channels+8)
  5497  0024BE  24F3               	addwf	prodl,w,c
  5498  0024C0  6ED9               	movwf	fsr2l,c
  5499  0024C2  0E04               	movlw	high (_Channels+8)
  5500  0024C4  20F4               	addwfc	prodh,w,c
  5501  0024C6  6EDA               	movwf	fsr2h,c
  5502  0024C8  CFDE F052          	movff	postinc2,btemp+8
  5503  0024CC  CFDE F053          	movff	postinc2,btemp+9
  5504  0024D0  CFDE F054          	movff	postinc2,btemp+10
  5505  0024D4  CFDE F055          	movff	postinc2,btemp+11
  5506  0024D8  51C8               	movf	(_loRa+200)& (0+255),w,b
  5507  0024DA  5C52               	subwf	btemp+8,w,c
  5508  0024DC  6E4E               	movwf	btemp+4,c
  5509  0024DE  51C9               	movf	(_loRa+201)& (0+255),w,b
  5510  0024E0  5853               	subwfb	btemp+9,w,c
  5511  0024E2  6E4F               	movwf	btemp+5,c
  5512  0024E4  51CA               	movf	(_loRa+202)& (0+255),w,b
  5513  0024E6  5854               	subwfb	btemp+10,w,c
  5514  0024E8  6E50               	movwf	btemp+6,c
  5515  0024EA  51CB               	movf	(_loRa+203)& (0+255),w,b
  5516  0024EC  5855               	subwfb	btemp+11,w,c
  5517  0024EE  6E51               	movwf	btemp+7,c
  5518                           
  5519                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5520  0024F0  0EFE               	movlw	-2
  5521  0024F2  50E3               	movf	plusw1,w,c
  5522  0024F4  0D0E               	mullw	14
  5523  0024F6  0E08               	movlw	low (_Channels+8)
  5524  0024F8  24F3               	addwf	prodl,w,c
  5525  0024FA  6ED9               	movwf	fsr2l,c
  5526  0024FC  0E04               	movlw	high (_Channels+8)
  5527  0024FE  20F4               	addwfc	prodh,w,c
  5528  002500  6EDA               	movwf	fsr2h,c
  5529  002502  C04E  FFDE         	movff	btemp+4,postinc2
  5530  002506  C04F  FFDE         	movff	btemp+5,postinc2
  5531  00250A  C050  FFDE         	movff	btemp+6,postinc2
  5532  00250E  C051  FFDE         	movff	btemp+7,postinc2
  5533                           
  5534                           ;lorawan_eu.c: 1235: }
  5535  002512  D00D               	goto	l15104
  5536  002514                     l15102:
  5537                           
  5538                           ; BSR set to: 2
  5539                           ;lorawan_eu.c: 1236: else
  5540                           ;lorawan_eu.c: 1237: {
  5541                           ;lorawan_eu.c: 1238: Channels[i].channelTimer = 0;
  5542                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5543  002514  0EFE               	movlw	-2
  5544  002516  50E3               	movf	plusw1,w,c
  5545  002518  0D0E               	mullw	14
  5546  00251A  0E08               	movlw	low (_Channels+8)
  5547  00251C  24F3               	addwf	prodl,w,c
  5548  00251E  6ED9               	movwf	fsr2l,c
  5549  002520  0E04               	movlw	high (_Channels+8)
  5550  002522  20F4               	addwfc	prodh,w,c
  5551  002524  6EDA               	movwf	fsr2h,c
  5552  002526  6ADE               	clrf	postinc2,c
  5553  002528  6ADE               	clrf	postinc2,c
  5554  00252A  6ADE               	clrf	postinc2,c
  5555  00252C  6ADD               	clrf	postdec2,c
  5556  00252E                     l15104:
  5557                           
  5558                           ; BSR set to: 2
  5559                           ;lorawan_eu.c: 1239: }
  5560                           ;lorawan_eu.c: 1240: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTim
      +                          er != 0) )
  5561                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5562  00252E  0EFE               	movlw	-2
  5563  002530  50E3               	movf	plusw1,w,c
  5564  002532  0D0E               	mullw	14
  5565  002534  0E08               	movlw	low (_Channels+8)
  5566  002536  24F3               	addwf	prodl,w,c
  5567  002538  6ED9               	movwf	fsr2l,c
  5568  00253A  0E04               	movlw	high (_Channels+8)
  5569  00253C  20F4               	addwfc	prodh,w,c
  5570  00253E  6EDA               	movwf	fsr2h,c
  5571                           
  5572                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5573  002540  0EFA               	movlw	-6
  5574  002542  CFE3 F04B          	movff	plusw1,btemp+1
  5575  002546  50DE               	movf	postinc2,w,c
  5576  002548  5C4B               	subwf	btemp+1,w,c
  5577  00254A  0EFB               	movlw	-5
  5578  00254C  CFE3 F04B          	movff	plusw1,btemp+1
  5579  002550  50DE               	movf	postinc2,w,c
  5580  002552  584B               	subwfb	btemp+1,w,c
  5581  002554  0EFC               	movlw	-4
  5582  002556  CFE3 F04B          	movff	plusw1,btemp+1
  5583  00255A  50DE               	movf	postinc2,w,c
  5584  00255C  584B               	subwfb	btemp+1,w,c
  5585  00255E  0EFD               	movlw	-3
  5586  002560  CFE3 F04B          	movff	plusw1,btemp+1
  5587  002564  50DE               	movf	postinc2,w,c
  5588  002566  584B               	subwfb	btemp+1,w,c
  5589  002568  E32E               	bnc	l15112
  5590                           
  5591                           ; BSR set to: 2
  5592                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5593  00256A  0EFE               	movlw	-2
  5594  00256C  50E3               	movf	plusw1,w,c
  5595  00256E  0D0E               	mullw	14
  5596  002570  0E08               	movlw	low (_Channels+8)
  5597  002572  24F3               	addwf	prodl,w,c
  5598  002574  6ED9               	movwf	fsr2l,c
  5599  002576  0E04               	movlw	high (_Channels+8)
  5600  002578  20F4               	addwfc	prodh,w,c
  5601  00257A  6EDA               	movwf	fsr2h,c
  5602  00257C  50DE               	movf	postinc2,w,c
  5603  00257E  10DE               	iorwf	postinc2,w,c
  5604  002580  10DE               	iorwf	postinc2,w,c
  5605  002582  10DE               	iorwf	postinc2,w,c
  5606  002584  E020               	bz	l15112
  5607                           
  5608                           ; BSR set to: 2
  5609                           ;lorawan_eu.c: 1241: {
  5610                           ;lorawan_eu.c: 1242: minim = Channels[i].channelTimer;
  5611                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5612  002586  0EFE               	movlw	-2
  5613  002588  50E3               	movf	plusw1,w,c
  5614  00258A  0D0E               	mullw	14
  5615  00258C  0E08               	movlw	low (_Channels+8)
  5616  00258E  24F3               	addwf	prodl,w,c
  5617  002590  6ED9               	movwf	fsr2l,c
  5618  002592  0E04               	movlw	high (_Channels+8)
  5619  002594  20F4               	addwfc	prodh,w,c
  5620  002596  6EDA               	movwf	fsr2h,c
  5621  002598  CFDE F052          	movff	postinc2,btemp+8
  5622  00259C  CFDE F053          	movff	postinc2,btemp+9
  5623  0025A0  CFDE F054          	movff	postinc2,btemp+10
  5624  0025A4  CFDE F055          	movff	postinc2,btemp+11
  5625                           
  5626                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5627  0025A8  0EFA               	movlw	-6
  5628  0025AA  C052  FFE3         	movff	btemp+8,plusw1
  5629  0025AE  0EFB               	movlw	-5
  5630  0025B0  C053  FFE3         	movff	btemp+9,plusw1
  5631  0025B4  0EFC               	movlw	-4
  5632  0025B6  C054  FFE3         	movff	btemp+10,plusw1
  5633  0025BA  0EFD               	movlw	-3
  5634  0025BC  C055  FFE3         	movff	btemp+11,plusw1
  5635                           
  5636                           ; BSR set to: 2
  5637                           ;lorawan_eu.c: 1243: found = 1;
  5638                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  5639  0025C0  0EFF               	movlw	-1
  5640  0025C2  6AE3               	clrf	plusw1,c
  5641  0025C4  2AE3               	incf	plusw1,f,c
  5642  0025C6                     l15112:
  5643                           
  5644                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5645  0025C6  0EFE               	movlw	-2
  5646  0025C8  2AE3               	incf	plusw1,f,c
  5647                           
  5648                           ;stkvar	DutyCycleCallback@i @ sp[(-10)+8]
  5649  0025CA  CFE3 F04B          	movff	plusw1,btemp+1
  5650  0025CE  0E0F               	movlw	15
  5651  0025D0  644B               	cpfsgt	btemp+1,c
  5652  0025D2  D743               	goto	l15094
  5653                           
  5654                           ;lorawan_eu.c: 1244: }
  5655                           ;lorawan_eu.c: 1245: }
  5656                           ;lorawan_eu.c: 1246: }
  5657                           ;lorawan_eu.c: 1247: if ( found == 1 )
  5658                           ;stkvar	DutyCycleCallback@found @ sp[(-10)+9]
  5659  0025D4  0EFF               	movlw	-1
  5660  0025D6  04E3               	decf	plusw1,w,c
  5661  0025D8  E001 D096          	bnz	l1316
  5662                           
  5663                           ;lorawan_eu.c: 1248: {
  5664                           ;lorawan_eu.c: 1249: loRa.lastTimerValue = minim;
  5665                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5666  0025DC  50E1               	movf	fsr1l,w,c
  5667  0025DE  0FFA               	addlw	-6
  5668  0025E0  6ED9               	movwf	fsr2l,c
  5669  0025E2  50E2               	movf	fsr1h,w,c
  5670  0025E4  6EDA               	movwf	fsr2h,c
  5671  0025E6  0EFF               	movlw	255
  5672  0025E8  22DA               	addwfc	fsr2h,f,c
  5673  0025EA  CFDE F2C8          	movff	postinc2,_loRa+200
  5674  0025EE  CFDE F2C9          	movff	postinc2,_loRa+201
  5675  0025F2  CFDE F2CA          	movff	postinc2,_loRa+202
  5676  0025F6  CFDE F2CB          	movff	postinc2,_loRa+203
  5677                           
  5678                           ;lorawan_eu.c: 1250: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ?
      +                           ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) )
      +                          );
  5679                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5680  0025FA  0EFD               	movlw	-3
  5681  0025FC  50E3               	movf	plusw1,w,c
  5682  0025FE  E10D               	bnz	u17740
  5683  002600  0EFA               	movlw	-6
  5684  002602  28E3               	incf	plusw1,w,c
  5685  002604  0EFB               	movlw	-5
  5686  002606  CFE3 F04B          	movff	plusw1,btemp+1
  5687  00260A  0EFF               	movlw	255
  5688  00260C  5A4B               	subwfb	btemp+1,f,c
  5689  00260E  0EFC               	movlw	-4
  5690  002610  CFE3 F04B          	movff	plusw1,btemp+1
  5691  002614  0E0F               	movlw	15
  5692  002616  5A4B               	subwfb	btemp+1,f,c
  5693  002618  E328               	bnc	l15124
  5694  00261A                     u17740:
  5695                           
  5696                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5697  00261A  50E1               	movf	fsr1l,w,c
  5698  00261C  0FFA               	addlw	-6
  5699  00261E  6ED9               	movwf	fsr2l,c
  5700  002620  50E2               	movf	fsr1h,w,c
  5701  002622  6EDA               	movwf	fsr2h,c
  5702  002624  0EFF               	movlw	255
  5703  002626  22DA               	addwfc	fsr2h,f,c
  5704  002628  CFDE F064          	movff	postinc2,___lldiv@dividend
  5705  00262C  CFDE F065          	movff	postinc2,___lldiv@dividend+1
  5706  002630  CFDE F066          	movff	postinc2,___lldiv@dividend+2
  5707  002634  CFDE F067          	movff	postinc2,___lldiv@dividend+3
  5708  002638  0E7D               	movlw	125
  5709  00263A  0100               	movlb	0	; () banked
  5710  00263C  6F68               	movwf	___lldiv@divisor& (0+255),b
  5711  00263E  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  5712  002640  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  5713  002642  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  5714  002644  ECB3  F030         	call	___lldiv	;wreg free
  5715  002648  C064  F052         	movff	?___lldiv,btemp+8
  5716  00264C  C065  F053         	movff	?___lldiv+1,btemp+9
  5717  002650  C066  F054         	movff	?___lldiv+2,btemp+10
  5718  002654  C067  F055         	movff	?___lldiv+3,btemp+11
  5719  002658  0E0C               	movlw	12
  5720  00265A                     u17755:
  5721  00265A  90D8               	bcf	status,0,c
  5722  00265C  3652               	rlcf	btemp+8,f,c
  5723  00265E  3653               	rlcf	btemp+9,f,c
  5724  002660  3654               	rlcf	btemp+10,f,c
  5725  002662  3655               	rlcf	btemp+11,f,c
  5726  002664  2EE8               	decfsz	wreg,f,c
  5727  002666  D7F9               	goto	u17755
  5728  002668  D02C               	goto	L1
  5729  00266A                     l15124:
  5730                           
  5731                           ;stkvar	DutyCycleCallback@minim @ sp[(-10)+4]
  5732  00266A  0EFA               	movlw	-6
  5733  00266C  CFE3 F052          	movff	plusw1,btemp+8
  5734  002670  0EFB               	movlw	-5
  5735  002672  CFE3 F053          	movff	plusw1,btemp+9
  5736  002676  0EFC               	movlw	-4
  5737  002678  CFE3 F054          	movff	plusw1,btemp+10
  5738  00267C  0EFD               	movlw	-3
  5739  00267E  CFE3 F055          	movff	plusw1,btemp+11
  5740  002682  0E0C               	movlw	12
  5741  002684                     u17765:
  5742  002684  90D8               	bcf	status,0,c
  5743  002686  3652               	rlcf	btemp+8,f,c
  5744  002688  3653               	rlcf	btemp+9,f,c
  5745  00268A  3654               	rlcf	btemp+10,f,c
  5746  00268C  3655               	rlcf	btemp+11,f,c
  5747  00268E  2EE8               	decfsz	wreg,f,c
  5748  002690  D7F9               	goto	u17765
  5749  002692  C052  F064         	movff	btemp+8,___lldiv@dividend
  5750  002696  C053  F065         	movff	btemp+9,___lldiv@dividend+1
  5751  00269A  C054  F066         	movff	btemp+10,___lldiv@dividend+2
  5752  00269E  C055  F067         	movff	btemp+11,___lldiv@dividend+3
  5753  0026A2  0E7D               	movlw	125
  5754  0026A4  0100               	movlb	0	; () banked
  5755  0026A6  6F68               	movwf	___lldiv@divisor& (0+255),b
  5756  0026A8  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  5757  0026AA  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  5758  0026AC  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  5759  0026AE  ECB3  F030         	call	___lldiv	;wreg free
  5760  0026B2  C064  F052         	movff	?___lldiv,btemp+8
  5761  0026B6  C065  F053         	movff	?___lldiv+1,btemp+9
  5762  0026BA  C066  F054         	movff	?___lldiv+2,btemp+10
  5763  0026BE  C067  F055         	movff	?___lldiv+3,btemp+11
  5764  0026C2                     L1:
  5765                           
  5766                           ;stkvar	_DutyCycleCallback$2124 @ sp[(-10)+0]
  5767  0026C2  0EF6               	movlw	-10
  5768  0026C4  C052  FFE3         	movff	btemp+8,plusw1
  5769  0026C8  0EF7               	movlw	-9
  5770  0026CA  C053  FFE3         	movff	btemp+9,plusw1
  5771  0026CE  0EF8               	movlw	-8
  5772  0026D0  C054  FFE3         	movff	btemp+10,plusw1
  5773  0026D4  0EF9               	movlw	-7
  5774  0026D6  C055  FFE3         	movff	btemp+11,plusw1
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;stkvar	_DutyCycleCallback$2124 @ sp[(-10)+0]
  5778  0026DA  50E1               	movf	fsr1l,w,c
  5779  0026DC  0FF6               	addlw	-10
  5780  0026DE  6ED9               	movwf	fsr2l,c
  5781  0026E0  50E2               	movf	fsr1h,w,c
  5782  0026E2  6EDA               	movwf	fsr2h,c
  5783  0026E4  0EFF               	movlw	255
  5784  0026E6  22DA               	addwfc	fsr2h,f,c
  5785  0026E8  CFDE F071          	movff	postinc2,SwTimerSetTimeout@timeout
  5786  0026EC  CFDE F072          	movff	postinc2,SwTimerSetTimeout@timeout+1
  5787  0026F0  CFDE F073          	movff	postinc2,SwTimerSetTimeout@timeout+2
  5788  0026F4  CFDE F074          	movff	postinc2,SwTimerSetTimeout@timeout+3
  5789  0026F8  0102               	movlb	2	; () banked
  5790  0026FA  51E9               	movf	(_loRa+233)& (0+255),w,b
  5791  0026FC  ECCA  F036         	call	_SwTimerSetTimeout
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;lorawan_eu.c: 1251: SwTimerStart (loRa.dutyCycleTimerId);
  5795  002700  0102               	movlb	2	; () banked
  5796  002702  51E9               	movf	(_loRa+233)& (0+255),w,b
  5797  002704  ECB3  F02E         	call	_SwTimerStart
  5798  002708                     l1316:
  5799                           
  5800                           ; _DutyCycleCallback: autosize = 10, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  5801  002708  0EF5               	movlw	245
  5802  00270A  26E1               	addwf	fsr1l,f,c
  5803  00270C  0EFF               	movlw	255
  5804  00270E  22E2               	addwfc	fsr1h,f,c
  5805  002710  0CFF               	retlw	255	;funcret
  5806  002712                     __end_of_DutyCycleCallback:
  5807                           	opt stack 0
  5808                           tosu	equ	0xFFF
  5809                           tosh	equ	0xFFE
  5810                           tosl	equ	0xFFD
  5811                           pclath	equ	0xFFA
  5812                           tblptru	equ	0xFF8
  5813                           tblptrh	equ	0xFF7
  5814                           tblptrl	equ	0xFF6
  5815                           tablat	equ	0xFF5
  5816                           prodh	equ	0xFF4
  5817                           prodl	equ	0xFF3
  5818                           intcon	equ	0xFF2
  5819                           postinc0	equ	0xFEE
  5820                           wreg	equ	0xFE8
  5821                           postinc1	equ	0xFE6
  5822                           plusw1	equ	0xFE3
  5823                           fsr1h	equ	0xFE2
  5824                           fsr1l	equ	0xFE1
  5825                           indf2	equ	0xFDF
  5826                           postinc2	equ	0xFDE
  5827                           postdec2	equ	0xFDD
  5828                           fsr2h	equ	0xFDA
  5829                           fsr2l	equ	0xFD9
  5830                           status	equ	0xFD8
  5831                           
  5832 ;; *************** function _UpdateJoinSuccessState *****************
  5833 ;; Defined at:
  5834 ;;		line 1041 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  param           1  [STACK] unsigned char 
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;		None
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1  [STACK] void 
  5841 ;; Registers used:
  5842 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+8, btemp+9, btemp+10, btemp+11, tosl, prodl, prod
      +h, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : F/0
  5845 ;;		On exit  : F/1
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5848 ;;      Params:         0       0       0       0       0       0       0       0       0
  5849 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5850 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5851 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5852 ;;Total ram usage:        0 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:   11
  5855 ;; This function calls:
  5856 ;;		_RxJoinResponse
  5857 ;;		_SwTimerSetTimeout
  5858 ;;		_SwTimerStart
  5859 ;;		___lldiv
  5860 ;; This function is called by:
  5861 ;;		_SetCallbackSoftwareTimers
  5862 ;;		_LORAWAN_RxDone
  5863 ;;		_SwTimersExecute
  5864 ;; This function uses a reentrant model
  5865 ;;
  5866                           
  5867                           	psect	text32
  5868  004554                     __ptext32:
  5869                           	opt stack 0
  5870  004554                     _UpdateJoinSuccessState:
  5871                           	opt stack 0
  5872                           
  5873                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  5874  004554  52E6               	movf	postinc1,f,c
  5875  004556  52E6               	movf	postinc1,f,c
  5876  004558  52E6               	movf	postinc1,f,c
  5877  00455A  52E6               	movf	postinc1,f,c
  5878                           
  5879                           ;lorawan.c: 1043: loRa.lorawanMacStatus.joining = 0;
  5880                           
  5881                           ;incstack = 0
  5882  00455C  0102               	movlb	2	; () banked
  5883  00455E  9500               	bcf	_loRa& (0+255),2,b
  5884                           
  5885                           ;lorawan.c: 1044: loRa.macStatus.networkJoined = 1;
  5886  004560  8902               	bsf	(_loRa+2)& (0+255),4,b
  5887                           
  5888                           ; BSR set to: 2
  5889                           ;lorawan.c: 1045: loRa.macStatus.macState = IDLE;
  5890  004562  0EF0               	movlw	-16
  5891  004564  1702               	andwf	(_loRa+2)& (0+255),f,b
  5892                           
  5893                           ; BSR set to: 2
  5894                           ;lorawan.c: 1047: loRa.adrAckCnt = 0;
  5895  004566  6BD0               	clrf	(_loRa+208)& (0+255),b
  5896  004568  6BD1               	clrf	(_loRa+209)& (0+255),b
  5897                           
  5898                           ; BSR set to: 2
  5899                           ;lorawan.c: 1048: loRa.counterAdrAckDelay = 0;
  5900  00456A  6BEE               	clrf	(_loRa+238)& (0+255),b
  5901                           
  5902                           ; BSR set to: 2
  5903                           ;lorawan.c: 1051: if (loRa.macStatus.linkCheck == 1)
  5904  00456C  A503               	btfss	(_loRa+3)& (0+255),2,b
  5905  00456E  D074               	goto	l13962
  5906                           
  5907                           ; BSR set to: 2
  5908                           ;lorawan.c: 1052: {
  5909                           ;lorawan.c: 1053: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 
      +                          0x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32
      +                          _t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  5910  004570  51CF               	movf	(_loRa+207)& (0+255),w,b
  5911  004572  E106               	bnz	u15690
  5912  004574  29CC               	incf	(_loRa+204)& (0+255),w,b
  5913  004576  0EFF               	movlw	255
  5914  004578  59CD               	subwfb	(_loRa+205)& (0+255),w,b
  5915  00457A  0E0F               	movlw	15
  5916  00457C  59CE               	subwfb	(_loRa+206)& (0+255),w,b
  5917  00457E  E321               	bnc	l13956
  5918  004580                     u15690:
  5919                           
  5920                           ; BSR set to: 2
  5921  004580  C2CC  F064         	movff	_loRa+204,___lldiv@dividend
  5922  004584  C2CD  F065         	movff	_loRa+205,___lldiv@dividend+1
  5923  004588  C2CE  F066         	movff	_loRa+206,___lldiv@dividend+2
  5924  00458C  C2CF  F067         	movff	_loRa+207,___lldiv@dividend+3
  5925  004590  0E7D               	movlw	125
  5926  004592  0100               	movlb	0	; () banked
  5927  004594  6F68               	movwf	___lldiv@divisor& (0+255),b
  5928  004596  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  5929  004598  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  5930  00459A  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  5931  00459C  ECB3  F030         	call	___lldiv	;wreg free
  5932  0045A0  C064  F052         	movff	?___lldiv,btemp+8
  5933  0045A4  C065  F053         	movff	?___lldiv+1,btemp+9
  5934  0045A8  C066  F054         	movff	?___lldiv+2,btemp+10
  5935  0045AC  C067  F055         	movff	?___lldiv+3,btemp+11
  5936  0045B0  0E0C               	movlw	12
  5937  0045B2                     u15705:
  5938  0045B2  90D8               	bcf	status,0,c
  5939  0045B4  3652               	rlcf	btemp+8,f,c
  5940  0045B6  3653               	rlcf	btemp+9,f,c
  5941  0045B8  3654               	rlcf	btemp+10,f,c
  5942  0045BA  3655               	rlcf	btemp+11,f,c
  5943  0045BC  2EE8               	decfsz	wreg,f,c
  5944  0045BE  D7F9               	goto	u15705
  5945  0045C0  D028               	goto	L2
  5946  0045C2                     l13956:
  5947                           
  5948                           ; BSR set to: 2
  5949  0045C2  C2CC  F052         	movff	_loRa+204,btemp+8
  5950  0045C6  C2CD  F053         	movff	_loRa+205,btemp+9
  5951  0045CA  C2CE  F054         	movff	_loRa+206,btemp+10
  5952  0045CE  C2CF  F055         	movff	_loRa+207,btemp+11
  5953  0045D2  0E0C               	movlw	12
  5954  0045D4                     u15715:
  5955  0045D4  90D8               	bcf	status,0,c
  5956  0045D6  3652               	rlcf	btemp+8,f,c
  5957  0045D8  3653               	rlcf	btemp+9,f,c
  5958  0045DA  3654               	rlcf	btemp+10,f,c
  5959  0045DC  3655               	rlcf	btemp+11,f,c
  5960  0045DE  2EE8               	decfsz	wreg,f,c
  5961  0045E0  D7F9               	goto	u15715
  5962  0045E2  C052  F064         	movff	btemp+8,___lldiv@dividend
  5963  0045E6  C053  F065         	movff	btemp+9,___lldiv@dividend+1
  5964  0045EA  C054  F066         	movff	btemp+10,___lldiv@dividend+2
  5965  0045EE  C055  F067         	movff	btemp+11,___lldiv@dividend+3
  5966  0045F2  0E7D               	movlw	125
  5967  0045F4  0100               	movlb	0	; () banked
  5968  0045F6  6F68               	movwf	___lldiv@divisor& (0+255),b
  5969  0045F8  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  5970  0045FA  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  5971  0045FC  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  5972  0045FE  ECB3  F030         	call	___lldiv	;wreg free
  5973  004602  C064  F052         	movff	?___lldiv,btemp+8
  5974  004606  C065  F053         	movff	?___lldiv+1,btemp+9
  5975  00460A  C066  F054         	movff	?___lldiv+2,btemp+10
  5976  00460E  C067  F055         	movff	?___lldiv+3,btemp+11
  5977  004612                     L2:
  5978                           
  5979                           ;stkvar	_UpdateJoinSuccessState$3316 @ sp[(-4)+0]
  5980  004612  0EFC               	movlw	-4
  5981  004614  C052  FFE3         	movff	btemp+8,plusw1
  5982  004618  0EFD               	movlw	-3
  5983  00461A  C053  FFE3         	movff	btemp+9,plusw1
  5984  00461E  0EFE               	movlw	-2
  5985  004620  C054  FFE3         	movff	btemp+10,plusw1
  5986  004624  0EFF               	movlw	-1
  5987  004626  C055  FFE3         	movff	btemp+11,plusw1
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;stkvar	_UpdateJoinSuccessState$3316 @ sp[(-4)+0]
  5991  00462A  50E1               	movf	fsr1l,w,c
  5992  00462C  0FFC               	addlw	-4
  5993  00462E  6ED9               	movwf	fsr2l,c
  5994  004630  50E2               	movf	fsr1h,w,c
  5995  004632  6EDA               	movwf	fsr2h,c
  5996  004634  0EFF               	movlw	255
  5997  004636  22DA               	addwfc	fsr2h,f,c
  5998  004638  CFDE F071          	movff	postinc2,SwTimerSetTimeout@timeout
  5999  00463C  CFDE F072          	movff	postinc2,SwTimerSetTimeout@timeout+1
  6000  004640  CFDE F073          	movff	postinc2,SwTimerSetTimeout@timeout+2
  6001  004644  CFDE F074          	movff	postinc2,SwTimerSetTimeout@timeout+3
  6002  004648  0102               	movlb	2	; () banked
  6003  00464A  51E7               	movf	(_loRa+231)& (0+255),w,b
  6004  00464C  ECCA  F036         	call	_SwTimerSetTimeout
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;lorawan.c: 1054: SwTimerStart(loRa.linkCheckTimerId);
  6008  004650  0102               	movlb	2	; () banked
  6009  004652  51E7               	movf	(_loRa+231)& (0+255),w,b
  6010  004654  ECB3  F02E         	call	_SwTimerStart
  6011  004658                     l13962:
  6012                           
  6013                           ;lorawan.c: 1055: }
  6014                           ;lorawan.c: 1057: if (rxPayload.RxJoinResponse != (0))
  6015  004658  0101               	movlb	1	; () banked
  6016  00465A  5170               	movf	(_rxPayload+2)& (0+255),w,b
  6017  00465C  1171               	iorwf	(_rxPayload+3)& (0+255),w,b
  6018  00465E  E00E               	bz	l2111
  6019                           
  6020                           ; BSR set to: 1
  6021                           ;lorawan.c: 1058: {
  6022                           ;lorawan.c: 1059: rxPayload.RxJoinResponse(1);
  6023  004660  EE21  F070         	lfsr	2,_rxPayload+2
  6024  004664  D801               	call	u15738
  6025  004666  D00A               	goto	l2111
  6026  004668                     u15738:
  6027  004668  0005               	push	
  6028  00466A  6EFA               	movwf	pclath,c
  6029  00466C  50DE               	movf	postinc2,w,c
  6030  00466E  6EFD               	movwf	tosl,c
  6031  004670  50DE               	movf	postinc2,w,c
  6032  004672  6EFE               	movwf	tosh,c
  6033  004674  50F8               	movf	tblptru,w,c
  6034  004676  6EFF               	movwf	tosu,c
  6035  004678  50FA               	movf	pclath,w,c
  6036  00467A  0C01               	retlw	1	;indir
  6037  00467C                     l2111:
  6038                           
  6039                           ; BSR set to: 1
  6040                           ; _UpdateJoinSuccessState: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  6041  00467C  0EFB               	movlw	251
  6042  00467E  26E1               	addwf	fsr1l,f,c
  6043  004680  0EFF               	movlw	255
  6044  004682  22E2               	addwfc	fsr1h,f,c
  6045  004684  0CFF               	retlw	255	;funcret
  6046  004686                     __end_of_UpdateJoinSuccessState:
  6047                           	opt stack 0
  6048                           tosu	equ	0xFFF
  6049                           tosh	equ	0xFFE
  6050                           tosl	equ	0xFFD
  6051                           pclath	equ	0xFFA
  6052                           tblptru	equ	0xFF8
  6053                           tblptrh	equ	0xFF7
  6054                           tblptrl	equ	0xFF6
  6055                           tablat	equ	0xFF5
  6056                           prodh	equ	0xFF4
  6057                           prodl	equ	0xFF3
  6058                           intcon	equ	0xFF2
  6059                           postinc0	equ	0xFEE
  6060                           wreg	equ	0xFE8
  6061                           postinc1	equ	0xFE6
  6062                           plusw1	equ	0xFE3
  6063                           fsr1h	equ	0xFE2
  6064                           fsr1l	equ	0xFE1
  6065                           indf2	equ	0xFDF
  6066                           postinc2	equ	0xFDE
  6067                           postdec2	equ	0xFDD
  6068                           fsr2h	equ	0xFDA
  6069                           fsr2l	equ	0xFD9
  6070                           status	equ	0xFD8
  6071                           
  6072 ;; *************** function _AutomaticReplyCallback *****************
  6073 ;; Defined at:
  6074 ;;		line 1017 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  param           1  [STACK] unsigned char 
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;		None
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  1  [STACK] void 
  6081 ;; Registers used:
  6082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6083 ;; Tracked objects:
  6084 ;;		On entry : F/0
  6085 ;;		On exit  : F/2
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6088 ;;      Params:         0       0       0       0       0       0       0       0       0
  6089 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6090 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6091 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6092 ;;Total ram usage:        0 bytes
  6093 ;; Hardware stack levels used:    1
  6094 ;; Hardware stack levels required when called:   14
  6095 ;; This function calls:
  6096 ;;		_LORAWAN_Send
  6097 ;; This function is called by:
  6098 ;;		_SetCallbackSoftwareTimers
  6099 ;;		_SwTimersExecute
  6100 ;; This function uses a reentrant model
  6101 ;;
  6102                           
  6103                           	psect	text33
  6104  0074DA                     __ptext33:
  6105                           	opt stack 0
  6106  0074DA                     _AutomaticReplyCallback:
  6107                           	opt stack 14
  6108                           
  6109                           ;lorawan.c: 1019: loRa.macStatus.macState = IDLE;
  6110                           
  6111                           ; BSR set to: 1
  6112                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6113                           ;incstack = 0
  6114  0074DA  0EF0               	movlw	-16
  6115  0074DC  0102               	movlb	2	; () banked
  6116  0074DE  1702               	andwf	(_loRa+2)& (0+255),f,b
  6117                           
  6118                           ; BSR set to: 2
  6119                           ;lorawan.c: 1020: LORAWAN_Send (0, 0, 0, 0);
  6120  0074E0  0E00               	movlw	0
  6121  0074E2  0100               	movlb	0	; () banked
  6122  0074E4  6FE1               	movwf	LORAWAN_Send@port& (0+255),b
  6123  0074E6  6FE2               	movwf	LORAWAN_Send@buffer& (0+255),b
  6124  0074E8  6FE3               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
  6125  0074EA  6FE4               	movwf	LORAWAN_Send@bufferLength& (0+255),b
  6126  0074EC  EC0A  F02B         	call	_LORAWAN_Send
  6127                           
  6128                           ;lorawan.c: 1021: loRa.lorawanMacStatus.fPending = 0;
  6129  0074F0  0102               	movlb	2	; () banked
  6130  0074F2  9700               	bcf	_loRa& (0+255),3,b
  6131                           
  6132                           ; BSR set to: 2
  6133                           ; _AutomaticReplyCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 1, argsize = 1, vargsize = 0
  6134  0074F4  52E5               	movf	postdec1,f,c
  6135  0074F6  0012               	return		;funcret
  6136  0074F8                     __end_of_AutomaticReplyCallback:
  6137                           	opt stack 0
  6138                           tosu	equ	0xFFF
  6139                           tosh	equ	0xFFE
  6140                           tosl	equ	0xFFD
  6141                           pclath	equ	0xFFA
  6142                           tblptru	equ	0xFF8
  6143                           tblptrh	equ	0xFF7
  6144                           tblptrl	equ	0xFF6
  6145                           tablat	equ	0xFF5
  6146                           prodh	equ	0xFF4
  6147                           prodl	equ	0xFF3
  6148                           intcon	equ	0xFF2
  6149                           postinc0	equ	0xFEE
  6150                           wreg	equ	0xFE8
  6151                           postinc1	equ	0xFE6
  6152                           postdec1	equ	0xFE5
  6153                           plusw1	equ	0xFE3
  6154                           fsr1h	equ	0xFE2
  6155                           fsr1l	equ	0xFE1
  6156                           indf2	equ	0xFDF
  6157                           postinc2	equ	0xFDE
  6158                           postdec2	equ	0xFDD
  6159                           fsr2h	equ	0xFDA
  6160                           fsr2l	equ	0xFD9
  6161                           status	equ	0xFD8
  6162                           
  6163 ;; *************** function _AckRetransmissionCallback *****************
  6164 ;; Defined at:
  6165 ;;		line 934 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6166 ;; Parameters:    Size  Location     Type
  6167 ;;  param           1  [STACK] unsigned char 
  6168 ;; Auto vars:     Size  Location     Type
  6169 ;;  maximumPacke    1  [STACK] unsigned char 
  6170 ;; Return value:  Size  Location     Type
  6171 ;;                  1  [STACK] void 
  6172 ;; Registers used:
  6173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+10, btemp+11, tos
      +l, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6174 ;; Tracked objects:
  6175 ;;		On entry : F/0
  6176 ;;		On exit  : C/0
  6177 ;;		Unchanged: 0/0
  6178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6179 ;;      Params:         0       0       0       0       0       0       0       0       0
  6180 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6181 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6182 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6183 ;;Total ram usage:        0 bytes
  6184 ;; Hardware stack levels used:    1
  6185 ;; Hardware stack levels required when called:   13
  6186 ;; This function calls:
  6187 ;;		_FindSmallestDataRate
  6188 ;;		_LORAWAN_GetMaxPayloadSize
  6189 ;;		_RADIO_Transmit
  6190 ;;		_ResetParametersForConfirmedTransmission
  6191 ;;		_RxDataDone
  6192 ;;		_SelectChannelForTransmission
  6193 ;;		_UpdateRetransmissionAckTimeoutState
  6194 ;; This function is called by:
  6195 ;;		_SetCallbackSoftwareTimers
  6196 ;;		_SwTimersExecute
  6197 ;; This function uses a reentrant model
  6198 ;;
  6199                           
  6200                           	psect	text34
  6201  0049BA                     __ptext34:
  6202                           	opt stack 0
  6203  0049BA                     _AckRetransmissionCallback:
  6204                           	opt stack 0
  6205                           
  6206                           ; BSR set to: 2
  6207                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6208  0049BA  52E6               	movf	postinc1,f,c
  6209                           
  6210                           ;lorawan.c: 936: uint8_t maximumPacketSize;
  6211                           ;lorawan.c: 938: if (loRa.macStatus.macPause == 0)
  6212                           
  6213                           ;incstack = 0
  6214  0049BC  0102               	movlb	2	; () banked
  6215  0049BE  B103               	btfsc	(_loRa+3)& (0+255),0,b
  6216  0049C0  D075               	goto	l15234
  6217                           
  6218                           ; BSR set to: 2
  6219                           ;lorawan.c: 939: {
  6220                           ;lorawan.c: 940: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsConfir
      +                          medUplink)
  6221  0049C2  51D9               	movf	(_loRa+217)& (0+255),w,b
  6222  0049C4  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  6223  0049C6  E354               	bnc	l15224
  6224                           
  6225                           ; BSR set to: 2
  6226                           ;lorawan.c: 941: {
  6227                           ;lorawan.c: 942: maximumPacketSize = LORAWAN_GetMaxPayloadSize () + 13;
  6228  0049C8  ECEB  F036         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
  6229  0049CC  6E55               	movwf	btemp+11,c
  6230  0049CE  0E0D               	movlw	13
  6231  0049D0  2655               	addwf	btemp+11,f,c
  6232                           
  6233                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  6234  0049D2  0EFF               	movlw	-1
  6235  0049D4  C055  FFE3         	movff	btemp+11,plusw1
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;lorawan.c: 945: if (loRa.lastPacketLength <= maximumPacketSize)
  6239                           ;stkvar	AckRetransmissionCallback@maximumPacketSize @ sp[(-1)+0]
  6240  0049D8  50E3               	movf	plusw1,w,c
  6241  0049DA  6E4B               	movwf	btemp+1,c
  6242  0049DC  6A4C               	clrf	btemp+2,c
  6243  0049DE  0102               	movlb	2	; () banked
  6244  0049E0  51D4               	movf	(_loRa+212)& (0+255),w,b
  6245  0049E2  5C4B               	subwf	btemp+1,w,c
  6246  0049E4  51D5               	movf	(_loRa+213)& (0+255),w,b
  6247  0049E6  584C               	subwfb	btemp+2,w,c
  6248  0049E8  E333               	bnc	l15218
  6249                           
  6250                           ; BSR set to: 2
  6251                           ;lorawan.c: 946: {
  6252                           ;lorawan.c: 947: if (SelectChannelForTransmission (1) == OK)
  6253  0049EA  0E01               	movlw	1
  6254  0049EC  EC60  F033         	call	_SelectChannelForTransmission
  6255  0049F0  0900               	iorlw	0
  6256  0049F2  E12B               	bnz	l15214
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;lorawan.c: 948: {
  6260                           ;lorawan.c: 950: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
  6261  0049F4  0EF0               	movlw	low (_macBuffer+16)
  6262  0049F6  6F94               	movwf	RADIO_Transmit@buffer& (0+255),b
  6263  0049F8  0E04               	movlw	high (_macBuffer+16)
  6264  0049FA  6F95               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  6265  0049FC  C2D4  F096         	movff	_loRa+212,RADIO_Transmit@bufferLen
  6266  004A00  ECFA  F017         	call	_RADIO_Transmit	;wreg free
  6267  004A04  C094  F04B         	movff	?_RADIO_Transmit,btemp+1
  6268  004A08  C095  F04C         	movff	?_RADIO_Transmit+1,btemp+2
  6269  004A0C  504B               	movf	btemp+1,w,c
  6270  004A0E  104C               	iorwf	btemp+2,w,c
  6271  004A10  E11C               	bnz	l15214
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;lorawan.c: 951: {
  6275                           ;lorawan.c: 952: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  6276  004A12  0102               	movlb	2	; () banked
  6277  004A14  5102               	movf	(_loRa+2)& (0+255),w,b
  6278  004A16  0BF0               	andlw	-16
  6279  004A18  0901               	iorlw	1
  6280  004A1A  6F02               	movwf	(_loRa+2)& (0+255),b
  6281                           
  6282                           ; BSR set to: 2
  6283                           ;lorawan.c: 953: loRa.counterRepetitionsConfirmedUplink ++ ;
  6284  004A1C  2BD9               	incf	(_loRa+217)& (0+255),f,b
  6285                           
  6286                           ; BSR set to: 2
  6287                           ;lorawan.c: 956: if ( ( (loRa.counterRepetitionsConfirmedUplink % 2) == 0) && (loRa.curr
      +                          entDataRate != 0) && (loRa.counterRepetitionsConfirmedUplink != (loRa.maxRepetitionsConf
      +                          irmedUplink + 1) ) )
  6288  004A1E  B1D9               	btfsc	(_loRa+217)& (0+255),0,b
  6289  004A20  D047               	goto	l2084
  6290                           
  6291                           ; BSR set to: 2
  6292  004A22  51DF               	movf	(_loRa+223)& (0+255),w,b
  6293  004A24  E045               	bz	l2084
  6294                           
  6295                           ; BSR set to: 2
  6296  004A26  51D9               	movf	(_loRa+217)& (0+255),w,b
  6297  004A28  6E4B               	movwf	btemp+1,c
  6298  004A2A  6A4C               	clrf	btemp+2,c
  6299  004A2C  51D7               	movf	(_loRa+215)& (0+255),w,b
  6300  004A2E  6E54               	movwf	btemp+10,c
  6301  004A30  6A55               	clrf	btemp+11,c
  6302  004A32  2A54               	incf	btemp+10,f,c
  6303  004A34  0E00               	movlw	0
  6304  004A36  2255               	addwfc	btemp+11,f,c
  6305  004A38  504B               	movf	btemp+1,w,c
  6306  004A3A  1854               	xorwf	btemp+10,w,c
  6307  004A3C  E103               	bnz	u17970
  6308  004A3E  504C               	movf	btemp+2,w,c
  6309  004A40  1855               	xorwf	btemp+11,w,c
  6310  004A42  E036               	bz	l2084
  6311  004A44                     u17970:
  6312                           
  6313                           ; BSR set to: 2
  6314                           ;lorawan.c: 957: {
  6315                           ;lorawan.c: 958: FindSmallestDataRate();
  6316  004A44  EC7E  F02D         	call	_FindSmallestDataRate	;wreg free
  6317  004A48  D033               	goto	l2084
  6318  004A4A                     l15214:
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;lorawan.c: 961: else
  6322                           ;lorawan.c: 962: {
  6323                           ;lorawan.c: 964: UpdateRetransmissionAckTimeoutState ();
  6324  004A4A  EC95  F031         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
  6325  004A4E  D030               	goto	l2084
  6326  004A50                     l15218:
  6327                           
  6328                           ; BSR set to: 2
  6329                           ;lorawan.c: 973: else
  6330                           ;lorawan.c: 974: {
  6331                           ;lorawan.c: 975: ResetParametersForConfirmedTransmission ();
  6332  004A50  ECC9  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  6333                           
  6334                           ; BSR set to: 2
  6335                           ;lorawan.c: 976: if (rxPayload.RxAppData != (0))
  6336  004A54  0101               	movlb	1	; () banked
  6337  004A56  516E               	movf	_rxPayload& (0+255),w,b
  6338  004A58  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  6339  004A5A  E02A               	bz	l2084
  6340                           
  6341                           ; BSR set to: 1
  6342                           ;lorawan.c: 977: {
  6343                           ;lorawan.c: 978: rxPayload.RxAppData((0), 0, INVALID_BUFFER_LEN);
  6344  004A5C  0E00               	movlw	0
  6345  004A5E  0100               	movlb	0	; () banked
  6346  004A60  6F64               	movwf	RxDataDone@pData& (0+255),b
  6347  004A62  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  6348  004A64  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  6349  004A66  0E04               	movlw	4
  6350  004A68  6F67               	movwf	RxDataDone@status& (0+255),b
  6351  004A6A  D801               	call	u17998
  6352  004A6C  D021               	goto	l2084
  6353  004A6E                     u17998:
  6354  004A6E  D013               	goto	u18038
  6355  004A70                     l15224:
  6356                           
  6357                           ; BSR set to: 2
  6358                           ;lorawan.c: 982: else if ( (loRa.counterRepetitionsConfirmedUplink > loRa.maxRepetitions
      +                          ConfirmedUplink) && (loRa.macStatus.macPause == 0) )
  6359  004A70  51D9               	movf	(_loRa+217)& (0+255),w,b
  6360  004A72  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  6361  004A74  E21D               	bc	l2084
  6362                           
  6363                           ; BSR set to: 2
  6364  004A76  B103               	btfsc	(_loRa+3)& (0+255),0,b
  6365  004A78  D01B               	goto	l2084
  6366                           
  6367                           ; BSR set to: 2
  6368                           ;lorawan.c: 983: {
  6369                           ;lorawan.c: 984: ResetParametersForConfirmedTransmission ();
  6370  004A7A  ECC9  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  6371                           
  6372                           ; BSR set to: 2
  6373                           ;lorawan.c: 985: if (rxPayload.RxAppData != (0))
  6374  004A7E  0101               	movlb	1	; () banked
  6375  004A80  516E               	movf	_rxPayload& (0+255),w,b
  6376  004A82  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  6377  004A84  E015               	bz	l2084
  6378                           
  6379                           ; BSR set to: 1
  6380                           ;lorawan.c: 986: {
  6381                           ;lorawan.c: 987: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  6382  004A86  0E00               	movlw	0
  6383  004A88  0100               	movlb	0	; () banked
  6384  004A8A  6F64               	movwf	RxDataDone@pData& (0+255),b
  6385  004A8C  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  6386  004A8E  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  6387  004A90  6F67               	movwf	RxDataDone@status& (0+255),b
  6388  004A92  D801               	call	u18038
  6389  004A94  D00D               	goto	l2084
  6390  004A96                     u18038:
  6391  004A96  0005               	push	
  6392  004A98  0101               	movlb	1	; () banked
  6393  004A9A  6EFA               	movwf	pclath,c
  6394  004A9C  516E               	movf	_rxPayload& (0+255),w,b
  6395  004A9E  6EFD               	movwf	tosl,c
  6396  004AA0  516F               	movf	(_rxPayload+1)& (0+255),w,b
  6397  004AA2  6EFE               	movwf	tosh,c
  6398  004AA4  50F8               	movf	tblptru,w,c
  6399  004AA6  6EFF               	movwf	tosu,c
  6400  004AA8  50FA               	movf	pclath,w,c
  6401  004AAA  0012               	return		;indir
  6402  004AAC                     l15234:
  6403                           
  6404                           ; BSR set to: 2
  6405                           ;lorawan.c: 991: else
  6406                           ;lorawan.c: 992: {
  6407                           ;lorawan.c: 993: ResetParametersForConfirmedTransmission ();
  6408  004AAC  ECC9  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  6409  004AB0                     l2084:
  6410                           
  6411                           ; _AckRetransmissionCallback: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  6412  004AB0  52E5               	movf	postdec1,f,c
  6413  004AB2  52E5               	movf	postdec1,f,c
  6414  004AB4  0012               	return		;funcret
  6415  004AB6                     __end_of_AckRetransmissionCallback:
  6416                           	opt stack 0
  6417                           tosu	equ	0xFFF
  6418                           tosh	equ	0xFFE
  6419                           tosl	equ	0xFFD
  6420                           pclath	equ	0xFFA
  6421                           tblptru	equ	0xFF8
  6422                           tblptrh	equ	0xFF7
  6423                           tblptrl	equ	0xFF6
  6424                           tablat	equ	0xFF5
  6425                           prodh	equ	0xFF4
  6426                           prodl	equ	0xFF3
  6427                           intcon	equ	0xFF2
  6428                           postinc0	equ	0xFEE
  6429                           wreg	equ	0xFE8
  6430                           postinc1	equ	0xFE6
  6431                           postdec1	equ	0xFE5
  6432                           plusw1	equ	0xFE3
  6433                           fsr1h	equ	0xFE2
  6434                           fsr1l	equ	0xFE1
  6435                           indf2	equ	0xFDF
  6436                           postinc2	equ	0xFDE
  6437                           postdec2	equ	0xFDD
  6438                           fsr2h	equ	0xFDA
  6439                           fsr2l	equ	0xFD9
  6440                           status	equ	0xFD8
  6441                           
  6442 ;; *************** function _LORAWAN_LinkCheckCallback *****************
  6443 ;; Defined at:
  6444 ;;		line 881 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;  param           1  [STACK] unsigned char 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  iCtr            1  [STACK] unsigned char 
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  1  [STACK] void 
  6451 ;; Registers used:
  6452 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+8, btemp+9, btemp+10, btemp+11, prodl, prodh, c
      +stack
  6453 ;; Tracked objects:
  6454 ;;		On entry : F/0
  6455 ;;		On exit  : D/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6458 ;;      Params:         0       0       0       0       0       0       0       0       0
  6459 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6460 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6461 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6462 ;;Total ram usage:        0 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:   11
  6465 ;; This function calls:
  6466 ;;		_SwTimerSetTimeout
  6467 ;;		_SwTimerStart
  6468 ;;		___lldiv
  6469 ;; This function is called by:
  6470 ;;		_SetCallbackSoftwareTimers
  6471 ;;		_SwTimersExecute
  6472 ;; This function uses a reentrant model
  6473 ;;
  6474                           
  6475                           	psect	text35
  6476  00402C                     __ptext35:
  6477                           	opt stack 0
  6478  00402C                     _LORAWAN_LinkCheckCallback:
  6479                           	opt stack 0
  6480                           
  6481                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6482  00402C  0E05               	movlw	5
  6483  00402E  26E1               	addwf	fsr1l,f,c
  6484  004030  0E00               	movlw	0
  6485  004032  22E2               	addwfc	fsr1h,f,c
  6486                           
  6487                           ;lorawan.c: 885: if ((loRa.macStatus.macPause == 0) && (loRa.macStatus.linkCheck == 1))
  6488                           
  6489                           ;incstack = 0
  6490  004034  0102               	movlb	2	; () banked
  6491  004036  A103               	btfss	(_loRa+3)& (0+255),0,b
  6492                           
  6493                           ; BSR set to: 2
  6494  004038  A503               	btfss	(_loRa+3)& (0+255),2,b
  6495  00403A  D029               	goto	l15178
  6496                           
  6497                           ; BSR set to: 2
  6498                           ;lorawan.c: 886: {
  6499                           ;lorawan.c: 888: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
  6500                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  6501  00403C  0EFF               	movlw	-1
  6502  00403E  6AE3               	clrf	plusw1,c
  6503  004040  D00E               	goto	l15168
  6504  004042                     l15162:
  6505                           
  6506                           ; BSR set to: 2
  6507                           ;lorawan.c: 889: {
  6508                           ;lorawan.c: 890: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
  6509                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  6510  004042  0EFF               	movlw	-1
  6511  004044  50E3               	movf	plusw1,w,c
  6512  004046  0D02               	mullw	2
  6513  004048  0EA8               	movlw	low (_loRa+168)
  6514  00404A  24F3               	addwf	prodl,w,c
  6515  00404C  6ED9               	movwf	fsr2l,c
  6516  00404E  0E02               	movlw	high (_loRa+168)
  6517  004050  20F4               	addwfc	prodh,w,c
  6518  004052  6EDA               	movwf	fsr2h,c
  6519  004054  0E02               	movlw	2
  6520  004056  18DE               	xorwf	postinc2,w,c
  6521  004058  E008               	bz	l15170
  6522                           
  6523                           ; BSR set to: 2
  6524                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  6525  00405A  0EFF               	movlw	-1
  6526  00405C  2AE3               	incf	plusw1,f,c
  6527  00405E                     l15168:
  6528                           
  6529                           ; BSR set to: 2
  6530                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  6531  00405E  0EFF               	movlw	-1
  6532  004060  CFE3 F04B          	movff	plusw1,btemp+1
  6533  004064  51A7               	movf	(_loRa+167)& (0+255),w,b
  6534  004066  5C4B               	subwf	btemp+1,w,c
  6535  004068  E3EC               	bnc	l15162
  6536  00406A                     l15170:
  6537                           
  6538                           ; BSR set to: 2
  6539                           ;lorawan.c: 893: }
  6540                           ;lorawan.c: 894: }
  6541                           ;lorawan.c: 896: if(iCtr == loRa.crtMacCmdIndex)
  6542                           ;stkvar	LORAWAN_LinkCheckCallback@iCtr @ sp[(-5)+4]
  6543  00406A  0EFF               	movlw	-1
  6544  00406C  50E3               	movf	plusw1,w,c
  6545  00406E  19A7               	xorwf	(_loRa+167)& (0+255),w,b
  6546  004070  E10E               	bnz	l15178
  6547                           
  6548                           ; BSR set to: 2
  6549                           ;lorawan.c: 897: {
  6550                           ;lorawan.c: 898: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = LINK_CHECK_CID;
  6551  004072  51A7               	movf	(_loRa+167)& (0+255),w,b
  6552  004074  0D02               	mullw	2
  6553  004076  0EA8               	movlw	low (_loRa+168)
  6554  004078  24F3               	addwf	prodl,w,c
  6555  00407A  6ED9               	movwf	fsr2l,c
  6556  00407C  0E02               	movlw	high (_loRa+168)
  6557  00407E  20F4               	addwfc	prodh,w,c
  6558  004080  6EDA               	movwf	fsr2h,c
  6559  004082  0E02               	movlw	2
  6560  004084  6EDF               	movwf	indf2,c
  6561                           
  6562                           ; BSR set to: 2
  6563                           ;lorawan.c: 900: if(loRa.crtMacCmdIndex < 16)
  6564  004086  0E10               	movlw	16
  6565  004088  61A7               	cpfslt	(_loRa+167)& (0+255),b
  6566  00408A  D001               	goto	l15178
  6567                           
  6568                           ; BSR set to: 2
  6569                           ;lorawan.c: 901: {
  6570                           ;lorawan.c: 902: loRa.crtMacCmdIndex ++;
  6571  00408C  2BA7               	incf	(_loRa+167)& (0+255),f,b
  6572  00408E                     l15178:
  6573                           
  6574                           ; BSR set to: 2
  6575                           ;lorawan.c: 903: }
  6576                           ;lorawan.c: 904: }
  6577                           ;lorawan.c: 905: }
  6578                           ;lorawan.c: 908: if (loRa.macStatus.linkCheck == 1)
  6579  00408E  A503               	btfss	(_loRa+3)& (0+255),2,b
  6580  004090  D074               	goto	l2062
  6581                           
  6582                           ; BSR set to: 2
  6583                           ;lorawan.c: 909: {
  6584                           ;lorawan.c: 910: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
  6585  004092  51CF               	movf	(_loRa+207)& (0+255),w,b
  6586  004094  E106               	bnz	u17870
  6587  004096  29CC               	incf	(_loRa+204)& (0+255),w,b
  6588  004098  0EFF               	movlw	255
  6589  00409A  59CD               	subwfb	(_loRa+205)& (0+255),w,b
  6590  00409C  0E0F               	movlw	15
  6591  00409E  59CE               	subwfb	(_loRa+206)& (0+255),w,b
  6592  0040A0  E321               	bnc	l15184
  6593  0040A2                     u17870:
  6594                           
  6595                           ; BSR set to: 2
  6596  0040A2  C2CC  F064         	movff	_loRa+204,___lldiv@dividend
  6597  0040A6  C2CD  F065         	movff	_loRa+205,___lldiv@dividend+1
  6598  0040AA  C2CE  F066         	movff	_loRa+206,___lldiv@dividend+2
  6599  0040AE  C2CF  F067         	movff	_loRa+207,___lldiv@dividend+3
  6600  0040B2  0E7D               	movlw	125
  6601  0040B4  0100               	movlb	0	; () banked
  6602  0040B6  6F68               	movwf	___lldiv@divisor& (0+255),b
  6603  0040B8  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  6604  0040BA  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  6605  0040BC  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  6606  0040BE  ECB3  F030         	call	___lldiv	;wreg free
  6607  0040C2  C064  F052         	movff	?___lldiv,btemp+8
  6608  0040C6  C065  F053         	movff	?___lldiv+1,btemp+9
  6609  0040CA  C066  F054         	movff	?___lldiv+2,btemp+10
  6610  0040CE  C067  F055         	movff	?___lldiv+3,btemp+11
  6611  0040D2  0E0C               	movlw	12
  6612  0040D4                     u17885:
  6613  0040D4  90D8               	bcf	status,0,c
  6614  0040D6  3652               	rlcf	btemp+8,f,c
  6615  0040D8  3653               	rlcf	btemp+9,f,c
  6616  0040DA  3654               	rlcf	btemp+10,f,c
  6617  0040DC  3655               	rlcf	btemp+11,f,c
  6618  0040DE  2EE8               	decfsz	wreg,f,c
  6619  0040E0  D7F9               	goto	u17885
  6620  0040E2  D028               	goto	L3
  6621  0040E4                     l15184:
  6622                           
  6623                           ; BSR set to: 2
  6624  0040E4  C2CC  F052         	movff	_loRa+204,btemp+8
  6625  0040E8  C2CD  F053         	movff	_loRa+205,btemp+9
  6626  0040EC  C2CE  F054         	movff	_loRa+206,btemp+10
  6627  0040F0  C2CF  F055         	movff	_loRa+207,btemp+11
  6628  0040F4  0E0C               	movlw	12
  6629  0040F6                     u17895:
  6630  0040F6  90D8               	bcf	status,0,c
  6631  0040F8  3652               	rlcf	btemp+8,f,c
  6632  0040FA  3653               	rlcf	btemp+9,f,c
  6633  0040FC  3654               	rlcf	btemp+10,f,c
  6634  0040FE  3655               	rlcf	btemp+11,f,c
  6635  004100  2EE8               	decfsz	wreg,f,c
  6636  004102  D7F9               	goto	u17895
  6637  004104  C052  F064         	movff	btemp+8,___lldiv@dividend
  6638  004108  C053  F065         	movff	btemp+9,___lldiv@dividend+1
  6639  00410C  C054  F066         	movff	btemp+10,___lldiv@dividend+2
  6640  004110  C055  F067         	movff	btemp+11,___lldiv@dividend+3
  6641  004114  0E7D               	movlw	125
  6642  004116  0100               	movlb	0	; () banked
  6643  004118  6F68               	movwf	___lldiv@divisor& (0+255),b
  6644  00411A  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  6645  00411C  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  6646  00411E  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  6647  004120  ECB3  F030         	call	___lldiv	;wreg free
  6648  004124  C064  F052         	movff	?___lldiv,btemp+8
  6649  004128  C065  F053         	movff	?___lldiv+1,btemp+9
  6650  00412C  C066  F054         	movff	?___lldiv+2,btemp+10
  6651  004130  C067  F055         	movff	?___lldiv+3,btemp+11
  6652  004134                     L3:
  6653                           
  6654                           ;stkvar	_LORAWAN_LinkCheckCallback$3299 @ sp[(-5)+0]
  6655  004134  0EFB               	movlw	-5
  6656  004136  C052  FFE3         	movff	btemp+8,plusw1
  6657  00413A  0EFC               	movlw	-4
  6658  00413C  C053  FFE3         	movff	btemp+9,plusw1
  6659  004140  0EFD               	movlw	-3
  6660  004142  C054  FFE3         	movff	btemp+10,plusw1
  6661  004146  0EFE               	movlw	-2
  6662  004148  C055  FFE3         	movff	btemp+11,plusw1
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;stkvar	_LORAWAN_LinkCheckCallback$3299 @ sp[(-5)+0]
  6666  00414C  50E1               	movf	fsr1l,w,c
  6667  00414E  0FFB               	addlw	-5
  6668  004150  6ED9               	movwf	fsr2l,c
  6669  004152  50E2               	movf	fsr1h,w,c
  6670  004154  6EDA               	movwf	fsr2h,c
  6671  004156  0EFF               	movlw	255
  6672  004158  22DA               	addwfc	fsr2h,f,c
  6673  00415A  CFDE F071          	movff	postinc2,SwTimerSetTimeout@timeout
  6674  00415E  CFDE F072          	movff	postinc2,SwTimerSetTimeout@timeout+1
  6675  004162  CFDE F073          	movff	postinc2,SwTimerSetTimeout@timeout+2
  6676  004166  CFDE F074          	movff	postinc2,SwTimerSetTimeout@timeout+3
  6677  00416A  0102               	movlb	2	; () banked
  6678  00416C  51E7               	movf	(_loRa+231)& (0+255),w,b
  6679  00416E  ECCA  F036         	call	_SwTimerSetTimeout
  6680                           
  6681                           ; BSR set to: 0
  6682                           ;lorawan.c: 911: SwTimerStart(loRa.linkCheckTimerId);
  6683  004172  0102               	movlb	2	; () banked
  6684  004174  51E7               	movf	(_loRa+231)& (0+255),w,b
  6685  004176  ECB3  F02E         	call	_SwTimerStart
  6686  00417A                     l2062:
  6687                           
  6688                           ; _LORAWAN_LinkCheckCallback: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 
      +                          parsize = 1, argsize = 1, vargsize = 0
  6689  00417A  0EFA               	movlw	250
  6690  00417C  26E1               	addwf	fsr1l,f,c
  6691  00417E  0EFF               	movlw	255
  6692  004180  22E2               	addwfc	fsr1h,f,c
  6693  004182  0CFF               	retlw	255	;funcret
  6694  004184                     __end_of_LORAWAN_LinkCheckCallback:
  6695                           	opt stack 0
  6696                           tosu	equ	0xFFF
  6697                           tosh	equ	0xFFE
  6698                           tosl	equ	0xFFD
  6699                           pclath	equ	0xFFA
  6700                           tblptru	equ	0xFF8
  6701                           tblptrh	equ	0xFF7
  6702                           tblptrl	equ	0xFF6
  6703                           tablat	equ	0xFF5
  6704                           prodh	equ	0xFF4
  6705                           prodl	equ	0xFF3
  6706                           intcon	equ	0xFF2
  6707                           postinc0	equ	0xFEE
  6708                           wreg	equ	0xFE8
  6709                           postinc1	equ	0xFE6
  6710                           postdec1	equ	0xFE5
  6711                           plusw1	equ	0xFE3
  6712                           fsr1h	equ	0xFE2
  6713                           fsr1l	equ	0xFE1
  6714                           indf2	equ	0xFDF
  6715                           postinc2	equ	0xFDE
  6716                           postdec2	equ	0xFDD
  6717                           fsr2h	equ	0xFDA
  6718                           fsr2l	equ	0xFD9
  6719                           status	equ	0xFD8
  6720                           
  6721 ;; *************** function _LORAWAN_ReceiveWindow1Callback *****************
  6722 ;; Defined at:
  6723 ;;		line 796 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;  param           1  [STACK] unsigned char 
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;  freq            4  [STACK] unsigned long 
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1  [STACK] void 
  6730 ;; Registers used:
  6731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, t
      +blptrh, tblptru, prodl, prodh, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : F/0
  6734 ;;		On exit  : D/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6737 ;;      Params:         0       0       0       0       0       0       0       0       0
  6738 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6740 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6741 ;;Total ram usage:        0 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:   13
  6744 ;; This function calls:
  6745 ;;		_ConfigureRadioRx
  6746 ;;		_GetRx1Freq
  6747 ;;		_RADIO_ReceiveStart
  6748 ;;		_RADIO_ReceiveStop
  6749 ;;		_RADIO_ReleaseData
  6750 ;; This function is called by:
  6751 ;;		_SetCallbackSoftwareTimers
  6752 ;;		_SwTimersExecute
  6753 ;; This function uses a reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text36
  6757  005A4E                     __ptext36:
  6758                           	opt stack 0
  6759  005A4E                     _LORAWAN_ReceiveWindow1Callback:
  6760                           	opt stack 0
  6761                           
  6762                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6763  005A4E  52E6               	movf	postinc1,f,c
  6764  005A50  52E6               	movf	postinc1,f,c
  6765  005A52  52E6               	movf	postinc1,f,c
  6766  005A54  52E6               	movf	postinc1,f,c
  6767                           
  6768                           ;lorawan.c: 798: uint32_t freq;
  6769                           ;lorawan.c: 800: if(loRa.macStatus.macPause == 0)
  6770                           
  6771                           ;incstack = 0
  6772  005A56  0102               	movlb	2	; () banked
  6773  005A58  B103               	btfsc	(_loRa+3)& (0+255),0,b
  6774  005A5A  D04B               	goto	l2035
  6775                           
  6776                           ; BSR set to: 2
  6777                           ;lorawan.c: 801: {
  6778                           ;lorawan.c: 802: if (CLASS_C == loRa.deviceClass)
  6779  005A5C  0E02               	movlw	2
  6780  005A5E  1912               	xorwf	(_loRa+18)& (0+255),w,b
  6781  005A60  E102               	bnz	l15140
  6782                           
  6783                           ; BSR set to: 2
  6784                           ;lorawan.c: 803: {
  6785                           ;lorawan.c: 804: RADIO_ReceiveStop();
  6786  005A62  EC8B  F03A         	call	_RADIO_ReceiveStop	;wreg free
  6787  005A66                     l15140:
  6788                           
  6789                           ;lorawan.c: 805: }
  6790                           ;lorawan.c: 806: if (loRa.receiveWindow1Parameters.dataRate >= loRa.offset)
  6791  005A66  0102               	movlb	2	; () banked
  6792  005A68  51EF               	movf	(_loRa+239)& (0+255),w,b
  6793  005A6A  5D17               	subwf	(_loRa+23)& (0+255),w,b
  6794  005A6C  E304               	bnc	l2033
  6795                           
  6796                           ; BSR set to: 2
  6797                           ;lorawan.c: 807: {
  6798                           ;lorawan.c: 808: loRa.receiveWindow1Parameters.dataRate = loRa.receiveWindow1Parameters.
      +                          dataRate - loRa.offset;
  6799  005A6E  51EF               	movf	(_loRa+239)& (0+255),w,b
  6800  005A70  5D17               	subwf	(_loRa+23)& (0+255),w,b
  6801  005A72  6F17               	movwf	(_loRa+23)& (0+255),b
  6802                           
  6803                           ;lorawan.c: 809: }
  6804  005A74  D001               	goto	l15144
  6805  005A76                     l2033:
  6806                           
  6807                           ; BSR set to: 2
  6808                           ;lorawan.c: 810: else
  6809                           ;lorawan.c: 811: {
  6810                           ;lorawan.c: 812: loRa.receiveWindow1Parameters.dataRate = 0;
  6811  005A76  6B17               	clrf	(_loRa+23)& (0+255),b
  6812  005A78                     l15144:
  6813                           
  6814                           ; BSR set to: 2
  6815                           ;lorawan.c: 813: }
  6816                           ;lorawan.c: 815: freq = GetRx1Freq();
  6817  005A78  ECB0  F03B         	call	_GetRx1Freq	;wreg free
  6818  005A7C  C064  F052         	movff	?_GetRx1Freq,btemp+8
  6819  005A80  C065  F053         	movff	?_GetRx1Freq+1,btemp+9
  6820  005A84  C066  F054         	movff	?_GetRx1Freq+2,btemp+10
  6821  005A88  C067  F055         	movff	?_GetRx1Freq+3,btemp+11
  6822                           
  6823                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  6824  005A8C  0EFC               	movlw	-4
  6825  005A8E  C052  FFE3         	movff	btemp+8,plusw1
  6826  005A92  0EFD               	movlw	-3
  6827  005A94  C053  FFE3         	movff	btemp+9,plusw1
  6828  005A98  0EFE               	movlw	-2
  6829  005A9A  C054  FFE3         	movff	btemp+10,plusw1
  6830  005A9E  0EFF               	movlw	-1
  6831  005AA0  C055  FFE3         	movff	btemp+11,plusw1
  6832                           
  6833                           ; BSR set to: 2
  6834                           ;lorawan.c: 817: loRa.macStatus.macState = RX1_OPEN;
  6835  005AA4  5102               	movf	(_loRa+2)& (0+255),w,b
  6836  005AA6  0BF0               	andlw	-16
  6837  005AA8  0903               	iorlw	3
  6838  005AAA  6F02               	movwf	(_loRa+2)& (0+255),b
  6839                           
  6840                           ; BSR set to: 2
  6841                           ;lorawan.c: 819: RADIO_ReleaseData();
  6842  005AAC  EC5D  F03C         	call	_RADIO_ReleaseData	;wreg free
  6843                           
  6844                           ; BSR set to: 1
  6845                           ;lorawan.c: 821: ConfigureRadioRx(loRa.receiveWindow1Parameters.dataRate, freq);
  6846                           ;stkvar	LORAWAN_ReceiveWindow1Callback@freq @ sp[(-4)+0]
  6847  005AB0  50E1               	movf	fsr1l,w,c
  6848  005AB2  0FFC               	addlw	-4
  6849  005AB4  6ED9               	movwf	fsr2l,c
  6850  005AB6  50E2               	movf	fsr1h,w,c
  6851  005AB8  6EDA               	movwf	fsr2h,c
  6852  005ABA  0EFF               	movlw	255
  6853  005ABC  22DA               	addwfc	fsr2h,f,c
  6854  005ABE  CFDE F076          	movff	postinc2,ConfigureRadioRx@freq
  6855  005AC2  CFDE F077          	movff	postinc2,ConfigureRadioRx@freq+1
  6856  005AC6  CFDE F078          	movff	postinc2,ConfigureRadioRx@freq+2
  6857  005ACA  CFDE F079          	movff	postinc2,ConfigureRadioRx@freq+3
  6858  005ACE  0102               	movlb	2	; () banked
  6859  005AD0  5117               	movf	(_loRa+23)& (0+255),w,b
  6860  005AD2  EC9D  F039         	call	_ConfigureRadioRx
  6861                           
  6862                           ;lorawan.c: 823: RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow1Parameters.dataRate]
      +                          );
  6863  005AD6  0E85               	movlw	low _rxWindowSize
  6864  005AD8  0102               	movlb	2	; () banked
  6865  005ADA  2517               	addwf	(_loRa+23)& (0+255),w,b
  6866  005ADC  6EF6               	movwf	tblptrl,c
  6867  005ADE  6AF7               	clrf	tblptrh,c
  6868  005AE0  0E7F               	movlw	high _rxWindowSize
  6869  005AE2  22F7               	addwfc	tblptrh,f,c
  6870  005AE4                     	if	0	;There are less than 3 active tblptr bytes
  6871  005AE4                     	endif
  6872  005AE4  0008               	tblrd		*
  6873  005AE6  50F5               	movf	tablat,w,c
  6874  005AE8  0100               	movlb	0	; () banked
  6875  005AEA  6F94               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  6876  005AEC  6B95               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  6877  005AEE  EC02  F016         	call	_RADIO_ReceiveStart	;wreg free
  6878  005AF2                     l2035:
  6879                           
  6880                           ; _LORAWAN_ReceiveWindow1Callback: autosize = 4, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  6881  005AF2  0EFB               	movlw	251
  6882  005AF4  26E1               	addwf	fsr1l,f,c
  6883  005AF6  0EFF               	movlw	255
  6884  005AF8  22E2               	addwfc	fsr1h,f,c
  6885  005AFA  0CFF               	retlw	255	;funcret
  6886  005AFC                     __end_of_LORAWAN_ReceiveWindow1Callback:
  6887                           	opt stack 0
  6888                           tosu	equ	0xFFF
  6889                           tosh	equ	0xFFE
  6890                           tosl	equ	0xFFD
  6891                           pclath	equ	0xFFA
  6892                           tblptru	equ	0xFF8
  6893                           tblptrh	equ	0xFF7
  6894                           tblptrl	equ	0xFF6
  6895                           tablat	equ	0xFF5
  6896                           prodh	equ	0xFF4
  6897                           prodl	equ	0xFF3
  6898                           intcon	equ	0xFF2
  6899                           postinc0	equ	0xFEE
  6900                           wreg	equ	0xFE8
  6901                           postinc1	equ	0xFE6
  6902                           postdec1	equ	0xFE5
  6903                           plusw1	equ	0xFE3
  6904                           fsr1h	equ	0xFE2
  6905                           fsr1l	equ	0xFE1
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           fsr2h	equ	0xFDA
  6910                           fsr2l	equ	0xFD9
  6911                           status	equ	0xFD8
  6912                           
  6913 ;; *************** function _LORAWAN_ReceiveWindow2Callback *****************
  6914 ;; Defined at:
  6915 ;;		line 827 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;  param           1  [STACK] unsigned char 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  1  [STACK] void 
  6922 ;; Registers used:
  6923 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  6924 ;; Tracked objects:
  6925 ;;		On entry : D/0
  6926 ;;		On exit  : C/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6929 ;;      Params:         0       0       0       0       0       0       0       0       0
  6930 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6931 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6932 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6933 ;;Total ram usage:        0 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:   14
  6936 ;; This function calls:
  6937 ;;		_ConfigureRadioRx
  6938 ;;		_LORAWAN_EnterContinuousReceive
  6939 ;;		_RADIO_GetStatus
  6940 ;;		_RADIO_ReceiveStart
  6941 ;;		_RADIO_ReceiveStop
  6942 ;;		_RADIO_ReleaseData
  6943 ;;		_ResetParametersForConfirmedTransmission
  6944 ;;		_ResetParametersForUnconfirmedTransmission
  6945 ;;		_RxDataDone
  6946 ;; This function is called by:
  6947 ;;		_LORAWAN_RxTimeout
  6948 ;;		_SetCallbackSoftwareTimers
  6949 ;;		_SwTimersExecute
  6950 ;; This function uses a reentrant model
  6951 ;;
  6952                           
  6953                           	psect	text37
  6954  00554C                     __ptext37:
  6955                           	opt stack 0
  6956  00554C                     _LORAWAN_ReceiveWindow2Callback:
  6957                           	opt stack 12
  6958                           
  6959                           ;lorawan.c: 830: if (loRa.macStatus.macPause == 0)
  6960                           
  6961                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  6962                           ;incstack = 0
  6963  00554C  0102               	movlb	2	; () banked
  6964  00554E  B103               	btfsc	(_loRa+3)& (0+255),0,b
  6965  005550  D057               	goto	l2038
  6966                           
  6967                           ; BSR set to: 2
  6968                           ;lorawan.c: 831: {
  6969                           ;lorawan.c: 832: if((RADIO_GetStatus() & (1 << (1))) == 0)
  6970  005552  EC5A  F03C         	call	_RADIO_GetStatus	;wreg free
  6971  005556  6E55               	movwf	btemp+11,c
  6972  005558  B255               	btfsc	btemp+11,1,c
  6973  00555A  D04E               	goto	l13810
  6974                           
  6975                           ; BSR set to: 1
  6976                           ;lorawan.c: 833: {
  6977                           ;lorawan.c: 834: loRa.macStatus.macState = RX2_OPEN;
  6978  00555C  0102               	movlb	2	; () banked
  6979  00555E  5102               	movf	(_loRa+2)& (0+255),w,b
  6980  005560  0BF0               	andlw	-16
  6981  005562  0905               	iorlw	5
  6982  005564  6F02               	movwf	(_loRa+2)& (0+255),b
  6983                           
  6984                           ; BSR set to: 2
  6985                           ;lorawan.c: 836: RADIO_ReceiveStop();
  6986  005566  EC8B  F03A         	call	_RADIO_ReceiveStop	;wreg free
  6987                           
  6988                           ; BSR set to: 1
  6989                           ;lorawan.c: 837: RADIO_ReleaseData();
  6990  00556A  EC5D  F03C         	call	_RADIO_ReleaseData	;wreg free
  6991                           
  6992                           ; BSR set to: 1
  6993                           ;lorawan.c: 839: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
  6994  00556E  C218  F076         	movff	_loRa+24,ConfigureRadioRx@freq
  6995  005572  C219  F077         	movff	_loRa+25,ConfigureRadioRx@freq+1
  6996  005576  C21A  F078         	movff	_loRa+26,ConfigureRadioRx@freq+2
  6997  00557A  C21B  F079         	movff	_loRa+27,ConfigureRadioRx@freq+3
  6998  00557E  0102               	movlb	2	; () banked
  6999  005580  511C               	movf	(_loRa+28)& (0+255),w,b
  7000  005582  EC9D  F039         	call	_ConfigureRadioRx
  7001                           
  7002                           ;lorawan.c: 841: if (CLASS_A == loRa.deviceClass)
  7003  005586  0102               	movlb	2	; () banked
  7004  005588  5112               	movf	(_loRa+18)& (0+255),w,b
  7005  00558A  E12F               	bnz	l13806
  7006                           
  7007                           ; BSR set to: 2
  7008                           ;lorawan.c: 842: {
  7009                           ;lorawan.c: 843: if (RADIO_ReceiveStart(rxWindowSize[loRa.receiveWindow2Parameters.dataR
      +                          ate]) != OK)
  7010  00558C  0E85               	movlw	low _rxWindowSize
  7011  00558E  251C               	addwf	(_loRa+28)& (0+255),w,b
  7012  005590  6EF6               	movwf	tblptrl,c
  7013  005592  6AF7               	clrf	tblptrh,c
  7014  005594  0E7F               	movlw	high _rxWindowSize
  7015  005596  22F7               	addwfc	tblptrh,f,c
  7016  005598                     	if	0	;There are less than 3 active tblptr bytes
  7017  005598                     	endif
  7018  005598  0008               	tblrd		*
  7019  00559A  50F5               	movf	tablat,w,c
  7020  00559C  0100               	movlb	0	; () banked
  7021  00559E  6F94               	movwf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
  7022  0055A0  6B95               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
  7023  0055A2  EC02  F016         	call	_RADIO_ReceiveStart	;wreg free
  7024  0055A6  C094  F04B         	movff	?_RADIO_ReceiveStart,btemp+1
  7025  0055AA  C095  F04C         	movff	?_RADIO_ReceiveStart+1,btemp+2
  7026  0055AE  504B               	movf	btemp+1,w,c
  7027  0055B0  104C               	iorwf	btemp+2,w,c
  7028  0055B2  E02E               	bz	l2047
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;lorawan.c: 844: {
  7032                           ;lorawan.c: 845: ResetParametersForConfirmedTransmission ();
  7033  0055B4  ECC9  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7034                           
  7035                           ;lorawan.c: 846: ResetParametersForUnconfirmedTransmission ();
  7036  0055B8  ECC2  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  7037                           
  7038                           ; BSR set to: 2
  7039                           ;lorawan.c: 847: if (rxPayload.RxAppData != (0))
  7040  0055BC  0101               	movlb	1	; () banked
  7041  0055BE  516E               	movf	_rxPayload& (0+255),w,b
  7042  0055C0  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  7043  0055C2  E026               	bz	l2047
  7044                           
  7045                           ; BSR set to: 1
  7046                           ;lorawan.c: 848: {
  7047                           ;lorawan.c: 849: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
  7048  0055C4  0E00               	movlw	0
  7049  0055C6  0100               	movlb	0	; () banked
  7050  0055C8  6F64               	movwf	RxDataDone@pData& (0+255),b
  7051  0055CA  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  7052  0055CC  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  7053  0055CE  6F67               	movwf	RxDataDone@status& (0+255),b
  7054  0055D0  D801               	call	u15378
  7055  0055D2  D01E               	goto	l2047
  7056  0055D4                     u15378:
  7057  0055D4  0005               	push	
  7058  0055D6  0101               	movlb	1	; () banked
  7059  0055D8  6EFA               	movwf	pclath,c
  7060  0055DA  516E               	movf	_rxPayload& (0+255),w,b
  7061  0055DC  6EFD               	movwf	tosl,c
  7062  0055DE  516F               	movf	(_rxPayload+1)& (0+255),w,b
  7063  0055E0  6EFE               	movwf	tosh,c
  7064  0055E2  50F8               	movf	tblptru,w,c
  7065  0055E4  6EFF               	movwf	tosu,c
  7066  0055E6  50FA               	movf	pclath,w,c
  7067  0055E8  0012               	return		;indir
  7068  0055EA                     l13806:
  7069                           
  7070                           ; BSR set to: 2
  7071                           ;lorawan.c: 853: else
  7072                           ;lorawan.c: 854: {
  7073                           ;lorawan.c: 855: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
  7074  0055EA  5102               	movf	(_loRa+2)& (0+255),w,b
  7075  0055EC  0BF0               	andlw	-16
  7076  0055EE  0909               	iorlw	9
  7077  0055F0  6F02               	movwf	(_loRa+2)& (0+255),b
  7078                           
  7079                           ; BSR set to: 2
  7080                           ;lorawan.c: 856: LORAWAN_EnterContinuousReceive();
  7081  0055F2  ECFF  F031         	call	_LORAWAN_EnterContinuousReceive	;wreg free
  7082  0055F6  D00C               	goto	l2047
  7083  0055F8                     l13810:
  7084                           
  7085                           ; BSR set to: 1
  7086                           ;lorawan.c: 859: else
  7087                           ;lorawan.c: 860: {
  7088                           ;lorawan.c: 863: loRa.rx2DelayExpired = 1;
  7089  0055F8  0E01               	movlw	1
  7090  0055FA  0102               	movlb	2	; () banked
  7091  0055FC  6FF1               	movwf	(_loRa+241)& (0+255),b
  7092                           
  7093                           ; BSR set to: 1
  7094                           ;lorawan.c: 864: }
  7095                           ;lorawan.c: 865: }
  7096  0055FE  D008               	goto	l2047
  7097  005600                     l2038:
  7098                           
  7099                           ; BSR set to: 2
  7100                           ;lorawan.c: 866: else
  7101                           ;lorawan.c: 867: {
  7102                           ;lorawan.c: 870: if (loRa.lorawanMacStatus.joining == 1)
  7103  005600  A500               	btfss	_loRa& (0+255),2,b
  7104  005602  D002               	goto	l13814
  7105                           
  7106                           ; BSR set to: 2
  7107                           ;lorawan.c: 871: {
  7108                           ;lorawan.c: 872: loRa.lorawanMacStatus.joining = 0;
  7109  005604  9500               	bcf	_loRa& (0+255),2,b
  7110                           
  7111                           ;lorawan.c: 873: loRa.macStatus.networkJoined = 0;
  7112  005606  9902               	bcf	(_loRa+2)& (0+255),4,b
  7113  005608                     l13814:
  7114                           
  7115                           ; BSR set to: 2
  7116                           ;lorawan.c: 874: }
  7117                           ;lorawan.c: 876: ResetParametersForUnconfirmedTransmission();
  7118  005608  ECC2  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  7119                           
  7120                           ;lorawan.c: 877: ResetParametersForConfirmedTransmission();
  7121  00560C  ECC9  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  7122  005610                     l2047:
  7123                           
  7124                           ; _LORAWAN_ReceiveWindow2Callback: autosize = 0, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 1, argsize = 1, vargsize = 0
  7125  005610  52E5               	movf	postdec1,f,c
  7126  005612  0012               	return		;funcret
  7127  005614                     __end_of_LORAWAN_ReceiveWindow2Callback:
  7128                           	opt stack 0
  7129                           tosu	equ	0xFFF
  7130                           tosh	equ	0xFFE
  7131                           tosl	equ	0xFFD
  7132                           pclath	equ	0xFFA
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           intcon	equ	0xFF2
  7140                           postinc0	equ	0xFEE
  7141                           wreg	equ	0xFE8
  7142                           postinc1	equ	0xFE6
  7143                           postdec1	equ	0xFE5
  7144                           plusw1	equ	0xFE3
  7145                           fsr1h	equ	0xFE2
  7146                           fsr1l	equ	0xFE1
  7147                           indf2	equ	0xFDF
  7148                           postinc2	equ	0xFDE
  7149                           postdec2	equ	0xFDD
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8
  7153                           
  7154 ;; *************** function _RADIO_WatchdogTimeout *****************
  7155 ;; Defined at:
  7156 ;;		line 1408 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;  param           1  [STACK] unsigned char 
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;		None
  7161 ;; Return value:  Size  Location     Type
  7162 ;;                  1  [STACK] void 
  7163 ;; Registers used:
  7164 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  7165 ;; Tracked objects:
  7166 ;;		On entry : F/0
  7167 ;;		On exit  : C/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7170 ;;      Params:         0       0       0       0       0       0       0       0       0
  7171 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7172 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7173 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7174 ;;Total ram usage:        0 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; Hardware stack levels required when called:   16
  7177 ;; This function calls:
  7178 ;;		_LORAWAN_RxTimeout
  7179 ;;		_LORAWAN_TxDone
  7180 ;;		_RADIO_WriteMode
  7181 ;; This function is called by:
  7182 ;;		_RADIO_Init
  7183 ;;		_SwTimersExecute
  7184 ;; This function uses a reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text38
  7188  006CCE                     __ptext38:
  7189                           	opt stack 0
  7190  006CCE                     _RADIO_WatchdogTimeout:
  7191                           	opt stack 12
  7192                           
  7193                           ;radio_driver_SX1276.c: 1410: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulatio
      +                          n, 1);
  7194                           
  7195                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7196                           ;incstack = 0
  7197  006CCE  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  7198  006CD2  0E01               	movlw	1
  7199  006CD4  0100               	movlb	0	; () banked
  7200  006CD6  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  7201  006CD8  EC6B  F029         	call	_RADIO_WriteMode
  7202                           
  7203                           ;radio_driver_SX1276.c: 1411: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  7204  006CDC  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  7205  006CE0  0E00               	movlw	0
  7206  006CE2  0100               	movlb	0	; () banked
  7207  006CE4  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  7208  006CE6  EC6B  F029         	call	_RADIO_WriteMode
  7209                           
  7210                           ;radio_driver_SX1276.c: 1412: RadioConfiguration.flags |= (1 << (4));
  7211  006CEA  0101               	movlb	1	; () banked
  7212  006CEC  8998               	bsf	(_RadioConfiguration+35)& (0+255),4,b
  7213                           
  7214                           ; BSR set to: 1
  7215                           ;radio_driver_SX1276.c: 1413: if ((RadioConfiguration.flags & (1 << (1))) != 0)
  7216  006CEE  A398               	btfss	(_RadioConfiguration+35)& (0+255),1,b
  7217  006CF0  D004               	goto	l692
  7218                           
  7219                           ; BSR set to: 1
  7220                           ;radio_driver_SX1276.c: 1414: {
  7221                           ;radio_driver_SX1276.c: 1415: RadioConfiguration.flags &= ~(1 << (1));
  7222  006CF2  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  7223                           
  7224                           ; BSR set to: 1
  7225                           ;radio_driver_SX1276.c: 1416: LORAWAN_RxTimeout();
  7226  006CF4  EC89  F013         	call	_LORAWAN_RxTimeout	;wreg free
  7227                           
  7228                           ;radio_driver_SX1276.c: 1417: }
  7229  006CF8  D009               	goto	l695
  7230  006CFA                     l692:
  7231                           
  7232                           ; BSR set to: 1
  7233                           ;radio_driver_SX1276.c: 1418: else if ((RadioConfiguration.flags & (1 << (0))) != 0)
  7234  006CFA  A198               	btfss	(_RadioConfiguration+35)& (0+255),0,b
  7235  006CFC  D007               	goto	l695
  7236                           
  7237                           ; BSR set to: 1
  7238                           ;radio_driver_SX1276.c: 1419: {
  7239                           ;radio_driver_SX1276.c: 1420: RadioConfiguration.flags &= ~(1 << (0));
  7240  006CFE  9198               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  7241                           
  7242                           ; BSR set to: 1
  7243                           ;radio_driver_SX1276.c: 1425: LORAWAN_TxDone(RadioConfiguration.watchdogTimerTimeout);
  7244  006D00  C19F  F09E         	movff	_RadioConfiguration+42,LORAWAN_TxDone@timeOnAir
  7245  006D04  C1A0  F09F         	movff	_RadioConfiguration+43,LORAWAN_TxDone@timeOnAir+1
  7246  006D08  EC9A  F005         	call	_LORAWAN_TxDone	;wreg free
  7247  006D0C                     l695:
  7248                           
  7249                           ; _RADIO_WatchdogTimeout: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 1, argsize = 1, vargsize = 0
  7250  006D0C  52E5               	movf	postdec1,f,c
  7251  006D0E  0012               	return		;funcret
  7252  006D10                     __end_of_RADIO_WatchdogTimeout:
  7253                           	opt stack 0
  7254                           tosu	equ	0xFFF
  7255                           tosh	equ	0xFFE
  7256                           tosl	equ	0xFFD
  7257                           pclath	equ	0xFFA
  7258                           tblptru	equ	0xFF8
  7259                           tblptrh	equ	0xFF7
  7260                           tblptrl	equ	0xFF6
  7261                           tablat	equ	0xFF5
  7262                           prodh	equ	0xFF4
  7263                           prodl	equ	0xFF3
  7264                           intcon	equ	0xFF2
  7265                           postinc0	equ	0xFEE
  7266                           wreg	equ	0xFE8
  7267                           postinc1	equ	0xFE6
  7268                           postdec1	equ	0xFE5
  7269                           plusw1	equ	0xFE3
  7270                           fsr1h	equ	0xFE2
  7271                           fsr1l	equ	0xFE1
  7272                           indf2	equ	0xFDF
  7273                           postinc2	equ	0xFDE
  7274                           postdec2	equ	0xFDD
  7275                           fsr2h	equ	0xFDA
  7276                           fsr2l	equ	0xFD9
  7277                           status	equ	0xFD8
  7278                           
  7279 ;; *************** function _RADIO_RxFSKTimeout *****************
  7280 ;; Defined at:
  7281 ;;		line 1392 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;  param           1  [STACK] unsigned char 
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  irqFlags        1  [STACK] unsigned char 
  7286 ;; Return value:  Size  Location     Type
  7287 ;;                  1  [STACK] void 
  7288 ;; Registers used:
  7289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl
      +, tblptrh, tblptru, prodl, prodh, cstack
  7290 ;; Tracked objects:
  7291 ;;		On entry : F/0
  7292 ;;		On exit  : C/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7295 ;;      Params:         0       0       0       0       0       0       0       0       0
  7296 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7297 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7298 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7299 ;;Total ram usage:        0 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:   16
  7302 ;; This function calls:
  7303 ;;		_LORAWAN_RxTimeout
  7304 ;;		_RADIO_RegisterRead
  7305 ;;		_RADIO_WriteMode
  7306 ;;		_SwTimerStop
  7307 ;; This function is called by:
  7308 ;;		_RADIO_Init
  7309 ;;		_SwTimersExecute
  7310 ;; This function uses a reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text39
  7314  00702E                     __ptext39:
  7315                           	opt stack 0
  7316  00702E                     _RADIO_RxFSKTimeout:
  7317                           	opt stack 0
  7318                           
  7319                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7320  00702E  52E6               	movf	postinc1,f,c
  7321                           
  7322                           ;radio_driver_SX1276.c: 1394: uint8_t irqFlags;
  7323                           ;radio_driver_SX1276.c: 1395: irqFlags = RADIO_RegisterRead(0x3E);
  7324                           
  7325                           ;incstack = 0
  7326  007030  0E3E               	movlw	62
  7327  007032  ECB0  F039         	call	_RADIO_RegisterRead
  7328  007036  6E55               	movwf	btemp+11,c
  7329                           
  7330                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  7331  007038  0EFF               	movlw	-1
  7332  00703A  C055  FFE3         	movff	btemp+11,plusw1
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;radio_driver_SX1276.c: 1396: if (0 == (irqFlags & (1<<(0))))
  7336                           ;stkvar	RADIO_RxFSKTimeout@irqFlags @ sp[(-1)+0]
  7337  00703E  B0E3               	btfsc	plusw1,0,c
  7338  007040  D00E               	goto	l689
  7339                           
  7340                           ; BSR set to: 0
  7341                           ;radio_driver_SX1276.c: 1397: {
  7342                           ;radio_driver_SX1276.c: 1399: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  7343  007042  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  7344  007046  0E00               	movlw	0
  7345  007048  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  7346  00704A  EC6B  F029         	call	_RADIO_WriteMode
  7347                           
  7348                           ;radio_driver_SX1276.c: 1401: SwTimerStop(RadioConfiguration.watchdogTimerId);
  7349  00704E  0101               	movlb	1	; () banked
  7350  007050  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  7351  007052  ECF3  F03A         	call	_SwTimerStop
  7352                           
  7353                           ; BSR set to: 0
  7354                           ;radio_driver_SX1276.c: 1402: RadioConfiguration.flags &= ~(1 << (1));
  7355  007056  0101               	movlb	1	; () banked
  7356  007058  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  7357                           
  7358                           ; BSR set to: 1
  7359                           ;radio_driver_SX1276.c: 1403: LORAWAN_RxTimeout();
  7360  00705A  EC89  F013         	call	_LORAWAN_RxTimeout	;wreg free
  7361  00705E                     l689:
  7362                           
  7363                           ; _RADIO_RxFSKTimeout: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 1, argsize = 1, vargsize = 0
  7364  00705E  52E5               	movf	postdec1,f,c
  7365  007060  52E5               	movf	postdec1,f,c
  7366  007062  0012               	return		;funcret
  7367  007064                     __end_of_RADIO_RxFSKTimeout:
  7368                           	opt stack 0
  7369                           tosu	equ	0xFFF
  7370                           tosh	equ	0xFFE
  7371                           tosl	equ	0xFFD
  7372                           pclath	equ	0xFFA
  7373                           tblptru	equ	0xFF8
  7374                           tblptrh	equ	0xFF7
  7375                           tblptrl	equ	0xFF6
  7376                           tablat	equ	0xFF5
  7377                           prodh	equ	0xFF4
  7378                           prodl	equ	0xFF3
  7379                           intcon	equ	0xFF2
  7380                           postinc0	equ	0xFEE
  7381                           wreg	equ	0xFE8
  7382                           postinc1	equ	0xFE6
  7383                           postdec1	equ	0xFE5
  7384                           plusw1	equ	0xFE3
  7385                           fsr1h	equ	0xFE2
  7386                           fsr1l	equ	0xFE1
  7387                           indf2	equ	0xFDF
  7388                           postinc2	equ	0xFDE
  7389                           postdec2	equ	0xFDD
  7390                           fsr2h	equ	0xFDA
  7391                           fsr2l	equ	0xFD9
  7392                           status	equ	0xFD8
  7393                           
  7394 ;; *************** function _UnconfirmedTransmissionCallback *****************
  7395 ;; Defined at:
  7396 ;;		line 997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;  param           1  [STACK] unsigned char 
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;		None
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  1  [STACK] void 
  7403 ;; Registers used:
  7404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, tosl, tblptrl, tblptrh, tblptru, prod
      +l, prodh, cstack
  7405 ;; Tracked objects:
  7406 ;;		On entry : F/0
  7407 ;;		On exit  : C/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7410 ;;      Params:         0       0       0       0       0       0       0       0       0
  7411 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7412 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7413 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7414 ;;Total ram usage:        0 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:   13
  7417 ;; This function calls:
  7418 ;;		_RADIO_Transmit
  7419 ;;		_ResetParametersForUnconfirmedTransmission
  7420 ;;		_RxDataDone
  7421 ;;		_SelectChannelForTransmission
  7422 ;; This function is called by:
  7423 ;;		_SetCallbackSoftwareTimers
  7424 ;;		_SwTimersExecute
  7425 ;; This function uses a reentrant model
  7426 ;;
  7427                           
  7428                           	psect	text40
  7429  0062BE                     __ptext40:
  7430                           	opt stack 0
  7431  0062BE                     _UnconfirmedTransmissionCallback:
  7432                           	opt stack 15
  7433                           
  7434                           ;lorawan.c: 1000: if ( (SelectChannelForTransmission (1) == OK) && (RADIO_Transmit (&mac
      +                          Buffer[16], loRa.lastPacketLength) == OK) )
  7435                           
  7436                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  7437                           ;incstack = 0
  7438  0062BE  0E01               	movlw	1
  7439  0062C0  EC60  F033         	call	_SelectChannelForTransmission
  7440  0062C4  0900               	iorlw	0
  7441  0062C6  E116               	bnz	l15244
  7442                           
  7443                           ; BSR set to: 0
  7444  0062C8  0EF0               	movlw	low (_macBuffer+16)
  7445  0062CA  6F94               	movwf	RADIO_Transmit@buffer& (0+255),b
  7446  0062CC  0E04               	movlw	high (_macBuffer+16)
  7447  0062CE  6F95               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  7448  0062D0  C2D4  F096         	movff	_loRa+212,RADIO_Transmit@bufferLen
  7449  0062D4  ECFA  F017         	call	_RADIO_Transmit	;wreg free
  7450  0062D8  C094  F04B         	movff	?_RADIO_Transmit,btemp+1
  7451  0062DC  C095  F04C         	movff	?_RADIO_Transmit+1,btemp+2
  7452  0062E0  504B               	movf	btemp+1,w,c
  7453  0062E2  104C               	iorwf	btemp+2,w,c
  7454  0062E4  E107               	bnz	l15244
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;lorawan.c: 1001: {
  7458                           ;lorawan.c: 1002: loRa.counterRepetitionsUnconfirmedUplink ++ ;
  7459  0062E6  0102               	movlb	2	; () banked
  7460  0062E8  2BD8               	incf	(_loRa+216)& (0+255),f,b
  7461                           
  7462                           ; BSR set to: 2
  7463                           ;lorawan.c: 1003: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  7464  0062EA  5102               	movf	(_loRa+2)& (0+255),w,b
  7465  0062EC  0BF0               	andlw	-16
  7466  0062EE  0901               	iorlw	1
  7467  0062F0  6F02               	movwf	(_loRa+2)& (0+255),b
  7468                           
  7469                           ;lorawan.c: 1005: }
  7470  0062F2  D019               	goto	l2090
  7471  0062F4                     l15244:
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;lorawan.c: 1006: else
  7475                           ;lorawan.c: 1008: {
  7476                           ;lorawan.c: 1009: ResetParametersForUnconfirmedTransmission ();
  7477  0062F4  ECC2  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  7478                           
  7479                           ; BSR set to: 2
  7480                           ;lorawan.c: 1010: if (rxPayload.RxAppData != (0))
  7481  0062F8  0101               	movlb	1	; () banked
  7482  0062FA  516E               	movf	_rxPayload& (0+255),w,b
  7483  0062FC  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  7484  0062FE  E013               	bz	l2090
  7485                           
  7486                           ; BSR set to: 1
  7487                           ;lorawan.c: 1011: {
  7488                           ;lorawan.c: 1012: rxPayload.RxAppData((0), 0, MAC_NOT_OK);
  7489  006300  0E00               	movlw	0
  7490  006302  0100               	movlb	0	; () banked
  7491  006304  6F64               	movwf	RxDataDone@pData& (0+255),b
  7492  006306  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  7493  006308  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  7494  00630A  6F67               	movwf	RxDataDone@status& (0+255),b
  7495  00630C  D801               	call	u18078
  7496  00630E  D00B               	goto	l2090
  7497  006310                     u18078:
  7498  006310  0005               	push	
  7499  006312  0101               	movlb	1	; () banked
  7500  006314  6EFA               	movwf	pclath,c
  7501  006316  516E               	movf	_rxPayload& (0+255),w,b
  7502  006318  6EFD               	movwf	tosl,c
  7503  00631A  516F               	movf	(_rxPayload+1)& (0+255),w,b
  7504  00631C  6EFE               	movwf	tosh,c
  7505  00631E  50F8               	movf	tblptru,w,c
  7506  006320  6EFF               	movwf	tosu,c
  7507  006322  50FA               	movf	pclath,w,c
  7508  006324  0012               	return		;indir
  7509  006326                     l2090:
  7510                           
  7511                           ; _UnconfirmedTransmissionCallback: autosize = 0, savesize = 0, parsavesize = 0, tempsiz
      +                          e = 0 parsize = 1, argsize = 1, vargsize = 0
  7512  006326  52E5               	movf	postdec1,f,c
  7513  006328  0012               	return		;funcret
  7514  00632A                     __end_of_UnconfirmedTransmissionCallback:
  7515                           	opt stack 0
  7516                           tosu	equ	0xFFF
  7517                           tosh	equ	0xFFE
  7518                           tosl	equ	0xFFD
  7519                           pclath	equ	0xFFA
  7520                           tblptru	equ	0xFF8
  7521                           tblptrh	equ	0xFF7
  7522                           tblptrl	equ	0xFF6
  7523                           tablat	equ	0xFF5
  7524                           prodh	equ	0xFF4
  7525                           prodl	equ	0xFF3
  7526                           intcon	equ	0xFF2
  7527                           postinc0	equ	0xFEE
  7528                           wreg	equ	0xFE8
  7529                           postinc1	equ	0xFE6
  7530                           postdec1	equ	0xFE5
  7531                           plusw1	equ	0xFE3
  7532                           fsr1h	equ	0xFE2
  7533                           fsr1l	equ	0xFE1
  7534                           indf2	equ	0xFDF
  7535                           postinc2	equ	0xFDE
  7536                           postdec2	equ	0xFDD
  7537                           fsr2h	equ	0xFDA
  7538                           fsr2l	equ	0xFD9
  7539                           status	equ	0xFD8
  7540                           
  7541 ;; *************** function _GetRx1Freq *****************
  7542 ;; Defined at:
  7543 ;;		line 883 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  7544 ;; Parameters:    Size  Location     Type
  7545 ;;		None
  7546 ;; Auto vars:     Size  Location     Type
  7547 ;;		None
  7548 ;; Return value:  Size  Location     Type
  7549 ;;                  4    4[BANK0 ] unsigned long 
  7550 ;; Registers used:
  7551 ;;		None
  7552 ;; Tracked objects:
  7553 ;;		On entry : F/2
  7554 ;;		On exit  : F/2
  7555 ;;		Unchanged: F/0
  7556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7557 ;;      Params:         0       4       0       0       0       0       0       0       0
  7558 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7559 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7560 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7561 ;;Total ram usage:        4 bytes
  7562 ;; Hardware stack levels used:    1
  7563 ;; Hardware stack levels required when called:    7
  7564 ;; This function calls:
  7565 ;;		Nothing
  7566 ;; This function is called by:
  7567 ;;		_LORAWAN_ReceiveWindow1Callback
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           	psect	text41
  7572  007760                     __ptext41:
  7573                           	opt stack 0
  7574  007760                     _GetRx1Freq:
  7575                           	opt stack 20
  7576                           
  7577                           ; BSR set to: 2
  7578                           ;lorawan_eu.c: 885: return loRa.receiveWindow1Parameters.frequency;
  7579                           
  7580                           ;incstack = 0
  7581  007760  C213  F064         	movff	_loRa+19,?_GetRx1Freq
  7582  007764  C214  F065         	movff	_loRa+20,?_GetRx1Freq+1
  7583  007768  C215  F066         	movff	_loRa+21,?_GetRx1Freq+2
  7584  00776C  C216  F067         	movff	_loRa+22,?_GetRx1Freq+3
  7585                           
  7586                           ; BSR set to: 2
  7587  007770  0012               	return		;funcret
  7588  007772                     __end_of_GetRx1Freq:
  7589                           	opt stack 0
  7590                           tosu	equ	0xFFF
  7591                           tosh	equ	0xFFE
  7592                           tosl	equ	0xFFD
  7593                           pclath	equ	0xFFA
  7594                           tblptru	equ	0xFF8
  7595                           tblptrh	equ	0xFF7
  7596                           tblptrl	equ	0xFF6
  7597                           tablat	equ	0xFF5
  7598                           prodh	equ	0xFF4
  7599                           prodl	equ	0xFF3
  7600                           intcon	equ	0xFF2
  7601                           postinc0	equ	0xFEE
  7602                           wreg	equ	0xFE8
  7603                           postinc1	equ	0xFE6
  7604                           postdec1	equ	0xFE5
  7605                           plusw1	equ	0xFE3
  7606                           fsr1h	equ	0xFE2
  7607                           fsr1l	equ	0xFE1
  7608                           indf2	equ	0xFDF
  7609                           postinc2	equ	0xFDE
  7610                           postdec2	equ	0xFDD
  7611                           fsr2h	equ	0xFDA
  7612                           fsr2l	equ	0xFD9
  7613                           status	equ	0xFD8
  7614                           
  7615 ;; *************** function _RADIO_DIO5 *****************
  7616 ;; Defined at:
  7617 ;;		line 1344 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7618 ;; Parameters:    Size  Location     Type
  7619 ;;		None
  7620 ;; Auto vars:     Size  Location     Type
  7621 ;;  dioMapping      1    0        unsigned char 
  7622 ;; Return value:  Size  Location     Type
  7623 ;;                  1    wreg      void 
  7624 ;; Registers used:
  7625 ;;		wreg, status,2, status,0, cstack
  7626 ;; Tracked objects:
  7627 ;;		On entry : F/1
  7628 ;;		On exit  : 1/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7631 ;;      Params:         0       0       0       0       0       0       0       0       0
  7632 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7633 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7634 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7635 ;;Total ram usage:        1 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; Hardware stack levels required when called:   11
  7638 ;; This function calls:
  7639 ;;		_RADIO_RegisterRead
  7640 ;;		_RADIO_UnhandledInterrupt
  7641 ;; This function is called by:
  7642 ;;		_LORAWAN_Mainloop
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           	psect	text42
  7647  007686                     __ptext42:
  7648                           	opt stack 0
  7649  007686                     _RADIO_DIO5:
  7650                           	opt stack 18
  7651                           
  7652                           ; BSR set to: 1
  7653                           ;radio_driver_SX1276.c: 1347: uint8_t dioMapping;
  7654                           ;radio_driver_SX1276.c: 1348: dioMapping = (RADIO_RegisterRead(0x41) & 0x30) >> (4);
  7655                           
  7656                           ; BSR set to: 2
  7657                           ;incstack = 0
  7658  007686  0E41               	movlw	65
  7659  007688  ECB0  F039         	call	_RADIO_RegisterRead
  7660                           
  7661                           ;radio_driver_SX1276.c: 1350: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  7662  00768C  0E01               	movlw	1
  7663  00768E  ECB0  F039         	call	_RADIO_RegisterRead
  7664  007692  6F69               	movwf	??_RADIO_DIO5& (0+255),b
  7665  007694  AF69               	btfss	??_RADIO_DIO5& (0+255),7,b
  7666  007696  0012               	return	
  7667                           
  7668                           ; BSR set to: 0
  7669                           ;radio_driver_SX1276.c: 1356: RADIO_UnhandledInterrupt(MODULATION_LORA);
  7670  007698  0E01               	movlw	1
  7671  00769A  EFFA  F039         	goto	_RADIO_UnhandledInterrupt
  7672  00769E                     __end_of_RADIO_DIO5:
  7673                           	opt stack 0
  7674                           tosu	equ	0xFFF
  7675                           tosh	equ	0xFFE
  7676                           tosl	equ	0xFFD
  7677                           pclath	equ	0xFFA
  7678                           tblptru	equ	0xFF8
  7679                           tblptrh	equ	0xFF7
  7680                           tblptrl	equ	0xFF6
  7681                           tablat	equ	0xFF5
  7682                           prodh	equ	0xFF4
  7683                           prodl	equ	0xFF3
  7684                           intcon	equ	0xFF2
  7685                           postinc0	equ	0xFEE
  7686                           wreg	equ	0xFE8
  7687                           postinc1	equ	0xFE6
  7688                           postdec1	equ	0xFE5
  7689                           plusw1	equ	0xFE3
  7690                           fsr1h	equ	0xFE2
  7691                           fsr1l	equ	0xFE1
  7692                           indf2	equ	0xFDF
  7693                           postinc2	equ	0xFDE
  7694                           postdec2	equ	0xFDD
  7695                           fsr2h	equ	0xFDA
  7696                           fsr2l	equ	0xFD9
  7697                           status	equ	0xFD8
  7698                           
  7699 ;; *************** function _RADIO_DIO4 *****************
  7700 ;; Defined at:
  7701 ;;		line 1321 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;		None
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  dioMapping      1    0        unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      void 
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : F/1
  7712 ;;		On exit  : 1/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7715 ;;      Params:         0       0       0       0       0       0       0       0       0
  7716 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7717 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7718 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7719 ;;Total ram usage:        1 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; Hardware stack levels required when called:   11
  7722 ;; This function calls:
  7723 ;;		_RADIO_RegisterRead
  7724 ;;		_RADIO_UnhandledInterrupt
  7725 ;; This function is called by:
  7726 ;;		_LORAWAN_Mainloop
  7727 ;; This function uses a non-reentrant model
  7728 ;;
  7729                           
  7730                           	psect	text43
  7731  00769E                     __ptext43:
  7732                           	opt stack 0
  7733  00769E                     _RADIO_DIO4:
  7734                           	opt stack 18
  7735                           
  7736                           ; BSR set to: 1
  7737                           ;radio_driver_SX1276.c: 1324: uint8_t dioMapping;
  7738                           ;radio_driver_SX1276.c: 1325: dioMapping = (RADIO_RegisterRead(0x41) & 0xC0) >> (6);
  7739                           
  7740                           ;incstack = 0
  7741  00769E  0E41               	movlw	65
  7742  0076A0  ECB0  F039         	call	_RADIO_RegisterRead
  7743                           
  7744                           ;radio_driver_SX1276.c: 1327: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  7745  0076A4  0E01               	movlw	1
  7746  0076A6  ECB0  F039         	call	_RADIO_RegisterRead
  7747  0076AA  6F69               	movwf	??_RADIO_DIO4& (0+255),b
  7748  0076AC  AF69               	btfss	??_RADIO_DIO4& (0+255),7,b
  7749  0076AE  0012               	return	
  7750                           
  7751                           ; BSR set to: 0
  7752                           ;radio_driver_SX1276.c: 1333: RADIO_UnhandledInterrupt(MODULATION_LORA);
  7753  0076B0  0E01               	movlw	1
  7754  0076B2  EFFA  F039         	goto	_RADIO_UnhandledInterrupt
  7755  0076B6                     __end_of_RADIO_DIO4:
  7756                           	opt stack 0
  7757                           tosu	equ	0xFFF
  7758                           tosh	equ	0xFFE
  7759                           tosl	equ	0xFFD
  7760                           pclath	equ	0xFFA
  7761                           tblptru	equ	0xFF8
  7762                           tblptrh	equ	0xFF7
  7763                           tblptrl	equ	0xFF6
  7764                           tablat	equ	0xFF5
  7765                           prodh	equ	0xFF4
  7766                           prodl	equ	0xFF3
  7767                           intcon	equ	0xFF2
  7768                           postinc0	equ	0xFEE
  7769                           wreg	equ	0xFE8
  7770                           postinc1	equ	0xFE6
  7771                           postdec1	equ	0xFE5
  7772                           plusw1	equ	0xFE3
  7773                           fsr1h	equ	0xFE2
  7774                           fsr1l	equ	0xFE1
  7775                           indf2	equ	0xFDF
  7776                           postinc2	equ	0xFDE
  7777                           postdec2	equ	0xFDD
  7778                           fsr2h	equ	0xFDA
  7779                           fsr2l	equ	0xFD9
  7780                           status	equ	0xFD8
  7781                           
  7782 ;; *************** function _RADIO_DIO3 *****************
  7783 ;; Defined at:
  7784 ;;		line 1298 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;		None
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;  dioMapping      1    0        unsigned char 
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  1    wreg      void 
  7791 ;; Registers used:
  7792 ;;		wreg, status,2, status,0, cstack
  7793 ;; Tracked objects:
  7794 ;;		On entry : F/1
  7795 ;;		On exit  : 1/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7798 ;;      Params:         0       0       0       0       0       0       0       0       0
  7799 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7800 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7801 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7802 ;;Total ram usage:        1 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:   11
  7805 ;; This function calls:
  7806 ;;		_RADIO_RegisterRead
  7807 ;;		_RADIO_UnhandledInterrupt
  7808 ;; This function is called by:
  7809 ;;		_LORAWAN_Mainloop
  7810 ;; This function uses a non-reentrant model
  7811 ;;
  7812                           
  7813                           	psect	text44
  7814  0076B6                     __ptext44:
  7815                           	opt stack 0
  7816  0076B6                     _RADIO_DIO3:
  7817                           	opt stack 18
  7818                           
  7819                           ; BSR set to: 1
  7820                           ;radio_driver_SX1276.c: 1301: uint8_t dioMapping;
  7821                           ;radio_driver_SX1276.c: 1302: dioMapping = RADIO_RegisterRead(0x40) & 0x03;
  7822                           
  7823                           ;incstack = 0
  7824  0076B6  0E40               	movlw	64
  7825  0076B8  ECB0  F039         	call	_RADIO_RegisterRead
  7826                           
  7827                           ;radio_driver_SX1276.c: 1304: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  7828  0076BC  0E01               	movlw	1
  7829  0076BE  ECB0  F039         	call	_RADIO_RegisterRead
  7830  0076C2  6F69               	movwf	??_RADIO_DIO3& (0+255),b
  7831  0076C4  AF69               	btfss	??_RADIO_DIO3& (0+255),7,b
  7832  0076C6  0012               	return	
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;radio_driver_SX1276.c: 1310: RADIO_UnhandledInterrupt(MODULATION_LORA);
  7836  0076C8  0E01               	movlw	1
  7837  0076CA  EFFA  F039         	goto	_RADIO_UnhandledInterrupt
  7838  0076CE                     __end_of_RADIO_DIO3:
  7839                           	opt stack 0
  7840                           tosu	equ	0xFFF
  7841                           tosh	equ	0xFFE
  7842                           tosl	equ	0xFFD
  7843                           pclath	equ	0xFFA
  7844                           tblptru	equ	0xFF8
  7845                           tblptrh	equ	0xFF7
  7846                           tblptrl	equ	0xFF6
  7847                           tablat	equ	0xFF5
  7848                           prodh	equ	0xFF4
  7849                           prodl	equ	0xFF3
  7850                           intcon	equ	0xFF2
  7851                           postinc0	equ	0xFEE
  7852                           wreg	equ	0xFE8
  7853                           postinc1	equ	0xFE6
  7854                           postdec1	equ	0xFE5
  7855                           plusw1	equ	0xFE3
  7856                           fsr1h	equ	0xFE2
  7857                           fsr1l	equ	0xFE1
  7858                           indf2	equ	0xFDF
  7859                           postinc2	equ	0xFDE
  7860                           postdec2	equ	0xFDD
  7861                           fsr2h	equ	0xFDA
  7862                           fsr2l	equ	0xFD9
  7863                           status	equ	0xFD8
  7864                           
  7865 ;; *************** function _RADIO_DIO2 *****************
  7866 ;; Defined at:
  7867 ;;		line 1268 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;		None
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;  dioMapping      1   30[BANK0 ] unsigned char 
  7872 ;;  opMode          1    0        unsigned char 
  7873 ;; Return value:  Size  Location     Type
  7874 ;;                  1    wreg      void 
  7875 ;; Registers used:
  7876 ;;		wreg, status,2, status,0, cstack
  7877 ;; Tracked objects:
  7878 ;;		On entry : F/1
  7879 ;;		On exit  : 1/0
  7880 ;;		Unchanged: 0/0
  7881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7882 ;;      Params:         0       0       0       0       0       0       0       0       0
  7883 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7884 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7885 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7886 ;;Total ram usage:        2 bytes
  7887 ;; Hardware stack levels used:    1
  7888 ;; Hardware stack levels required when called:   12
  7889 ;; This function calls:
  7890 ;;		_RADIO_FHSSChangeChannel
  7891 ;;		_RADIO_RegisterRead
  7892 ;;		_RADIO_UnhandledInterrupt
  7893 ;; This function is called by:
  7894 ;;		_LORAWAN_Mainloop
  7895 ;; This function uses a non-reentrant model
  7896 ;;
  7897                           
  7898                           	psect	text45
  7899  006BFC                     __ptext45:
  7900                           	opt stack 0
  7901  006BFC                     _RADIO_DIO2:
  7902                           	opt stack 17
  7903                           
  7904                           ; BSR set to: 1
  7905                           ;radio_driver_SX1276.c: 1271: uint8_t dioMapping;
  7906                           ;radio_driver_SX1276.c: 1272: uint8_t opMode;
  7907                           ;radio_driver_SX1276.c: 1273: dioMapping = (RADIO_RegisterRead(0x40) & 0x0C) >> (2);
  7908                           
  7909                           ;incstack = 0
  7910  006BFC  0E40               	movlw	64
  7911  006BFE  ECB0  F039         	call	_RADIO_RegisterRead
  7912  006C02  6F7D               	movwf	??_RADIO_DIO2& (0+255),b
  7913  006C04  90D8               	bcf	status,0,c
  7914  006C06  337D               	rrcf	??_RADIO_DIO2& (0+255),f,b
  7915  006C08  90D8               	bcf	status,0,c
  7916  006C0A  317D               	rrcf	??_RADIO_DIO2& (0+255),w,b
  7917  006C0C  0B03               	andlw	3
  7918  006C0E  6F7E               	movwf	RADIO_DIO2@dioMapping& (0+255),b
  7919                           
  7920                           ;radio_driver_SX1276.c: 1274: opMode = RADIO_RegisterRead(0x01);
  7921  006C10  0E01               	movlw	1
  7922  006C12  ECB0  F039         	call	_RADIO_RegisterRead
  7923                           
  7924                           ;radio_driver_SX1276.c: 1276: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  7925  006C16  0E01               	movlw	1
  7926  006C18  ECB0  F039         	call	_RADIO_RegisterRead
  7927  006C1C  6F7D               	movwf	??_RADIO_DIO2& (0+255),b
  7928  006C1E  AF7D               	btfss	??_RADIO_DIO2& (0+255),7,b
  7929  006C20  0012               	return	
  7930  006C22  D003               	goto	l15500
  7931  006C24                     l15496:
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;radio_driver_SX1276.c: 1288: RADIO_UnhandledInterrupt(MODULATION_LORA);
  7935  006C24  0E01               	movlw	1
  7936  006C26  EFFA  F039         	goto	_RADIO_UnhandledInterrupt
  7937  006C2A                     l15500:
  7938                           
  7939                           ; BSR set to: 0
  7940  006C2A  517E               	movf	RADIO_DIO2@dioMapping& (0+255),w,b
  7941                           
  7942                           ; Switch size 1, requested type "speed"
  7943                           ; Number of cases is 3, Range of values is 0 to 2
  7944                           ; switch strategies available:
  7945                           ; Name         Instructions Cycles
  7946                           ; simple_byte           10     6 (average)
  7947                           ;	Chosen strategy is simple_byte
  7948  006C2C  E102 EFCA  F038    	bz	_RADIO_FHSSChangeChannel
  7949  006C32  0A01               	xorlw	1	; case 1
  7950  006C34  E102 EFCA  F038    	bz	_RADIO_FHSSChangeChannel
  7951  006C3A  0A03               	xorlw	3	; case 2
  7952  006C3C  E102 EFCA  F038    	bz	_RADIO_FHSSChangeChannel
  7953  006C42  D7F0               	goto	l15496
  7954  006C44                     __end_of_RADIO_DIO2:
  7955                           	opt stack 0
  7956                           tosu	equ	0xFFF
  7957                           tosh	equ	0xFFE
  7958                           tosl	equ	0xFFD
  7959                           pclath	equ	0xFFA
  7960                           tblptru	equ	0xFF8
  7961                           tblptrh	equ	0xFF7
  7962                           tblptrl	equ	0xFF6
  7963                           tablat	equ	0xFF5
  7964                           prodh	equ	0xFF4
  7965                           prodl	equ	0xFF3
  7966                           intcon	equ	0xFF2
  7967                           postinc0	equ	0xFEE
  7968                           wreg	equ	0xFE8
  7969                           postinc1	equ	0xFE6
  7970                           postdec1	equ	0xFE5
  7971                           plusw1	equ	0xFE3
  7972                           fsr1h	equ	0xFE2
  7973                           fsr1l	equ	0xFE1
  7974                           indf2	equ	0xFDF
  7975                           postinc2	equ	0xFDE
  7976                           postdec2	equ	0xFDD
  7977                           fsr2h	equ	0xFDA
  7978                           fsr2l	equ	0xFD9
  7979                           status	equ	0xFD8
  7980                           
  7981 ;; *************** function _RADIO_DIO1 *****************
  7982 ;; Defined at:
  7983 ;;		line 1231 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  7984 ;; Parameters:    Size  Location     Type
  7985 ;;		None
  7986 ;; Auto vars:     Size  Location     Type
  7987 ;;  dioMapping      1   79[BANK0 ] unsigned char 
  7988 ;; Return value:  Size  Location     Type
  7989 ;;                  1    wreg      void 
  7990 ;; Registers used:
  7991 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  7992 ;; Tracked objects:
  7993 ;;		On entry : F/1
  7994 ;;		On exit  : 0/0
  7995 ;;		Unchanged: 0/0
  7996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7997 ;;      Params:         0       0       0       0       0       0       0       0       0
  7998 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7999 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8000 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8001 ;;Total ram usage:        2 bytes
  8002 ;; Hardware stack levels used:    1
  8003 ;; Hardware stack levels required when called:   17
  8004 ;; This function calls:
  8005 ;;		_RADIO_FHSSChangeChannel
  8006 ;;		_RADIO_RegisterRead
  8007 ;;		_RADIO_RxTimeout
  8008 ;;		_RADIO_UnhandledInterrupt
  8009 ;; This function is called by:
  8010 ;;		_LORAWAN_Mainloop
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           	psect	text46
  8015  006F4A                     __ptext46:
  8016                           	opt stack 0
  8017  006F4A                     _RADIO_DIO1:
  8018                           	opt stack 12
  8019                           
  8020                           ; BSR set to: 1
  8021                           ;radio_driver_SX1276.c: 1234: uint8_t dioMapping;
  8022                           ;radio_driver_SX1276.c: 1235: dioMapping = (RADIO_RegisterRead(0x40) & 0x30) >> (4);
  8023                           
  8024                           ;incstack = 0
  8025  006F4A  0E40               	movlw	64
  8026  006F4C  ECB0  F039         	call	_RADIO_RegisterRead
  8027  006F50  6FAE               	movwf	??_RADIO_DIO1& (0+255),b
  8028  006F52  39AE               	swapf	??_RADIO_DIO1& (0+255),w,b
  8029  006F54  0B0F               	andlw	15
  8030  006F56  0B03               	andlw	3
  8031  006F58  6FAF               	movwf	RADIO_DIO1@dioMapping& (0+255),b
  8032                           
  8033                           ;radio_driver_SX1276.c: 1237: if ((RADIO_RegisterRead(0x01) & 0x80) != 0)
  8034  006F5A  0E01               	movlw	1
  8035  006F5C  ECB0  F039         	call	_RADIO_RegisterRead
  8036  006F60  6FAE               	movwf	??_RADIO_DIO1& (0+255),b
  8037  006F62  AFAE               	btfss	??_RADIO_DIO1& (0+255),7,b
  8038  006F64  D00D               	goto	l15488
  8039  006F66  D003               	goto	l15484
  8040  006F68                     l15480:
  8041                           
  8042                           ; BSR set to: 0
  8043                           ;radio_driver_SX1276.c: 1249: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8044  006F68  0E01               	movlw	1
  8045  006F6A  EFFA  F039         	goto	_RADIO_UnhandledInterrupt
  8046  006F6E                     l15484:
  8047                           
  8048                           ; BSR set to: 0
  8049  006F6E  51AF               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  8050                           
  8051                           ; Switch size 1, requested type "speed"
  8052                           ; Number of cases is 2, Range of values is 0 to 1
  8053                           ; switch strategies available:
  8054                           ; Name         Instructions Cycles
  8055                           ; simple_byte            7     4 (average)
  8056                           ;	Chosen strategy is simple_byte
  8057  006F70  E102 EF75  F039    	bz	_RADIO_RxTimeout
  8058  006F76  0A01               	xorlw	1	; case 1
  8059  006F78  E102 EFCA  F038    	bz	_RADIO_FHSSChangeChannel
  8060  006F7E  D7F4               	goto	l15480
  8061  006F80                     l15488:
  8062                           
  8063                           ; BSR set to: 0
  8064  006F80  51AF               	movf	RADIO_DIO1@dioMapping& (0+255),w,b
  8065                           
  8066                           ; Switch size 1, requested type "speed"
  8067                           ; Number of cases is 1, Range of values is 0 to 0
  8068                           ; switch strategies available:
  8069                           ; Name         Instructions Cycles
  8070                           ; simple_byte            4     3 (average)
  8071                           ;	Chosen strategy is simple_byte
  8072  006F82  0012               	return	
  8073  006F84                     __end_of_RADIO_DIO1:
  8074                           	opt stack 0
  8075                           tosu	equ	0xFFF
  8076                           tosh	equ	0xFFE
  8077                           tosl	equ	0xFFD
  8078                           pclath	equ	0xFFA
  8079                           tblptru	equ	0xFF8
  8080                           tblptrh	equ	0xFF7
  8081                           tblptrl	equ	0xFF6
  8082                           tablat	equ	0xFF5
  8083                           prodh	equ	0xFF4
  8084                           prodl	equ	0xFF3
  8085                           intcon	equ	0xFF2
  8086                           postinc0	equ	0xFEE
  8087                           wreg	equ	0xFE8
  8088                           postinc1	equ	0xFE6
  8089                           postdec1	equ	0xFE5
  8090                           plusw1	equ	0xFE3
  8091                           fsr1h	equ	0xFE2
  8092                           fsr1l	equ	0xFE1
  8093                           indf2	equ	0xFDF
  8094                           postinc2	equ	0xFDE
  8095                           postdec2	equ	0xFDD
  8096                           fsr2h	equ	0xFDA
  8097                           fsr2l	equ	0xFD9
  8098                           status	equ	0xFD8
  8099                           
  8100 ;; *************** function _RADIO_RxTimeout *****************
  8101 ;; Defined at:
  8102 ;;		line 1066 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;		None
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;		None
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  1    wreg      void 
  8109 ;; Registers used:
  8110 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  8111 ;; Tracked objects:
  8112 ;;		On entry : E/0
  8113 ;;		On exit  : C/0
  8114 ;;		Unchanged: 0/0
  8115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8116 ;;      Params:         0       0       0       0       0       0       0       0       0
  8117 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8118 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8119 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8120 ;;Total ram usage:        0 bytes
  8121 ;; Hardware stack levels used:    1
  8122 ;; Hardware stack levels required when called:   16
  8123 ;; This function calls:
  8124 ;;		_LORAWAN_RxTimeout
  8125 ;;		_RADIO_RegisterWrite
  8126 ;;		_RADIO_WriteMode
  8127 ;;		_SwTimerStop
  8128 ;; This function is called by:
  8129 ;;		_RADIO_DIO1
  8130 ;; This function uses a non-reentrant model
  8131 ;;
  8132                           
  8133                           	psect	text47
  8134  0072EA                     __ptext47:
  8135                           	opt stack 0
  8136  0072EA                     _RADIO_RxTimeout:
  8137                           	opt stack 12
  8138                           
  8139                           ;radio_driver_SX1276.c: 1069: SwTimerStop(RadioConfiguration.watchdogTimerId);
  8140                           
  8141                           ;incstack = 0
  8142  0072EA  0101               	movlb	1	; () banked
  8143  0072EC  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  8144  0072EE  ECF3  F03A         	call	_SwTimerStop
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;radio_driver_SX1276.c: 1070: RADIO_RegisterWrite(0x12, 1<<(7));
  8148  0072F2  0E80               	movlw	128
  8149  0072F4  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  8150  0072F6  0E12               	movlw	18
  8151  0072F8  EC9A  F03A         	call	_RADIO_RegisterWrite
  8152                           
  8153                           ;radio_driver_SX1276.c: 1072: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  8154  0072FC  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  8155  007300  0E00               	movlw	0
  8156  007302  0100               	movlb	0	; () banked
  8157  007304  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  8158  007306  EC6B  F029         	call	_RADIO_WriteMode
  8159                           
  8160                           ;radio_driver_SX1276.c: 1073: RadioConfiguration.flags &= ~(1 << (1));
  8161  00730A  0101               	movlb	1	; () banked
  8162  00730C  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  8163                           
  8164                           ; BSR set to: 1
  8165                           ;radio_driver_SX1276.c: 1075: LORAWAN_RxTimeout ();
  8166  00730E  EF89  F013         	goto	_LORAWAN_RxTimeout	;wreg free
  8167  007312                     __end_of_RADIO_RxTimeout:
  8168                           	opt stack 0
  8169                           tosu	equ	0xFFF
  8170                           tosh	equ	0xFFE
  8171                           tosl	equ	0xFFD
  8172                           pclath	equ	0xFFA
  8173                           tblptru	equ	0xFF8
  8174                           tblptrh	equ	0xFF7
  8175                           tblptrl	equ	0xFF6
  8176                           tablat	equ	0xFF5
  8177                           prodh	equ	0xFF4
  8178                           prodl	equ	0xFF3
  8179                           intcon	equ	0xFF2
  8180                           postinc0	equ	0xFEE
  8181                           wreg	equ	0xFE8
  8182                           postinc1	equ	0xFE6
  8183                           postdec1	equ	0xFE5
  8184                           plusw1	equ	0xFE3
  8185                           fsr1h	equ	0xFE2
  8186                           fsr1l	equ	0xFE1
  8187                           indf2	equ	0xFDF
  8188                           postinc2	equ	0xFDE
  8189                           postdec2	equ	0xFDD
  8190                           fsr2h	equ	0xFDA
  8191                           fsr2l	equ	0xFD9
  8192                           status	equ	0xFD8
  8193                           
  8194 ;; *************** function _RADIO_FHSSChangeChannel *****************
  8195 ;; Defined at:
  8196 ;;		line 1158 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;		None
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;  irqFlags        1    0        unsigned char 
  8201 ;; Return value:  Size  Location     Type
  8202 ;;                  1    wreg      void 
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : E/0
  8207 ;;		On exit  : 1/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8210 ;;      Params:         0       0       0       0       0       0       0       0       0
  8211 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8212 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8213 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8214 ;;Total ram usage:        0 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:   11
  8217 ;; This function calls:
  8218 ;;		_RADIO_RegisterRead
  8219 ;;		_RADIO_RegisterWrite
  8220 ;;		_RADIO_WriteFrequency
  8221 ;; This function is called by:
  8222 ;;		_RADIO_DIO1
  8223 ;;		_RADIO_DIO2
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           	psect	text48
  8228  007194                     __ptext48:
  8229                           	opt stack 0
  8230  007194                     _RADIO_FHSSChangeChannel:
  8231                           	opt stack 17
  8232                           
  8233                           ;radio_driver_SX1276.c: 1160: uint8_t irqFlags;
  8234                           ;radio_driver_SX1276.c: 1161: irqFlags = RADIO_RegisterRead(0x12);
  8235                           
  8236                           ;incstack = 0
  8237  007194  0E12               	movlw	18
  8238  007196  ECB0  F039         	call	_RADIO_RegisterRead
  8239                           
  8240                           ; BSR set to: 0
  8241                           ;radio_driver_SX1276.c: 1163: if ((0) != RadioConfiguration.frequencyHopPeriod)
  8242  00719A  0101               	movlb	1	; () banked
  8243  00719C  5193               	movf	(_RadioConfiguration+30)& (0+255),w,b
  8244  00719E  1194               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
  8245  0071A0  E00A               	bz	l611
  8246                           
  8247                           ; BSR set to: 1
  8248                           ;radio_driver_SX1276.c: 1164: {
  8249                           ;radio_driver_SX1276.c: 1165: if ((0) != RadioConfiguration.fhssNextFrequency)
  8250  0071A2  51A4               	movf	(_RadioConfiguration+47)& (0+255),w,b
  8251  0071A4  11A5               	iorwf	(_RadioConfiguration+48)& (0+255),w,b
  8252  0071A6  E007               	bz	l611
  8253                           
  8254                           ; BSR set to: 1
  8255                           ;radio_driver_SX1276.c: 1166: {
  8256                           ;radio_driver_SX1276.c: 1167: RADIO_WriteFrequency(RadioConfiguration.fhssNextFrequency(
      +                          ));
  8257  0071A8  0100               	movlb	0	; () banked
  8258  0071AA  6B71               	clrf	RADIO_WriteFrequency@frequency& (0+255),b
  8259  0071AC  6B72               	clrf	(RADIO_WriteFrequency@frequency+1)& (0+255),b
  8260  0071AE  6B73               	clrf	(RADIO_WriteFrequency@frequency+2)& (0+255),b
  8261  0071B0  6B74               	clrf	(RADIO_WriteFrequency@frequency+3)& (0+255),b
  8262  0071B2  EC90  F028         	call	_RADIO_WriteFrequency	;wreg free
  8263  0071B6                     l611:
  8264                           
  8265                           ;radio_driver_SX1276.c: 1168: }
  8266                           ;radio_driver_SX1276.c: 1169: }
  8267                           ;radio_driver_SX1276.c: 1172: RADIO_RegisterWrite(0x12, 1<<(1));
  8268  0071B6  0E02               	movlw	2
  8269  0071B8  0100               	movlb	0	; () banked
  8270  0071BA  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  8271  0071BC  0E12               	movlw	18
  8272  0071BE  EF9A  F03A         	goto	_RADIO_RegisterWrite
  8273  0071C2                     __end_of_RADIO_FHSSChangeChannel:
  8274                           	opt stack 0
  8275                           tosu	equ	0xFFF
  8276                           tosh	equ	0xFFE
  8277                           tosl	equ	0xFFD
  8278                           pclath	equ	0xFFA
  8279                           tblptru	equ	0xFF8
  8280                           tblptrh	equ	0xFF7
  8281                           tblptrl	equ	0xFF6
  8282                           tablat	equ	0xFF5
  8283                           prodh	equ	0xFF4
  8284                           prodl	equ	0xFF3
  8285                           intcon	equ	0xFF2
  8286                           postinc0	equ	0xFEE
  8287                           wreg	equ	0xFE8
  8288                           postinc1	equ	0xFE6
  8289                           postdec1	equ	0xFE5
  8290                           plusw1	equ	0xFE3
  8291                           fsr1h	equ	0xFE2
  8292                           fsr1l	equ	0xFE1
  8293                           indf2	equ	0xFDF
  8294                           postinc2	equ	0xFDE
  8295                           postdec2	equ	0xFDD
  8296                           fsr2h	equ	0xFDA
  8297                           fsr2l	equ	0xFD9
  8298                           status	equ	0xFD8
  8299                           
  8300 ;; *************** function _RADIO_DIO0 *****************
  8301 ;; Defined at:
  8302 ;;		line 1176 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8303 ;; Parameters:    Size  Location     Type
  8304 ;;		None
  8305 ;; Auto vars:     Size  Location     Type
  8306 ;;  opMode          1  146[BANK0 ] unsigned char 
  8307 ;;  dioMapping      1  145[BANK0 ] unsigned char 
  8308 ;; Return value:  Size  Location     Type
  8309 ;;                  1    wreg      void 
  8310 ;; Registers used:
  8311 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8312 ;; Tracked objects:
  8313 ;;		On entry : F/1
  8314 ;;		On exit  : 0/0
  8315 ;;		Unchanged: 0/0
  8316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8317 ;;      Params:         0       0       0       0       0       0       0       0       0
  8318 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8319 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8320 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8321 ;;Total ram usage:        4 bytes
  8322 ;; Hardware stack levels used:    1
  8323 ;; Hardware stack levels required when called:   17
  8324 ;; This function calls:
  8325 ;;		_RADIO_FSKPacketSent
  8326 ;;		_RADIO_FSKPayloadReady
  8327 ;;		_RADIO_RegisterRead
  8328 ;;		_RADIO_RxDone
  8329 ;;		_RADIO_TxDone
  8330 ;;		_RADIO_UnhandledInterrupt
  8331 ;; This function is called by:
  8332 ;;		_LORAWAN_Mainloop
  8333 ;; This function uses a non-reentrant model
  8334 ;;
  8335                           
  8336                           	psect	text49
  8337  006534                     __ptext49:
  8338                           	opt stack 0
  8339  006534                     _RADIO_DIO0:
  8340                           	opt stack 12
  8341                           
  8342                           ; BSR set to: 1
  8343                           ;radio_driver_SX1276.c: 1179: uint8_t dioMapping;
  8344                           ;radio_driver_SX1276.c: 1180: uint8_t opMode;
  8345                           ;radio_driver_SX1276.c: 1181: dioMapping = (RADIO_RegisterRead(0x40) & 0xC0) >> (6);
  8346                           
  8347                           ;incstack = 0
  8348  006534  0E40               	movlw	64
  8349  006536  ECB0  F039         	call	_RADIO_RegisterRead
  8350  00653A  6FEF               	movwf	??_RADIO_DIO0& (0+255),b
  8351  00653C  0E06               	movlw	6
  8352  00653E  6FF0               	movwf	(??_RADIO_DIO0+1)& (0+255),b
  8353  006540                     u18215:
  8354  006540  90D8               	bcf	status,0,c
  8355  006542  33EF               	rrcf	??_RADIO_DIO0& (0+255),f,b
  8356  006544  2FF0               	decfsz	(??_RADIO_DIO0+1)& (0+255),f,b
  8357  006546  D7FC               	goto	u18215
  8358  006548  51EF               	movf	??_RADIO_DIO0& (0+255),w,b
  8359  00654A  0B03               	andlw	3
  8360  00654C  6FF1               	movwf	RADIO_DIO0@dioMapping& (0+255),b
  8361                           
  8362                           ;radio_driver_SX1276.c: 1182: opMode = RADIO_RegisterRead(0x01);
  8363  00654E  0E01               	movlw	1
  8364  006550  ECB0  F039         	call	_RADIO_RegisterRead
  8365  006554  6FF2               	movwf	RADIO_DIO0@opMode& (0+255),b
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;radio_driver_SX1276.c: 1184: if ((opMode & 0x80) != 0)
  8369  006556  AFF2               	btfss	RADIO_DIO0@opMode& (0+255),7,b
  8370  006558  D01C               	goto	l15470
  8371  00655A  D003               	goto	l15454
  8372  00655C                     l15450:
  8373                           
  8374                           ; BSR set to: 0
  8375                           ;radio_driver_SX1276.c: 1196: RADIO_UnhandledInterrupt(MODULATION_LORA);
  8376  00655C  0E01               	movlw	1
  8377  00655E  EFFA  F039         	goto	_RADIO_UnhandledInterrupt
  8378  006562                     l15454:
  8379                           
  8380                           ; BSR set to: 0
  8381  006562  51F1               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  8382                           
  8383                           ; Switch size 1, requested type "speed"
  8384                           ; Number of cases is 2, Range of values is 0 to 1
  8385                           ; switch strategies available:
  8386                           ; Name         Instructions Cycles
  8387                           ; simple_byte            7     4 (average)
  8388                           ;	Chosen strategy is simple_byte
  8389  006564  E102 EFD7  F029    	bz	_RADIO_RxDone
  8390  00656A  0A01               	xorlw	1	; case 1
  8391  00656C  E102 EFF1  F01D    	bz	_RADIO_TxDone
  8392  006572  D7F4               	goto	l15450
  8393  006574                     l15456:
  8394                           
  8395                           ; BSR set to: 0
  8396                           ;radio_driver_SX1276.c: 1207: opMode &= 0x07;
  8397  006574  0E07               	movlw	7
  8398  006576  17F2               	andwf	RADIO_DIO0@opMode& (0+255),f,b
  8399                           
  8400                           ;radio_driver_SX1276.c: 1208: if (MODE_TX == opMode)
  8401  006578  0E03               	movlw	3
  8402  00657A  19F2               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  8403  00657C  E102               	bnz	l15460
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;radio_driver_SX1276.c: 1209: {
  8407                           ;radio_driver_SX1276.c: 1211: RADIO_FSKPacketSent();
  8408  00657E  EF28  F01D         	goto	_RADIO_FSKPacketSent	;wreg free
  8409  006582                     l15460:
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;radio_driver_SX1276.c: 1213: else if (MODE_RXCONT == opMode)
  8413  006582  0E05               	movlw	5
  8414  006584  19F2               	xorwf	RADIO_DIO0@opMode& (0+255),w,b
  8415  006586  E102               	bnz	l15466
  8416                           
  8417                           ; BSR set to: 0
  8418                           ;radio_driver_SX1276.c: 1214: {
  8419                           ;radio_driver_SX1276.c: 1216: RADIO_FSKPayloadReady();
  8420  006588  EFD1  F02D         	goto	_RADIO_FSKPayloadReady	;wreg free
  8421  00658C                     l15466:
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;radio_driver_SX1276.c: 1224: RADIO_UnhandledInterrupt(MODULATION_FSK);
  8425  00658C  0E00               	movlw	0
  8426  00658E  EFFA  F039         	goto	_RADIO_UnhandledInterrupt
  8427  006592                     l15470:
  8428                           
  8429                           ; BSR set to: 0
  8430  006592  51F1               	movf	RADIO_DIO0@dioMapping& (0+255),w,b
  8431                           
  8432                           ; Switch size 1, requested type "speed"
  8433                           ; Number of cases is 1, Range of values is 0 to 0
  8434                           ; switch strategies available:
  8435                           ; Name         Instructions Cycles
  8436                           ; simple_byte            4     3 (average)
  8437                           ;	Chosen strategy is simple_byte
  8438  006594  E0EF               	bz	l15456
  8439  006596  D7FA               	goto	l15466
  8440  006598                     __end_of_RADIO_DIO0:
  8441                           	opt stack 0
  8442                           tosu	equ	0xFFF
  8443                           tosh	equ	0xFFE
  8444                           tosl	equ	0xFFD
  8445                           pclath	equ	0xFFA
  8446                           tblptru	equ	0xFF8
  8447                           tblptrh	equ	0xFF7
  8448                           tblptrl	equ	0xFF6
  8449                           tablat	equ	0xFF5
  8450                           prodh	equ	0xFF4
  8451                           prodl	equ	0xFF3
  8452                           intcon	equ	0xFF2
  8453                           postinc0	equ	0xFEE
  8454                           wreg	equ	0xFE8
  8455                           postinc1	equ	0xFE6
  8456                           postdec1	equ	0xFE5
  8457                           plusw1	equ	0xFE3
  8458                           fsr1h	equ	0xFE2
  8459                           fsr1l	equ	0xFE1
  8460                           indf2	equ	0xFDF
  8461                           postinc2	equ	0xFDE
  8462                           postdec2	equ	0xFDD
  8463                           fsr2h	equ	0xFDA
  8464                           fsr2l	equ	0xFD9
  8465                           status	equ	0xFD8
  8466                           
  8467 ;; *************** function _RADIO_UnhandledInterrupt *****************
  8468 ;; Defined at:
  8469 ;;		line 1139 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8470 ;; Parameters:    Size  Location     Type
  8471 ;;  modulation      1    wreg     enum E16925
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;  modulation      1    8[BANK0 ] enum E16925
  8474 ;; Return value:  Size  Location     Type
  8475 ;;                  1    wreg      void 
  8476 ;; Registers used:
  8477 ;;		wreg, status,2, status,0, cstack
  8478 ;; Tracked objects:
  8479 ;;		On entry : E/0
  8480 ;;		On exit  : 1/0
  8481 ;;		Unchanged: 0/0
  8482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8483 ;;      Params:         0       0       0       0       0       0       0       0       0
  8484 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8485 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8486 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8487 ;;Total ram usage:        1 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; Hardware stack levels required when called:   10
  8490 ;; This function calls:
  8491 ;;		_RADIO_RegisterWrite
  8492 ;; This function is called by:
  8493 ;;		_RADIO_DIO0
  8494 ;;		_RADIO_DIO1
  8495 ;;		_RADIO_DIO2
  8496 ;;		_RADIO_DIO3
  8497 ;;		_RADIO_DIO4
  8498 ;;		_RADIO_DIO5
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           	psect	text50
  8503  0073F4                     __ptext50:
  8504                           	opt stack 0
  8505  0073F4                     _RADIO_UnhandledInterrupt:
  8506                           	opt stack 18
  8507                           
  8508                           ;incstack = 0
  8509                           ;RADIO_UnhandledInterrupt@modulation stored from wreg
  8510  0073F4  0100               	movlb	0	; () banked
  8511  0073F6  6F68               	movwf	RADIO_UnhandledInterrupt@modulation& (0+255),b
  8512                           
  8513                           ;radio_driver_SX1276.c: 1144: if (MODULATION_LORA == modulation)
  8514  0073F8  0568               	decf	RADIO_UnhandledInterrupt@modulation& (0+255),w,b
  8515  0073FA  E104               	bnz	l14964
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;radio_driver_SX1276.c: 1145: {
  8519                           ;radio_driver_SX1276.c: 1146: RADIO_RegisterWrite(0x12, 0xFF);
  8520  0073FC  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
  8521  0073FE  0E12               	movlw	18
  8522  007400  EF9A  F03A         	goto	_RADIO_RegisterWrite
  8523  007404                     l14964:
  8524                           
  8525                           ; BSR set to: 0
  8526                           ;radio_driver_SX1276.c: 1148: else
  8527                           ;radio_driver_SX1276.c: 1149: {
  8528                           ;radio_driver_SX1276.c: 1152: RADIO_RegisterWrite(0x3E, 0xFF);
  8529  007404  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
  8530  007406  0E3E               	movlw	62
  8531  007408  EC9A  F03A         	call	_RADIO_RegisterWrite
  8532                           
  8533                           ;radio_driver_SX1276.c: 1153: RADIO_RegisterWrite(0x3F, 0xFF);
  8534  00740C  0100               	movlb	0	; () banked
  8535  00740E  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
  8536  007410  0E3F               	movlw	63
  8537  007412  EF9A  F03A         	goto	_RADIO_RegisterWrite
  8538  007416                     __end_of_RADIO_UnhandledInterrupt:
  8539                           	opt stack 0
  8540                           tosu	equ	0xFFF
  8541                           tosh	equ	0xFFE
  8542                           tosl	equ	0xFFD
  8543                           pclath	equ	0xFFA
  8544                           tblptru	equ	0xFF8
  8545                           tblptrh	equ	0xFF7
  8546                           tblptrl	equ	0xFF6
  8547                           tablat	equ	0xFF5
  8548                           prodh	equ	0xFF4
  8549                           prodl	equ	0xFF3
  8550                           intcon	equ	0xFF2
  8551                           postinc0	equ	0xFEE
  8552                           wreg	equ	0xFE8
  8553                           postinc1	equ	0xFE6
  8554                           postdec1	equ	0xFE5
  8555                           plusw1	equ	0xFE3
  8556                           fsr1h	equ	0xFE2
  8557                           fsr1l	equ	0xFE1
  8558                           indf2	equ	0xFDF
  8559                           postinc2	equ	0xFDE
  8560                           postdec2	equ	0xFDD
  8561                           fsr2h	equ	0xFDA
  8562                           fsr2l	equ	0xFD9
  8563                           status	equ	0xFD8
  8564                           
  8565 ;; *************** function _RADIO_TxDone *****************
  8566 ;; Defined at:
  8567 ;;		line 1078 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;		None
  8570 ;; Auto vars:     Size  Location     Type
  8571 ;;  timeOnAir       4  116[BANK0 ] unsigned long 
  8572 ;; Return value:  Size  Location     Type
  8573 ;;                  1    wreg      void 
  8574 ;; Registers used:
  8575 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8576 ;; Tracked objects:
  8577 ;;		On entry : E/0
  8578 ;;		On exit  : C/0
  8579 ;;		Unchanged: 0/0
  8580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8581 ;;      Params:         0       0       0       0       0       0       0       0       0
  8582 ;;      Locals:         0       8       0       0       0       0       0       0       0
  8583 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8584 ;;      Totals:         0      12       0       0       0       0       0       0       0
  8585 ;;Total ram usage:       12 bytes
  8586 ;; Hardware stack levels used:    1
  8587 ;; Hardware stack levels required when called:   15
  8588 ;; This function calls:
  8589 ;;		_LORAWAN_TxDone
  8590 ;;		_RADIO_RegisterWrite
  8591 ;;		_RADIO_WriteMode
  8592 ;;		_SwTimerReadValue
  8593 ;;		_SwTimerStop
  8594 ;; This function is called by:
  8595 ;;		_RADIO_DIO0
  8596 ;; This function uses a non-reentrant model
  8597 ;;
  8598                           
  8599                           	psect	text51
  8600  003BE2                     __ptext51:
  8601                           	opt stack 0
  8602  003BE2                     _RADIO_TxDone:
  8603                           	opt stack 13
  8604                           
  8605                           ;radio_driver_SX1276.c: 1080: uint32_t timeOnAir;
  8606                           ;radio_driver_SX1276.c: 1082: SwTimerStop(RadioConfiguration.watchdogTimerId);
  8607                           
  8608                           ;incstack = 0
  8609  003BE2  0101               	movlb	1	; () banked
  8610  003BE4  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  8611  003BE6  ECF3  F03A         	call	_SwTimerStop
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;radio_driver_SX1276.c: 1083: RADIO_RegisterWrite(0x12, 1<<(3));
  8615  003BEA  0E08               	movlw	8
  8616  003BEC  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  8617  003BEE  0E12               	movlw	18
  8618  003BF0  EC9A  F03A         	call	_RADIO_RegisterWrite
  8619                           
  8620                           ;radio_driver_SX1276.c: 1084: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  8621  003BF4  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  8622  003BF8  0E00               	movlw	0
  8623  003BFA  0100               	movlb	0	; () banked
  8624  003BFC  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  8625  003BFE  EC6B  F029         	call	_RADIO_WriteMode
  8626                           
  8627                           ;radio_driver_SX1276.c: 1085: RadioConfiguration.flags &= ~(1 << (0));
  8628  003C02  0101               	movlb	1	; () banked
  8629  003C04  9198               	bcf	(_RadioConfiguration+35)& (0+255),0,b
  8630                           
  8631                           ; BSR set to: 1
  8632                           ;radio_driver_SX1276.c: 1086: if ((RadioConfiguration.flags & (1 << (4))) == 0)
  8633  003C06  B998               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
  8634  003C08  0012               	return	
  8635                           
  8636                           ; BSR set to: 1
  8637                           ;radio_driver_SX1276.c: 1087: {
  8638                           ;radio_driver_SX1276.c: 1088: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
  8639  003C0A  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
  8640  003C0C  EC0B  F037         	call	_SwTimerReadValue
  8641  003C10  518E               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
  8642  003C12  E107               	bnz	u17390
  8643  003C14  0E1F               	movlw	31
  8644  003C16  5D8B               	subwf	?_SwTimerReadValue& (0+255),w,b
  8645  003C18  0EAC               	movlw	172
  8646  003C1A  598C               	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
  8647  003C1C  0EDF               	movlw	223
  8648  003C1E  598D               	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
  8649  003C20  E346               	bnc	l14930
  8650  003C22                     u17390:
  8651                           
  8652                           ; BSR set to: 0
  8653  003C22  0101               	movlb	1	; () banked
  8654  003C24  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
  8655  003C26  EC0B  F037         	call	_SwTimerReadValue
  8656  003C2A  0E0D               	movlw	13
  8657  003C2C  D005               	goto	u17400
  8658  003C2E                     u17405:
  8659  003C2E  90D8               	bcf	status,0,c
  8660  003C30  338E               	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
  8661  003C32  338D               	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
  8662  003C34  338C               	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
  8663  003C36  338B               	rrcf	?_SwTimerReadValue& (0+255),f,b
  8664  003C38                     u17400:
  8665  003C38  2EE8               	decfsz	wreg,f,c
  8666  003C3A  D7F9               	goto	u17405
  8667  003C3C  0E7D               	movlw	125
  8668  003C3E  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8669  003C40  CFF3 F0D0          	movff	prodl,??_RADIO_TxDone
  8670  003C44  CFF4 F0D1          	movff	prodh,??_RADIO_TxDone+1
  8671  003C48  6BD2               	clrf	(??_RADIO_TxDone+2)& (0+255),b
  8672  003C4A  6BD3               	clrf	(??_RADIO_TxDone+3)& (0+255),b
  8673  003C4C  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8674  003C4E  50F3               	movf	prodl,w,c
  8675  003C50  27D1               	addwf	(??_RADIO_TxDone+1)& (0+255),f,b
  8676  003C52  50F4               	movf	prodh,w,c
  8677  003C54  23D2               	addwfc	(??_RADIO_TxDone+2)& (0+255),f,b
  8678  003C56  0E00               	movlw	0
  8679  003C58  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8680  003C5A  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8681  003C5C  50F3               	movf	prodl,w,c
  8682  003C5E  27D1               	addwf	(??_RADIO_TxDone+1)& (0+255),f,b
  8683  003C60  50F4               	movf	prodh,w,c
  8684  003C62  23D2               	addwfc	(??_RADIO_TxDone+2)& (0+255),f,b
  8685  003C64  0E00               	movlw	0
  8686  003C66  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8687  003C68  0E7D               	movlw	125
  8688  003C6A  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
  8689  003C6C  50F3               	movf	prodl,w,c
  8690  003C6E  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8691  003C70  50F4               	movf	prodh,w,c
  8692  003C72  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8693  003C74  0E00               	movlw	0
  8694  003C76  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8695  003C78  50F3               	movf	prodl,w,c
  8696  003C7A  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8697  003C7C  50F4               	movf	prodh,w,c
  8698  003C7E  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8699  003C80  0E00               	movlw	0
  8700  003C82  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8701  003C84  50F3               	movf	prodl,w,c
  8702  003C86  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8703  003C88  50F4               	movf	prodh,w,c
  8704  003C8A  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8705  003C8C  0E7D               	movlw	125
  8706  003C8E  038E               	mulwf	(?_SwTimerReadValue+3)& (0+255),b
  8707  003C90  50F3               	movf	prodl,w,c
  8708  003C92  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8709  003C94  0E00               	movlw	0
  8710  003C96  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
  8711  003C98  50F3               	movf	prodl,w,c
  8712  003C9A  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8713  003C9C  0E00               	movlw	0
  8714  003C9E  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8715  003CA0  50F3               	movf	prodl,w,c
  8716  003CA2  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8717  003CA4  0E00               	movlw	0
  8718  003CA6  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8719  003CA8  50F3               	movf	prodl,w,c
  8720  003CAA  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8721  003CAC  D045               	goto	L4
  8722  003CAE                     l14930:
  8723                           
  8724                           ; BSR set to: 0
  8725  003CAE  0101               	movlb	1	; () banked
  8726  003CB0  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
  8727  003CB2  EC0B  F037         	call	_SwTimerReadValue
  8728  003CB6  0E7D               	movlw	125
  8729  003CB8  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8730  003CBA  CFF3 F0D0          	movff	prodl,??_RADIO_TxDone
  8731  003CBE  CFF4 F0D1          	movff	prodh,??_RADIO_TxDone+1
  8732  003CC2  6BD2               	clrf	(??_RADIO_TxDone+2)& (0+255),b
  8733  003CC4  6BD3               	clrf	(??_RADIO_TxDone+3)& (0+255),b
  8734  003CC6  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8735  003CC8  50F3               	movf	prodl,w,c
  8736  003CCA  27D1               	addwf	(??_RADIO_TxDone+1)& (0+255),f,b
  8737  003CCC  50F4               	movf	prodh,w,c
  8738  003CCE  23D2               	addwfc	(??_RADIO_TxDone+2)& (0+255),f,b
  8739  003CD0  0E00               	movlw	0
  8740  003CD2  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8741  003CD4  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8742  003CD6  50F3               	movf	prodl,w,c
  8743  003CD8  27D1               	addwf	(??_RADIO_TxDone+1)& (0+255),f,b
  8744  003CDA  50F4               	movf	prodh,w,c
  8745  003CDC  23D2               	addwfc	(??_RADIO_TxDone+2)& (0+255),f,b
  8746  003CDE  0E00               	movlw	0
  8747  003CE0  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8748  003CE2  0E7D               	movlw	125
  8749  003CE4  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
  8750  003CE6  50F3               	movf	prodl,w,c
  8751  003CE8  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8752  003CEA  50F4               	movf	prodh,w,c
  8753  003CEC  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8754  003CEE  0E00               	movlw	0
  8755  003CF0  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8756  003CF2  50F3               	movf	prodl,w,c
  8757  003CF4  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8758  003CF6  50F4               	movf	prodh,w,c
  8759  003CF8  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8760  003CFA  0E00               	movlw	0
  8761  003CFC  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8762  003CFE  50F3               	movf	prodl,w,c
  8763  003D00  27D2               	addwf	(??_RADIO_TxDone+2)& (0+255),f,b
  8764  003D02  50F4               	movf	prodh,w,c
  8765  003D04  23D3               	addwfc	(??_RADIO_TxDone+3)& (0+255),f,b
  8766  003D06  0E7D               	movlw	125
  8767  003D08  038E               	mulwf	(?_SwTimerReadValue+3)& (0+255),b
  8768  003D0A  50F3               	movf	prodl,w,c
  8769  003D0C  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8770  003D0E  0E00               	movlw	0
  8771  003D10  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
  8772  003D12  50F3               	movf	prodl,w,c
  8773  003D14  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8774  003D16  0E00               	movlw	0
  8775  003D18  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
  8776  003D1A  50F3               	movf	prodl,w,c
  8777  003D1C  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8778  003D1E  0E00               	movlw	0
  8779  003D20  038B               	mulwf	?_SwTimerReadValue& (0+255),b
  8780  003D22  50F3               	movf	prodl,w,c
  8781  003D24  27D3               	addwf	(??_RADIO_TxDone+3)& (0+255),f,b
  8782  003D26  0E0D               	movlw	13
  8783  003D28  D005               	goto	u17410
  8784  003D2A                     u17415:
  8785  003D2A  90D8               	bcf	status,0,c
  8786  003D2C  33D3               	rrcf	(??_RADIO_TxDone+3)& (0+255),f,b
  8787  003D2E  33D2               	rrcf	(??_RADIO_TxDone+2)& (0+255),f,b
  8788  003D30  33D1               	rrcf	(??_RADIO_TxDone+1)& (0+255),f,b
  8789  003D32  33D0               	rrcf	??_RADIO_TxDone& (0+255),f,b
  8790  003D34                     u17410:
  8791  003D34  2EE8               	decfsz	wreg,f,c
  8792  003D36  D7F9               	goto	u17415
  8793  003D38                     L4:
  8794  003D38  C0D0  F0D8         	movff	??_RADIO_TxDone,_RADIO_TxDone$1067
  8795  003D3C  C0D1  F0D9         	movff	??_RADIO_TxDone+1,_RADIO_TxDone$1067+1
  8796  003D40  C0D2  F0DA         	movff	??_RADIO_TxDone+2,_RADIO_TxDone$1067+2
  8797  003D44  C0D3  F0DB         	movff	??_RADIO_TxDone+3,_RADIO_TxDone$1067+3
  8798                           
  8799                           ; BSR set to: 0
  8800  003D48  51D8               	movf	_RADIO_TxDone$1067& (0+255),w,b
  8801  003D4A  0820               	sublw	32
  8802  003D4C  6FD4               	movwf	RADIO_TxDone@timeOnAir& (0+255),b
  8803  003D4E  0E4E               	movlw	78
  8804  003D50  55D9               	subfwb	(_RADIO_TxDone$1067+1)& (0+255),w,b
  8805  003D52  6FD5               	movwf	(RADIO_TxDone@timeOnAir+1)& (0+255),b
  8806  003D54  0E00               	movlw	0
  8807  003D56  55DA               	subfwb	(_RADIO_TxDone$1067+2)& (0+255),w,b
  8808  003D58  6FD6               	movwf	(RADIO_TxDone@timeOnAir+2)& (0+255),b
  8809  003D5A  0E00               	movlw	0
  8810  003D5C  55DB               	subfwb	(_RADIO_TxDone$1067+3)& (0+255),w,b
  8811  003D5E  6FD7               	movwf	(RADIO_TxDone@timeOnAir+3)& (0+255),b
  8812                           
  8813                           ; BSR set to: 0
  8814                           ;radio_driver_SX1276.c: 1089: LORAWAN_TxDone((uint16_t)timeOnAir);
  8815  003D60  C0D4  F09E         	movff	RADIO_TxDone@timeOnAir,LORAWAN_TxDone@timeOnAir
  8816  003D64  C0D5  F09F         	movff	RADIO_TxDone@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
  8817  003D68  EF9A  F005         	goto	_LORAWAN_TxDone	;wreg free
  8818  003D6C                     __end_of_RADIO_TxDone:
  8819                           	opt stack 0
  8820                           tosu	equ	0xFFF
  8821                           tosh	equ	0xFFE
  8822                           tosl	equ	0xFFD
  8823                           pclath	equ	0xFFA
  8824                           tblptru	equ	0xFF8
  8825                           tblptrh	equ	0xFF7
  8826                           tblptrl	equ	0xFF6
  8827                           tablat	equ	0xFF5
  8828                           prodh	equ	0xFF4
  8829                           prodl	equ	0xFF3
  8830                           intcon	equ	0xFF2
  8831                           postinc0	equ	0xFEE
  8832                           wreg	equ	0xFE8
  8833                           postinc1	equ	0xFE6
  8834                           postdec1	equ	0xFE5
  8835                           plusw1	equ	0xFE3
  8836                           fsr1h	equ	0xFE2
  8837                           fsr1l	equ	0xFE1
  8838                           indf2	equ	0xFDF
  8839                           postinc2	equ	0xFDE
  8840                           postdec2	equ	0xFDD
  8841                           fsr2h	equ	0xFDA
  8842                           fsr2l	equ	0xFD9
  8843                           status	equ	0xFD8
  8844                           
  8845 ;; *************** function _RADIO_RxDone *****************
  8846 ;; Defined at:
  8847 ;;		line 961 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  8848 ;; Parameters:    Size  Location     Type
  8849 ;;		None
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  i               1  142[BANK0 ] unsigned char 
  8852 ;;  irqFlags        1  141[BANK0 ] unsigned char 
  8853 ;; Return value:  Size  Location     Type
  8854 ;;                  1    wreg      void 
  8855 ;; Registers used:
  8856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+8, btemp+9, btemp+10, btemp+11, tos
      +l, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8857 ;; Tracked objects:
  8858 ;;		On entry : E/0
  8859 ;;		On exit  : C/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8862 ;;      Params:         0       0       0       0       0       0       0       0       0
  8863 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8864 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8865 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8866 ;;Total ram usage:        2 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:   16
  8869 ;; This function calls:
  8870 ;;		_HALSPICSAssert
  8871 ;;		_HALSPICSDeassert
  8872 ;;		_HALSPISend
  8873 ;;		_LORAWAN_RxDone
  8874 ;;		_RADIO_RegisterRead
  8875 ;;		_RADIO_RegisterWrite
  8876 ;;		_RADIO_WriteMode
  8877 ;;		_SwTimerStop
  8878 ;;		___abdiv
  8879 ;; This function is called by:
  8880 ;;		_RADIO_DIO0
  8881 ;; This function uses a non-reentrant model
  8882 ;;
  8883                           
  8884                           	psect	text52
  8885  0053AE                     __ptext52:
  8886                           	opt stack 0
  8887  0053AE                     _RADIO_RxDone:
  8888                           	opt stack 12
  8889                           
  8890                           ;radio_driver_SX1276.c: 963: uint8_t i, irqFlags;
  8891                           ;radio_driver_SX1276.c: 964: irqFlags = RADIO_RegisterRead(0x12);
  8892                           
  8893                           ;incstack = 0
  8894  0053AE  0E12               	movlw	18
  8895  0053B0  ECB0  F039         	call	_RADIO_RegisterRead
  8896  0053B4  6FED               	movwf	RADIO_RxDone@irqFlags& (0+255),b
  8897                           
  8898                           ;radio_driver_SX1276.c: 967: RADIO_RegisterWrite(0x12, (1<<(6)) | (1<<(5)) | (1<<(4)));
  8899  0053B6  0E70               	movlw	112
  8900  0053B8  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
  8901  0053BA  0E12               	movlw	18
  8902  0053BC  EC9A  F03A         	call	_RADIO_RegisterWrite
  8903                           
  8904                           ;radio_driver_SX1276.c: 968: if (((1<<(6)) | (1<<(4))) == (irqFlags & ((1<<(6)) | (1<<(4
      +                          )))))
  8905  0053C0  0100               	movlb	0	; () banked
  8906  0053C2  51ED               	movf	RADIO_RxDone@irqFlags& (0+255),w,b
  8907  0053C4  0B50               	andlw	80
  8908  0053C6  0A50               	xorlw	80
  8909  0053C8  A4D8               	btfss	status,2,c
  8910  0053CA  0012               	return	
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;radio_driver_SX1276.c: 969: {
  8914                           ;radio_driver_SX1276.c: 971: SwTimerStop(RadioConfiguration.watchdogTimerId);
  8915  0053CC  0101               	movlb	1	; () banked
  8916  0053CE  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  8917  0053D0  ECF3  F03A         	call	_SwTimerStop
  8918                           
  8919                           ; BSR set to: 0
  8920                           ;radio_driver_SX1276.c: 974: i = RADIO_RegisterRead(0x1C);
  8921  0053D4  0E1C               	movlw	28
  8922  0053D6  ECB0  F039         	call	_RADIO_RegisterRead
  8923  0053DA  6FEE               	movwf	RADIO_RxDone@i& (0+255),b
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;radio_driver_SX1276.c: 975: if ((0 == RadioConfiguration.crcOn) || ((0 == (irqFlags & (
      +                          1<<(5)))) && (0 != (i & (1<<(6))))))
  8927  0053DC  0101               	movlb	1	; () banked
  8928  0053DE  5191               	movf	(_RadioConfiguration+28)& (0+255),w,b
  8929  0053E0  E004               	bz	l14832
  8930                           
  8931                           ; BSR set to: 1
  8932  0053E2  0100               	movlb	0	; () banked
  8933  0053E4  ABED               	btfss	RADIO_RxDone@irqFlags& (0+255),5,b
  8934                           
  8935                           ; BSR set to: 0
  8936  0053E6  ADEE               	btfss	RADIO_RxDone@i& (0+255),6,b
  8937  0053E8  D037               	goto	l14854
  8938  0053EA                     l14832:
  8939                           
  8940                           ;radio_driver_SX1276.c: 976: {
  8941                           ;radio_driver_SX1276.c: 984: RadioConfiguration.dataBufferLen = RADIO_RegisterRead(0x13)
      +                          ;
  8942  0053EA  0E13               	movlw	19
  8943  0053EC  ECB0  F039         	call	_RADIO_RegisterRead
  8944  0053F0  0101               	movlb	1	; () banked
  8945  0053F2  6F99               	movwf	(_RadioConfiguration+36)& (0+255),b
  8946                           
  8947                           ;radio_driver_SX1276.c: 985: RADIO_RegisterWrite(0x0D, 0x00);
  8948  0053F4  0100               	movlb	0	; () banked
  8949  0053F6  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
  8950  0053F8  0E0D               	movlw	13
  8951  0053FA  EC9A  F03A         	call	_RADIO_RegisterWrite
  8952                           
  8953                           ;radio_driver_SX1276.c: 987: HALSPICSAssert();
  8954  0053FE  EC72  F03C         	call	_HALSPICSAssert	;wreg free
  8955                           
  8956                           ;radio_driver_SX1276.c: 988: HALSPISend(0x00);
  8957  005402  0E00               	movlw	0
  8958  005404  EC1C  F03C         	call	_HALSPISend
  8959                           
  8960                           ; BSR set to: 14
  8961                           ;radio_driver_SX1276.c: 989: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
  8962  005408  0100               	movlb	0	; () banked
  8963  00540A  6BEE               	clrf	RADIO_RxDone@i& (0+255),b
  8964  00540C  D00D               	goto	l14844
  8965  00540E                     l14840:
  8966                           
  8967                           ; BSR set to: 0
  8968                           ;radio_driver_SX1276.c: 990: {
  8969                           ;radio_driver_SX1276.c: 991: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
  8970  00540E  51EE               	movf	RADIO_RxDone@i& (0+255),w,b
  8971  005410  0101               	movlb	1	; () banked
  8972  005412  259A               	addwf	(_RadioConfiguration+37)& (0+255),w,b
  8973  005414  6ED9               	movwf	fsr2l,c
  8974  005416  0E00               	movlw	0
  8975  005418  219B               	addwfc	(_RadioConfiguration+38)& (0+255),w,b
  8976  00541A  6EDA               	movwf	fsr2h,c
  8977  00541C  0EFF               	movlw	255
  8978  00541E  EC1C  F03C         	call	_HALSPISend
  8979  005422  6EDF               	movwf	indf2,c
  8980                           
  8981                           ; BSR set to: 14
  8982  005424  0100               	movlb	0	; () banked
  8983  005426  2BEE               	incf	RADIO_RxDone@i& (0+255),f,b
  8984  005428                     l14844:
  8985                           
  8986                           ; BSR set to: 0
  8987  005428  0101               	movlb	1	; () banked
  8988  00542A  5199               	movf	(_RadioConfiguration+36)& (0+255),w,b
  8989  00542C  0100               	movlb	0	; () banked
  8990  00542E  5DEE               	subwf	RADIO_RxDone@i& (0+255),w,b
  8991  005430  E3EE               	bnc	l14840
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;radio_driver_SX1276.c: 992: }
  8995                           ;radio_driver_SX1276.c: 993: HALSPICSDeassert();
  8996  005432  EC70  F03C         	call	_HALSPICSDeassert	;wreg free
  8997                           
  8998                           ;radio_driver_SX1276.c: 994: RadioConfiguration.flags |= (1 << (2));
  8999  005436  0101               	movlb	1	; () banked
  9000  005438  8598               	bsf	(_RadioConfiguration+35)& (0+255),2,b
  9001                           
  9002                           ; BSR set to: 1
  9003                           ;radio_driver_SX1276.c: 996: RadioConfiguration.packetSNR = RADIO_RegisterRead(0x19);
  9004  00543A  0E19               	movlw	25
  9005  00543C  ECB0  F039         	call	_RADIO_RegisterRead
  9006  005440  0101               	movlb	1	; () banked
  9007  005442  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
  9008                           
  9009                           ; BSR set to: 1
  9010                           ;radio_driver_SX1276.c: 997: RadioConfiguration.packetSNR /= (int8_t)4;
  9011  005444  0E04               	movlw	4
  9012  005446  0100               	movlb	0	; () banked
  9013  005448  6F64               	movwf	___abdiv@divisor& (0+255),b
  9014  00544A  0101               	movlb	1	; () banked
  9015  00544C  51A7               	movf	(_RadioConfiguration+50)& (0+255),w,b
  9016  00544E  EC9E  F034         	call	___abdiv
  9017  005452  0101               	movlb	1	; () banked
  9018  005454  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
  9019                           
  9020                           ;radio_driver_SX1276.c: 998: }
  9021  005456  D002               	goto	l14856
  9022  005458                     l14854:
  9023                           
  9024                           ; BSR set to: 0
  9025                           ;radio_driver_SX1276.c: 999: else
  9026                           ;radio_driver_SX1276.c: 1000: {
  9027                           ;radio_driver_SX1276.c: 1002: RadioConfiguration.flags |= (1 << (3));
  9028  005458  0101               	movlb	1	; () banked
  9029  00545A  8798               	bsf	(_RadioConfiguration+35)& (0+255),3,b
  9030  00545C                     l14856:
  9031                           
  9032                           ; BSR set to: 1
  9033                           ;radio_driver_SX1276.c: 1003: }
  9034                           ;radio_driver_SX1276.c: 1004: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9035  00545C  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  9036  005460  0E00               	movlw	0
  9037  005462  0100               	movlb	0	; () banked
  9038  005464  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  9039  005466  EC6B  F029         	call	_RADIO_WriteMode
  9040                           
  9041                           ;radio_driver_SX1276.c: 1005: RadioConfiguration.flags &= ~(1 << (1));
  9042  00546A  0101               	movlb	1	; () banked
  9043  00546C  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9044                           
  9045                           ; BSR set to: 1
  9046                           ;radio_driver_SX1276.c: 1006: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
  9047  00546E  C19A  F16B         	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
  9048  005472  C19B  F16C         	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
  9049  005476  C199  F16D         	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
  9050  00547A  EF4B  F000         	goto	_LORAWAN_RxDone	;wreg free
  9051  00547E                     __end_of_RADIO_RxDone:
  9052                           	opt stack 0
  9053                           tosu	equ	0xFFF
  9054                           tosh	equ	0xFFE
  9055                           tosl	equ	0xFFD
  9056                           pclath	equ	0xFFA
  9057                           tblptru	equ	0xFF8
  9058                           tblptrh	equ	0xFF7
  9059                           tblptrl	equ	0xFF6
  9060                           tablat	equ	0xFF5
  9061                           prodh	equ	0xFF4
  9062                           prodl	equ	0xFF3
  9063                           intcon	equ	0xFF2
  9064                           postinc0	equ	0xFEE
  9065                           wreg	equ	0xFE8
  9066                           postinc1	equ	0xFE6
  9067                           postdec1	equ	0xFE5
  9068                           plusw1	equ	0xFE3
  9069                           fsr1h	equ	0xFE2
  9070                           fsr1l	equ	0xFE1
  9071                           indf2	equ	0xFDF
  9072                           postinc2	equ	0xFDE
  9073                           postdec2	equ	0xFDD
  9074                           fsr2h	equ	0xFDA
  9075                           fsr2l	equ	0xFD9
  9076                           status	equ	0xFD8
  9077                           
  9078 ;; *************** function ___abdiv *****************
  9079 ;; Defined at:
  9080 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\abdiv.c"
  9081 ;; Parameters:    Size  Location     Type
  9082 ;;  dividend        1    wreg     char 
  9083 ;;  divisor         1    4[BANK0 ] char 
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;  dividend        1    8[BANK0 ] char 
  9086 ;;  quotient        1    7[BANK0 ] char 
  9087 ;;  sign            1    6[BANK0 ] unsigned char 
  9088 ;;  counter         1    5[BANK0 ] unsigned char 
  9089 ;; Return value:  Size  Location     Type
  9090 ;;                  1    wreg      char 
  9091 ;; Registers used:
  9092 ;;		wreg, status,2, status,0
  9093 ;; Tracked objects:
  9094 ;;		On entry : F/1
  9095 ;;		On exit  : F/0
  9096 ;;		Unchanged: 0/0
  9097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9098 ;;      Params:         0       1       0       0       0       0       0       0       0
  9099 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9100 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9101 ;;      Totals:         0       5       0       0       0       0       0       0       0
  9102 ;;Total ram usage:        5 bytes
  9103 ;; Hardware stack levels used:    1
  9104 ;; Hardware stack levels required when called:    7
  9105 ;; This function calls:
  9106 ;;		Nothing
  9107 ;; This function is called by:
  9108 ;;		_RADIO_RxDone
  9109 ;; This function uses a non-reentrant model
  9110 ;;
  9111                           
  9112                           	psect	text53
  9113  00693C                     __ptext53:
  9114                           	opt stack 0
  9115  00693C                     ___abdiv:
  9116                           	opt stack 20
  9117                           
  9118                           ;incstack = 0
  9119                           ;___abdiv@dividend stored from wreg
  9120  00693C  0100               	movlb	0	; () banked
  9121  00693E  6F68               	movwf	___abdiv@dividend& (0+255),b
  9122  006940  6B66               	clrf	___abdiv@sign& (0+255),b
  9123                           
  9124                           ; BSR set to: 0
  9125  006942  AF64               	btfss	___abdiv@divisor& (0+255),7,b
  9126  006944  D003               	goto	l14722
  9127                           
  9128                           ; BSR set to: 0
  9129  006946  6D64               	negf	___abdiv@divisor& (0+255),b
  9130                           
  9131                           ; BSR set to: 0
  9132  006948  0E01               	movlw	1
  9133  00694A  6F66               	movwf	___abdiv@sign& (0+255),b
  9134  00694C                     l14722:
  9135                           
  9136                           ; BSR set to: 0
  9137  00694C  AF68               	btfss	___abdiv@dividend& (0+255),7,b
  9138  00694E  D003               	goto	l14728
  9139                           
  9140                           ; BSR set to: 0
  9141  006950  6D68               	negf	___abdiv@dividend& (0+255),b
  9142                           
  9143                           ; BSR set to: 0
  9144  006952  0E01               	movlw	1
  9145  006954  1B66               	xorwf	___abdiv@sign& (0+255),f,b
  9146  006956                     l14728:
  9147                           
  9148                           ; BSR set to: 0
  9149  006956  6B67               	clrf	___abdiv@quotient& (0+255),b
  9150                           
  9151                           ; BSR set to: 0
  9152  006958  5164               	movf	___abdiv@divisor& (0+255),w,b
  9153  00695A  E014               	bz	l14750
  9154                           
  9155                           ; BSR set to: 0
  9156  00695C  0E01               	movlw	1
  9157  00695E  6F65               	movwf	___abdiv@counter& (0+255),b
  9158  006960  D003               	goto	l14738
  9159  006962                     l14734:
  9160                           
  9161                           ; BSR set to: 0
  9162  006962  90D8               	bcf	status,0,c
  9163  006964  3764               	rlcf	___abdiv@divisor& (0+255),f,b
  9164                           
  9165                           ; BSR set to: 0
  9166  006966  2B65               	incf	___abdiv@counter& (0+255),f,b
  9167  006968                     l14738:
  9168                           
  9169                           ; BSR set to: 0
  9170  006968  AF64               	btfss	___abdiv@divisor& (0+255),7,b
  9171  00696A  D7FB               	goto	l14734
  9172  00696C                     l14740:
  9173                           
  9174                           ; BSR set to: 0
  9175  00696C  90D8               	bcf	status,0,c
  9176  00696E  3767               	rlcf	___abdiv@quotient& (0+255),f,b
  9177  006970  5164               	movf	___abdiv@divisor& (0+255),w,b
  9178  006972  5D68               	subwf	___abdiv@dividend& (0+255),w,b
  9179  006974  E303               	bnc	l14746
  9180                           
  9181                           ; BSR set to: 0
  9182  006976  5164               	movf	___abdiv@divisor& (0+255),w,b
  9183  006978  5F68               	subwf	___abdiv@dividend& (0+255),f,b
  9184                           
  9185                           ; BSR set to: 0
  9186  00697A  8167               	bsf	___abdiv@quotient& (0+255),0,b
  9187  00697C                     l14746:
  9188                           
  9189                           ; BSR set to: 0
  9190  00697C  90D8               	bcf	status,0,c
  9191  00697E  3364               	rrcf	___abdiv@divisor& (0+255),f,b
  9192                           
  9193                           ; BSR set to: 0
  9194  006980  2F65               	decfsz	___abdiv@counter& (0+255),f,b
  9195  006982  D7F4               	goto	l14740
  9196  006984                     l14750:
  9197                           
  9198                           ; BSR set to: 0
  9199  006984  5166               	movf	___abdiv@sign& (0+255),w,b
  9200  006986  E001               	bz	l14754
  9201                           
  9202                           ; BSR set to: 0
  9203  006988  6D67               	negf	___abdiv@quotient& (0+255),b
  9204  00698A                     l14754:
  9205                           
  9206                           ; BSR set to: 0
  9207  00698A  5167               	movf	___abdiv@quotient& (0+255),w,b
  9208                           
  9209                           ; BSR set to: 0
  9210  00698C  0012               	return		;funcret
  9211  00698E                     __end_of___abdiv:
  9212                           	opt stack 0
  9213                           tosu	equ	0xFFF
  9214                           tosh	equ	0xFFE
  9215                           tosl	equ	0xFFD
  9216                           pclath	equ	0xFFA
  9217                           tblptru	equ	0xFF8
  9218                           tblptrh	equ	0xFF7
  9219                           tblptrl	equ	0xFF6
  9220                           tablat	equ	0xFF5
  9221                           prodh	equ	0xFF4
  9222                           prodl	equ	0xFF3
  9223                           intcon	equ	0xFF2
  9224                           postinc0	equ	0xFEE
  9225                           wreg	equ	0xFE8
  9226                           postinc1	equ	0xFE6
  9227                           postdec1	equ	0xFE5
  9228                           plusw1	equ	0xFE3
  9229                           fsr1h	equ	0xFE2
  9230                           fsr1l	equ	0xFE1
  9231                           indf2	equ	0xFDF
  9232                           postinc2	equ	0xFDE
  9233                           postdec2	equ	0xFDD
  9234                           fsr2h	equ	0xFDA
  9235                           fsr2l	equ	0xFD9
  9236                           status	equ	0xFD8
  9237                           
  9238 ;; *************** function _RADIO_FSKPayloadReady *****************
  9239 ;; Defined at:
  9240 ;;		line 1010 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
  9241 ;; Parameters:    Size  Location     Type
  9242 ;;		None
  9243 ;; Auto vars:     Size  Location     Type
  9244 ;;  i               1  142[BANK0 ] unsigned char 
  9245 ;;  irqFlags        1  141[BANK0 ] unsigned char 
  9246 ;; Return value:  Size  Location     Type
  9247 ;;                  1    wreg      void 
  9248 ;; Registers used:
  9249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9250 ;; Tracked objects:
  9251 ;;		On entry : F/0
  9252 ;;		On exit  : C/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9255 ;;      Params:         0       0       0       0       0       0       0       0       0
  9256 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9257 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9258 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9259 ;;Total ram usage:        2 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:   16
  9262 ;; This function calls:
  9263 ;;		_HALSPICSAssert
  9264 ;;		_HALSPICSDeassert
  9265 ;;		_HALSPISend
  9266 ;;		_LORAWAN_RxDone
  9267 ;;		_LORAWAN_RxTimeout
  9268 ;;		_RADIO_RegisterRead
  9269 ;;		_RADIO_WriteMode
  9270 ;;		_SwTimerStop
  9271 ;; This function is called by:
  9272 ;;		_RADIO_DIO0
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           	psect	text54
  9277  005BA2                     __ptext54:
  9278                           	opt stack 0
  9279  005BA2                     _RADIO_FSKPayloadReady:
  9280                           	opt stack 12
  9281                           
  9282                           ; BSR set to: 0
  9283                           ;radio_driver_SX1276.c: 1012: uint8_t irqFlags;
  9284                           ;radio_driver_SX1276.c: 1013: uint8_t i;
  9285                           ;radio_driver_SX1276.c: 1015: irqFlags = RADIO_RegisterRead(0x3F);
  9286                           
  9287                           ; BSR set to: 0
  9288                           ;incstack = 0
  9289  005BA2  0E3F               	movlw	63
  9290  005BA4  ECB0  F039         	call	_RADIO_RegisterRead
  9291  005BA8  6FED               	movwf	RADIO_FSKPayloadReady@irqFlags& (0+255),b
  9292                           
  9293                           ; BSR set to: 0
  9294                           ;radio_driver_SX1276.c: 1016: if ((1<<(2)) == (irqFlags & (1<<(2))))
  9295  005BAA  A5ED               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),2,b
  9296  005BAC  0012               	return	
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;radio_driver_SX1276.c: 1017: {
  9300                           ;radio_driver_SX1276.c: 1022: SwTimerStop(RadioConfiguration.watchdogTimerId);
  9301  005BAE  0101               	movlb	1	; () banked
  9302  005BB0  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
  9303  005BB2  ECF3  F03A         	call	_SwTimerStop
  9304                           
  9305                           ;radio_driver_SX1276.c: 1023: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
  9306  005BB6  0101               	movlb	1	; () banked
  9307  005BB8  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
  9308  005BBA  ECF3  F03A         	call	_SwTimerStop
  9309                           
  9310                           ; BSR set to: 0
  9311                           ;radio_driver_SX1276.c: 1025: HALSPICSAssert();
  9312  005BBE  EC72  F03C         	call	_HALSPICSAssert	;wreg free
  9313                           
  9314                           ;radio_driver_SX1276.c: 1026: HALSPISend(0x00);
  9315  005BC2  0E00               	movlw	0
  9316  005BC4  EC1C  F03C         	call	_HALSPISend
  9317                           
  9318                           ; BSR set to: 14
  9319                           ;radio_driver_SX1276.c: 1027: RadioConfiguration.dataBufferLen = HALSPISend(0xFF);
  9320  005BC8  0EFF               	movlw	255
  9321  005BCA  EC1C  F03C         	call	_HALSPISend
  9322  005BCE  0101               	movlb	1	; () banked
  9323  005BD0  6F99               	movwf	(_RadioConfiguration+36)& (0+255),b
  9324                           
  9325                           ; BSR set to: 1
  9326                           ;radio_driver_SX1276.c: 1028: for (i = 0; i < RadioConfiguration.dataBufferLen; i++)
  9327  005BD2  0100               	movlb	0	; () banked
  9328  005BD4  6BEE               	clrf	RADIO_FSKPayloadReady@i& (0+255),b
  9329  005BD6  D00D               	goto	l14880
  9330  005BD8                     l14876:
  9331                           
  9332                           ; BSR set to: 0
  9333                           ;radio_driver_SX1276.c: 1029: {
  9334                           ;radio_driver_SX1276.c: 1030: RadioConfiguration.dataBuffer[i] = HALSPISend(0xFF);
  9335  005BD8  51EE               	movf	RADIO_FSKPayloadReady@i& (0+255),w,b
  9336  005BDA  0101               	movlb	1	; () banked
  9337  005BDC  259A               	addwf	(_RadioConfiguration+37)& (0+255),w,b
  9338  005BDE  6ED9               	movwf	fsr2l,c
  9339  005BE0  0E00               	movlw	0
  9340  005BE2  219B               	addwfc	(_RadioConfiguration+38)& (0+255),w,b
  9341  005BE4  6EDA               	movwf	fsr2h,c
  9342  005BE6  0EFF               	movlw	255
  9343  005BE8  EC1C  F03C         	call	_HALSPISend
  9344  005BEC  6EDF               	movwf	indf2,c
  9345                           
  9346                           ; BSR set to: 14
  9347  005BEE  0100               	movlb	0	; () banked
  9348  005BF0  2BEE               	incf	RADIO_FSKPayloadReady@i& (0+255),f,b
  9349  005BF2                     l14880:
  9350                           
  9351                           ; BSR set to: 0
  9352  005BF2  0101               	movlb	1	; () banked
  9353  005BF4  5199               	movf	(_RadioConfiguration+36)& (0+255),w,b
  9354  005BF6  0100               	movlb	0	; () banked
  9355  005BF8  5DEE               	subwf	RADIO_FSKPayloadReady@i& (0+255),w,b
  9356  005BFA  E3EE               	bnc	l14876
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;radio_driver_SX1276.c: 1031: }
  9360                           ;radio_driver_SX1276.c: 1032: HALSPICSDeassert();
  9361  005BFC  EC70  F03C         	call	_HALSPICSDeassert	;wreg free
  9362                           
  9363                           ;radio_driver_SX1276.c: 1034: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
  9364  005C00  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
  9365  005C04  0E00               	movlw	0
  9366  005C06  0100               	movlb	0	; () banked
  9367  005C08  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
  9368  005C0A  EC6B  F029         	call	_RADIO_WriteMode
  9369                           
  9370                           ;radio_driver_SX1276.c: 1035: RadioConfiguration.flags &= ~(1 << (1));
  9371  005C0E  0101               	movlb	1	; () banked
  9372  005C10  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
  9373                           
  9374                           ; BSR set to: 1
  9375                           ;radio_driver_SX1276.c: 1037: RadioConfiguration.packetSNR = -128;
  9376  005C12  0E80               	movlw	128
  9377  005C14  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
  9378                           
  9379                           ; BSR set to: 1
  9380                           ;radio_driver_SX1276.c: 1039: if (1 == RadioConfiguration.crcOn)
  9381  005C16  0591               	decf	(_RadioConfiguration+28)& (0+255),w,b
  9382  005C18  E103               	bnz	l14894
  9383                           
  9384                           ; BSR set to: 1
  9385                           ;radio_driver_SX1276.c: 1040: {
  9386                           ;radio_driver_SX1276.c: 1041: if ((1<<(1)) == (irqFlags & (1<<(1))))
  9387  005C1A  0100               	movlb	0	; () banked
  9388  005C1C  A3ED               	btfss	RADIO_FSKPayloadReady@irqFlags& (0+255),1,b
  9389  005C1E  D003               	goto	l14896
  9390  005C20                     l14894:
  9391                           
  9392                           ;radio_driver_SX1276.c: 1042: {
  9393                           ;radio_driver_SX1276.c: 1043: RadioConfiguration.flags |= (1 << (2));
  9394  005C20  0101               	movlb	1	; () banked
  9395  005C22  8598               	bsf	(_RadioConfiguration+35)& (0+255),2,b
  9396                           
  9397                           ;radio_driver_SX1276.c: 1044: }
  9398  005C24  D002               	goto	l14900
  9399  005C26                     l14896:
  9400                           
  9401                           ; BSR set to: 0
  9402                           ;radio_driver_SX1276.c: 1045: else
  9403                           ;radio_driver_SX1276.c: 1046: {
  9404                           ;radio_driver_SX1276.c: 1047: RadioConfiguration.flags &= ~(1 << (2));
  9405  005C26  0101               	movlb	1	; () banked
  9406  005C28  9598               	bcf	(_RadioConfiguration+35)& (0+255),2,b
  9407  005C2A                     l14900:
  9408                           
  9409                           ; BSR set to: 1
  9410                           ;radio_driver_SX1276.c: 1053: }
  9411                           ;radio_driver_SX1276.c: 1055: if ((RadioConfiguration.flags & (1 << (2))) != 0)
  9412  005C2A  A598               	btfss	(_RadioConfiguration+35)& (0+255),2,b
  9413  005C2C  EF89  F013         	goto	_LORAWAN_RxTimeout
  9414                           
  9415                           ; BSR set to: 1
  9416                           ;radio_driver_SX1276.c: 1056: {
  9417                           ;radio_driver_SX1276.c: 1057: LORAWAN_RxDone(RadioConfiguration.dataBuffer, RadioConfigu
      +                          ration.dataBufferLen);
  9418  005C30  C19A  F16B         	movff	_RadioConfiguration+37,LORAWAN_RxDone@buffer
  9419  005C34  C19B  F16C         	movff	_RadioConfiguration+38,LORAWAN_RxDone@buffer+1
  9420  005C38  C199  F16D         	movff	_RadioConfiguration+36,LORAWAN_RxDone@bufferLength
  9421  005C3C  EF4B  F000         	goto	_LORAWAN_RxDone	;wreg free
  9422  005C40                     __end_of_RADIO_FSKPayloadReady:
  9423                           	opt stack 0
  9424                           tosu	equ	0xFFF
  9425                           tosh	equ	0xFFE
  9426                           tosl	equ	0xFFD
  9427                           pclath	equ	0xFFA
  9428                           tblptru	equ	0xFF8
  9429                           tblptrh	equ	0xFF7
  9430                           tblptrl	equ	0xFF6
  9431                           tablat	equ	0xFF5
  9432                           prodh	equ	0xFF4
  9433                           prodl	equ	0xFF3
  9434                           intcon	equ	0xFF2
  9435                           postinc0	equ	0xFEE
  9436                           wreg	equ	0xFE8
  9437                           postinc1	equ	0xFE6
  9438                           postdec1	equ	0xFE5
  9439                           plusw1	equ	0xFE3
  9440                           fsr1h	equ	0xFE2
  9441                           fsr1l	equ	0xFE1
  9442                           indf2	equ	0xFDF
  9443                           postinc2	equ	0xFDE
  9444                           postdec2	equ	0xFDD
  9445                           fsr2h	equ	0xFDA
  9446                           fsr2l	equ	0xFD9
  9447                           status	equ	0xFD8
  9448                           
  9449 ;; *************** function _LORAWAN_RxTimeout *****************
  9450 ;; Defined at:
  9451 ;;		line 464 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
  9452 ;; Parameters:    Size  Location     Type
  9453 ;;		None
  9454 ;; Auto vars:     Size  Location     Type
  9455 ;;  minim           4   73[BANK0 ] unsigned long 
  9456 ;;  i               1   77[BANK0 ] unsigned char 
  9457 ;; Return value:  Size  Location     Type
  9458 ;;                  1    wreg      void 
  9459 ;; Registers used:
  9460 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+1, btemp+2, btemp+11, tosl, tblptrl, tblptrh, tbl
      +ptru, prodl, prodh, cstack
  9461 ;; Tracked objects:
  9462 ;;		On entry : F/1
  9463 ;;		On exit  : C/0
  9464 ;;		Unchanged: 0/0
  9465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9466 ;;      Params:         0       0       0       0       0       0       0       0       0
  9467 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9468 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9469 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9470 ;;Total ram usage:        9 bytes
  9471 ;; Hardware stack levels used:    1
  9472 ;; Hardware stack levels required when called:   15
  9473 ;; This function calls:
  9474 ;;		_LORAWAN_ReceiveWindow2Callback
  9475 ;;		_RADIO_Transmit
  9476 ;;		_ResetParametersForConfirmedTransmission
  9477 ;;		_ResetParametersForUnconfirmedTransmission
  9478 ;;		_RxDataDone
  9479 ;;		_SelectChannelForTransmission
  9480 ;;		_SetJoinFailState
  9481 ;;		_SwTimerSetTimeout
  9482 ;;		_SwTimerStart
  9483 ;;		___lldiv
  9484 ;; This function is called by:
  9485 ;;		_RADIO_FSKPayloadReady
  9486 ;;		_RADIO_RxTimeout
  9487 ;;		_RADIO_RxFSKTimeout
  9488 ;;		_RADIO_WatchdogTimeout
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           	psect	text55
  9493  002712                     __ptext55:
  9494                           	opt stack 0
  9495  002712                     _LORAWAN_RxTimeout:
  9496                           	opt stack 12
  9497                           
  9498                           ; BSR set to: 1
  9499                           ;lorawan_eu.c: 466: uint8_t i;
  9500                           ;lorawan_eu.c: 467: uint32_t minim = (4294967295UL);
  9501                           
  9502                           ;incstack = 0
  9503  002712  0100               	movlb	0	; () banked
  9504  002714  69A9               	setf	LORAWAN_RxTimeout@minim& (0+255),b
  9505  002716  69AA               	setf	(LORAWAN_RxTimeout@minim+1)& (0+255),b
  9506  002718  69AB               	setf	(LORAWAN_RxTimeout@minim+2)& (0+255),b
  9507  00271A  69AC               	setf	(LORAWAN_RxTimeout@minim+3)& (0+255),b
  9508                           
  9509                           ;lorawan_eu.c: 469: if (loRa.macStatus.macPause == 0)
  9510  00271C  0102               	movlb	2	; () banked
  9511  00271E  B103               	btfsc	(_loRa+3)& (0+255),0,b
  9512  002720  D13C               	goto	l14612
  9513                           
  9514                           ; BSR set to: 2
  9515                           ;lorawan_eu.c: 470: {
  9516                           ;lorawan_eu.c: 472: if ( loRa.macStatus.macState == RX1_OPEN )
  9517  002722  5102               	movf	(_loRa+2)& (0+255),w,b
  9518  002724  0B0F               	andlw	15
  9519  002726  0A03               	xorlw	3
  9520  002728  E10E               	bnz	l1068
  9521                           
  9522                           ; BSR set to: 2
  9523                           ;lorawan_eu.c: 473: {
  9524                           ;lorawan_eu.c: 474: if (CLASS_A == loRa.deviceClass)
  9525  00272A  5112               	movf	(_loRa+18)& (0+255),w,b
  9526  00272C  E105               	bnz	l14548
  9527                           
  9528                           ; BSR set to: 2
  9529                           ;lorawan_eu.c: 475: {
  9530                           ;lorawan_eu.c: 476: loRa.macStatus.macState = BETWEEN_RX1_RX2;
  9531  00272E  5102               	movf	(_loRa+2)& (0+255),w,b
  9532  002730  0BF0               	andlw	-16
  9533  002732  0904               	iorlw	4
  9534  002734  6F02               	movwf	(_loRa+2)& (0+255),b
  9535                           
  9536                           ;lorawan_eu.c: 477: }
  9537  002736  0012               	return	
  9538  002738                     l14548:
  9539                           
  9540                           ; BSR set to: 2
  9541                           ;lorawan_eu.c: 478: else if (CLASS_C == loRa.deviceClass)
  9542  002738  0E02               	movlw	2
  9543  00273A  1912               	xorwf	(_loRa+18)& (0+255),w,b
  9544  00273C  A4D8               	btfss	status,2,c
  9545  00273E  0012               	return	
  9546                           
  9547                           ; BSR set to: 2
  9548                           ;lorawan_eu.c: 479: {
  9549                           ;lorawan_eu.c: 480: LORAWAN_ReceiveWindow2Callback(0);
  9550  002740  6AE6               	clrf	postinc1,c
  9551  002742  EFA6  F02A         	goto	_LORAWAN_ReceiveWindow2Callback	;wreg free
  9552  002746                     l1068:
  9553                           
  9554                           ; BSR set to: 2
  9555                           ;lorawan_eu.c: 483: else
  9556                           ;lorawan_eu.c: 484: {
  9557                           ;lorawan_eu.c: 486: if (loRa.lorawanMacStatus.joining == 1)
  9558  002746  B500               	btfsc	_loRa& (0+255),2,b
  9559                           
  9560                           ; BSR set to: 2
  9561                           ;lorawan_eu.c: 487: {
  9562                           ;lorawan_eu.c: 488: SetJoinFailState();
  9563  002748  EF36  F039         	goto	_SetJoinFailState	;wreg free
  9564                           
  9565                           ; BSR set to: 2
  9566                           ;lorawan_eu.c: 491: else if (loRa.macStatus.networkJoined == 1)
  9567                           
  9568                           ;lorawan_eu.c: 489: }
  9569  00274C  A902               	btfss	(_loRa+2)& (0+255),4,b
  9570  00274E  0012               	return	
  9571                           
  9572                           ; BSR set to: 2
  9573                           ;lorawan_eu.c: 492: {
  9574                           ;lorawan_eu.c: 493: if (loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1)
  9575  002750  A100               	btfss	_loRa& (0+255),0,b
  9576  002752  D04F               	goto	l14570
  9577                           
  9578                           ; BSR set to: 2
  9579                           ;lorawan_eu.c: 494: {
  9580                           ;lorawan_eu.c: 495: if (loRa.counterRepetitionsConfirmedUplink <= loRa.maxRepetitionsCon
      +                          firmedUplink)
  9581  002754  51D9               	movf	(_loRa+217)& (0+255),w,b
  9582  002756  5DD7               	subwf	(_loRa+215)& (0+255),w,b
  9583  002758  E334               	bnc	l14564
  9584                           
  9585                           ; BSR set to: 2
  9586                           ;lorawan_eu.c: 496: {
  9587                           ;lorawan_eu.c: 497: loRa.macStatus.macState = RETRANSMISSION_DELAY;
  9588  00275A  5102               	movf	(_loRa+2)& (0+255),w,b
  9589  00275C  0BF0               	andlw	-16
  9590  00275E  0906               	iorlw	6
  9591  002760  6F02               	movwf	(_loRa+2)& (0+255),b
  9592                           
  9593                           ; BSR set to: 2
  9594                           ;lorawan_eu.c: 498: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protoc
      +                          olParameters.ackTimeout)) << (12)) / 125UL ));
  9595  002762  51A0               	movf	(_loRa+160)& (0+255),w,b
  9596  002764  0100               	movlb	0	; () banked
  9597  002766  6FA5               	movwf	??_LORAWAN_RxTimeout& (0+255),b
  9598  002768  0102               	movlb	2	; () banked
  9599  00276A  51A1               	movf	(_loRa+161)& (0+255),w,b
  9600  00276C  0100               	movlb	0	; () banked
  9601  00276E  6FA6               	movwf	(??_LORAWAN_RxTimeout+1)& (0+255),b
  9602  002770  6BA7               	clrf	(??_LORAWAN_RxTimeout+2)& (0+255),b
  9603  002772  6BA8               	clrf	(??_LORAWAN_RxTimeout+3)& (0+255),b
  9604  002774  0E0C               	movlw	12
  9605  002776                     u16755:
  9606  002776  90D8               	bcf	status,0,c
  9607  002778  37A5               	rlcf	??_LORAWAN_RxTimeout& (0+255),f,b
  9608  00277A  37A6               	rlcf	(??_LORAWAN_RxTimeout+1)& (0+255),f,b
  9609  00277C  37A7               	rlcf	(??_LORAWAN_RxTimeout+2)& (0+255),f,b
  9610  00277E  37A8               	rlcf	(??_LORAWAN_RxTimeout+3)& (0+255),f,b
  9611  002780  2EE8               	decfsz	wreg,f,c
  9612  002782  D7F9               	goto	u16755
  9613  002784  C0A5  F064         	movff	??_LORAWAN_RxTimeout,___lldiv@dividend
  9614  002788  C0A6  F065         	movff	??_LORAWAN_RxTimeout+1,___lldiv@dividend+1
  9615  00278C  C0A7  F066         	movff	??_LORAWAN_RxTimeout+2,___lldiv@dividend+2
  9616  002790  C0A8  F067         	movff	??_LORAWAN_RxTimeout+3,___lldiv@dividend+3
  9617  002794  0E7D               	movlw	125
  9618  002796  6F68               	movwf	___lldiv@divisor& (0+255),b
  9619  002798  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  9620  00279A  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  9621  00279C  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  9622  00279E  ECB3  F030         	call	___lldiv	;wreg free
  9623  0027A2  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
  9624  0027A6  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
  9625  0027AA  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
  9626  0027AE  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
  9627  0027B2  0102               	movlb	2	; () banked
  9628  0027B4  51E8               	movf	(_loRa+232)& (0+255),w,b
  9629  0027B6  ECCA  F036         	call	_SwTimerSetTimeout
  9630                           
  9631                           ; BSR set to: 0
  9632                           ;lorawan_eu.c: 499: SwTimerStart(loRa.ackTimeoutTimerId);
  9633  0027BA  0102               	movlb	2	; () banked
  9634  0027BC  51E8               	movf	(_loRa+232)& (0+255),w,b
  9635  0027BE  EFB3  F02E         	goto	_SwTimerStart
  9636  0027C2                     l14564:
  9637                           
  9638                           ; BSR set to: 2
  9639                           ;lorawan_eu.c: 501: else
  9640                           ;lorawan_eu.c: 502: {
  9641                           ;lorawan_eu.c: 503: ResetParametersForConfirmedTransmission ();
  9642  0027C2  ECC9  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
  9643                           
  9644                           ; BSR set to: 2
  9645                           ;lorawan_eu.c: 504: if (rxPayload.RxAppData != (0))
  9646  0027C6  0101               	movlb	1	; () banked
  9647  0027C8  516E               	movf	_rxPayload& (0+255),w,b
  9648  0027CA  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  9649  0027CC  B4D8               	btfsc	status,2,c
  9650  0027CE  0012               	return	
  9651  0027D0                     l14568:
  9652                           
  9653                           ; BSR set to: 1
  9654                           ;lorawan_eu.c: 505: {
  9655                           ;lorawan_eu.c: 506: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
  9656  0027D0  0E00               	movlw	0
  9657  0027D2  0100               	movlb	0	; () banked
  9658  0027D4  6F64               	movwf	RxDataDone@pData& (0+255),b
  9659  0027D6  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  9660  0027D8  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  9661  0027DA  6F67               	movwf	RxDataDone@status& (0+255),b
  9662  0027DC  0005               	push	
  9663  0027DE  0101               	movlb	1	; () banked
  9664  0027E0  6EFA               	movwf	pclath,c
  9665  0027E2  516E               	movf	_rxPayload& (0+255),w,b
  9666  0027E4  6EFD               	movwf	tosl,c
  9667  0027E6  516F               	movf	(_rxPayload+1)& (0+255),w,b
  9668  0027E8  6EFE               	movwf	tosh,c
  9669  0027EA  50F8               	movf	tblptru,w,c
  9670  0027EC  6EFF               	movwf	tosu,c
  9671  0027EE  50FA               	movf	pclath,w,c
  9672  0027F0  0012               	return		;indir
  9673  0027F2                     l14570:
  9674                           
  9675                           ; BSR set to: 2
  9676                           ;lorawan_eu.c: 511: else
  9677                           ;lorawan_eu.c: 512: {
  9678                           ;lorawan_eu.c: 513: if (loRa.counterRepetitionsUnconfirmedUplink <= loRa.maxRepetitionsU
      +                          nconfirmedUplink)
  9679  0027F2  51D8               	movf	(_loRa+216)& (0+255),w,b
  9680  0027F4  5DD6               	subwf	(_loRa+214)& (0+255),w,b
  9681  0027F6  E201 D0B7          	bnc	l14606
  9682                           
  9683                           ; BSR set to: 2
  9684                           ;lorawan_eu.c: 514: {
  9685                           ;lorawan_eu.c: 515: loRa.macStatus.macState = RETRANSMISSION_DELAY;
  9686  0027FA  5102               	movf	(_loRa+2)& (0+255),w,b
  9687  0027FC  0BF0               	andlw	-16
  9688  0027FE  0906               	iorlw	6
  9689  002800  6F02               	movwf	(_loRa+2)& (0+255),b
  9690                           
  9691                           ; BSR set to: 2
  9692                           ;lorawan_eu.c: 516: if (SelectChannelForTransmission (1) == OK)
  9693  002802  0E01               	movlw	1
  9694  002804  EC60  F033         	call	_SelectChannelForTransmission
  9695  002808  0900               	iorlw	0
  9696  00280A  E119               	bnz	l1082
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;lorawan_eu.c: 517: {
  9700                           ;lorawan_eu.c: 519: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
  9701  00280C  0EF0               	movlw	low (_macBuffer+16)
  9702  00280E  6F94               	movwf	RADIO_Transmit@buffer& (0+255),b
  9703  002810  0E04               	movlw	high (_macBuffer+16)
  9704  002812  6F95               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
  9705  002814  C2D4  F096         	movff	_loRa+212,RADIO_Transmit@bufferLen
  9706  002818  ECFA  F017         	call	_RADIO_Transmit	;wreg free
  9707  00281C  5194               	movf	?_RADIO_Transmit& (0+255),w,b
  9708  00281E  1195               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
  9709  002820  E107               	bnz	l14582
  9710                           
  9711                           ; BSR set to: 0
  9712                           ;lorawan_eu.c: 520: {
  9713                           ;lorawan_eu.c: 521: loRa.counterRepetitionsUnconfirmedUplink ++ ;
  9714  002822  0102               	movlb	2	; () banked
  9715  002824  2BD8               	incf	(_loRa+216)& (0+255),f,b
  9716                           
  9717                           ; BSR set to: 2
  9718                           ;lorawan_eu.c: 522: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
  9719  002826  5102               	movf	(_loRa+2)& (0+255),w,b
  9720  002828  0BF0               	andlw	-16
  9721  00282A  0901               	iorlw	1
  9722  00282C  6F02               	movwf	(_loRa+2)& (0+255),b
  9723                           
  9724                           ;lorawan_eu.c: 523: }
  9725  00282E  0012               	return	
  9726  002830                     l14582:
  9727                           
  9728                           ; BSR set to: 0
  9729                           ;lorawan_eu.c: 524: else
  9730                           ;lorawan_eu.c: 526: {
  9731                           ;lorawan_eu.c: 527: ResetParametersForUnconfirmedTransmission ();
  9732  002830  ECC2  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  9733                           
  9734                           ; BSR set to: 2
  9735                           ;lorawan_eu.c: 528: if (rxPayload.RxAppData != (0))
  9736  002834  0101               	movlb	1	; () banked
  9737  002836  516E               	movf	_rxPayload& (0+255),w,b
  9738  002838  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  9739  00283A  E1CA               	bnz	l14568
  9740  00283C  0012               	return	
  9741  00283E                     l1082:
  9742                           
  9743                           ; BSR set to: 0
  9744                           ;lorawan_eu.c: 534: else
  9745                           ;lorawan_eu.c: 535: {
  9746                           ;lorawan_eu.c: 537: for (i = 0; i <= loRa.maxChannels; i ++)
  9747  00283E  6BAD               	clrf	LORAWAN_RxTimeout@i& (0+255),b
  9748  002840  D05B               	goto	l14602
  9749  002842                     l14588:
  9750                           
  9751                           ; BSR set to: 2
  9752                           ;lorawan_eu.c: 538: {
  9753                           ;lorawan_eu.c: 539: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
  9754  002842  0100               	movlb	0	; () banked
  9755  002844  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9756  002846  0D0E               	mullw	14
  9757  002848  0E04               	movlw	low (_Channels+4)
  9758  00284A  24F3               	addwf	prodl,w,c
  9759  00284C  6ED9               	movwf	fsr2l,c
  9760  00284E  0E04               	movlw	high (_Channels+4)
  9761  002850  20F4               	addwfc	prodh,w,c
  9762  002852  6EDA               	movwf	fsr2h,c
  9763  002854  04DE               	decf	postinc2,w,c
  9764  002856  E14E               	bnz	l14600
  9765                           
  9766                           ; BSR set to: 0
  9767  002858  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9768  00285A  0D0E               	mullw	14
  9769  00285C  0E08               	movlw	low (_Channels+8)
  9770  00285E  24F3               	addwf	prodl,w,c
  9771  002860  6ED9               	movwf	fsr2l,c
  9772  002862  0E04               	movlw	high (_Channels+8)
  9773  002864  20F4               	addwfc	prodh,w,c
  9774  002866  6EDA               	movwf	fsr2h,c
  9775  002868  50DE               	movf	postinc2,w,c
  9776  00286A  10DE               	iorwf	postinc2,w,c
  9777  00286C  10DE               	iorwf	postinc2,w,c
  9778  00286E  10DE               	iorwf	postinc2,w,c
  9779  002870  E041               	bz	l14600
  9780                           
  9781                           ; BSR set to: 0
  9782  002872  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9783  002874  0D0E               	mullw	14
  9784  002876  0E08               	movlw	low (_Channels+8)
  9785  002878  24F3               	addwf	prodl,w,c
  9786  00287A  6ED9               	movwf	fsr2l,c
  9787  00287C  0E04               	movlw	high (_Channels+8)
  9788  00287E  20F4               	addwfc	prodh,w,c
  9789  002880  6EDA               	movwf	fsr2h,c
  9790  002882  50DE               	movf	postinc2,w,c
  9791  002884  5DA9               	subwf	LORAWAN_RxTimeout@minim& (0+255),w,b
  9792  002886  50DE               	movf	postinc2,w,c
  9793  002888  59AA               	subwfb	(LORAWAN_RxTimeout@minim+1)& (0+255),w,b
  9794  00288A  50DE               	movf	postinc2,w,c
  9795  00288C  59AB               	subwfb	(LORAWAN_RxTimeout@minim+2)& (0+255),w,b
  9796  00288E  50DE               	movf	postinc2,w,c
  9797  002890  59AC               	subwfb	(LORAWAN_RxTimeout@minim+3)& (0+255),w,b
  9798  002892  E330               	bnc	l14600
  9799                           
  9800                           ; BSR set to: 0
  9801  002894  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9802  002896  0D0E               	mullw	14
  9803  002898  0E05               	movlw	low (_Channels+5)
  9804  00289A  24F3               	addwf	prodl,w,c
  9805  00289C  6ED9               	movwf	fsr2l,c
  9806  00289E  0E04               	movlw	high (_Channels+5)
  9807  0028A0  20F4               	addwfc	prodh,w,c
  9808  0028A2  6EDA               	movwf	fsr2h,c
  9809  0028A4  50DF               	movf	223,w,c
  9810  0028A6  0B0F               	andlw	15
  9811  0028A8  6FA5               	movwf	??_LORAWAN_RxTimeout& (0+255),b
  9812  0028AA  51A5               	movf	??_LORAWAN_RxTimeout& (0+255),w,b
  9813  0028AC  0102               	movlb	2	; () banked
  9814  0028AE  5DDF               	subwf	(_loRa+223)& (0+255),w,b
  9815  0028B0  E321               	bnc	l14600
  9816                           
  9817                           ; BSR set to: 2
  9818  0028B2  0100               	movlb	0	; () banked
  9819  0028B4  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9820  0028B6  0D0E               	mullw	14
  9821  0028B8  0E05               	movlw	low (_Channels+5)
  9822  0028BA  24F3               	addwf	prodl,w,c
  9823  0028BC  6ED9               	movwf	fsr2l,c
  9824  0028BE  0E04               	movlw	high (_Channels+5)
  9825  0028C0  20F4               	addwfc	prodh,w,c
  9826  0028C2  6EDA               	movwf	fsr2h,c
  9827  0028C4  38DF               	swapf	223,w,c
  9828  0028C6  0B0F               	andlw	15
  9829  0028C8  6FA5               	movwf	??_LORAWAN_RxTimeout& (0+255),b
  9830  0028CA  0102               	movlb	2	; () banked
  9831  0028CC  51DF               	movf	(_loRa+223)& (0+255),w,b
  9832  0028CE  0100               	movlb	0	; () banked
  9833  0028D0  5DA5               	subwf	??_LORAWAN_RxTimeout& (0+255),w,b
  9834  0028D2  E310               	bnc	l14600
  9835                           
  9836                           ; BSR set to: 0
  9837                           ;lorawan_eu.c: 540: {
  9838                           ;lorawan_eu.c: 541: minim = Channels[i].channelTimer;
  9839  0028D4  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9840  0028D6  0D0E               	mullw	14
  9841  0028D8  0E08               	movlw	low (_Channels+8)
  9842  0028DA  24F3               	addwf	prodl,w,c
  9843  0028DC  6ED9               	movwf	fsr2l,c
  9844  0028DE  0E04               	movlw	high (_Channels+8)
  9845  0028E0  20F4               	addwfc	prodh,w,c
  9846  0028E2  6EDA               	movwf	fsr2h,c
  9847  0028E4  CFDE F0A9          	movff	postinc2,LORAWAN_RxTimeout@minim
  9848  0028E8  CFDE F0AA          	movff	postinc2,LORAWAN_RxTimeout@minim+1
  9849  0028EC  CFDE F0AB          	movff	postinc2,LORAWAN_RxTimeout@minim+2
  9850  0028F0  CFDE F0AC          	movff	postinc2,LORAWAN_RxTimeout@minim+3
  9851  0028F4                     l14600:
  9852  0028F4  0100               	movlb	0	; () banked
  9853  0028F6  2BAD               	incf	LORAWAN_RxTimeout@i& (0+255),f,b
  9854  0028F8                     l14602:
  9855                           
  9856                           ; BSR set to: 0
  9857  0028F8  51AD               	movf	LORAWAN_RxTimeout@i& (0+255),w,b
  9858  0028FA  0102               	movlb	2	; () banked
  9859  0028FC  5DED               	subwf	(_loRa+237)& (0+255),w,b
  9860  0028FE  E2A1               	bc	l14588
  9861                           
  9862                           ; BSR set to: 2
  9863                           ;lorawan_eu.c: 542: }
  9864                           ;lorawan_eu.c: 543: }
  9865                           ;lorawan_eu.c: 544: SwTimerSetTimeout (loRa.unconfirmedRetransmisionTimerId, ( (((uint32
      +                          _t)(minim + 50)) << (12)) / 125UL ) );
  9866  002900  C0A9  F0A5         	movff	LORAWAN_RxTimeout@minim,??_LORAWAN_RxTimeout
  9867  002904  C0AA  F0A6         	movff	LORAWAN_RxTimeout@minim+1,??_LORAWAN_RxTimeout+1
  9868  002908  C0AB  F0A7         	movff	LORAWAN_RxTimeout@minim+2,??_LORAWAN_RxTimeout+2
  9869  00290C  C0AC  F0A8         	movff	LORAWAN_RxTimeout@minim+3,??_LORAWAN_RxTimeout+3
  9870  002910  0E0C               	movlw	12
  9871  002912                     u16885:
  9872  002912  90D8               	bcf	status,0,c
  9873  002914  0100               	movlb	0	; () banked
  9874  002916  37A5               	rlcf	??_LORAWAN_RxTimeout& (0+255),f,b
  9875  002918  37A6               	rlcf	(??_LORAWAN_RxTimeout+1)& (0+255),f,b
  9876  00291A  37A7               	rlcf	(??_LORAWAN_RxTimeout+2)& (0+255),f,b
  9877  00291C  37A8               	rlcf	(??_LORAWAN_RxTimeout+3)& (0+255),f,b
  9878  00291E  2EE8               	decfsz	wreg,f,c
  9879  002920  D7F8               	goto	u16885
  9880  002922  0E00               	movlw	0
  9881  002924  25A5               	addwf	??_LORAWAN_RxTimeout& (0+255),w,b
  9882  002926  6F64               	movwf	___lldiv@dividend& (0+255),b
  9883  002928  0E20               	movlw	32
  9884  00292A  21A6               	addwfc	(??_LORAWAN_RxTimeout+1)& (0+255),w,b
  9885  00292C  6F65               	movwf	(___lldiv@dividend+1)& (0+255),b
  9886  00292E  0E03               	movlw	3
  9887  002930  21A7               	addwfc	(??_LORAWAN_RxTimeout+2)& (0+255),w,b
  9888  002932  6F66               	movwf	(___lldiv@dividend+2)& (0+255),b
  9889  002934  0E00               	movlw	0
  9890  002936  21A8               	addwfc	(??_LORAWAN_RxTimeout+3)& (0+255),w,b
  9891  002938  6F67               	movwf	(___lldiv@dividend+3)& (0+255),b
  9892  00293A  0E7D               	movlw	125
  9893  00293C  6F68               	movwf	___lldiv@divisor& (0+255),b
  9894  00293E  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
  9895  002940  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
  9896  002942  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
  9897  002944  ECB3  F030         	call	___lldiv	;wreg free
  9898  002948  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
  9899  00294C  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
  9900  002950  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
  9901  002954  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
  9902  002958  0102               	movlb	2	; () banked
  9903  00295A  51EA               	movf	(_loRa+234)& (0+255),w,b
  9904  00295C  ECCA  F036         	call	_SwTimerSetTimeout
  9905                           
  9906                           ;lorawan_eu.c: 545: SwTimerStart (loRa.unconfirmedRetransmisionTimerId);
  9907  002960  0102               	movlb	2	; () banked
  9908  002962  51EA               	movf	(_loRa+234)& (0+255),w,b
  9909  002964  EFB3  F02E         	goto	_SwTimerStart
  9910  002968                     l14606:
  9911                           
  9912                           ; BSR set to: 2
  9913                           ;lorawan_eu.c: 548: else
  9914                           ;lorawan_eu.c: 549: {
  9915                           ;lorawan_eu.c: 550: ResetParametersForUnconfirmedTransmission ();
  9916  002968  ECC2  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
  9917                           
  9918                           ; BSR set to: 2
  9919                           ;lorawan_eu.c: 551: if (rxPayload.RxAppData != (0))
  9920  00296C  0101               	movlb	1	; () banked
  9921  00296E  516E               	movf	_rxPayload& (0+255),w,b
  9922  002970  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  9923  002972  B4D8               	btfsc	status,2,c
  9924  002974  0012               	return	
  9925                           
  9926                           ; BSR set to: 1
  9927                           ;lorawan_eu.c: 552: {
  9928                           ;lorawan_eu.c: 553: rxPayload.RxAppData((0), 0, MAC_OK);
  9929  002976  0E00               	movlw	0
  9930  002978  0100               	movlb	0	; () banked
  9931  00297A  6F64               	movwf	RxDataDone@pData& (0+255),b
  9932  00297C  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  9933  00297E  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  9934  002980  0E01               	movlw	1
  9935  002982  6F67               	movwf	RxDataDone@status& (0+255),b
  9936  002984  0005               	push	
  9937  002986  0101               	movlb	1	; () banked
  9938  002988  6EFA               	movwf	pclath,c
  9939  00298A  516E               	movf	_rxPayload& (0+255),w,b
  9940  00298C  6EFD               	movwf	tosl,c
  9941  00298E  516F               	movf	(_rxPayload+1)& (0+255),w,b
  9942  002990  6EFE               	movwf	tosh,c
  9943  002992  50F8               	movf	tblptru,w,c
  9944  002994  6EFF               	movwf	tosu,c
  9945  002996  50FA               	movf	pclath,w,c
  9946  002998  0012               	return		;indir
  9947  00299A                     l14612:
  9948                           
  9949                           ; BSR set to: 2
  9950                           ;lorawan_eu.c: 560: else
  9951                           ;lorawan_eu.c: 561: {
  9952                           ;lorawan_eu.c: 563: if (rxPayload.RxAppData != (0))
  9953  00299A  0101               	movlb	1	; () banked
  9954  00299C  516E               	movf	_rxPayload& (0+255),w,b
  9955  00299E  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
  9956  0029A0  B4D8               	btfsc	status,2,c
  9957  0029A2  0012               	return	
  9958                           
  9959                           ; BSR set to: 1
  9960                           ;lorawan_eu.c: 564: {
  9961                           ;lorawan_eu.c: 565: rxPayload.RxAppData((0), 0, RADIO_NOT_OK);
  9962  0029A4  0E00               	movlw	0
  9963  0029A6  0100               	movlb	0	; () banked
  9964  0029A8  6F64               	movwf	RxDataDone@pData& (0+255),b
  9965  0029AA  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
  9966  0029AC  6F66               	movwf	RxDataDone@dataLength& (0+255),b
  9967  0029AE  0E02               	movlw	2
  9968  0029B0  6F67               	movwf	RxDataDone@status& (0+255),b
  9969  0029B2  0005               	push	
  9970  0029B4  0101               	movlb	1	; () banked
  9971  0029B6  6EFA               	movwf	pclath,c
  9972  0029B8  516E               	movf	_rxPayload& (0+255),w,b
  9973  0029BA  6EFD               	movwf	tosl,c
  9974  0029BC  516F               	movf	(_rxPayload+1)& (0+255),w,b
  9975  0029BE  6EFE               	movwf	tosh,c
  9976  0029C0  50F8               	movf	tblptru,w,c
  9977  0029C2  6EFF               	movwf	tosu,c
  9978  0029C4  50FA               	movf	pclath,w,c
  9979  0029C6  0012               	return		;indir
  9980  0029C8                     __end_of_LORAWAN_RxTimeout:
  9981                           	opt stack 0
  9982                           tosu	equ	0xFFF
  9983                           tosh	equ	0xFFE
  9984                           tosl	equ	0xFFD
  9985                           pclath	equ	0xFFA
  9986                           tblptru	equ	0xFF8
  9987                           tblptrh	equ	0xFF7
  9988                           tblptrl	equ	0xFF6
  9989                           tablat	equ	0xFF5
  9990                           prodh	equ	0xFF4
  9991                           prodl	equ	0xFF3
  9992                           intcon	equ	0xFF2
  9993                           postinc0	equ	0xFEE
  9994                           wreg	equ	0xFE8
  9995                           postinc1	equ	0xFE6
  9996                           postdec1	equ	0xFE5
  9997                           plusw1	equ	0xFE3
  9998                           fsr1h	equ	0xFE2
  9999                           fsr1l	equ	0xFE1
 10000                           indf2	equ	0xFDF
 10001                           postinc2	equ	0xFDE
 10002                           postdec2	equ	0xFDD
 10003                           fsr2h	equ	0xFDA
 10004                           fsr2l	equ	0xFD9
 10005                           status	equ	0xFD8
 10006                           
 10007 ;; *************** function _LORAWAN_RxDone *****************
 10008 ;; Defined at:
 10009 ;;		line 1121 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;  buffer          2  107[BANK1 ] PTR unsigned char 
 10012 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 10013 ;;  bufferLength    1  109[BANK1 ] unsigned char 
 10014 ;; Auto vars:     Size  Location     Type
 10015 ;;  hdr             2   18[BANK3 ] PTR struct .
 10016 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 10017 ;;  joinAccept      2   15[BANK3 ] PTR struct .
 10018 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 10019 ;;  computedMic     4   11[BANK3 ] unsigned long 
 10020 ;;  extractedMic    4    3[BANK3 ] unsigned long 
 10021 ;;  packet          2    9[BANK3 ] PTR unsigned char 
 10022 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), NULL(0), 
 10023 ;;  frmPayloadLe    1   17[BANK3 ] unsigned char 
 10024 ;;  temp            1    8[BANK3 ] unsigned char 
 10025 ;;  bufferIndex     1    7[BANK3 ] unsigned char 
 10026 ;;  mhdr            1    2[BANK3 ] struct .
 10027 ;;  channelIndex    1    1[BANK3 ] unsigned char 
 10028 ;;  fPort           1    0[BANK3 ] unsigned char 
 10029 ;; Return value:  Size  Location     Type
 10030 ;;                  1    wreg      enum E17365
 10031 ;; Registers used:
 10032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp+8, btemp+9, btemp+10, btemp+11, tos
      +l, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10033 ;; Tracked objects:
 10034 ;;		On entry : F/1
 10035 ;;		On exit  : C/0
 10036 ;;		Unchanged: 0/0
 10037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10038 ;;      Params:         0       0       3       0       0       0       0       0       0
 10039 ;;      Locals:         0       0       0       0      20       0       0       0       0
 10040 ;;      Temps:          0       5       0       0       0       0       0       0       0
 10041 ;;      Totals:         0       5       3       0      20       0       0       0       0
 10042 ;;Total ram usage:       28 bytes
 10043 ;; Hardware stack levels used:    1
 10044 ;; Hardware stack levels required when called:   15
 10045 ;; This function calls:
 10046 ;;		_AESCmac
 10047 ;;		_AESEncodeLoRa
 10048 ;;		_AssembleEncryptionBlock
 10049 ;;		_CheckFlags
 10050 ;;		_CheckMcastFlags
 10051 ;;		_ComputeMic
 10052 ;;		_ComputeSessionKeys
 10053 ;;		_EncryptFRMPayload
 10054 ;;		_ExtractMic
 10055 ;;		_LORAWAN_EnterContinuousReceive
 10056 ;;		_LORAWAN_Send
 10057 ;;		_MacExecuteCommands
 10058 ;;		_RADIO_GetStatus
 10059 ;;		_RADIO_ReleaseData
 10060 ;;		_RxDataDone
 10061 ;;		_SearchAvailableChannel
 10062 ;;		_SetJoinFailState
 10063 ;;		_SetReceptionNotOkState
 10064 ;;		_StartReTxTimer
 10065 ;;		_SwTimerStop
 10066 ;;		_UpdateCfList
 10067 ;;		_UpdateDLSettings
 10068 ;;		_UpdateJoinSuccessState
 10069 ;;		_UpdateReceiveDelays
 10070 ;;		_UpdateRetransmissionAckTimeoutState
 10071 ;;		_memcpy
 10072 ;; This function is called by:
 10073 ;;		_RADIO_RxDone
 10074 ;;		_RADIO_FSKPayloadReady
 10075 ;; This function uses a non-reentrant model
 10076 ;;
 10077                           
 10078                           	psect	text56
 10079  000096                     __ptext56:
 10080                           	opt stack 0
 10081  000096                     _LORAWAN_RxDone:
 10082                           	opt stack 12
 10083                           
 10084                           ; BSR set to: 1
 10085                           ;lorawan.c: 1123: uint32_t computedMic, extractedMic;
 10086                           ;lorawan.c: 1124: Mhdr_t mhdr;
 10087                           ;lorawan.c: 1125: uint8_t fPort, bufferIndex, channelIndex;
 10088                           ;lorawan.c: 1126: uint8_t frmPayloadLength;
 10089                           ;lorawan.c: 1127: uint8_t *packet;
 10090                           ;lorawan.c: 1128: uint8_t temp;
 10091                           ;lorawan.c: 1130: RADIO_ReleaseData();
 10092                           
 10093                           ;incstack = 0
 10094  000096  EC5D  F03C         	call	_RADIO_ReleaseData	;wreg free
 10095                           
 10096                           ; BSR set to: 1
 10097                           ;lorawan.c: 1132: if (loRa.macStatus.macPause == 0)
 10098  00009A  0102               	movlb	2	; () banked
 10099  00009C  B103               	btfsc	(_loRa+3)& (0+255),0,b
 10100  00009E  EF69  F005         	goto	l14530
 10101                           
 10102                           ; BSR set to: 2
 10103                           ;lorawan.c: 1133: {
 10104                           ;lorawan.c: 1134: mhdr.value = buffer[0];
 10105  0000A2  C16B  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 10106  0000A6  C16C  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 10107  0000AA  50DF               	movf	indf2,w,c
 10108  0000AC  0103               	movlb	3	; () banked
 10109  0000AE  6FA2               	movwf	LORAWAN_RxDone@mhdr& (0+255),b
 10110                           
 10111                           ; BSR set to: 3
 10112                           ;lorawan.c: 1135: if ( (mhdr.bits.mType == FRAME_TYPE_JOIN_ACCEPT) && (loRa.activationPa
      +                          rameters.activationType == 0) )
 10113  0000B0  39A2               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 10114  0000B2  32E8               	rrcf	wreg,f,c
 10115  0000B4  0B07               	andlw	7
 10116  0000B6  06E8               	decf	wreg,f,c
 10117  0000B8  E001 D0C7          	bnz	l14202
 10118                           
 10119                           ; BSR set to: 3
 10120  0000BC  0102               	movlb	2	; () banked
 10121  0000BE  511D               	movf	(_loRa+29)& (0+255),w,b
 10122  0000C0  E001 D0C3          	bnz	l14202
 10123                           
 10124                           ; BSR set to: 2
 10125                           ;lorawan.c: 1136: {
 10126                           ;lorawan.c: 1137: temp = bufferLength - 1;
 10127  0000C4  0101               	movlb	1	; () banked
 10128  0000C6  056D               	decf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10129  0000C8  0103               	movlb	3	; () banked
 10130  0000CA  6FA8               	movwf	LORAWAN_RxDone@temp& (0+255),b
 10131                           
 10132                           ;lorawan.c: 1138: while (temp > 0)
 10133  0000CC  D020               	goto	l14158
 10134  0000CE                     l14152:
 10135                           
 10136                           ; BSR set to: 3
 10137                           ;lorawan.c: 1139: {
 10138                           ;lorawan.c: 1141: AESEncodeLoRa (&buffer[bufferLength - temp], loRa.activationParameters
      +                          .applicationKey);
 10139  0000CE  0101               	movlb	1	; () banked
 10140  0000D0  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10141  0000D2  256B               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 10142  0000D4  0100               	movlb	0	; () banked
 10143  0000D6  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 10144  0000D8  0E00               	movlw	0
 10145  0000DA  0101               	movlb	1	; () banked
 10146  0000DC  216C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 10147  0000DE  0100               	movlb	0	; () banked
 10148  0000E0  6FE9               	movwf	(??_LORAWAN_RxDone+1)& (0+255),b
 10149  0000E2  0103               	movlb	3	; () banked
 10150  0000E4  51A8               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 10151  0000E6  0100               	movlb	0	; () banked
 10152  0000E8  5DE8               	subwf	??_LORAWAN_RxDone& (0+255),w,b
 10153  0000EA  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 10154  0000EC  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10155  0000EE  A0D8               	btfss	status,0,c
 10156  0000F0  05E9               	decf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10157  0000F2  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 10158  0000F4  0E42               	movlw	low (_loRa+66)
 10159  0000F6  6F92               	movwf	AESEncodeLoRa@key& (0+255),b
 10160  0000F8  0E02               	movlw	high (_loRa+66)
 10161  0000FA  6F93               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 10162  0000FC  EC89  F039         	call	_AESEncodeLoRa	;wreg free
 10163                           
 10164                           ; BSR set to: 0
 10165                           ;lorawan.c: 1142: if (temp > 16)
 10166  000100  0E10               	movlw	16
 10167  000102  0103               	movlb	3	; () banked
 10168  000104  65A8               	cpfsgt	LORAWAN_RxDone@temp& (0+255),b
 10169  000106  D002               	goto	l2142
 10170                           
 10171                           ; BSR set to: 3
 10172                           ;lorawan.c: 1143: {
 10173                           ;lorawan.c: 1144: temp -= 16;
 10174  000108  5FA8               	subwf	LORAWAN_RxDone@temp& (0+255),f,b
 10175                           
 10176                           ;lorawan.c: 1145: }
 10177  00010A  D001               	goto	l14158
 10178  00010C                     l2142:
 10179                           
 10180                           ; BSR set to: 3
 10181                           ;lorawan.c: 1146: else
 10182                           ;lorawan.c: 1147: {
 10183                           ;lorawan.c: 1148: temp = 0;
 10184  00010C  6BA8               	clrf	LORAWAN_RxDone@temp& (0+255),b
 10185  00010E                     l14158:
 10186                           
 10187                           ; BSR set to: 3
 10188  00010E  51A8               	movf	LORAWAN_RxDone@temp& (0+255),w,b
 10189  000110  E1DE               	bnz	l14152
 10190                           
 10191                           ; BSR set to: 3
 10192                           ;lorawan.c: 1149: }
 10193                           ;lorawan.c: 1150: }
 10194                           ;lorawan.c: 1153: computedMic = ComputeMic (loRa.activationParameters.applicationKey, bu
      +                          ffer, bufferLength - sizeof(extractedMic));
 10195  000112  0E42               	movlw	low (_loRa+66)
 10196  000114  0100               	movlb	0	; () banked
 10197  000116  6FDA               	movwf	ComputeMic@key& (0+255),b
 10198  000118  0E02               	movlw	high (_loRa+66)
 10199  00011A  6FDB               	movwf	(ComputeMic@key+1)& (0+255),b
 10200  00011C  C16B  F0DC         	movff	LORAWAN_RxDone@buffer,ComputeMic@buffer
 10201  000120  C16C  F0DD         	movff	LORAWAN_RxDone@buffer+1,ComputeMic@buffer+1
 10202  000124  0101               	movlb	1	; () banked
 10203  000126  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10204  000128  0FFC               	addlw	252
 10205  00012A  0100               	movlb	0	; () banked
 10206  00012C  6FDE               	movwf	ComputeMic@bufferLength& (0+255),b
 10207  00012E  ECC7  F034         	call	_ComputeMic	;wreg free
 10208  000132  C0DA  F3AB         	movff	?_ComputeMic,LORAWAN_RxDone@computedMic
 10209  000136  C0DB  F3AC         	movff	?_ComputeMic+1,LORAWAN_RxDone@computedMic+1
 10210  00013A  C0DC  F3AD         	movff	?_ComputeMic+2,LORAWAN_RxDone@computedMic+2
 10211  00013E  C0DD  F3AE         	movff	?_ComputeMic+3,LORAWAN_RxDone@computedMic+3
 10212                           
 10213                           ; BSR set to: 0
 10214                           ;lorawan.c: 1154: extractedMic = ExtractMic (buffer, bufferLength);
 10215  000142  C16B  F06E         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 10216  000146  C16C  F06F         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 10217  00014A  C16D  F070         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 10218  00014E  EC88  F036         	call	_ExtractMic	;wreg free
 10219  000152  C06E  F3A3         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 10220  000156  C06F  F3A4         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 10221  00015A  C070  F3A5         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 10222  00015E  C071  F3A6         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;lorawan.c: 1155: if (extractedMic != computedMic)
 10226  000162  0103               	movlb	3	; () banked
 10227  000164  51AB               	movf	LORAWAN_RxDone@computedMic& (0+255),w,b
 10228  000166  19A3               	xorwf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 10229  000168  E109               	bnz	u16010
 10230  00016A  51AC               	movf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 10231  00016C  19A4               	xorwf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 10232  00016E  E106               	bnz	u16010
 10233  000170  51AD               	movf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 10234  000172  19A5               	xorwf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 10235  000174  E103               	bnz	u16010
 10236  000176  51AE               	movf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 10237  000178  19A6               	xorwf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 10238  00017A  E011               	bz	l14176
 10239  00017C                     u16010:
 10240                           
 10241                           ; BSR set to: 3
 10242                           ;lorawan.c: 1156: {
 10243                           ;lorawan.c: 1157: if ((loRa.macStatus.macState == RX2_OPEN) || ((loRa.macStatus.macState
      +                           == RX1_OPEN) && (loRa.rx2DelayExpired)))
 10244  00017C  0102               	movlb	2	; () banked
 10245  00017E  5102               	movf	(_loRa+2)& (0+255),w,b
 10246  000180  0B0F               	andlw	15
 10247  000182  0A05               	xorlw	5
 10248  000184  E102 EF36  F039    	bz	_SetJoinFailState
 10249                           
 10250                           ; BSR set to: 2
 10251  00018A  5102               	movf	(_loRa+2)& (0+255),w,b
 10252  00018C  0B0F               	andlw	15
 10253  00018E  0A03               	xorlw	3
 10254  000190  A4D8               	btfss	status,2,c
 10255  000192  0012               	return	
 10256                           
 10257                           ; BSR set to: 2
 10258  000194  51F1               	movf	(_loRa+241)& (0+255),w,b
 10259  000196  B4D8               	btfsc	status,2,c
 10260  000198  0012               	return	
 10261                           
 10262                           ; BSR set to: 2
 10263                           ;lorawan.c: 1158: {
 10264                           ;lorawan.c: 1159: SetJoinFailState();
 10265  00019A  EF36  F039         	goto	_SetJoinFailState	;wreg free
 10266  00019E                     l14176:
 10267                           
 10268                           ; BSR set to: 3
 10269                           ;lorawan.c: 1163: }
 10270                           ;lorawan.c: 1166: if (loRa.macStatus.macState == RX1_OPEN)
 10271  00019E  0102               	movlb	2	; () banked
 10272  0001A0  5102               	movf	(_loRa+2)& (0+255),w,b
 10273  0001A2  0B0F               	andlw	15
 10274  0001A4  0A03               	xorlw	3
 10275  0001A6  E103               	bnz	l14180
 10276                           
 10277                           ; BSR set to: 2
 10278                           ;lorawan.c: 1167: {
 10279                           ;lorawan.c: 1168: SwTimerStop (loRa.joinAccept2TimerId);
 10280  0001A8  51E3               	movf	(_loRa+227)& (0+255),w,b
 10281  0001AA  ECF3  F03A         	call	_SwTimerStop
 10282  0001AE                     l14180:
 10283                           
 10284                           ;lorawan.c: 1169: }
 10285                           ;lorawan.c: 1171: JoinAccept_t *joinAccept;
 10286                           ;lorawan.c: 1172: joinAccept = (JoinAccept_t*)buffer;
 10287  0001AE  C16B  F3AF         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@joinAccept
 10288  0001B2  C16C  F3B0         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@joinAccept+1
 10289                           
 10290                           ;lorawan.c: 1174: loRa.activationParameters.deviceAddress.value = joinAccept->members.de
      +                          viceAddress.value;
 10291  0001B6  0103               	movlb	3	; () banked
 10292  0001B8  EE20 F007          	lfsr	2,7
 10293  0001BC  51AF               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 10294  0001BE  26D9               	addwf	fsr2l,f,c
 10295  0001C0  51B0               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 10296  0001C2  22DA               	addwfc	fsr2h,f,c
 10297  0001C4  CFDE F21E          	movff	postinc2,_loRa+30
 10298  0001C8  CFDE F21F          	movff	postinc2,_loRa+31
 10299  0001CC  CFDE F220          	movff	postinc2,_loRa+32
 10300  0001D0  CFDE F221          	movff	postinc2,_loRa+33
 10301                           
 10302                           ; BSR set to: 3
 10303                           ;lorawan.c: 1176: UpdateReceiveDelays (joinAccept->members.rxDelay & 0x0F);
 10304  0001D4  EE20 F00C          	lfsr	2,12
 10305  0001D8  51AF               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 10306  0001DA  26D9               	addwf	fsr2l,f,c
 10307  0001DC  51B0               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 10308  0001DE  22DA               	addwfc	fsr2h,f,c
 10309  0001E0  50DF               	movf	indf2,w,c
 10310  0001E2  0B0F               	andlw	15
 10311  0001E4  ECB4  F035         	call	_UpdateReceiveDelays
 10312                           
 10313                           ; BSR set to: 2
 10314                           ;lorawan.c: 1178: UpdateDLSettings(joinAccept->members.DLSettings.bits.rx2DataRate, join
      +                          Accept->members.DLSettings.bits.rx1DROffset);
 10315  0001E8  0103               	movlb	3	; () banked
 10316  0001EA  EE20 F00B          	lfsr	2,11
 10317  0001EE  51AF               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 10318  0001F0  26D9               	addwf	fsr2l,f,c
 10319  0001F2  51B0               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 10320  0001F4  22DA               	addwfc	fsr2h,f,c
 10321  0001F6  38DF               	swapf	223,w,c
 10322  0001F8  0B07               	andlw	7
 10323  0001FA  0100               	movlb	0	; () banked
 10324  0001FC  6F64               	movwf	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 10325  0001FE  0103               	movlb	3	; () banked
 10326  000200  EE20 F00B          	lfsr	2,11
 10327  000204  51AF               	movf	LORAWAN_RxDone@joinAccept& (0+255),w,b
 10328  000206  26D9               	addwf	fsr2l,f,c
 10329  000208  51B0               	movf	(LORAWAN_RxDone@joinAccept+1)& (0+255),w,b
 10330  00020A  22DA               	addwfc	fsr2h,f,c
 10331  00020C  50DF               	movf	223,w,c
 10332  00020E  0B0F               	andlw	15
 10333  000210  EC1D  F03B         	call	_UpdateDLSettings
 10334                           
 10335                           ; BSR set to: 0
 10336                           ;lorawan.c: 1180: UpdateCfList (bufferLength, joinAccept);
 10337  000214  C3AF  F070         	movff	LORAWAN_RxDone@joinAccept,UpdateCfList@joinAccept
 10338  000218  C3B0  F071         	movff	LORAWAN_RxDone@joinAccept+1,UpdateCfList@joinAccept+1
 10339  00021C  0101               	movlb	1	; () banked
 10340  00021E  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10341  000220  ECF1  F018         	call	_UpdateCfList
 10342                           
 10343                           ;lorawan.c: 1182: ComputeSessionKeys (joinAccept);
 10344  000224  C3AF  F0A4         	movff	LORAWAN_RxDone@joinAccept,ComputeSessionKeys@joinAcceptBuffer
 10345  000228  C3B0  F0A5         	movff	LORAWAN_RxDone@joinAccept+1,ComputeSessionKeys@joinAcceptBuffer+1
 10346  00022C  EC7B  F02F         	call	_ComputeSessionKeys	;wreg free
 10347                           
 10348                           ; BSR set to: 0
 10349                           ;lorawan.c: 1184: UpdateJoinSuccessState(0);
 10350  000230  6AE6               	clrf	postinc1,c
 10351  000232  ECAA  F022         	call	_UpdateJoinSuccessState	;wreg free
 10352                           
 10353                           ; BSR set to: 1
 10354                           ;lorawan.c: 1186: loRa.fCntUp.value = 0;
 10355  000236  0102               	movlb	2	; () banked
 10356  000238  6B06               	clrf	(_loRa+6)& (0+255),b
 10357  00023A  6B07               	clrf	(_loRa+7)& (0+255),b
 10358  00023C  6B08               	clrf	(_loRa+8)& (0+255),b
 10359  00023E  6B09               	clrf	(_loRa+9)& (0+255),b
 10360                           
 10361                           ; BSR set to: 2
 10362                           ;lorawan.c: 1187: loRa.fCntDown.value = 0;
 10363  000240  6B0A               	clrf	(_loRa+10)& (0+255),b
 10364  000242  6B0B               	clrf	(_loRa+11)& (0+255),b
 10365  000244  6B0C               	clrf	(_loRa+12)& (0+255),b
 10366  000246  6B0D               	clrf	(_loRa+13)& (0+255),b
 10367  000248  0012               	return	
 10368  00024A                     l14202:
 10369                           
 10370                           ;lorawan.c: 1191: else if ( (mhdr.bits.mType == FRAME_TYPE_DATA_UNCONFIRMED_DOWN) || (mh
      +                          dr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN) )
 10371  00024A  0103               	movlb	3	; () banked
 10372  00024C  39A2               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 10373  00024E  32E8               	rrcf	wreg,f,c
 10374  000250  0B07               	andlw	7
 10375  000252  0A03               	xorlw	3
 10376  000254  E007               	bz	l2154
 10377                           
 10378                           ; BSR set to: 3
 10379  000256  39A2               	swapf	LORAWAN_RxDone@mhdr& (0+255),w,b
 10380  000258  32E8               	rrcf	wreg,f,c
 10381  00025A  0B07               	andlw	7
 10382  00025C  0A05               	xorlw	5
 10383  00025E  E002 EFCA  F031    	bnz	_SetReceptionNotOkState
 10384  000264                     l2154:
 10385                           
 10386                           ; BSR set to: 3
 10387                           ;lorawan.c: 1192: {
 10388                           ;lorawan.c: 1193: loRa.crtMacCmdIndex = 0;
 10389  000264  0102               	movlb	2	; () banked
 10390  000266  6BA7               	clrf	(_loRa+167)& (0+255),b
 10391                           
 10392                           ; BSR set to: 2
 10393                           ;lorawan.c: 1195: Hdr_t *hdr;
 10394                           ;lorawan.c: 1196: hdr=(Hdr_t*)buffer;
 10395  000268  C16B  F3B2         	movff	LORAWAN_RxDone@buffer,LORAWAN_RxDone@hdr
 10396  00026C  C16C  F3B3         	movff	LORAWAN_RxDone@buffer+1,LORAWAN_RxDone@hdr+1
 10397                           
 10398                           ;lorawan.c: 1199: if ( (CLASS_C == loRa.deviceClass) && (hdr->members.devAddr.value == l
      +                          oRa.activationParameters.mcastDeviceAddress.value) && (1 == loRa.macStatus.mcastEnable) 
      +                          )
 10399  000270  0E02               	movlw	2
 10400  000272  1912               	xorwf	(_loRa+18)& (0+255),w,b
 10401  000274  E001 D18D          	bnz	l14320
 10402                           
 10403                           ; BSR set to: 2
 10404  000278  0103               	movlb	3	; () banked
 10405  00027A  EE20 F001          	lfsr	2,1
 10406  00027E  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10407  000280  26D9               	addwf	fsr2l,f,c
 10408  000282  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10409  000284  22DA               	addwfc	fsr2h,f,c
 10410  000286  0102               	movlb	2	; () banked
 10411  000288  5162               	movf	(_loRa+98)& (0+255),w,b
 10412  00028A  18DE               	xorwf	postinc2,w,c
 10413  00028C  E109               	bnz	u16091
 10414  00028E  5163               	movf	(_loRa+99)& (0+255),w,b
 10415  000290  18DE               	xorwf	postinc2,w,c
 10416  000292  E106               	bnz	u16091
 10417  000294  5164               	movf	(_loRa+100)& (0+255),w,b
 10418  000296  18DE               	xorwf	postinc2,w,c
 10419  000298  E103               	bnz	u16091
 10420  00029A  5165               	movf	(_loRa+101)& (0+255),w,b
 10421  00029C  18DE               	xorwf	postinc2,w,c
 10422  00029E  A4D8               	btfss	status,2,c
 10423  0002A0                     u16091:
 10424  0002A0  D178               	goto	l14320
 10425                           
 10426                           ; BSR set to: 2
 10427  0002A2  A504               	btfss	(_loRa+4)& (0+255),2,b
 10428  0002A4  D176               	goto	l14320
 10429                           
 10430                           ; BSR set to: 2
 10431                           ;lorawan.c: 1200: {
 10432                           ;lorawan.c: 1202: if (0 == CheckMcastFlags(hdr))
 10433  0002A6  C3B2  F064         	movff	LORAWAN_RxDone@hdr,CheckMcastFlags@hdr
 10434  0002AA  C3B3  F065         	movff	LORAWAN_RxDone@hdr+1,CheckMcastFlags@hdr+1
 10435  0002AE  ECEE  F030         	call	_CheckMcastFlags	;wreg free
 10436  0002B2  0900               	iorlw	0
 10437  0002B4  E107               	bnz	l14220
 10438  0002B6                     l14214:
 10439                           
 10440                           ;lorawan.c: 1203: {
 10441                           ;lorawan.c: 1204: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 10442  0002B6  0102               	movlb	2	; () banked
 10443  0002B8  5102               	movf	(_loRa+2)& (0+255),w,b
 10444  0002BA  0BF0               	andlw	-16
 10445  0002BC  0909               	iorlw	9
 10446  0002BE  6F02               	movwf	(_loRa+2)& (0+255),b
 10447                           
 10448                           ; BSR set to: 2
 10449                           ;lorawan.c: 1205: LORAWAN_EnterContinuousReceive();
 10450  0002C0  EFFF  F031         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 10451  0002C4                     l14220:
 10452                           
 10453                           ;lorawan.c: 1207: }
 10454                           ;lorawan.c: 1209: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 1);
 10455  0002C4  0103               	movlb	3	; () banked
 10456  0002C6  EE20 F006          	lfsr	2,6
 10457  0002CA  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10458  0002CC  26D9               	addwf	fsr2l,f,c
 10459  0002CE  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10460  0002D0  22DA               	addwfc	fsr2h,f,c
 10461  0002D2  CFDE F0E8          	movff	postinc2,??_LORAWAN_RxDone
 10462  0002D6  CFDD F0E9          	movff	postdec2,??_LORAWAN_RxDone+1
 10463  0002DA  C0E8  F06E         	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 10464  0002DE  C0E9  F06F         	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 10465  0002E2  0100               	movlb	0	; () banked
 10466  0002E4  6B70               	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 10467  0002E6  6B71               	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 10468  0002E8  0101               	movlb	1	; () banked
 10469  0002EA  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10470  0002EC  0FFC               	addlw	252
 10471  0002EE  0100               	movlb	0	; () banked
 10472  0002F0  6F72               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 10473  0002F2  0E49               	movlw	73
 10474  0002F4  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 10475  0002F6  0E01               	movlw	1
 10476  0002F8  6F74               	movwf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 10477  0002FA  EC1E  F02C         	call	_AssembleEncryptionBlock
 10478                           
 10479                           ;lorawan.c: 1210: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 10480  0002FE  0EEF               	movlw	low _radioBuffer
 10481  000300  6F64               	movwf	memcpy@d1& (0+255),b
 10482  000302  0E05               	movlw	high _radioBuffer
 10483  000304  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 10484  000306  0EAB               	movlw	low _aesBuffer
 10485  000308  6F66               	movwf	memcpy@s1& (0+255),b
 10486  00030A  0E01               	movlw	high _aesBuffer
 10487  00030C  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 10488  00030E  6B69               	clrf	(memcpy@n+1)& (0+255),b
 10489  000310  0E10               	movlw	16
 10490  000312  6F68               	movwf	memcpy@n& (0+255),b
 10491  000314  EC73  F034         	call	_memcpy	;wreg free
 10492                           
 10493                           ;lorawan.c: 1211: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 10494  000318  0EFF               	movlw	low (_radioBuffer+16)
 10495  00031A  6F64               	movwf	memcpy@d1& (0+255),b
 10496  00031C  0E05               	movlw	high (_radioBuffer+16)
 10497  00031E  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 10498  000320  C16B  F066         	movff	LORAWAN_RxDone@buffer,memcpy@s1
 10499  000324  C16C  F067         	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 10500  000328  0EFC               	movlw	252
 10501  00032A  0101               	movlb	1	; () banked
 10502  00032C  256D               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10503  00032E  0100               	movlb	0	; () banked
 10504  000330  6F68               	movwf	memcpy@n& (0+255),b
 10505  000332  6B69               	clrf	(memcpy@n+1)& (0+255),b
 10506  000334  0EFF               	movlw	255
 10507  000336  2369               	addwfc	(memcpy@n+1)& (0+255),f,b
 10508  000338  EC73  F034         	call	_memcpy	;wreg free
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;lorawan.c: 1212: AESCmac(loRa.activationParameters.mcastNetworkSessionKey, aesBuffer, &
      +                          radioBuffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 10512  00033C  0E66               	movlw	low (_loRa+102)
 10513  00033E  6FCC               	movwf	AESCmac@key& (0+255),b
 10514  000340  0E02               	movlw	high (_loRa+102)
 10515  000342  6FCD               	movwf	(AESCmac@key+1)& (0+255),b
 10516  000344  0EAB               	movlw	low _aesBuffer
 10517  000346  6FCE               	movwf	AESCmac@output& (0+255),b
 10518  000348  0E01               	movlw	high _aesBuffer
 10519  00034A  6FCF               	movwf	(AESCmac@output+1)& (0+255),b
 10520  00034C  0EEF               	movlw	low _radioBuffer
 10521  00034E  6FD0               	movwf	AESCmac@input& (0+255),b
 10522  000350  0E05               	movlw	high _radioBuffer
 10523  000352  6FD1               	movwf	(AESCmac@input+1)& (0+255),b
 10524  000354  0101               	movlb	1	; () banked
 10525  000356  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10526  000358  0F0C               	addlw	12
 10527  00035A  0100               	movlb	0	; () banked
 10528  00035C  6FD2               	movwf	AESCmac@size& (0+255),b
 10529  00035E  EC16  F00C         	call	_AESCmac	;wreg free
 10530                           
 10531                           ; BSR set to: 0
 10532                           ;lorawan.c: 1214: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 10533  000362  0EAB               	movlw	low LORAWAN_RxDone@computedMic
 10534  000364  6F64               	movwf	memcpy@d1& (0+255),b
 10535  000366  0E03               	movlw	high LORAWAN_RxDone@computedMic
 10536  000368  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 10537  00036A  0EAB               	movlw	low _aesBuffer
 10538  00036C  6F66               	movwf	memcpy@s1& (0+255),b
 10539  00036E  0E01               	movlw	high _aesBuffer
 10540  000370  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 10541  000372  6B69               	clrf	(memcpy@n+1)& (0+255),b
 10542  000374  0E04               	movlw	4
 10543  000376  6F68               	movwf	memcpy@n& (0+255),b
 10544  000378  EC73  F034         	call	_memcpy	;wreg free
 10545                           
 10546                           ; BSR set to: 0
 10547                           ;lorawan.c: 1215: extractedMic = ExtractMic (&buffer[0], bufferLength);
 10548  00037C  C16B  F06E         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 10549  000380  C16C  F06F         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 10550  000384  C16D  F070         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 10551  000388  EC88  F036         	call	_ExtractMic	;wreg free
 10552  00038C  C06E  F3A3         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 10553  000390  C06F  F3A4         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 10554  000394  C070  F3A5         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 10555  000398  C071  F3A6         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;lorawan.c: 1217: if (computedMic != extractedMic)
 10559  00039C  0103               	movlb	3	; () banked
 10560  00039E  51A3               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 10561  0003A0  19AB               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 10562  0003A2  E189               	bnz	l14214
 10563  0003A4  51A4               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 10564  0003A6  19AC               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 10565  0003A8  E186               	bnz	l14214
 10566  0003AA  51A5               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 10567  0003AC  19AD               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 10568  0003AE  E183               	bnz	l14214
 10569  0003B0  51A6               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 10570  0003B2  19AE               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 10571  0003B4  E180               	bnz	l14214
 10572                           
 10573                           ; BSR set to: 3
 10574                           ;lorawan.c: 1222: }
 10575                           ;lorawan.c: 1224: if (hdr->members.fCnt >= loRa.fMcastCntDown.members.valueLow)
 10576  0003B6  EE20 F006          	lfsr	2,6
 10577  0003BA  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10578  0003BC  26D9               	addwf	fsr2l,f,c
 10579  0003BE  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10580  0003C0  22DA               	addwfc	fsr2h,f,c
 10581  0003C2  0102               	movlb	2	; () banked
 10582  0003C4  510E               	movf	(_loRa+14)& (0+255),w,b
 10583  0003C6  5CDE               	subwf	postinc2,w,c
 10584  0003C8  510F               	movf	(_loRa+15)& (0+255),w,b
 10585  0003CA  58DE               	subwfb	postinc2,w,c
 10586  0003CC  E336               	bnc	l14254
 10587                           
 10588                           ; BSR set to: 2
 10589                           ;lorawan.c: 1225: {
 10590                           ;lorawan.c: 1226: if ( (hdr->members.fCnt - loRa.fMcastCntDown.members.valueLow) > loRa.
      +                          protocolParameters.maxMultiFcntGap )
 10591  0003CE  0103               	movlb	3	; () banked
 10592  0003D0  EE20 F006          	lfsr	2,6
 10593  0003D4  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10594  0003D6  26D9               	addwf	fsr2l,f,c
 10595  0003D8  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10596  0003DA  22DA               	addwfc	fsr2h,f,c
 10597  0003DC  CFDE F0E8          	movff	postinc2,??_LORAWAN_RxDone
 10598  0003E0  CFDD F0E9          	movff	postdec2,??_LORAWAN_RxDone+1
 10599  0003E4  0102               	movlb	2	; () banked
 10600  0003E6  510E               	movf	(_loRa+14)& (0+255),w,b
 10601  0003E8  0100               	movlb	0	; () banked
 10602  0003EA  5FE8               	subwf	??_LORAWAN_RxDone& (0+255),f,b
 10603  0003EC  0102               	movlb	2	; () banked
 10604  0003EE  510F               	movf	(_loRa+15)& (0+255),w,b
 10605  0003F0  0100               	movlb	0	; () banked
 10606  0003F2  5BE9               	subwfb	(??_LORAWAN_RxDone+1)& (0+255),f,b
 10607  0003F4  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 10608  0003F6  0102               	movlb	2	; () banked
 10609  0003F8  5D9E               	subwf	(_loRa+158)& (0+255),w,b
 10610  0003FA  0100               	movlb	0	; () banked
 10611  0003FC  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10612  0003FE  0102               	movlb	2	; () banked
 10613  000400  599F               	subwfb	(_loRa+159)& (0+255),w,b
 10614  000402  E20F               	bc	l14252
 10615  000404                     l14240:
 10616                           
 10617                           ; BSR set to: 2
 10618                           ;lorawan.c: 1227: {
 10619                           ;lorawan.c: 1228: if (rxPayload.RxAppData != (0))
 10620  000404  0101               	movlb	1	; () banked
 10621  000406  516E               	movf	_rxPayload& (0+255),w,b
 10622  000408  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 10623  00040A  E101 D754          	bz	l14214
 10624                           
 10625                           ; BSR set to: 1
 10626                           ;lorawan.c: 1229: {
 10627                           ;lorawan.c: 1230: rxPayload.RxAppData ((0), 0, MCAST_RE_KEYING_NEEDED);
 10628  00040E  0E00               	movlw	0
 10629  000410  0100               	movlb	0	; () banked
 10630  000412  6F64               	movwf	RxDataDone@pData& (0+255),b
 10631  000414  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 10632  000416  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 10633  000418  0E05               	movlw	5
 10634  00041A  6F67               	movwf	RxDataDone@status& (0+255),b
 10635  00041C  D801               	call	u16168
 10636  00041E  D74B               	goto	l14214
 10637  000420                     u16168:
 10638  000420  D0AD               	goto	u16268
 10639  000422                     l14252:
 10640                           
 10641                           ; BSR set to: 2
 10642                           ;lorawan.c: 1237: else
 10643                           ;lorawan.c: 1238: {
 10644                           ;lorawan.c: 1239: loRa.fMcastCntDown.members.valueLow = hdr->members.fCnt;
 10645  000422  0103               	movlb	3	; () banked
 10646  000424  EE20 F006          	lfsr	2,6
 10647  000428  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10648  00042A  26D9               	addwf	fsr2l,f,c
 10649  00042C  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10650  00042E  22DA               	addwfc	fsr2h,f,c
 10651  000430  CFDE F20E          	movff	postinc2,_loRa+14
 10652  000434  CFDD F20F          	movff	postdec2,_loRa+15
 10653  000438  D013               	goto	l14272
 10654  00043A                     l14254:
 10655                           
 10656                           ; BSR set to: 2
 10657                           ;lorawan.c: 1242: else
 10658                           ;lorawan.c: 1243: {
 10659                           ;lorawan.c: 1244: if ( (0 == hdr->members.fCnt) && (0xFFFF == loRa.fMcastCntDown.members
      +                          .valueLow) )
 10660  00043A  0103               	movlb	3	; () banked
 10661  00043C  EE20 F006          	lfsr	2,6
 10662  000440  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10663  000442  26D9               	addwf	fsr2l,f,c
 10664  000444  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10665  000446  22DA               	addwfc	fsr2h,f,c
 10666  000448  50DE               	movf	postinc2,w,c
 10667  00044A  10DE               	iorwf	postinc2,w,c
 10668  00044C  E1DB               	bnz	l14240
 10669                           
 10670                           ; BSR set to: 3
 10671  00044E  0102               	movlb	2	; () banked
 10672  000450  290E               	incf	(_loRa+14)& (0+255),w,b
 10673  000452  E1D8               	bnz	l14240
 10674  000454  290F               	incf	(_loRa+15)& (0+255),w,b
 10675  000456  E1D6               	bnz	l14240
 10676                           
 10677                           ; BSR set to: 2
 10678                           ;lorawan.c: 1245: {
 10679                           ;lorawan.c: 1246: loRa.fMcastCntDown.members.valueLow = 0;
 10680  000458  6B0E               	clrf	(_loRa+14)& (0+255),b
 10681  00045A  6B0F               	clrf	(_loRa+15)& (0+255),b
 10682                           
 10683                           ; BSR set to: 2
 10684                           ;lorawan.c: 1247: loRa.fMcastCntDown.members.valueHigh ++;
 10685  00045C  4B10               	infsnz	(_loRa+16)& (0+255),f,b
 10686  00045E  2B11               	incf	(_loRa+17)& (0+255),f,b
 10687  000460                     l14272:
 10688                           
 10689                           ;lorawan.c: 1259: }
 10690                           ;lorawan.c: 1260: }
 10691                           ;lorawan.c: 1262: if (loRa.fMcastCntDown.value == (4294967295UL))
 10692  000460  0102               	movlb	2	; () banked
 10693  000462  290E               	incf	(_loRa+14)& (0+255),w,b
 10694  000464  E107               	bnz	l14284
 10695  000466  290F               	incf	(_loRa+15)& (0+255),w,b
 10696  000468  E105               	bnz	l14284
 10697  00046A  2910               	incf	(_loRa+16)& (0+255),w,b
 10698  00046C  E103               	bnz	l14284
 10699  00046E  2911               	incf	(_loRa+17)& (0+255),w,b
 10700  000470  E101               	bnz	l14284
 10701  000472  D7C8               	goto	l14240
 10702  000474                     l14284:
 10703                           
 10704                           ; BSR set to: 2
 10705                           ;lorawan.c: 1272: }
 10706                           ;lorawan.c: 1274: if (CLASS_C_RX2_1_OPEN == loRa.macStatus.macState)
 10707  000474  5102               	movf	(_loRa+2)& (0+255),w,b
 10708  000476  0B0F               	andlw	15
 10709  000478  0A08               	xorlw	8
 10710  00047A  E108               	bnz	l14288
 10711                           
 10712                           ; BSR set to: 2
 10713                           ;lorawan.c: 1275: {
 10714                           ;lorawan.c: 1276: SwTimerStop (loRa.receiveWindow1TimerId);
 10715  00047C  51E4               	movf	(_loRa+228)& (0+255),w,b
 10716  00047E  ECF3  F03A         	call	_SwTimerStop
 10717                           
 10718                           ;lorawan.c: 1277: SwTimerStop (loRa.receiveWindow2TimerId);
 10719  000482  0102               	movlb	2	; () banked
 10720  000484  51E5               	movf	(_loRa+229)& (0+255),w,b
 10721  000486  ECF3  F03A         	call	_SwTimerStop
 10722                           
 10723                           ;lorawan.c: 1278: }
 10724  00048A  D007               	goto	l14292
 10725  00048C                     l14288:
 10726                           
 10727                           ; BSR set to: 2
 10728                           ;lorawan.c: 1279: else if (RX1_OPEN == loRa.macStatus.macState)
 10729  00048C  5102               	movf	(_loRa+2)& (0+255),w,b
 10730  00048E  0B0F               	andlw	15
 10731  000490  0A03               	xorlw	3
 10732  000492  E103               	bnz	l14292
 10733                           
 10734                           ; BSR set to: 2
 10735                           ;lorawan.c: 1280: {
 10736                           ;lorawan.c: 1281: SwTimerStop (loRa.receiveWindow2TimerId);
 10737  000494  51E5               	movf	(_loRa+229)& (0+255),w,b
 10738  000496  ECF3  F03A         	call	_SwTimerStop
 10739  00049A                     l14292:
 10740                           
 10741                           ;lorawan.c: 1282: }
 10742                           ;lorawan.c: 1284: buffer = buffer + 8;
 10743  00049A  0E08               	movlw	8
 10744  00049C  0101               	movlb	1	; () banked
 10745  00049E  276B               	addwf	LORAWAN_RxDone@buffer& (0+255),f,b
 10746  0004A0  0E00               	movlw	0
 10747  0004A2  236C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 10748                           
 10749                           ; BSR set to: 1
 10750                           ;lorawan.c: 1286: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 10751  0004A4  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10752  0004A6  0100               	movlb	0	; () banked
 10753  0004A8  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 10754  0004AA  6BE9               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 10755  0004AC  0103               	movlb	3	; () banked
 10756  0004AE  EE20 F005          	lfsr	2,5
 10757  0004B2  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10758  0004B4  26D9               	addwf	fsr2l,f,c
 10759  0004B6  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10760  0004B8  22DA               	addwfc	fsr2h,f,c
 10761  0004BA  50DF               	movf	223,w,c
 10762  0004BC  0B0F               	andlw	15
 10763  0004BE  0100               	movlb	0	; () banked
 10764  0004C0  6FEA               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 10765  0004C2  6BEB               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 10766  0004C4  0E0C               	movlw	12
 10767  0004C6  27EA               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 10768  0004C8  0E00               	movlw	0
 10769  0004CA  23EB               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 10770  0004CC  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 10771  0004CE  19EA               	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 10772  0004D0  E103               	bnz	u16240
 10773  0004D2  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 10774  0004D4  19EB               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 10775  0004D6  E03A               	bz	l2171
 10776  0004D8                     u16240:
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;lorawan.c: 1287: {
 10780                           ;lorawan.c: 1288: fPort = *(buffer++);
 10781  0004D8  C16B  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 10782  0004DC  C16C  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 10783  0004E0  50DF               	movf	indf2,w,c
 10784  0004E2  0103               	movlb	3	; () banked
 10785  0004E4  6FA0               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 10786                           
 10787                           ; BSR set to: 3
 10788  0004E6  0101               	movlb	1	; () banked
 10789  0004E8  4B6B               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 10790  0004EA  2B6C               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 10791                           
 10792                           ; BSR set to: 1
 10793                           ;lorawan.c: 1290: frmPayloadLength = bufferLength - 8 - sizeof (extractedMic);
 10794  0004EC  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10795  0004EE  0FF4               	addlw	244
 10796  0004F0  0103               	movlb	3	; () banked
 10797  0004F2  6FB1               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 10798                           
 10799                           ; BSR set to: 3
 10800                           ;lorawan.c: 1291: bufferIndex = 16 + 9;
 10801  0004F4  0E19               	movlw	25
 10802  0004F6  6FA7               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 10803                           
 10804                           ; BSR set to: 3
 10805                           ;lorawan.c: 1293: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fMcastCntDown
      +                          .value, loRa.activationParameters.mcastApplicationSessionKey, bufferIndex, radioBuffer, 
      +                          1);
 10806  0004F8  C16B  F0A4         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 10807  0004FC  C16C  F0A5         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 10808  000500  05B1               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 10809  000502  0100               	movlb	0	; () banked
 10810  000504  6FA6               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 10811  000506  0E01               	movlw	1
 10812  000508  6FA7               	movwf	EncryptFRMPayload@dir& (0+255),b
 10813  00050A  C20E  F0A8         	movff	_loRa+14,EncryptFRMPayload@frameCounter
 10814  00050E  C20F  F0A9         	movff	_loRa+15,EncryptFRMPayload@frameCounter+1
 10815  000512  C210  F0AA         	movff	_loRa+16,EncryptFRMPayload@frameCounter+2
 10816  000516  C211  F0AB         	movff	_loRa+17,EncryptFRMPayload@frameCounter+3
 10817  00051A  0E76               	movlw	low (_loRa+118)
 10818  00051C  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 10819  00051E  0E02               	movlw	high (_loRa+118)
 10820  000520  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 10821  000522  C3A7  F0AE         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 10822  000526  0EEF               	movlw	low _radioBuffer
 10823  000528  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 10824  00052A  0E05               	movlw	high _radioBuffer
 10825  00052C  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 10826  00052E  0E01               	movlw	1
 10827  000530  6FB1               	movwf	EncryptFRMPayload@multicastStatus& (0+255),b
 10828  000532  ECC2  F020         	call	_EncryptFRMPayload	;wreg free
 10829                           
 10830                           ; BSR set to: 0
 10831                           ;lorawan.c: 1294: packet = buffer - 1;
 10832  000536  0EFF               	movlw	255
 10833  000538  0101               	movlb	1	; () banked
 10834  00053A  256B               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 10835  00053C  0103               	movlb	3	; () banked
 10836  00053E  6FA9               	movwf	LORAWAN_RxDone@packet& (0+255),b
 10837  000540  0EFF               	movlw	255
 10838  000542  0101               	movlb	1	; () banked
 10839  000544  216C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 10840  000546  0103               	movlb	3	; () banked
 10841  000548  6FAA               	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 10842                           
 10843                           ;lorawan.c: 1295: }
 10844  00054A  D004               	goto	l2172
 10845  00054C                     l2171:
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;lorawan.c: 1296: else
 10849                           ;lorawan.c: 1297: {
 10850                           ;lorawan.c: 1298: frmPayloadLength = 0;
 10851  00054C  0103               	movlb	3	; () banked
 10852  00054E  6BB1               	clrf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 10853                           
 10854                           ;lorawan.c: 1299: packet = (0);
 10855  000550  6BA9               	clrf	LORAWAN_RxDone@packet& (0+255),b
 10856  000552  6BAA               	clrf	(LORAWAN_RxDone@packet+1)& (0+255),b
 10857  000554                     l2172:
 10858                           
 10859                           ; BSR set to: 3
 10860                           ;lorawan.c: 1300: }
 10861                           ;lorawan.c: 1302: loRa.macStatus.rxDone = 1;
 10862  000554  0102               	movlb	2	; () banked
 10863  000556  8303               	bsf	(_loRa+3)& (0+255),1,b
 10864                           
 10865                           ; BSR set to: 2
 10866                           ;lorawan.c: 1303: loRa.macStatus.macState = IDLE;
 10867  000558  0EF0               	movlw	-16
 10868  00055A  1702               	andwf	(_loRa+2)& (0+255),f,b
 10869                           
 10870                           ; BSR set to: 2
 10871                           ;lorawan.c: 1305: if (rxPayload.RxAppData != (0))
 10872  00055C  0101               	movlb	1	; () banked
 10873  00055E  516E               	movf	_rxPayload& (0+255),w,b
 10874  000560  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 10875  000562  E101 D6A8          	bz	l14214
 10876                           
 10877                           ; BSR set to: 1
 10878                           ;lorawan.c: 1306: {
 10879                           ;lorawan.c: 1307: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 10880  000566  C3A9  F064         	movff	LORAWAN_RxDone@packet,RxDataDone@pData
 10881  00056A  C3AA  F065         	movff	LORAWAN_RxDone@packet+1,RxDataDone@pData+1
 10882  00056E  C3B1  F066         	movff	LORAWAN_RxDone@frmPayloadLength,RxDataDone@dataLength
 10883  000572  0E01               	movlw	1
 10884  000574  0100               	movlb	0	; () banked
 10885  000576  6F67               	movwf	RxDataDone@status& (0+255),b
 10886  000578  D801               	call	u16268
 10887  00057A  D69D               	goto	l14214
 10888  00057C                     u16268:
 10889  00057C  0005               	push	
 10890  00057E  0101               	movlb	1	; () banked
 10891  000580  6EFA               	movwf	pclath,c
 10892  000582  516E               	movf	_rxPayload& (0+255),w,b
 10893  000584  6EFD               	movwf	tosl,c
 10894  000586  516F               	movf	(_rxPayload+1)& (0+255),w,b
 10895  000588  6EFE               	movwf	tosh,c
 10896  00058A  50F8               	movf	tblptru,w,c
 10897  00058C  6EFF               	movwf	tosu,c
 10898  00058E  50FA               	movf	pclath,w,c
 10899  000590  0012               	return		;indir
 10900  000592                     l14320:
 10901                           
 10902                           ; BSR set to: 2
 10903                           ;lorawan.c: 1313: }
 10904                           ;lorawan.c: 1316: if (hdr->members.devAddr.value != loRa.activationParameters.deviceAddr
      +                          ess.value)
 10905  000592  0103               	movlb	3	; () banked
 10906  000594  EE20 F001          	lfsr	2,1
 10907  000598  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10908  00059A  26D9               	addwf	fsr2l,f,c
 10909  00059C  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10910  00059E  22DA               	addwfc	fsr2h,f,c
 10911  0005A0  0102               	movlb	2	; () banked
 10912  0005A2  511E               	movf	(_loRa+30)& (0+255),w,b
 10913  0005A4  18DE               	xorwf	postinc2,w,c
 10914  0005A6  E109               	bnz	u16270
 10915  0005A8  511F               	movf	(_loRa+31)& (0+255),w,b
 10916  0005AA  18DE               	xorwf	postinc2,w,c
 10917  0005AC  E106               	bnz	u16270
 10918  0005AE  5120               	movf	(_loRa+32)& (0+255),w,b
 10919  0005B0  18DE               	xorwf	postinc2,w,c
 10920  0005B2  E103               	bnz	u16270
 10921  0005B4  5121               	movf	(_loRa+33)& (0+255),w,b
 10922  0005B6  18DE               	xorwf	postinc2,w,c
 10923  0005B8  E008               	bz	l14332
 10924  0005BA                     u16270:
 10925                           
 10926                           ; BSR set to: 2
 10927                           ;lorawan.c: 1317: {
 10928                           ;lorawan.c: 1318: SetReceptionNotOkState();
 10929  0005BA  ECCA  F031         	call	_SetReceptionNotOkState	;wreg free
 10930  0005BE                     l14324:
 10931                           
 10932                           ;lorawan.c: 1319: if (CLASS_C == loRa.deviceClass)
 10933  0005BE  0E02               	movlw	2
 10934  0005C0  0102               	movlb	2	; () banked
 10935  0005C2                     L5:
 10936  0005C2  1912               	xorwf	(_loRa+18)& (0+255),w,b
 10937  0005C4  E101 D677          	bz	l14214
 10938  0005C8  0012               	return	
 10939  0005CA                     l14332:
 10940                           
 10941                           ; BSR set to: 2
 10942                           ;lorawan.c: 1325: }
 10943                           ;lorawan.c: 1327: AssembleEncryptionBlock (1, hdr->members.fCnt, bufferLength - sizeof (
      +                          computedMic), 0x49, 0);
 10944  0005CA  0103               	movlb	3	; () banked
 10945  0005CC  EE20 F006          	lfsr	2,6
 10946  0005D0  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 10947  0005D2  26D9               	addwf	fsr2l,f,c
 10948  0005D4  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 10949  0005D6  22DA               	addwfc	fsr2h,f,c
 10950  0005D8  CFDE F0E8          	movff	postinc2,??_LORAWAN_RxDone
 10951  0005DC  CFDD F0E9          	movff	postdec2,??_LORAWAN_RxDone+1
 10952  0005E0  C0E8  F06E         	movff	??_LORAWAN_RxDone,AssembleEncryptionBlock@frameCounter
 10953  0005E4  C0E9  F06F         	movff	??_LORAWAN_RxDone+1,AssembleEncryptionBlock@frameCounter+1
 10954  0005E8  0100               	movlb	0	; () banked
 10955  0005EA  6B70               	clrf	(AssembleEncryptionBlock@frameCounter+2)& (0+255),b
 10956  0005EC  6B71               	clrf	(AssembleEncryptionBlock@frameCounter+3)& (0+255),b
 10957  0005EE  0101               	movlb	1	; () banked
 10958  0005F0  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10959  0005F2  0FFC               	addlw	252
 10960  0005F4  0100               	movlb	0	; () banked
 10961  0005F6  6F72               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 10962  0005F8  0E49               	movlw	73
 10963  0005FA  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 10964  0005FC  6B74               	clrf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 10965  0005FE  0E01               	movlw	1
 10966  000600  EC1E  F02C         	call	_AssembleEncryptionBlock
 10967                           
 10968                           ;lorawan.c: 1328: memcpy (&radioBuffer[0], aesBuffer, sizeof (aesBuffer));
 10969  000604  0EEF               	movlw	low _radioBuffer
 10970  000606  6F64               	movwf	memcpy@d1& (0+255),b
 10971  000608  0E05               	movlw	high _radioBuffer
 10972  00060A  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 10973  00060C  0EAB               	movlw	low _aesBuffer
 10974  00060E  6F66               	movwf	memcpy@s1& (0+255),b
 10975  000610  0E01               	movlw	high _aesBuffer
 10976  000612  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 10977  000614  6B69               	clrf	(memcpy@n+1)& (0+255),b
 10978  000616  0E10               	movlw	16
 10979  000618  6F68               	movwf	memcpy@n& (0+255),b
 10980  00061A  EC73  F034         	call	_memcpy	;wreg free
 10981                           
 10982                           ;lorawan.c: 1329: memcpy (&radioBuffer[16], buffer, bufferLength-sizeof(computedMic));
 10983  00061E  0EFF               	movlw	low (_radioBuffer+16)
 10984  000620  6F64               	movwf	memcpy@d1& (0+255),b
 10985  000622  0E05               	movlw	high (_radioBuffer+16)
 10986  000624  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 10987  000626  C16B  F066         	movff	LORAWAN_RxDone@buffer,memcpy@s1
 10988  00062A  C16C  F067         	movff	LORAWAN_RxDone@buffer+1,memcpy@s1+1
 10989  00062E  0EFC               	movlw	252
 10990  000630  0101               	movlb	1	; () banked
 10991  000632  256D               	addwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 10992  000634  0100               	movlb	0	; () banked
 10993  000636  6F68               	movwf	memcpy@n& (0+255),b
 10994  000638  6B69               	clrf	(memcpy@n+1)& (0+255),b
 10995  00063A  0EFF               	movlw	255
 10996  00063C  2369               	addwfc	(memcpy@n+1)& (0+255),f,b
 10997  00063E  EC73  F034         	call	_memcpy	;wreg free
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;lorawan.c: 1330: AESCmac(loRa.activationParameters.networkSessionKey, aesBuffer, &radio
      +                          Buffer[0], bufferLength - sizeof(computedMic) + sizeof (aesBuffer));
 11001  000642  0E22               	movlw	low (_loRa+34)
 11002  000644  6FCC               	movwf	AESCmac@key& (0+255),b
 11003  000646  0E02               	movlw	high (_loRa+34)
 11004  000648  6FCD               	movwf	(AESCmac@key+1)& (0+255),b
 11005  00064A  0EAB               	movlw	low _aesBuffer
 11006  00064C  6FCE               	movwf	AESCmac@output& (0+255),b
 11007  00064E  0E01               	movlw	high _aesBuffer
 11008  000650  6FCF               	movwf	(AESCmac@output+1)& (0+255),b
 11009  000652  0EEF               	movlw	low _radioBuffer
 11010  000654  6FD0               	movwf	AESCmac@input& (0+255),b
 11011  000656  0E05               	movlw	high _radioBuffer
 11012  000658  6FD1               	movwf	(AESCmac@input+1)& (0+255),b
 11013  00065A  0101               	movlb	1	; () banked
 11014  00065C  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11015  00065E  0F0C               	addlw	12
 11016  000660  0100               	movlb	0	; () banked
 11017  000662  6FD2               	movwf	AESCmac@size& (0+255),b
 11018  000664  EC16  F00C         	call	_AESCmac	;wreg free
 11019                           
 11020                           ; BSR set to: 0
 11021                           ;lorawan.c: 1332: memcpy(&computedMic, aesBuffer, sizeof(computedMic));
 11022  000668  0EAB               	movlw	low LORAWAN_RxDone@computedMic
 11023  00066A  6F64               	movwf	memcpy@d1& (0+255),b
 11024  00066C  0E03               	movlw	high LORAWAN_RxDone@computedMic
 11025  00066E  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 11026  000670  0EAB               	movlw	low _aesBuffer
 11027  000672  6F66               	movwf	memcpy@s1& (0+255),b
 11028  000674  0E01               	movlw	high _aesBuffer
 11029  000676  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 11030  000678  6B69               	clrf	(memcpy@n+1)& (0+255),b
 11031  00067A  0E04               	movlw	4
 11032  00067C  6F68               	movwf	memcpy@n& (0+255),b
 11033  00067E  EC73  F034         	call	_memcpy	;wreg free
 11034                           
 11035                           ; BSR set to: 0
 11036                           ;lorawan.c: 1333: extractedMic = ExtractMic (&buffer[0], bufferLength);
 11037  000682  C16B  F06E         	movff	LORAWAN_RxDone@buffer,ExtractMic@buffer
 11038  000686  C16C  F06F         	movff	LORAWAN_RxDone@buffer+1,ExtractMic@buffer+1
 11039  00068A  C16D  F070         	movff	LORAWAN_RxDone@bufferLength,ExtractMic@bufferLength
 11040  00068E  EC88  F036         	call	_ExtractMic	;wreg free
 11041  000692  C06E  F3A3         	movff	?_ExtractMic,LORAWAN_RxDone@extractedMic
 11042  000696  C06F  F3A4         	movff	?_ExtractMic+1,LORAWAN_RxDone@extractedMic+1
 11043  00069A  C070  F3A5         	movff	?_ExtractMic+2,LORAWAN_RxDone@extractedMic+2
 11044  00069E  C071  F3A6         	movff	?_ExtractMic+3,LORAWAN_RxDone@extractedMic+3
 11045                           
 11046                           ; BSR set to: 0
 11047                           ;lorawan.c: 1336: if (computedMic != extractedMic)
 11048  0006A2  0103               	movlb	3	; () banked
 11049  0006A4  51A3               	movf	LORAWAN_RxDone@extractedMic& (0+255),w,b
 11050  0006A6  19AB               	xorwf	LORAWAN_RxDone@computedMic& (0+255),w,b
 11051  0006A8  E109               	bnz	u16290
 11052  0006AA  51A4               	movf	(LORAWAN_RxDone@extractedMic+1)& (0+255),w,b
 11053  0006AC  19AC               	xorwf	(LORAWAN_RxDone@computedMic+1)& (0+255),w,b
 11054  0006AE  E106               	bnz	u16290
 11055  0006B0  51A5               	movf	(LORAWAN_RxDone@extractedMic+2)& (0+255),w,b
 11056  0006B2  19AD               	xorwf	(LORAWAN_RxDone@computedMic+2)& (0+255),w,b
 11057  0006B4  E103               	bnz	u16290
 11058  0006B6  51A6               	movf	(LORAWAN_RxDone@extractedMic+3)& (0+255),w,b
 11059  0006B8  19AE               	xorwf	(LORAWAN_RxDone@computedMic+3)& (0+255),w,b
 11060  0006BA  E003               	bz	l14352
 11061  0006BC                     u16290:
 11062                           
 11063                           ; BSR set to: 3
 11064                           ;lorawan.c: 1337: {
 11065                           ;lorawan.c: 1338: SetReceptionNotOkState();
 11066  0006BC  ECCA  F031         	call	_SetReceptionNotOkState	;wreg free
 11067  0006C0  D77E               	goto	l14324
 11068  0006C2                     l14352:
 11069                           
 11070                           ; BSR set to: 3
 11071                           ;lorawan.c: 1345: }
 11072                           ;lorawan.c: 1348: if (hdr->members.fCnt >= loRa.fCntDown.members.valueLow)
 11073  0006C2  EE20 F006          	lfsr	2,6
 11074  0006C6  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11075  0006C8  26D9               	addwf	fsr2l,f,c
 11076  0006CA  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11077  0006CC  22DA               	addwfc	fsr2h,f,c
 11078  0006CE  0102               	movlb	2	; () banked
 11079  0006D0  510A               	movf	(_loRa+10)& (0+255),w,b
 11080  0006D2  5CDE               	subwf	postinc2,w,c
 11081  0006D4  510B               	movf	(_loRa+11)& (0+255),w,b
 11082  0006D6  58DE               	subwfb	postinc2,w,c
 11083  0006D8  E346               	bnc	l14382
 11084                           
 11085                           ; BSR set to: 2
 11086                           ;lorawan.c: 1349: {
 11087                           ;lorawan.c: 1350: if ((hdr->members.fCnt - loRa.fCntDown.members.valueLow) > loRa.protoc
      +                          olParameters.maxFcntGap)
 11088  0006DA  0103               	movlb	3	; () banked
 11089  0006DC  EE20 F006          	lfsr	2,6
 11090  0006E0  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11091  0006E2  26D9               	addwf	fsr2l,f,c
 11092  0006E4  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11093  0006E6  22DA               	addwfc	fsr2h,f,c
 11094  0006E8  CFDE F0E8          	movff	postinc2,??_LORAWAN_RxDone
 11095  0006EC  CFDD F0E9          	movff	postdec2,??_LORAWAN_RxDone+1
 11096  0006F0  0102               	movlb	2	; () banked
 11097  0006F2  510A               	movf	(_loRa+10)& (0+255),w,b
 11098  0006F4  0100               	movlb	0	; () banked
 11099  0006F6  5FE8               	subwf	??_LORAWAN_RxDone& (0+255),f,b
 11100  0006F8  0102               	movlb	2	; () banked
 11101  0006FA  510B               	movf	(_loRa+11)& (0+255),w,b
 11102  0006FC  0100               	movlb	0	; () banked
 11103  0006FE  5BE9               	subwfb	(??_LORAWAN_RxDone+1)& (0+255),f,b
 11104  000700  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11105  000702  0102               	movlb	2	; () banked
 11106  000704  5D9C               	subwf	(_loRa+156)& (0+255),w,b
 11107  000706  0100               	movlb	0	; () banked
 11108  000708  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11109  00070A  0102               	movlb	2	; () banked
 11110  00070C  599D               	subwfb	(_loRa+157)& (0+255),w,b
 11111  00070E  E21F               	bc	l14380
 11112                           
 11113                           ; BSR set to: 2
 11114                           ;lorawan.c: 1351: {
 11115                           ;lorawan.c: 1352: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 11116  000710  9100               	bcf	_loRa& (0+255),0,b
 11117                           
 11118                           ; BSR set to: 2
 11119                           ;lorawan.c: 1353: loRa.macStatus.macState = IDLE;
 11120  000712  0EF0               	movlw	-16
 11121  000714  1702               	andwf	(_loRa+2)& (0+255),f,b
 11122                           
 11123                           ; BSR set to: 2
 11124                           ;lorawan.c: 1354: if (rxPayload.RxAppData != (0))
 11125  000716  0101               	movlb	1	; () banked
 11126  000718  516E               	movf	_rxPayload& (0+255),w,b
 11127  00071A  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 11128  00071C  E015               	bz	l14366
 11129                           
 11130                           ; BSR set to: 1
 11131                           ;lorawan.c: 1355: {
 11132                           ;lorawan.c: 1356: loRa.lorawanMacStatus.synchronization = 0;
 11133  00071E  0102               	movlb	2	; () banked
 11134  000720  9B00               	bcf	_loRa& (0+255),5,b
 11135                           
 11136                           ; BSR set to: 2
 11137                           ;lorawan.c: 1357: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 11138  000722  0E00               	movlw	0
 11139  000724  0100               	movlb	0	; () banked
 11140  000726  6F64               	movwf	RxDataDone@pData& (0+255),b
 11141  000728  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 11142  00072A  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 11143  00072C  6F67               	movwf	RxDataDone@status& (0+255),b
 11144  00072E  D801               	call	u16348
 11145  000730  D00B               	goto	l14366
 11146  000732                     u16348:
 11147  000732  0005               	push	
 11148  000734  0101               	movlb	1	; () banked
 11149  000736  6EFA               	movwf	pclath,c
 11150  000738  516E               	movf	_rxPayload& (0+255),w,b
 11151  00073A  6EFD               	movwf	tosl,c
 11152  00073C  516F               	movf	(_rxPayload+1)& (0+255),w,b
 11153  00073E  6EFE               	movwf	tosh,c
 11154  000740  50F8               	movf	tblptru,w,c
 11155  000742  6EFF               	movwf	tosu,c
 11156  000744  50FA               	movf	pclath,w,c
 11157  000746  0012               	return		;indir
 11158  000748                     l14366:
 11159                           
 11160                           ; BSR set to: 1
 11161                           ;lorawan.c: 1358: }
 11162                           ;lorawan.c: 1359: loRa.macStatus.rxDone = 0;
 11163  000748  0102               	movlb	2	; () banked
 11164  00074A  9303               	bcf	(_loRa+3)& (0+255),1,b
 11165  00074C  D036               	goto	l14402
 11166  00074E                     l14380:
 11167                           
 11168                           ; BSR set to: 2
 11169                           ;lorawan.c: 1370: else
 11170                           ;lorawan.c: 1371: {
 11171                           ;lorawan.c: 1372: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 11172  00074E  0103               	movlb	3	; () banked
 11173  000750  EE20 F006          	lfsr	2,6
 11174  000754  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11175  000756  26D9               	addwf	fsr2l,f,c
 11176  000758  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11177  00075A  22DA               	addwfc	fsr2h,f,c
 11178  00075C  CFDE F20A          	movff	postinc2,_loRa+10
 11179  000760  CFDD F20B          	movff	postdec2,_loRa+11
 11180  000764  D021               	goto	l14400
 11181  000766                     l14382:
 11182                           
 11183                           ; BSR set to: 2
 11184                           ;lorawan.c: 1375: else
 11185                           ;lorawan.c: 1376: {
 11186                           ;lorawan.c: 1377: if((hdr->members.fCnt == 0) && (loRa.fCntDown.members.valueLow == 0xFF
      +                          FF))
 11187  000766  0103               	movlb	3	; () banked
 11188  000768  EE20 F006          	lfsr	2,6
 11189  00076C  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11190  00076E  26D9               	addwf	fsr2l,f,c
 11191  000770  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11192  000772  22DA               	addwfc	fsr2h,f,c
 11193  000774  50DE               	movf	postinc2,w,c
 11194  000776  10DE               	iorwf	postinc2,w,c
 11195  000778  E114               	bnz	l14390
 11196                           
 11197                           ; BSR set to: 3
 11198  00077A  0102               	movlb	2	; () banked
 11199  00077C  290A               	incf	(_loRa+10)& (0+255),w,b
 11200  00077E  E111               	bnz	l14390
 11201  000780  290B               	incf	(_loRa+11)& (0+255),w,b
 11202  000782  E10F               	bnz	l14390
 11203                           
 11204                           ; BSR set to: 2
 11205                           ;lorawan.c: 1378: {
 11206                           ;lorawan.c: 1380: loRa.fCntDown.members.valueLow = hdr->members.fCnt;
 11207  000784  0103               	movlb	3	; () banked
 11208  000786  EE20 F006          	lfsr	2,6
 11209  00078A  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11210  00078C  26D9               	addwf	fsr2l,f,c
 11211  00078E  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11212  000790  22DA               	addwfc	fsr2h,f,c
 11213  000792  CFDE F20A          	movff	postinc2,_loRa+10
 11214  000796  CFDD F20B          	movff	postdec2,_loRa+11
 11215                           
 11216                           ; BSR set to: 3
 11217                           ;lorawan.c: 1381: loRa.fCntDown.members.valueHigh ++;
 11218  00079A  0102               	movlb	2	; () banked
 11219  00079C  4B0C               	infsnz	(_loRa+12)& (0+255),f,b
 11220  00079E  2B0D               	incf	(_loRa+13)& (0+255),f,b
 11221                           
 11222                           ;lorawan.c: 1382: }
 11223  0007A0  D003               	goto	l14400
 11224  0007A2                     l14390:
 11225                           
 11226                           ;lorawan.c: 1383: else
 11227                           ;lorawan.c: 1384: {
 11228                           ;lorawan.c: 1385: SetReceptionNotOkState();
 11229  0007A2  ECCA  F031         	call	_SetReceptionNotOkState	;wreg free
 11230  0007A6  D70B               	goto	l14324
 11231  0007A8                     l14400:
 11232                           
 11233                           ;lorawan.c: 1393: }
 11234                           ;lorawan.c: 1394: }
 11235                           ;lorawan.c: 1396: if (loRa.fCntDown.value == (4294967295UL))
 11236  0007A8  0102               	movlb	2	; () banked
 11237  0007AA  290A               	incf	(_loRa+10)& (0+255),w,b
 11238  0007AC  E109               	bnz	l14412
 11239  0007AE  290B               	incf	(_loRa+11)& (0+255),w,b
 11240  0007B0  E107               	bnz	l14412
 11241  0007B2  290C               	incf	(_loRa+12)& (0+255),w,b
 11242  0007B4  E105               	bnz	l14412
 11243  0007B6  290D               	incf	(_loRa+13)& (0+255),w,b
 11244  0007B8  E103               	bnz	l14412
 11245  0007BA                     l14402:
 11246                           
 11247                           ; BSR set to: 2
 11248                           ;lorawan.c: 1397: {
 11249                           ;lorawan.c: 1400: loRa.macStatus.rejoinNeeded = 1;
 11250  0007BA  8304               	bsf	(_loRa+4)& (0+255),1,b
 11251                           
 11252                           ; BSR set to: 2
 11253                           ;lorawan.c: 1401: if (CLASS_C == loRa.deviceClass)
 11254  0007BC  0E02               	movlw	2
 11255  0007BE  D701               	goto	L5
 11256  0007C0                     l14412:
 11257                           
 11258                           ; BSR set to: 2
 11259                           ;lorawan.c: 1407: }
 11260                           ;lorawan.c: 1410: if (loRa.macStatus.macState == RX1_OPEN)
 11261  0007C0  5102               	movf	(_loRa+2)& (0+255),w,b
 11262  0007C2  0B0F               	andlw	15
 11263  0007C4  0A03               	xorlw	3
 11264  0007C6  E103               	bnz	l14416
 11265                           
 11266                           ; BSR set to: 2
 11267                           ;lorawan.c: 1411: {
 11268                           ;lorawan.c: 1412: SwTimerStop (loRa.receiveWindow2TimerId);
 11269  0007C8  51E5               	movf	(_loRa+229)& (0+255),w,b
 11270  0007CA  ECF3  F03A         	call	_SwTimerStop
 11271  0007CE                     l14416:
 11272                           
 11273                           ;lorawan.c: 1413: }
 11274                           ;lorawan.c: 1415: loRa.counterRepetitionsUnconfirmedUplink = 1;
 11275  0007CE  0E01               	movlw	1
 11276  0007D0  0102               	movlb	2	; () banked
 11277  0007D2  6FD8               	movwf	(_loRa+216)& (0+255),b
 11278                           
 11279                           ; BSR set to: 2
 11280                           ;lorawan.c: 1417: CheckFlags (hdr);
 11281  0007D4  C3B2  F064         	movff	LORAWAN_RxDone@hdr,CheckFlags@hdr
 11282  0007D8  C3B3  F065         	movff	LORAWAN_RxDone@hdr+1,CheckFlags@hdr+1
 11283  0007DC  EC90  F033         	call	_CheckFlags	;wreg free
 11284                           
 11285                           ;lorawan.c: 1419: if (hdr->members.fCtrl.fOptsLen != 0)
 11286  0007E0  0103               	movlb	3	; () banked
 11287  0007E2  EE20 F005          	lfsr	2,5
 11288  0007E6  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11289  0007E8  26D9               	addwf	fsr2l,f,c
 11290  0007EA  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11291  0007EC  22DA               	addwfc	fsr2h,f,c
 11292  0007EE  50DF               	movf	223,w,c
 11293  0007F0  0B0F               	andlw	15
 11294  0007F2  E01B               	bz	l14424
 11295                           
 11296                           ; BSR set to: 3
 11297                           ;lorawan.c: 1420: {
 11298                           ;lorawan.c: 1421: buffer = MacExecuteCommands(hdr->members.MacCommands, hdr->members.fCt
      +                          rl.fOptsLen);
 11299  0007F4  0E08               	movlw	8
 11300  0007F6  25B2               	addwf	LORAWAN_RxDone@hdr& (0+255),w,b
 11301  0007F8  0100               	movlb	0	; () banked
 11302  0007FA  6F7A               	movwf	MacExecuteCommands@buffer& (0+255),b
 11303  0007FC  0E00               	movlw	0
 11304  0007FE  0103               	movlb	3	; () banked
 11305  000800  21B3               	addwfc	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11306  000802  0100               	movlb	0	; () banked
 11307  000804  6F7B               	movwf	(MacExecuteCommands@buffer+1)& (0+255),b
 11308  000806  0103               	movlb	3	; () banked
 11309  000808  EE20 F005          	lfsr	2,5
 11310  00080C  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11311  00080E  26D9               	addwf	fsr2l,f,c
 11312  000810  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11313  000812  22DA               	addwfc	fsr2h,f,c
 11314  000814  50DF               	movf	223,w,c
 11315  000816  0B0F               	andlw	15
 11316  000818  0100               	movlb	0	; () banked
 11317  00081A  6F7C               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 11318  00081C  EC02  F017         	call	_MacExecuteCommands	;wreg free
 11319  000820  C07A  F16B         	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 11320  000824  C07B  F16C         	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 11321                           
 11322                           ;lorawan.c: 1422: }
 11323  000828  D005               	goto	l14426
 11324  00082A                     l14424:
 11325                           
 11326                           ; BSR set to: 3
 11327                           ;lorawan.c: 1423: else
 11328                           ;lorawan.c: 1424: {
 11329                           ;lorawan.c: 1425: buffer = buffer + 8;
 11330  00082A  0E08               	movlw	8
 11331  00082C  0101               	movlb	1	; () banked
 11332  00082E  276B               	addwf	LORAWAN_RxDone@buffer& (0+255),f,b
 11333  000830  0E00               	movlw	0
 11334  000832  236C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 11335  000834                     l14426:
 11336                           
 11337                           ;lorawan.c: 1426: }
 11338                           ;lorawan.c: 1427: if ( (sizeof(extractedMic) + hdr->members.fCtrl.fOptsLen + 8) != buffe
      +                          rLength)
 11339  000834  0101               	movlb	1	; () banked
 11340  000836  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11341  000838  0100               	movlb	0	; () banked
 11342  00083A  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 11343  00083C  6BE9               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 11344  00083E  0103               	movlb	3	; () banked
 11345  000840  EE20 F005          	lfsr	2,5
 11346  000844  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11347  000846  26D9               	addwf	fsr2l,f,c
 11348  000848  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11349  00084A  22DA               	addwfc	fsr2h,f,c
 11350  00084C  50DF               	movf	223,w,c
 11351  00084E  0B0F               	andlw	15
 11352  000850  0100               	movlb	0	; () banked
 11353  000852  6FEA               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 11354  000854  6BEB               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 11355  000856  0E0C               	movlw	12
 11356  000858  27EA               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11357  00085A  0E00               	movlw	0
 11358  00085C  23EB               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11359  00085E  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11360  000860  19EA               	xorwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 11361  000862  E104               	bnz	u16430
 11362  000864  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11363  000866  19EB               	xorwf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11364  000868  E101 D09B          	bz	l2192
 11365  00086C                     u16430:
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;lorawan.c: 1428: {
 11369                           ;lorawan.c: 1429: fPort = *(buffer++);
 11370  00086C  C16B  FFD9         	movff	LORAWAN_RxDone@buffer,fsr2l
 11371  000870  C16C  FFDA         	movff	LORAWAN_RxDone@buffer+1,fsr2h
 11372  000874  50DF               	movf	indf2,w,c
 11373  000876  0103               	movlb	3	; () banked
 11374  000878  6FA0               	movwf	LORAWAN_RxDone@fPort& (0+255),b
 11375                           
 11376                           ; BSR set to: 3
 11377  00087A  0101               	movlb	1	; () banked
 11378  00087C  4B6B               	infsnz	LORAWAN_RxDone@buffer& (0+255),f,b
 11379  00087E  2B6C               	incf	(LORAWAN_RxDone@buffer+1)& (0+255),f,b
 11380                           
 11381                           ; BSR set to: 1
 11382                           ;lorawan.c: 1431: frmPayloadLength = bufferLength - 8 - hdr->members.fCtrl.fOptsLen - si
      +                          zeof (extractedMic);
 11383  000880  0103               	movlb	3	; () banked
 11384  000882  EE20 F005          	lfsr	2,5
 11385  000886  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11386  000888  26D9               	addwf	fsr2l,f,c
 11387  00088A  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11388  00088C  22DA               	addwfc	fsr2h,f,c
 11389  00088E  50DF               	movf	223,w,c
 11390  000890  0B0F               	andlw	15
 11391  000892  0100               	movlb	0	; () banked
 11392  000894  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 11393  000896  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11394  000898  0101               	movlb	1	; () banked
 11395  00089A  5D6D               	subwf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11396  00089C  0FF4               	addlw	244
 11397  00089E  0103               	movlb	3	; () banked
 11398  0008A0  6FB1               	movwf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11399                           
 11400                           ; BSR set to: 3
 11401                           ;lorawan.c: 1432: bufferIndex = 16 + 8 + hdr->members.fCtrl.fOptsLen + sizeof (fPort);
 11402  0008A2  EE20 F005          	lfsr	2,5
 11403  0008A6  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11404  0008A8  26D9               	addwf	fsr2l,f,c
 11405  0008AA  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11406  0008AC  22DA               	addwfc	fsr2h,f,c
 11407  0008AE  50DF               	movf	223,w,c
 11408  0008B0  0B0F               	andlw	15
 11409  0008B2  0F19               	addlw	25
 11410  0008B4  6FA7               	movwf	LORAWAN_RxDone@bufferIndex& (0+255),b
 11411                           
 11412                           ; BSR set to: 3
 11413                           ;lorawan.c: 1434: if (fPort != 0)
 11414  0008B6  51A0               	movf	LORAWAN_RxDone@fPort& (0+255),w,b
 11415  0008B8  E029               	bz	l14442
 11416                           
 11417                           ; BSR set to: 3
 11418                           ;lorawan.c: 1435: {
 11419                           ;lorawan.c: 1436: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.applicationSessionKey, bufferIndex, radioBuffer, 0);
 11420  0008BA  C16B  F0A4         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 11421  0008BE  C16C  F0A5         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 11422  0008C2  05B1               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 11423  0008C4  0100               	movlb	0	; () banked
 11424  0008C6  6FA6               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 11425  0008C8  0E01               	movlw	1
 11426  0008CA  6FA7               	movwf	EncryptFRMPayload@dir& (0+255),b
 11427  0008CC  C20A  F0A8         	movff	_loRa+10,EncryptFRMPayload@frameCounter
 11428  0008D0  C20B  F0A9         	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 11429  0008D4  C20C  F0AA         	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 11430  0008D8  C20D  F0AB         	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 11431  0008DC  0E32               	movlw	low (_loRa+50)
 11432  0008DE  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 11433  0008E0  0E02               	movlw	high (_loRa+50)
 11434  0008E2  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 11435  0008E4  C3A7  F0AE         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 11436  0008E8  0EEF               	movlw	low _radioBuffer
 11437  0008EA  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 11438  0008EC  0E05               	movlw	high _radioBuffer
 11439  0008EE  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 11440  0008F0  6BB1               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 11441  0008F2  ECC2  F020         	call	_EncryptFRMPayload	;wreg free
 11442                           
 11443                           ; BSR set to: 0
 11444                           ;lorawan.c: 1437: packet = buffer - 1;
 11445  0008F6  0EFF               	movlw	255
 11446  0008F8  0101               	movlb	1	; () banked
 11447  0008FA  256B               	addwf	LORAWAN_RxDone@buffer& (0+255),w,b
 11448  0008FC  0103               	movlb	3	; () banked
 11449  0008FE  6FA9               	movwf	LORAWAN_RxDone@packet& (0+255),b
 11450  000900  0EFF               	movlw	255
 11451  000902  0101               	movlb	1	; () banked
 11452  000904  216C               	addwfc	(LORAWAN_RxDone@buffer+1)& (0+255),w,b
 11453  000906  0103               	movlb	3	; () banked
 11454  000908  6FAA               	movwf	(LORAWAN_RxDone@packet+1)& (0+255),b
 11455                           
 11456                           ;lorawan.c: 1438: }
 11457  00090A  D04F               	goto	l14452
 11458  00090C                     l14442:
 11459                           
 11460                           ; BSR set to: 3
 11461                           ;lorawan.c: 1439: else
 11462                           ;lorawan.c: 1440: {
 11463                           ;lorawan.c: 1442: if(bufferLength > (13 + hdr->members.fCtrl.fOptsLen))
 11464  00090C  0101               	movlb	1	; () banked
 11465  00090E  516D               	movf	LORAWAN_RxDone@bufferLength& (0+255),w,b
 11466  000910  0100               	movlb	0	; () banked
 11467  000912  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 11468  000914  6BE9               	clrf	(??_LORAWAN_RxDone+1)& (0+255),b
 11469  000916  0103               	movlb	3	; () banked
 11470  000918  EE20 F005          	lfsr	2,5
 11471  00091C  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11472  00091E  26D9               	addwf	fsr2l,f,c
 11473  000920  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11474  000922  22DA               	addwfc	fsr2h,f,c
 11475  000924  50DF               	movf	223,w,c
 11476  000926  0B0F               	andlw	15
 11477  000928  0100               	movlb	0	; () banked
 11478  00092A  6FEA               	movwf	(??_LORAWAN_RxDone+2)& (0+255),b
 11479  00092C  6BEB               	clrf	(??_LORAWAN_RxDone+3)& (0+255),b
 11480  00092E  0E0D               	movlw	13
 11481  000930  27EA               	addwf	(??_LORAWAN_RxDone+2)& (0+255),f,b
 11482  000932  0E00               	movlw	0
 11483  000934  23EB               	addwfc	(??_LORAWAN_RxDone+3)& (0+255),f,b
 11484  000936  51E8               	movf	??_LORAWAN_RxDone& (0+255),w,b
 11485  000938  5DEA               	subwf	(??_LORAWAN_RxDone+2)& (0+255),w,b
 11486  00093A  51EB               	movf	(??_LORAWAN_RxDone+3)& (0+255),w,b
 11487  00093C  0A80               	xorlw	128
 11488  00093E  6FEC               	movwf	(??_LORAWAN_RxDone+4)& (0+255),b
 11489  000940  51E9               	movf	(??_LORAWAN_RxDone+1)& (0+255),w,b
 11490  000942  0A80               	xorlw	128
 11491  000944  59EC               	subwfb	(??_LORAWAN_RxDone+4)& (0+255),w,b
 11492  000946  E22D               	bc	l2192
 11493                           
 11494                           ; BSR set to: 0
 11495                           ;lorawan.c: 1443: {
 11496                           ;lorawan.c: 1445: EncryptFRMPayload (buffer, frmPayloadLength - 1, 1, loRa.fCntDown.valu
      +                          e, loRa.activationParameters.networkSessionKey, bufferIndex, radioBuffer, 0);
 11497  000948  C16B  F0A4         	movff	LORAWAN_RxDone@buffer,EncryptFRMPayload@buffer
 11498  00094C  C16C  F0A5         	movff	LORAWAN_RxDone@buffer+1,EncryptFRMPayload@buffer+1
 11499  000950  0103               	movlb	3	; () banked
 11500  000952  05B1               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 11501  000954  0100               	movlb	0	; () banked
 11502  000956  6FA6               	movwf	EncryptFRMPayload@bufferLength& (0+255),b
 11503  000958  0E01               	movlw	1
 11504  00095A  6FA7               	movwf	EncryptFRMPayload@dir& (0+255),b
 11505  00095C  C20A  F0A8         	movff	_loRa+10,EncryptFRMPayload@frameCounter
 11506  000960  C20B  F0A9         	movff	_loRa+11,EncryptFRMPayload@frameCounter+1
 11507  000964  C20C  F0AA         	movff	_loRa+12,EncryptFRMPayload@frameCounter+2
 11508  000968  C20D  F0AB         	movff	_loRa+13,EncryptFRMPayload@frameCounter+3
 11509  00096C  0E22               	movlw	low (_loRa+34)
 11510  00096E  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 11511  000970  0E02               	movlw	high (_loRa+34)
 11512  000972  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 11513  000974  C3A7  F0AE         	movff	LORAWAN_RxDone@bufferIndex,EncryptFRMPayload@macBufferIndex
 11514  000978  0EEF               	movlw	low _radioBuffer
 11515  00097A  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 11516  00097C  0E05               	movlw	high _radioBuffer
 11517  00097E  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 11518  000980  6BB1               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 11519  000982  ECC2  F020         	call	_EncryptFRMPayload	;wreg free
 11520                           
 11521                           ; BSR set to: 0
 11522                           ;lorawan.c: 1446: buffer = MacExecuteCommands(buffer, frmPayloadLength - 1 );
 11523  000986  C16B  F07A         	movff	LORAWAN_RxDone@buffer,MacExecuteCommands@buffer
 11524  00098A  C16C  F07B         	movff	LORAWAN_RxDone@buffer+1,MacExecuteCommands@buffer+1
 11525  00098E  0103               	movlb	3	; () banked
 11526  000990  05B1               	decf	LORAWAN_RxDone@frmPayloadLength& (0+255),w,b
 11527  000992  0100               	movlb	0	; () banked
 11528  000994  6F7C               	movwf	MacExecuteCommands@fOptsLen& (0+255),b
 11529  000996  EC02  F017         	call	_MacExecuteCommands	;wreg free
 11530  00099A  C07A  F16B         	movff	?_MacExecuteCommands,LORAWAN_RxDone@buffer
 11531  00099E  C07B  F16C         	movff	?_MacExecuteCommands+1,LORAWAN_RxDone@buffer+1
 11532  0009A2                     l2192:
 11533                           
 11534                           ; BSR set to: 0
 11535                           ;lorawan.c: 1453: else
 11536                           ;lorawan.c: 1454: {
 11537                           ;lorawan.c: 1455: frmPayloadLength = 0;
 11538  0009A2  0103               	movlb	3	; () banked
 11539  0009A4  6BB1               	clrf	LORAWAN_RxDone@frmPayloadLength& (0+255),b
 11540                           
 11541                           ;lorawan.c: 1456: packet = (0);
 11542  0009A6  6BA9               	clrf	LORAWAN_RxDone@packet& (0+255),b
 11543  0009A8  6BAA               	clrf	(LORAWAN_RxDone@packet+1)& (0+255),b
 11544  0009AA                     l14452:
 11545                           
 11546                           ; BSR set to: 3
 11547                           ;lorawan.c: 1457: }
 11548                           ;lorawan.c: 1459: loRa.counterRepetitionsUnconfirmedUplink = 1;
 11549  0009AA  0E01               	movlw	1
 11550  0009AC  0102               	movlb	2	; () banked
 11551  0009AE  6FD8               	movwf	(_loRa+216)& (0+255),b
 11552                           
 11553                           ; BSR set to: 2
 11554                           ;lorawan.c: 1461: loRa.adrAckCnt = 0;
 11555  0009B0  6BD0               	clrf	(_loRa+208)& (0+255),b
 11556  0009B2  6BD1               	clrf	(_loRa+209)& (0+255),b
 11557                           
 11558                           ; BSR set to: 2
 11559                           ;lorawan.c: 1462: loRa.counterAdrAckDelay = 0;
 11560  0009B4  6BEE               	clrf	(_loRa+238)& (0+255),b
 11561                           
 11562                           ; BSR set to: 2
 11563                           ;lorawan.c: 1463: loRa.lorawanMacStatus.adrAckRequest = 0;
 11564  0009B6  9900               	bcf	_loRa& (0+255),4,b
 11565                           
 11566                           ; BSR set to: 2
 11567                           ;lorawan.c: 1465: loRa.macStatus.rxDone = 1;
 11568  0009B8  8303               	bsf	(_loRa+3)& (0+255),1,b
 11569                           
 11570                           ; BSR set to: 2
 11571                           ;lorawan.c: 1467: if ( loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage == 1 )
 11572  0009BA  A100               	btfss	_loRa& (0+255),0,b
 11573  0009BC  D04F               	goto	l14496
 11574                           
 11575                           ; BSR set to: 2
 11576                           ;lorawan.c: 1468: {
 11577                           ;lorawan.c: 1469: if (hdr->members.fCtrl.ack == 1)
 11578  0009BE  0103               	movlb	3	; () banked
 11579  0009C0  EE20 F005          	lfsr	2,5
 11580  0009C4  51B2               	movf	LORAWAN_RxDone@hdr& (0+255),w,b
 11581  0009C6  26D9               	addwf	fsr2l,f,c
 11582  0009C8  51B3               	movf	(LORAWAN_RxDone@hdr+1)& (0+255),w,b
 11583  0009CA  22DA               	addwfc	fsr2h,f,c
 11584  0009CC  AADF               	btfss	indf2,5,c
 11585  0009CE  D043               	goto	l14494
 11586                           
 11587                           ; BSR set to: 3
 11588                           ;lorawan.c: 1470: {
 11589                           ;lorawan.c: 1471: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 11590  0009D0  0102               	movlb	2	; () banked
 11591  0009D2  9100               	bcf	_loRa& (0+255),0,b
 11592                           
 11593                           ; BSR set to: 2
 11594                           ;lorawan.c: 1472: loRa.macStatus.macState = IDLE;
 11595  0009D4  0EF0               	movlw	-16
 11596  0009D6  1702               	andwf	(_loRa+2)& (0+255),f,b
 11597                           
 11598                           ; BSR set to: 2
 11599                           ;lorawan.c: 1473: if (rxPayload.RxAppData != (0))
 11600  0009D8  0101               	movlb	1	; () banked
 11601  0009DA  516E               	movf	_rxPayload& (0+255),w,b
 11602  0009DC  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 11603  0009DE  E018               	bz	l14476
 11604                           
 11605                           ; BSR set to: 1
 11606                           ;lorawan.c: 1474: {
 11607                           ;lorawan.c: 1475: loRa.lorawanMacStatus.synchronization = 0;
 11608  0009E0  0102               	movlb	2	; () banked
 11609  0009E2  9B00               	bcf	_loRa& (0+255),5,b
 11610                           
 11611                           ; BSR set to: 2
 11612                           ;lorawan.c: 1476: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 11613  0009E4  C3A9  F064         	movff	LORAWAN_RxDone@packet,RxDataDone@pData
 11614  0009E8  C3AA  F065         	movff	LORAWAN_RxDone@packet+1,RxDataDone@pData+1
 11615  0009EC  C3B1  F066         	movff	LORAWAN_RxDone@frmPayloadLength,RxDataDone@dataLength
 11616  0009F0  0E01               	movlw	1
 11617  0009F2  0100               	movlb	0	; () banked
 11618  0009F4  6F67               	movwf	RxDataDone@status& (0+255),b
 11619  0009F6  D801               	call	u16498
 11620  0009F8  D00B               	goto	l14476
 11621  0009FA                     u16498:
 11622  0009FA  0005               	push	
 11623  0009FC  0101               	movlb	1	; () banked
 11624  0009FE  6EFA               	movwf	pclath,c
 11625  000A00  516E               	movf	_rxPayload& (0+255),w,b
 11626  000A02  6EFD               	movwf	tosl,c
 11627  000A04  516F               	movf	(_rxPayload+1)& (0+255),w,b
 11628  000A06  6EFE               	movwf	tosh,c
 11629  000A08  50F8               	movf	tblptru,w,c
 11630  000A0A  6EFF               	movwf	tosu,c
 11631  000A0C  50FA               	movf	pclath,w,c
 11632  000A0E  0012               	return		;indir
 11633  000A10                     l14476:
 11634                           
 11635                           ; BSR set to: 1
 11636                           ;lorawan.c: 1477: }
 11637                           ;lorawan.c: 1478: loRa.macStatus.rxDone = 0;
 11638  000A10  0102               	movlb	2	; () banked
 11639  000A12  9303               	bcf	(_loRa+3)& (0+255),1,b
 11640                           
 11641                           ; BSR set to: 2
 11642                           ;lorawan.c: 1479: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 11643  000A14  BB02               	btfsc	(_loRa+2)& (0+255),5,b
 11644                           
 11645                           ; BSR set to: 2
 11646  000A16  BB00               	btfsc	_loRa& (0+255),5,b
 11647  000A18  D5D2               	goto	l14324
 11648                           
 11649                           ; BSR set to: 2
 11650  000A1A  B300               	btfsc	_loRa& (0+255),1,b
 11651  000A1C  D002               	goto	l14486
 11652                           
 11653                           ; BSR set to: 2
 11654  000A1E  A700               	btfss	_loRa& (0+255),3,b
 11655  000A20  D5CE               	goto	l14324
 11656  000A22                     l14486:
 11657                           
 11658                           ; BSR set to: 2
 11659                           ;lorawan.c: 1480: {
 11660                           ;lorawan.c: 1481: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 11661  000A22  0E01               	movlw	1
 11662  000A24  0100               	movlb	0	; () banked
 11663  000A26  6F79               	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 11664  000A28  0EA1               	movlw	low LORAWAN_RxDone@channelIndex
 11665  000A2A  6F7A               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 11666  000A2C  0E03               	movlw	high LORAWAN_RxDone@channelIndex
 11667  000A2E  6F7B               	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 11668  000A30  0102               	movlb	2	; () banked
 11669  000A32  51ED               	movf	(_loRa+237)& (0+255),w,b
 11670  000A34  ECB2  F027         	call	_SearchAvailableChannel
 11671  000A38  0900               	iorlw	0
 11672  000A3A  E10A               	bnz	l14492
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;lorawan.c: 1482: {
 11676                           ;lorawan.c: 1483: LORAWAN_Send (0, 0, 0, 0);
 11677  000A3C  0E00               	movlw	0
 11678  000A3E  6FE1               	movwf	LORAWAN_Send@port& (0+255),b
 11679  000A40  6FE2               	movwf	LORAWAN_Send@buffer& (0+255),b
 11680  000A42  6FE3               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 11681  000A44  6FE4               	movwf	LORAWAN_Send@bufferLength& (0+255),b
 11682  000A46  EC0A  F02B         	call	_LORAWAN_Send
 11683  000A4A                     l14490:
 11684                           
 11685                           ;lorawan.c: 1484: loRa.lorawanMacStatus.fPending = 0;
 11686  000A4A  0102               	movlb	2	; () banked
 11687  000A4C  9700               	bcf	_loRa& (0+255),3,b
 11688                           
 11689                           ;lorawan.c: 1485: }
 11690  000A4E  D5B7               	goto	l14324
 11691  000A50                     l14492:
 11692                           
 11693                           ; BSR set to: 0
 11694                           ;lorawan.c: 1486: else
 11695                           ;lorawan.c: 1487: {
 11696                           ;lorawan.c: 1489: StartReTxTimer();
 11697  000A50  EC10  F022         	call	_StartReTxTimer	;wreg free
 11698  000A54  D5B4               	goto	l14324
 11699  000A56                     l14494:
 11700                           
 11701                           ; BSR set to: 3
 11702                           ;lorawan.c: 1494: else
 11703                           ;lorawan.c: 1495: {
 11704                           ;lorawan.c: 1496: UpdateRetransmissionAckTimeoutState ();
 11705  000A56  EC95  F031         	call	_UpdateRetransmissionAckTimeoutState	;wreg free
 11706  000A5A  D5B1               	goto	l14324
 11707  000A5C                     l14496:
 11708                           
 11709                           ; BSR set to: 2
 11710                           ;lorawan.c: 1499: else
 11711                           ;lorawan.c: 1500: {
 11712                           ;lorawan.c: 1501: loRa.macStatus.macState = IDLE;
 11713  000A5C  0EF0               	movlw	-16
 11714  000A5E  1702               	andwf	(_loRa+2)& (0+255),f,b
 11715                           
 11716                           ; BSR set to: 2
 11717                           ;lorawan.c: 1503: if (rxPayload.RxAppData != (0))
 11718  000A60  0101               	movlb	1	; () banked
 11719  000A62  516E               	movf	_rxPayload& (0+255),w,b
 11720  000A64  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 11721  000A66  E018               	bz	l14504
 11722                           
 11723                           ; BSR set to: 1
 11724                           ;lorawan.c: 1504: {
 11725                           ;lorawan.c: 1505: loRa.lorawanMacStatus.synchronization = 0;
 11726  000A68  0102               	movlb	2	; () banked
 11727  000A6A  9B00               	bcf	_loRa& (0+255),5,b
 11728                           
 11729                           ; BSR set to: 2
 11730                           ;lorawan.c: 1506: rxPayload.RxAppData (packet, frmPayloadLength, MAC_OK);
 11731  000A6C  C3A9  F064         	movff	LORAWAN_RxDone@packet,RxDataDone@pData
 11732  000A70  C3AA  F065         	movff	LORAWAN_RxDone@packet+1,RxDataDone@pData+1
 11733  000A74  C3B1  F066         	movff	LORAWAN_RxDone@frmPayloadLength,RxDataDone@dataLength
 11734  000A78  0E01               	movlw	1
 11735  000A7A  0100               	movlb	0	; () banked
 11736  000A7C  6F67               	movwf	RxDataDone@status& (0+255),b
 11737  000A7E  D801               	call	u16568
 11738  000A80  D00B               	goto	l14504
 11739  000A82                     u16568:
 11740  000A82  0005               	push	
 11741  000A84  0101               	movlb	1	; () banked
 11742  000A86  6EFA               	movwf	pclath,c
 11743  000A88  516E               	movf	_rxPayload& (0+255),w,b
 11744  000A8A  6EFD               	movwf	tosl,c
 11745  000A8C  516F               	movf	(_rxPayload+1)& (0+255),w,b
 11746  000A8E  6EFE               	movwf	tosh,c
 11747  000A90  50F8               	movf	tblptru,w,c
 11748  000A92  6EFF               	movwf	tosu,c
 11749  000A94  50FA               	movf	pclath,w,c
 11750  000A96  0012               	return		;indir
 11751  000A98                     l14504:
 11752                           
 11753                           ; BSR set to: 1
 11754                           ;lorawan.c: 1507: }
 11755                           ;lorawan.c: 1509: if ( (loRa.macStatus.automaticReply == 1) && (loRa.lorawanMacStatus.sy
      +                          nchronization == 0) && ( (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1) |
      +                          | (loRa.lorawanMacStatus.fPending == 1) ) )
 11756  000A98  0102               	movlb	2	; () banked
 11757  000A9A  BB02               	btfsc	(_loRa+2)& (0+255),5,b
 11758                           
 11759                           ; BSR set to: 2
 11760  000A9C  BB00               	btfsc	_loRa& (0+255),5,b
 11761  000A9E  D58F               	goto	l14324
 11762                           
 11763                           ; BSR set to: 2
 11764  000AA0  B300               	btfsc	_loRa& (0+255),1,b
 11765  000AA2  D002               	goto	l14512
 11766                           
 11767                           ; BSR set to: 2
 11768  000AA4  A700               	btfss	_loRa& (0+255),3,b
 11769  000AA6  D58B               	goto	l14324
 11770  000AA8                     l14512:
 11771                           
 11772                           ; BSR set to: 2
 11773                           ;lorawan.c: 1510: {
 11774                           ;lorawan.c: 1511: if (SearchAvailableChannel (loRa.maxChannels, 1, &channelIndex) == OK)
 11775  000AA8  0E01               	movlw	1
 11776  000AAA  0100               	movlb	0	; () banked
 11777  000AAC  6F79               	movwf	SearchAvailableChannel@transmissionType& (0+255),b
 11778  000AAE  0EA1               	movlw	low LORAWAN_RxDone@channelIndex
 11779  000AB0  6F7A               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 11780  000AB2  0E03               	movlw	high LORAWAN_RxDone@channelIndex
 11781  000AB4  6F7B               	movwf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 11782  000AB6  0102               	movlb	2	; () banked
 11783  000AB8  51ED               	movf	(_loRa+237)& (0+255),w,b
 11784  000ABA  ECB2  F027         	call	_SearchAvailableChannel
 11785  000ABE  0900               	iorlw	0
 11786  000AC0  E1C7               	bnz	l14492
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;lorawan.c: 1512: {
 11790                           ;lorawan.c: 1513: LORAWAN_Send (0, 0, 0, 0);
 11791  000AC2  0E00               	movlw	0
 11792  000AC4  6FE1               	movwf	LORAWAN_Send@port& (0+255),b
 11793  000AC6  6FE2               	movwf	LORAWAN_Send@buffer& (0+255),b
 11794  000AC8  6FE3               	movwf	(LORAWAN_Send@buffer+1)& (0+255),b
 11795  000ACA  6FE4               	movwf	LORAWAN_Send@bufferLength& (0+255),b
 11796  000ACC  EC0A  F02B         	call	_LORAWAN_Send
 11797  000AD0  D7BC               	goto	l14490
 11798  000AD2                     l14530:
 11799                           
 11800                           ; BSR set to: 2
 11801                           ;lorawan.c: 1537: else
 11802                           ;lorawan.c: 1538: {
 11803                           ;lorawan.c: 1540: if ( rxPayload.RxAppData != (0) )
 11804  000AD2  0101               	movlb	1	; () banked
 11805  000AD4  516E               	movf	_rxPayload& (0+255),w,b
 11806  000AD6  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 11807  000AD8  B4D8               	btfsc	status,2,c
 11808  000ADA  0012               	return	
 11809                           
 11810                           ; BSR set to: 1
 11811                           ;lorawan.c: 1541: {
 11812                           ;lorawan.c: 1542: if ((RADIO_GetStatus() & (1 << (3))) == 0)
 11813  000ADC  EC5A  F03C         	call	_RADIO_GetStatus	;wreg free
 11814  000AE0  0100               	movlb	0	; () banked
 11815  000AE2  6FE8               	movwf	??_LORAWAN_RxDone& (0+255),b
 11816  000AE4  B7E8               	btfsc	??_LORAWAN_RxDone& (0+255),3,b
 11817  000AE6  D013               	goto	l14536
 11818                           
 11819                           ; BSR set to: 0
 11820                           ;lorawan.c: 1543: {
 11821                           ;lorawan.c: 1544: rxPayload.RxAppData(buffer, bufferLength, RADIO_OK);
 11822  000AE8  C16B  F064         	movff	LORAWAN_RxDone@buffer,RxDataDone@pData
 11823  000AEC  C16C  F065         	movff	LORAWAN_RxDone@buffer+1,RxDataDone@pData+1
 11824  000AF0  C16D  F066         	movff	LORAWAN_RxDone@bufferLength,RxDataDone@dataLength
 11825  000AF4  0E03               	movlw	3
 11826  000AF6  6F67               	movwf	RxDataDone@status& (0+255),b
 11827  000AF8  0005               	push	
 11828  000AFA  0101               	movlb	1	; () banked
 11829  000AFC  6EFA               	movwf	pclath,c
 11830  000AFE  516E               	movf	_rxPayload& (0+255),w,b
 11831  000B00  6EFD               	movwf	tosl,c
 11832  000B02  516F               	movf	(_rxPayload+1)& (0+255),w,b
 11833  000B04  6EFE               	movwf	tosh,c
 11834  000B06  50F8               	movf	tblptru,w,c
 11835  000B08  6EFF               	movwf	tosu,c
 11836  000B0A  50FA               	movf	pclath,w,c
 11837  000B0C  0012               	return		;indir
 11838  000B0E                     l14536:
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;lorawan.c: 1546: else
 11842                           ;lorawan.c: 1547: {
 11843                           ;lorawan.c: 1548: rxPayload.RxAppData(buffer, bufferLength, RADIO_NOT_OK);
 11844  000B0E  C16B  F064         	movff	LORAWAN_RxDone@buffer,RxDataDone@pData
 11845  000B12  C16C  F065         	movff	LORAWAN_RxDone@buffer+1,RxDataDone@pData+1
 11846  000B16  C16D  F066         	movff	LORAWAN_RxDone@bufferLength,RxDataDone@dataLength
 11847  000B1A  0E02               	movlw	2
 11848  000B1C  6F67               	movwf	RxDataDone@status& (0+255),b
 11849  000B1E  0005               	push	
 11850  000B20  0101               	movlb	1	; () banked
 11851  000B22  6EFA               	movwf	pclath,c
 11852  000B24  516E               	movf	_rxPayload& (0+255),w,b
 11853  000B26  6EFD               	movwf	tosl,c
 11854  000B28  516F               	movf	(_rxPayload+1)& (0+255),w,b
 11855  000B2A  6EFE               	movwf	tosh,c
 11856  000B2C  50F8               	movf	tblptru,w,c
 11857  000B2E  6EFF               	movwf	tosu,c
 11858  000B30  50FA               	movf	pclath,w,c
 11859  000B32  0012               	return		;indir
 11860  000B34                     __end_of_LORAWAN_RxDone:
 11861                           	opt stack 0
 11862                           tosu	equ	0xFFF
 11863                           tosh	equ	0xFFE
 11864                           tosl	equ	0xFFD
 11865                           pclath	equ	0xFFA
 11866                           tblptru	equ	0xFF8
 11867                           tblptrh	equ	0xFF7
 11868                           tblptrl	equ	0xFF6
 11869                           tablat	equ	0xFF5
 11870                           prodh	equ	0xFF4
 11871                           prodl	equ	0xFF3
 11872                           intcon	equ	0xFF2
 11873                           postinc0	equ	0xFEE
 11874                           wreg	equ	0xFE8
 11875                           postinc1	equ	0xFE6
 11876                           postdec1	equ	0xFE5
 11877                           plusw1	equ	0xFE3
 11878                           fsr1h	equ	0xFE2
 11879                           fsr1l	equ	0xFE1
 11880                           indf2	equ	0xFDF
 11881                           postinc2	equ	0xFDE
 11882                           postdec2	equ	0xFDD
 11883                           fsr2h	equ	0xFDA
 11884                           fsr2l	equ	0xFD9
 11885                           status	equ	0xFD8
 11886                           
 11887 ;; *************** function _UpdateRetransmissionAckTimeoutState *****************
 11888 ;; Defined at:
 11889 ;;		line 1034 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;		None
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;		None
 11894 ;; Return value:  Size  Location     Type
 11895 ;;                  1    wreg      void 
 11896 ;; Registers used:
 11897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11898 ;; Tracked objects:
 11899 ;;		On entry : C/0
 11900 ;;		On exit  : F/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11903 ;;      Params:         0       0       0       0       0       0       0       0       0
 11904 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11905 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11906 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11907 ;;Total ram usage:        4 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; Hardware stack levels required when called:   11
 11910 ;; This function calls:
 11911 ;;		_SwTimerSetTimeout
 11912 ;;		_SwTimerStart
 11913 ;;		___lldiv
 11914 ;; This function is called by:
 11915 ;;		_AckRetransmissionCallback
 11916 ;;		_LORAWAN_RxDone
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920                           	psect	text57
 11921  00632A                     __ptext57:
 11922                           	opt stack 0
 11923  00632A                     _UpdateRetransmissionAckTimeoutState:
 11924                           	opt stack 16
 11925                           
 11926                           ;lorawan.c: 1036: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 11927                           
 11928                           ;incstack = 0
 11929  00632A  0102               	movlb	2	; () banked
 11930  00632C  5102               	movf	(_loRa+2)& (0+255),w,b
 11931  00632E  0BF0               	andlw	-16
 11932  006330  0906               	iorlw	6
 11933  006332  6F02               	movwf	(_loRa+2)& (0+255),b
 11934                           
 11935                           ; BSR set to: 2
 11936                           ;lorawan.c: 1037: SwTimerSetTimeout(loRa.ackTimeoutTimerId, ( (((uint32_t)(loRa.protocol
      +                          Parameters.ackTimeout)) << (12)) / 125UL ));
 11937  006334  51A0               	movf	(_loRa+160)& (0+255),w,b
 11938  006336  0100               	movlb	0	; () banked
 11939  006338  6F94               	movwf	??_UpdateRetransmissionAckTimeoutState& (0+255),b
 11940  00633A  0102               	movlb	2	; () banked
 11941  00633C  51A1               	movf	(_loRa+161)& (0+255),w,b
 11942  00633E  0100               	movlb	0	; () banked
 11943  006340  6F95               	movwf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),b
 11944  006342  6B96               	clrf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),b
 11945  006344  6B97               	clrf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),b
 11946  006346  0E0C               	movlw	12
 11947  006348                     u15675:
 11948  006348  90D8               	bcf	status,0,c
 11949  00634A  3794               	rlcf	??_UpdateRetransmissionAckTimeoutState& (0+255),f,b
 11950  00634C  3795               	rlcf	(??_UpdateRetransmissionAckTimeoutState+1)& (0+255),f,b
 11951  00634E  3796               	rlcf	(??_UpdateRetransmissionAckTimeoutState+2)& (0+255),f,b
 11952  006350  3797               	rlcf	(??_UpdateRetransmissionAckTimeoutState+3)& (0+255),f,b
 11953  006352  2EE8               	decfsz	wreg,f,c
 11954  006354  D7F9               	goto	u15675
 11955  006356  C094  F064         	movff	??_UpdateRetransmissionAckTimeoutState,___lldiv@dividend
 11956  00635A  C095  F065         	movff	??_UpdateRetransmissionAckTimeoutState+1,___lldiv@dividend+1
 11957  00635E  C096  F066         	movff	??_UpdateRetransmissionAckTimeoutState+2,___lldiv@dividend+2
 11958  006362  C097  F067         	movff	??_UpdateRetransmissionAckTimeoutState+3,___lldiv@dividend+3
 11959  006366  0E7D               	movlw	125
 11960  006368  6F68               	movwf	___lldiv@divisor& (0+255),b
 11961  00636A  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 11962  00636C  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 11963  00636E  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 11964  006370  ECB3  F030         	call	___lldiv	;wreg free
 11965  006374  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 11966  006378  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 11967  00637C  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 11968  006380  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 11969  006384  0102               	movlb	2	; () banked
 11970  006386  51E8               	movf	(_loRa+232)& (0+255),w,b
 11971  006388  ECCA  F036         	call	_SwTimerSetTimeout
 11972                           
 11973                           ; BSR set to: 0
 11974                           ;lorawan.c: 1038: SwTimerStart(loRa.ackTimeoutTimerId);
 11975  00638C  0102               	movlb	2	; () banked
 11976  00638E  51E8               	movf	(_loRa+232)& (0+255),w,b
 11977  006390  EFB3  F02E         	goto	_SwTimerStart
 11978  006394                     __end_of_UpdateRetransmissionAckTimeoutState:
 11979                           	opt stack 0
 11980                           tosu	equ	0xFFF
 11981                           tosh	equ	0xFFE
 11982                           tosl	equ	0xFFD
 11983                           pclath	equ	0xFFA
 11984                           tblptru	equ	0xFF8
 11985                           tblptrh	equ	0xFF7
 11986                           tblptrl	equ	0xFF6
 11987                           tablat	equ	0xFF5
 11988                           prodh	equ	0xFF4
 11989                           prodl	equ	0xFF3
 11990                           intcon	equ	0xFF2
 11991                           postinc0	equ	0xFEE
 11992                           wreg	equ	0xFE8
 11993                           postinc1	equ	0xFE6
 11994                           postdec1	equ	0xFE5
 11995                           plusw1	equ	0xFE3
 11996                           fsr1h	equ	0xFE2
 11997                           fsr1l	equ	0xFE1
 11998                           indf2	equ	0xFDF
 11999                           postinc2	equ	0xFDE
 12000                           postdec2	equ	0xFDD
 12001                           fsr2h	equ	0xFDA
 12002                           fsr2l	equ	0xFD9
 12003                           status	equ	0xFD8
 12004                           
 12005 ;; *************** function _UpdateDLSettings *****************
 12006 ;; Defined at:
 12007 ;;		line 888 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 12008 ;; Parameters:    Size  Location     Type
 12009 ;;  dlRx2Dr         1    wreg     unsigned char 
 12010 ;;  dlRx1DrOffse    1    4[BANK0 ] unsigned char 
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;  dlRx2Dr         1    5[BANK0 ] unsigned char 
 12013 ;; Return value:  Size  Location     Type
 12014 ;;                  1    wreg      void 
 12015 ;; Registers used:
 12016 ;;		wreg, status,2, status,0
 12017 ;; Tracked objects:
 12018 ;;		On entry : F/3
 12019 ;;		On exit  : F/0
 12020 ;;		Unchanged: 0/0
 12021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12022 ;;      Params:         0       1       0       0       0       0       0       0       0
 12023 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12024 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12025 ;;      Totals:         0       2       0       0       0       0       0       0       0
 12026 ;;Total ram usage:        2 bytes
 12027 ;; Hardware stack levels used:    1
 12028 ;; Hardware stack levels required when called:    7
 12029 ;; This function calls:
 12030 ;;		Nothing
 12031 ;; This function is called by:
 12032 ;;		_LORAWAN_RxDone
 12033 ;; This function uses a non-reentrant model
 12034 ;;
 12035                           
 12036                           	psect	text58
 12037  00763A                     __ptext58:
 12038                           	opt stack 0
 12039  00763A                     _UpdateDLSettings:
 12040                           	opt stack 19
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;incstack = 0
 12044                           ;UpdateDLSettings@dlRx2Dr stored from wreg
 12045  00763A  0100               	movlb	0	; () banked
 12046  00763C  6F65               	movwf	UpdateDLSettings@dlRx2Dr& (0+255),b
 12047                           
 12048                           ;lorawan_eu.c: 890: if (dlRx2Dr <= 7)
 12049  00763E  0E08               	movlw	8
 12050  007640  6165               	cpfslt	UpdateDLSettings@dlRx2Dr& (0+255),b
 12051  007642  D002               	goto	l13858
 12052                           
 12053                           ; BSR set to: 0
 12054                           ;lorawan_eu.c: 891: {
 12055                           ;lorawan_eu.c: 892: loRa.receiveWindow2Parameters.dataRate = dlRx2Dr;
 12056  007644  C065  F21C         	movff	UpdateDLSettings@dlRx2Dr,_loRa+28
 12057  007648                     l13858:
 12058                           
 12059                           ; BSR set to: 0
 12060                           ;lorawan_eu.c: 893: }
 12061                           ;lorawan_eu.c: 895: if (dlRx1DrOffset <= 5)
 12062  007648  0E06               	movlw	6
 12063  00764A  6164               	cpfslt	UpdateDLSettings@dlRx1DrOffset& (0+255),b
 12064  00764C  0C06               	retlw	6
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;lorawan_eu.c: 896: {
 12068                           ;lorawan_eu.c: 898: loRa.offset = dlRx1DrOffset;
 12069  00764E  C064  F2EF         	movff	UpdateDLSettings@dlRx1DrOffset,_loRa+239
 12070                           
 12071                           ; BSR set to: 0
 12072  007652  0C06               	retlw	6	;funcret
 12073  007654                     __end_of_UpdateDLSettings:
 12074                           	opt stack 0
 12075                           tosu	equ	0xFFF
 12076                           tosh	equ	0xFFE
 12077                           tosl	equ	0xFFD
 12078                           pclath	equ	0xFFA
 12079                           tblptru	equ	0xFF8
 12080                           tblptrh	equ	0xFF7
 12081                           tblptrl	equ	0xFF6
 12082                           tablat	equ	0xFF5
 12083                           prodh	equ	0xFF4
 12084                           prodl	equ	0xFF3
 12085                           intcon	equ	0xFF2
 12086                           postinc0	equ	0xFEE
 12087                           wreg	equ	0xFE8
 12088                           postinc1	equ	0xFE6
 12089                           postdec1	equ	0xFE5
 12090                           plusw1	equ	0xFE3
 12091                           fsr1h	equ	0xFE2
 12092                           fsr1l	equ	0xFE1
 12093                           indf2	equ	0xFDF
 12094                           postinc2	equ	0xFDE
 12095                           postdec2	equ	0xFDD
 12096                           fsr2h	equ	0xFDA
 12097                           fsr2l	equ	0xFD9
 12098                           status	equ	0xFD8
 12099                           
 12100 ;; *************** function _UpdateCfList *****************
 12101 ;; Defined at:
 12102 ;;		line 824 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 12103 ;; Parameters:    Size  Location     Type
 12104 ;;  bufferLength    1    wreg     unsigned char 
 12105 ;;  joinAccept      2   16[BANK0 ] PTR struct .
 12106 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 12107 ;; Auto vars:     Size  Location     Type
 12108 ;;  bufferLength    1   20[BANK0 ] unsigned char 
 12109 ;;  frequency       4   21[BANK0 ] unsigned long 
 12110 ;;  i               1   26[BANK0 ] unsigned char 
 12111 ;;  channelIndex    1   25[BANK0 ] unsigned char 
 12112 ;; Return value:  Size  Location     Type
 12113 ;;                  1    wreg      void 
 12114 ;; Registers used:
 12115 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12116 ;; Tracked objects:
 12117 ;;		On entry : F/1
 12118 ;;		On exit  : D/0
 12119 ;;		Unchanged: 0/0
 12120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12121 ;;      Params:         0       2       0       0       0       0       0       0       0
 12122 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12123 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12124 ;;      Totals:         0      11       0       0       0       0       0       0       0
 12125 ;;Total ram usage:       11 bytes
 12126 ;; Hardware stack levels used:    1
 12127 ;; Hardware stack levels required when called:    9
 12128 ;; This function calls:
 12129 ;;		_LORAWAN_SetChannelIdStatus
 12130 ;;		_ValidateFrequency
 12131 ;;		___lmul
 12132 ;;		_memcpy
 12133 ;; This function is called by:
 12134 ;;		_LORAWAN_RxDone
 12135 ;; This function uses a non-reentrant model
 12136 ;;
 12137                           
 12138                           	psect	text59
 12139  0031E2                     __ptext59:
 12140                           	opt stack 0
 12141  0031E2                     _UpdateCfList:
 12142                           	opt stack 17
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;incstack = 0
 12146                           ;UpdateCfList@bufferLength stored from wreg
 12147  0031E2  0100               	movlb	0	; () banked
 12148  0031E4  6F74               	movwf	UpdateCfList@bufferLength& (0+255),b
 12149                           
 12150                           ;lorawan_eu.c: 826: uint8_t i;
 12151                           ;lorawan_eu.c: 827: uint32_t frequency;
 12152                           ;lorawan_eu.c: 828: uint8_t channelIndex;
 12153                           ;lorawan_eu.c: 830: if ( (bufferLength == 33) )
 12154  0031E6  0E21               	movlw	33
 12155  0031E8  1974               	xorwf	UpdateCfList@bufferLength& (0+255),w,b
 12156  0031EA  A4D8               	btfss	status,2,c
 12157  0031EC  0012               	return	
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;lorawan_eu.c: 831: {
 12161                           ;lorawan_eu.c: 833: channelIndex = 3;
 12162  0031EE  0E03               	movlw	3
 12163  0031F0  6F79               	movwf	UpdateCfList@channelIndex& (0+255),b
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;lorawan_eu.c: 835: for (i = 0; i < 5; i++ )
 12167  0031F2  6B7A               	clrf	UpdateCfList@i& (0+255),b
 12168  0031F4                     l1170:
 12169                           
 12170                           ; BSR set to: 0
 12171                           ;lorawan_eu.c: 836: {
 12172                           ;lorawan_eu.c: 837: frequency = 0;
 12173  0031F4  6B75               	clrf	UpdateCfList@frequency& (0+255),b
 12174  0031F6  6B76               	clrf	(UpdateCfList@frequency+1)& (0+255),b
 12175  0031F8  6B77               	clrf	(UpdateCfList@frequency+2)& (0+255),b
 12176  0031FA  6B78               	clrf	(UpdateCfList@frequency+3)& (0+255),b
 12177                           
 12178                           ; BSR set to: 0
 12179                           ;lorawan_eu.c: 838: memcpy (&frequency, joinAccept->members.cfList + 3*i, 3);
 12180  0031FC  0E75               	movlw	low UpdateCfList@frequency
 12181  0031FE  6F64               	movwf	memcpy@d1& (0+255),b
 12182  003200  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 12183  003202  517A               	movf	UpdateCfList@i& (0+255),w,b
 12184  003204  0D03               	mullw	3
 12185  003206  C070  F072         	movff	UpdateCfList@joinAccept,??_UpdateCfList
 12186  00320A  C071  F073         	movff	UpdateCfList@joinAccept+1,??_UpdateCfList+1
 12187  00320E  50F3               	movf	prodl,w,c
 12188  003210  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12189  003212  50F4               	movf	prodh,w,c
 12190  003214  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12191  003216  0E0D               	movlw	13
 12192  003218  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12193  00321A  0E00               	movlw	0
 12194  00321C  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12195  00321E  5172               	movf	??_UpdateCfList& (0+255),w,b
 12196  003220  6F66               	movwf	memcpy@s1& (0+255),b
 12197  003222  6B67               	clrf	(memcpy@s1+1)& (0+255),b
 12198  003224  6B69               	clrf	(memcpy@n+1)& (0+255),b
 12199  003226  0E03               	movlw	3
 12200  003228  6F68               	movwf	memcpy@n& (0+255),b
 12201  00322A  EC73  F034         	call	_memcpy	;wreg free
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;lorawan_eu.c: 839: frequency *= 100;
 12205  00322E  C075  F064         	movff	UpdateCfList@frequency,___lmul@multiplier
 12206  003232  C076  F065         	movff	UpdateCfList@frequency+1,___lmul@multiplier+1
 12207  003236  C077  F066         	movff	UpdateCfList@frequency+2,___lmul@multiplier+2
 12208  00323A  C078  F067         	movff	UpdateCfList@frequency+3,___lmul@multiplier+3
 12209  00323E  0E64               	movlw	100
 12210  003240  6F68               	movwf	___lmul@multiplicand& (0+255),b
 12211  003242  6B69               	clrf	(___lmul@multiplicand+1)& (0+255),b
 12212  003244  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 12213  003246  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 12214  003248  ECF7  F02E         	call	___lmul	;wreg free
 12215  00324C  C064  F075         	movff	?___lmul,UpdateCfList@frequency
 12216  003250  C065  F076         	movff	?___lmul+1,UpdateCfList@frequency+1
 12217  003254  C066  F077         	movff	?___lmul+2,UpdateCfList@frequency+2
 12218  003258  C067  F078         	movff	?___lmul+3,UpdateCfList@frequency+3
 12219                           
 12220                           ; BSR set to: 0
 12221                           ;lorawan_eu.c: 840: if (frequency != 0)
 12222  00325C  5175               	movf	UpdateCfList@frequency& (0+255),w,b
 12223  00325E  1176               	iorwf	(UpdateCfList@frequency+1)& (0+255),w,b
 12224  003260  1177               	iorwf	(UpdateCfList@frequency+2)& (0+255),w,b
 12225  003262  1178               	iorwf	(UpdateCfList@frequency+3)& (0+255),w,b
 12226  003264  E101 D094          	bz	l13848
 12227                           
 12228                           ; BSR set to: 0
 12229                           ;lorawan_eu.c: 841: {
 12230                           ;lorawan_eu.c: 842: if (ValidateFrequency (frequency) == OK)
 12231  003268  C075  F064         	movff	UpdateCfList@frequency,ValidateFrequency@frequencyNew
 12232  00326C  C076  F065         	movff	UpdateCfList@frequency+1,ValidateFrequency@frequencyNew+1
 12233  003270  C077  F066         	movff	UpdateCfList@frequency+2,ValidateFrequency@frequencyNew+2
 12234  003274  C078  F067         	movff	UpdateCfList@frequency+3,ValidateFrequency@frequencyNew+3
 12235  003278  ECEE  F033         	call	_ValidateFrequency	;wreg free
 12236  00327C  0900               	iorlw	0
 12237  00327E  E001 D08C          	bnz	l13850
 12238                           
 12239                           ; BSR set to: 0
 12240                           ;lorawan_eu.c: 843: {
 12241                           ;lorawan_eu.c: 844: Channels[i+channelIndex].frequency = frequency;
 12242  003282  517A               	movf	UpdateCfList@i& (0+255),w,b
 12243  003284  0D0E               	mullw	14
 12244  003286  0E00               	movlw	low _Channels
 12245  003288  6F72               	movwf	??_UpdateCfList& (0+255),b
 12246  00328A  0E04               	movlw	high _Channels
 12247  00328C  6F73               	movwf	(??_UpdateCfList+1)& (0+255),b
 12248  00328E  50F3               	movf	prodl,w,c
 12249  003290  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12250  003292  50F4               	movf	prodh,w,c
 12251  003294  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12252  003296  5179               	movf	UpdateCfList@channelIndex& (0+255),w,b
 12253  003298  0D0E               	mullw	14
 12254  00329A  50F3               	movf	prodl,w,c
 12255  00329C  2572               	addwf	??_UpdateCfList& (0+255),w,b
 12256  00329E  6ED9               	movwf	fsr2l,c
 12257  0032A0  50F4               	movf	prodh,w,c
 12258  0032A2  2173               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12259  0032A4  6EDA               	movwf	fsr2h,c
 12260  0032A6  C075  FFDE         	movff	UpdateCfList@frequency,postinc2
 12261  0032AA  C076  FFDE         	movff	UpdateCfList@frequency+1,postinc2
 12262  0032AE  C077  FFDE         	movff	UpdateCfList@frequency+2,postinc2
 12263  0032B2  C078  FFDE         	movff	UpdateCfList@frequency+3,postinc2
 12264                           
 12265                           ;lorawan_eu.c: 845: Channels[i+channelIndex].dataRange.max = 5;
 12266  0032B6  517A               	movf	UpdateCfList@i& (0+255),w,b
 12267  0032B8  0D0E               	mullw	14
 12268  0032BA  0E00               	movlw	low _Channels
 12269  0032BC  6F72               	movwf	??_UpdateCfList& (0+255),b
 12270  0032BE  0E04               	movlw	high _Channels
 12271  0032C0  6F73               	movwf	(??_UpdateCfList+1)& (0+255),b
 12272  0032C2  0E05               	movlw	5
 12273  0032C4  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12274  0032C6  0E00               	movlw	0
 12275  0032C8  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12276  0032CA  50F3               	movf	prodl,w,c
 12277  0032CC  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12278  0032CE  50F4               	movf	prodh,w,c
 12279  0032D0  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12280  0032D2  5179               	movf	UpdateCfList@channelIndex& (0+255),w,b
 12281  0032D4  0D0E               	mullw	14
 12282  0032D6  50F3               	movf	prodl,w,c
 12283  0032D8  2572               	addwf	??_UpdateCfList& (0+255),w,b
 12284  0032DA  6ED9               	movwf	fsr2l,c
 12285  0032DC  50F4               	movf	prodh,w,c
 12286  0032DE  2173               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12287  0032E0  6EDA               	movwf	fsr2h,c
 12288  0032E2  50DF               	movf	223,w,c
 12289  0032E4  0B0F               	andlw	-241
 12290  0032E6  0950               	iorlw	80
 12291  0032E8  6EDF               	movwf	223,c
 12292                           
 12293                           ;lorawan_eu.c: 846: Channels[i+channelIndex].dataRange.min = 0;
 12294  0032EA  0100               	movlb	0	; () banked
 12295  0032EC  517A               	movf	UpdateCfList@i& (0+255),w,b
 12296  0032EE  0D0E               	mullw	14
 12297  0032F0  0E00               	movlw	low _Channels
 12298  0032F2  6F72               	movwf	??_UpdateCfList& (0+255),b
 12299  0032F4  0E04               	movlw	high _Channels
 12300  0032F6  6F73               	movwf	(??_UpdateCfList+1)& (0+255),b
 12301  0032F8  0E05               	movlw	5
 12302  0032FA  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12303  0032FC  0E00               	movlw	0
 12304  0032FE  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12305  003300  50F3               	movf	prodl,w,c
 12306  003302  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12307  003304  50F4               	movf	prodh,w,c
 12308  003306  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12309  003308  5179               	movf	UpdateCfList@channelIndex& (0+255),w,b
 12310  00330A  0D0E               	mullw	14
 12311  00330C  50F3               	movf	prodl,w,c
 12312  00330E  2572               	addwf	??_UpdateCfList& (0+255),w,b
 12313  003310  6ED9               	movwf	fsr2l,c
 12314  003312  50F4               	movf	prodh,w,c
 12315  003314  2173               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12316  003316  6EDA               	movwf	fsr2h,c
 12317  003318  0EF0               	movlw	-16
 12318  00331A  16DF               	andwf	223,f,c
 12319                           
 12320                           ;lorawan_eu.c: 847: Channels[i+channelIndex].dutyCycle = 999;
 12321  00331C  517A               	movf	UpdateCfList@i& (0+255),w,b
 12322  00331E  0D0E               	mullw	14
 12323  003320  0E00               	movlw	low _Channels
 12324  003322  6F72               	movwf	??_UpdateCfList& (0+255),b
 12325  003324  0E04               	movlw	high _Channels
 12326  003326  6F73               	movwf	(??_UpdateCfList+1)& (0+255),b
 12327  003328  0E06               	movlw	6
 12328  00332A  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12329  00332C  0E00               	movlw	0
 12330  00332E  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12331  003330  50F3               	movf	prodl,w,c
 12332  003332  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12333  003334  50F4               	movf	prodh,w,c
 12334  003336  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12335  003338  5179               	movf	UpdateCfList@channelIndex& (0+255),w,b
 12336  00333A  0D0E               	mullw	14
 12337  00333C  50F3               	movf	prodl,w,c
 12338  00333E  2572               	addwf	??_UpdateCfList& (0+255),w,b
 12339  003340  6ED9               	movwf	fsr2l,c
 12340  003342  50F4               	movf	prodh,w,c
 12341  003344  2173               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12342  003346  6EDA               	movwf	fsr2h,c
 12343  003348  0EE7               	movlw	231
 12344  00334A  6EDE               	movwf	postinc2,c
 12345  00334C  0E03               	movlw	3
 12346  00334E  6EDD               	movwf	postdec2,c
 12347                           
 12348                           ;lorawan_eu.c: 848: Channels[i+channelIndex].parametersDefined = 0xFF;
 12349  003350  517A               	movf	UpdateCfList@i& (0+255),w,b
 12350  003352  0D0E               	mullw	14
 12351  003354  0E00               	movlw	low _Channels
 12352  003356  6F72               	movwf	??_UpdateCfList& (0+255),b
 12353  003358  0E04               	movlw	high _Channels
 12354  00335A  6F73               	movwf	(??_UpdateCfList+1)& (0+255),b
 12355  00335C  0E0D               	movlw	13
 12356  00335E  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12357  003360  0E00               	movlw	0
 12358  003362  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12359  003364  50F3               	movf	prodl,w,c
 12360  003366  2772               	addwf	??_UpdateCfList& (0+255),f,b
 12361  003368  50F4               	movf	prodh,w,c
 12362  00336A  2373               	addwfc	(??_UpdateCfList+1)& (0+255),f,b
 12363  00336C  5179               	movf	UpdateCfList@channelIndex& (0+255),w,b
 12364  00336E  0D0E               	mullw	14
 12365  003370  50F3               	movf	prodl,w,c
 12366  003372  2572               	addwf	??_UpdateCfList& (0+255),w,b
 12367  003374  6ED9               	movwf	fsr2l,c
 12368  003376  50F4               	movf	prodh,w,c
 12369  003378  2173               	addwfc	(??_UpdateCfList+1)& (0+255),w,b
 12370  00337A  6EDA               	movwf	fsr2h,c
 12371  00337C  68DF               	setf	indf2,c
 12372                           
 12373                           ; BSR set to: 0
 12374                           ;lorawan_eu.c: 849: LORAWAN_SetChannelIdStatus(i+channelIndex, 1);
 12375  00337E  0E01               	movlw	1
 12376  003380  6F68               	movwf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 12377  003382  517A               	movf	UpdateCfList@i& (0+255),w,b
 12378  003384  2579               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 12379  003386  ECDF  F037         	call	_LORAWAN_SetChannelIdStatus
 12380                           
 12381                           ;lorawan_eu.c: 850: loRa.macStatus.channelsModified = 1;
 12382  00338A  0102               	movlb	2	; () banked
 12383  00338C  8703               	bsf	(_loRa+3)& (0+255),3,b
 12384  00338E  D005               	goto	l13850
 12385  003390                     l13848:
 12386                           
 12387                           ; BSR set to: 0
 12388                           ;lorawan_eu.c: 853: else
 12389                           ;lorawan_eu.c: 854: {
 12390                           ;lorawan_eu.c: 855: LORAWAN_SetChannelIdStatus(i+channelIndex, 0);
 12391  003390  6B68               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 12392  003392  517A               	movf	UpdateCfList@i& (0+255),w,b
 12393  003394  2579               	addwf	UpdateCfList@channelIndex& (0+255),w,b
 12394  003396  ECDF  F037         	call	_LORAWAN_SetChannelIdStatus
 12395  00339A                     l13850:
 12396  00339A  0100               	movlb	0	; () banked
 12397  00339C  2B7A               	incf	UpdateCfList@i& (0+255),f,b
 12398                           
 12399                           ; BSR set to: 0
 12400  00339E  0E04               	movlw	4
 12401  0033A0  657A               	cpfsgt	UpdateCfList@i& (0+255),b
 12402  0033A2  D728               	goto	l1170
 12403                           
 12404                           ; BSR set to: 0
 12405                           ;lorawan_eu.c: 856: }
 12406                           ;lorawan_eu.c: 857: }
 12407                           ;lorawan_eu.c: 859: loRa.macStatus.channelsModified = 1;
 12408  0033A4  0102               	movlb	2	; () banked
 12409  0033A6  8703               	bsf	(_loRa+3)& (0+255),3,b
 12410  0033A8  0C04               	retlw	4	;funcret
 12411  0033AA                     __end_of_UpdateCfList:
 12412                           	opt stack 0
 12413                           tosu	equ	0xFFF
 12414                           tosh	equ	0xFFE
 12415                           tosl	equ	0xFFD
 12416                           pclath	equ	0xFFA
 12417                           tblptru	equ	0xFF8
 12418                           tblptrh	equ	0xFF7
 12419                           tblptrl	equ	0xFF6
 12420                           tablat	equ	0xFF5
 12421                           prodh	equ	0xFF4
 12422                           prodl	equ	0xFF3
 12423                           intcon	equ	0xFF2
 12424                           postinc0	equ	0xFEE
 12425                           wreg	equ	0xFE8
 12426                           postinc1	equ	0xFE6
 12427                           postdec1	equ	0xFE5
 12428                           plusw1	equ	0xFE3
 12429                           fsr1h	equ	0xFE2
 12430                           fsr1l	equ	0xFE1
 12431                           indf2	equ	0xFDF
 12432                           postinc2	equ	0xFDE
 12433                           postdec2	equ	0xFDD
 12434                           fsr2h	equ	0xFDA
 12435                           fsr2l	equ	0xFD9
 12436                           status	equ	0xFD8
 12437                           
 12438 ;; *************** function _StartReTxTimer *****************
 12439 ;; Defined at:
 12440 ;;		line 902 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 12441 ;; Parameters:    Size  Location     Type
 12442 ;;		None
 12443 ;; Auto vars:     Size  Location     Type
 12444 ;;  minim           4   56[BANK0 ] unsigned long 
 12445 ;;  i               1   60[BANK0 ] unsigned char 
 12446 ;; Return value:  Size  Location     Type
 12447 ;;                  1    wreg      void 
 12448 ;; Registers used:
 12449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12450 ;; Tracked objects:
 12451 ;;		On entry : E/0
 12452 ;;		On exit  : F/0
 12453 ;;		Unchanged: 0/0
 12454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12455 ;;      Params:         0       0       0       0       0       0       0       0       0
 12456 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12457 ;;      Temps:          0       4       0       0       0       0       0       0       0
 12458 ;;      Totals:         0       9       0       0       0       0       0       0       0
 12459 ;;Total ram usage:        9 bytes
 12460 ;; Hardware stack levels used:    1
 12461 ;; Hardware stack levels required when called:   11
 12462 ;; This function calls:
 12463 ;;		_SwTimerSetTimeout
 12464 ;;		_SwTimerStart
 12465 ;;		___lldiv
 12466 ;; This function is called by:
 12467 ;;		_LORAWAN_RxDone
 12468 ;; This function uses a non-reentrant model
 12469 ;;
 12470                           
 12471                           	psect	text60
 12472  004420                     __ptext60:
 12473                           	opt stack 0
 12474  004420                     _StartReTxTimer:
 12475                           	opt stack 15
 12476                           
 12477                           ;lorawan_eu.c: 904: uint8_t i;
 12478                           ;lorawan_eu.c: 905: uint32_t minim = (4294967295UL);
 12479                           
 12480                           ;incstack = 0
 12481  004420  0100               	movlb	0	; () banked
 12482  004422  6998               	setf	StartReTxTimer@minim& (0+255),b
 12483  004424  6999               	setf	(StartReTxTimer@minim+1)& (0+255),b
 12484  004426  699A               	setf	(StartReTxTimer@minim+2)& (0+255),b
 12485  004428  699B               	setf	(StartReTxTimer@minim+3)& (0+255),b
 12486                           
 12487                           ;lorawan_eu.c: 907: for (i = 0; i <= loRa.maxChannels; i++)
 12488  00442A  6B9C               	clrf	StartReTxTimer@i& (0+255),b
 12489  00442C  D05B               	goto	l13878
 12490  00442E                     l13864:
 12491                           
 12492                           ; BSR set to: 2
 12493                           ;lorawan_eu.c: 908: {
 12494                           ;lorawan_eu.c: 909: if ( (Channels[i].status == 1) && (Channels[i].channelTimer != 0) &&
      +                           (Channels[i].channelTimer <= minim) && (loRa.currentDataRate >= Channels[i].dataRange.m
      +                          in) && (loRa.currentDataRate <= Channels[i].dataRange.max) )
 12495  00442E  0100               	movlb	0	; () banked
 12496  004430  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12497  004432  0D0E               	mullw	14
 12498  004434  0E04               	movlw	low (_Channels+4)
 12499  004436  24F3               	addwf	prodl,w,c
 12500  004438  6ED9               	movwf	fsr2l,c
 12501  00443A  0E04               	movlw	high (_Channels+4)
 12502  00443C  20F4               	addwfc	prodh,w,c
 12503  00443E  6EDA               	movwf	fsr2h,c
 12504  004440  04DE               	decf	postinc2,w,c
 12505  004442  E14E               	bnz	l13876
 12506                           
 12507                           ; BSR set to: 0
 12508  004444  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12509  004446  0D0E               	mullw	14
 12510  004448  0E08               	movlw	low (_Channels+8)
 12511  00444A  24F3               	addwf	prodl,w,c
 12512  00444C  6ED9               	movwf	fsr2l,c
 12513  00444E  0E04               	movlw	high (_Channels+8)
 12514  004450  20F4               	addwfc	prodh,w,c
 12515  004452  6EDA               	movwf	fsr2h,c
 12516  004454  50DE               	movf	postinc2,w,c
 12517  004456  10DE               	iorwf	postinc2,w,c
 12518  004458  10DE               	iorwf	postinc2,w,c
 12519  00445A  10DE               	iorwf	postinc2,w,c
 12520  00445C  E041               	bz	l13876
 12521                           
 12522                           ; BSR set to: 0
 12523  00445E  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12524  004460  0D0E               	mullw	14
 12525  004462  0E08               	movlw	low (_Channels+8)
 12526  004464  24F3               	addwf	prodl,w,c
 12527  004466  6ED9               	movwf	fsr2l,c
 12528  004468  0E04               	movlw	high (_Channels+8)
 12529  00446A  20F4               	addwfc	prodh,w,c
 12530  00446C  6EDA               	movwf	fsr2h,c
 12531  00446E  50DE               	movf	postinc2,w,c
 12532  004470  5D98               	subwf	StartReTxTimer@minim& (0+255),w,b
 12533  004472  50DE               	movf	postinc2,w,c
 12534  004474  5999               	subwfb	(StartReTxTimer@minim+1)& (0+255),w,b
 12535  004476  50DE               	movf	postinc2,w,c
 12536  004478  599A               	subwfb	(StartReTxTimer@minim+2)& (0+255),w,b
 12537  00447A  50DE               	movf	postinc2,w,c
 12538  00447C  599B               	subwfb	(StartReTxTimer@minim+3)& (0+255),w,b
 12539  00447E  E330               	bnc	l13876
 12540                           
 12541                           ; BSR set to: 0
 12542  004480  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12543  004482  0D0E               	mullw	14
 12544  004484  0E05               	movlw	low (_Channels+5)
 12545  004486  24F3               	addwf	prodl,w,c
 12546  004488  6ED9               	movwf	fsr2l,c
 12547  00448A  0E04               	movlw	high (_Channels+5)
 12548  00448C  20F4               	addwfc	prodh,w,c
 12549  00448E  6EDA               	movwf	fsr2h,c
 12550  004490  50DF               	movf	223,w,c
 12551  004492  0B0F               	andlw	15
 12552  004494  6F94               	movwf	??_StartReTxTimer& (0+255),b
 12553  004496  5194               	movf	??_StartReTxTimer& (0+255),w,b
 12554  004498  0102               	movlb	2	; () banked
 12555  00449A  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 12556  00449C  E321               	bnc	l13876
 12557                           
 12558                           ; BSR set to: 2
 12559  00449E  0100               	movlb	0	; () banked
 12560  0044A0  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12561  0044A2  0D0E               	mullw	14
 12562  0044A4  0E05               	movlw	low (_Channels+5)
 12563  0044A6  24F3               	addwf	prodl,w,c
 12564  0044A8  6ED9               	movwf	fsr2l,c
 12565  0044AA  0E04               	movlw	high (_Channels+5)
 12566  0044AC  20F4               	addwfc	prodh,w,c
 12567  0044AE  6EDA               	movwf	fsr2h,c
 12568  0044B0  38DF               	swapf	223,w,c
 12569  0044B2  0B0F               	andlw	15
 12570  0044B4  6F94               	movwf	??_StartReTxTimer& (0+255),b
 12571  0044B6  0102               	movlb	2	; () banked
 12572  0044B8  51DF               	movf	(_loRa+223)& (0+255),w,b
 12573  0044BA  0100               	movlb	0	; () banked
 12574  0044BC  5D94               	subwf	??_StartReTxTimer& (0+255),w,b
 12575  0044BE  E310               	bnc	l13876
 12576                           
 12577                           ; BSR set to: 0
 12578                           ;lorawan_eu.c: 910: {
 12579                           ;lorawan_eu.c: 911: minim = Channels[i].channelTimer;
 12580  0044C0  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12581  0044C2  0D0E               	mullw	14
 12582  0044C4  0E08               	movlw	low (_Channels+8)
 12583  0044C6  24F3               	addwf	prodl,w,c
 12584  0044C8  6ED9               	movwf	fsr2l,c
 12585  0044CA  0E04               	movlw	high (_Channels+8)
 12586  0044CC  20F4               	addwfc	prodh,w,c
 12587  0044CE  6EDA               	movwf	fsr2h,c
 12588  0044D0  CFDE F098          	movff	postinc2,StartReTxTimer@minim
 12589  0044D4  CFDE F099          	movff	postinc2,StartReTxTimer@minim+1
 12590  0044D8  CFDE F09A          	movff	postinc2,StartReTxTimer@minim+2
 12591  0044DC  CFDE F09B          	movff	postinc2,StartReTxTimer@minim+3
 12592  0044E0                     l13876:
 12593  0044E0  0100               	movlb	0	; () banked
 12594  0044E2  2B9C               	incf	StartReTxTimer@i& (0+255),f,b
 12595  0044E4                     l13878:
 12596                           
 12597                           ; BSR set to: 0
 12598  0044E4  519C               	movf	StartReTxTimer@i& (0+255),w,b
 12599  0044E6  0102               	movlb	2	; () banked
 12600  0044E8  5DED               	subwf	(_loRa+237)& (0+255),w,b
 12601  0044EA  E2A1               	bc	l13864
 12602                           
 12603                           ; BSR set to: 2
 12604                           ;lorawan_eu.c: 912: }
 12605                           ;lorawan_eu.c: 913: }
 12606                           ;lorawan_eu.c: 914: loRa.macStatus.macState = RETRANSMISSION_DELAY;
 12607  0044EC  5102               	movf	(_loRa+2)& (0+255),w,b
 12608  0044EE  0BF0               	andlw	-16
 12609  0044F0  0906               	iorlw	6
 12610  0044F2  6F02               	movwf	(_loRa+2)& (0+255),b
 12611                           
 12612                           ; BSR set to: 2
 12613                           ;lorawan_eu.c: 915: SwTimerSetTimeout (loRa.automaticReplyTimerId, ( (((uint32_t)(minim)
      +                          ) << (12)) / 125UL ) );
 12614  0044F4  C098  F094         	movff	StartReTxTimer@minim,??_StartReTxTimer
 12615  0044F8  C099  F095         	movff	StartReTxTimer@minim+1,??_StartReTxTimer+1
 12616  0044FC  C09A  F096         	movff	StartReTxTimer@minim+2,??_StartReTxTimer+2
 12617  004500  C09B  F097         	movff	StartReTxTimer@minim+3,??_StartReTxTimer+3
 12618  004504  0E0C               	movlw	12
 12619  004506                     u15535:
 12620  004506  90D8               	bcf	status,0,c
 12621  004508  0100               	movlb	0	; () banked
 12622  00450A  3794               	rlcf	??_StartReTxTimer& (0+255),f,b
 12623  00450C  3795               	rlcf	(??_StartReTxTimer+1)& (0+255),f,b
 12624  00450E  3796               	rlcf	(??_StartReTxTimer+2)& (0+255),f,b
 12625  004510  3797               	rlcf	(??_StartReTxTimer+3)& (0+255),f,b
 12626  004512  2EE8               	decfsz	wreg,f,c
 12627  004514  D7F8               	goto	u15535
 12628  004516  C094  F064         	movff	??_StartReTxTimer,___lldiv@dividend
 12629  00451A  C095  F065         	movff	??_StartReTxTimer+1,___lldiv@dividend+1
 12630  00451E  C096  F066         	movff	??_StartReTxTimer+2,___lldiv@dividend+2
 12631  004522  C097  F067         	movff	??_StartReTxTimer+3,___lldiv@dividend+3
 12632  004526  0E7D               	movlw	125
 12633  004528  6F68               	movwf	___lldiv@divisor& (0+255),b
 12634  00452A  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 12635  00452C  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 12636  00452E  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 12637  004530  ECB3  F030         	call	___lldiv	;wreg free
 12638  004534  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 12639  004538  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 12640  00453C  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 12641  004540  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 12642  004544  0102               	movlb	2	; () banked
 12643  004546  51E6               	movf	(_loRa+230)& (0+255),w,b
 12644  004548  ECCA  F036         	call	_SwTimerSetTimeout
 12645                           
 12646                           ; BSR set to: 0
 12647                           ;lorawan_eu.c: 916: SwTimerStart (loRa.automaticReplyTimerId);
 12648  00454C  0102               	movlb	2	; () banked
 12649  00454E  51E6               	movf	(_loRa+230)& (0+255),w,b
 12650  004550  EFB3  F02E         	goto	_SwTimerStart
 12651  004554                     __end_of_StartReTxTimer:
 12652                           	opt stack 0
 12653                           tosu	equ	0xFFF
 12654                           tosh	equ	0xFFE
 12655                           tosl	equ	0xFFD
 12656                           pclath	equ	0xFFA
 12657                           tblptru	equ	0xFF8
 12658                           tblptrh	equ	0xFF7
 12659                           tblptrl	equ	0xFF6
 12660                           tablat	equ	0xFF5
 12661                           prodh	equ	0xFF4
 12662                           prodl	equ	0xFF3
 12663                           intcon	equ	0xFF2
 12664                           postinc0	equ	0xFEE
 12665                           wreg	equ	0xFE8
 12666                           postinc1	equ	0xFE6
 12667                           postdec1	equ	0xFE5
 12668                           plusw1	equ	0xFE3
 12669                           fsr1h	equ	0xFE2
 12670                           fsr1l	equ	0xFE1
 12671                           indf2	equ	0xFDF
 12672                           postinc2	equ	0xFDE
 12673                           postdec2	equ	0xFDD
 12674                           fsr2h	equ	0xFDA
 12675                           fsr2l	equ	0xFD9
 12676                           status	equ	0xFD8
 12677                           
 12678 ;; *************** function _SetReceptionNotOkState *****************
 12679 ;; Defined at:
 12680 ;;		line 1997 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 12681 ;; Parameters:    Size  Location     Type
 12682 ;;		None
 12683 ;; Auto vars:     Size  Location     Type
 12684 ;;		None
 12685 ;; Return value:  Size  Location     Type
 12686 ;;                  1    wreg      void 
 12687 ;; Registers used:
 12688 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12689 ;; Tracked objects:
 12690 ;;		On entry : E/2
 12691 ;;		On exit  : C/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12694 ;;      Params:         0       0       0       0       0       0       0       0       0
 12695 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12696 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12697 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12698 ;;Total ram usage:        0 bytes
 12699 ;; Hardware stack levels used:    1
 12700 ;; Hardware stack levels required when called:   14
 12701 ;; This function calls:
 12702 ;;		_LORAWAN_EnterContinuousReceive
 12703 ;;		_RxDataDone
 12704 ;; This function is called by:
 12705 ;;		_LORAWAN_RxDone
 12706 ;; This function uses a non-reentrant model
 12707 ;;
 12708                           
 12709                           	psect	text61
 12710  006394                     __ptext61:
 12711                           	opt stack 0
 12712  006394                     _SetReceptionNotOkState:
 12713                           	opt stack 12
 12714                           
 12715                           ;lorawan.c: 1999: if ( (loRa.macStatus.macState == RX2_OPEN) || ( (loRa.macStatus.macSta
      +                          te == RX1_OPEN) && (loRa.rx2DelayExpired) ) )
 12716                           
 12717                           ; BSR set to: 0
 12718                           ;incstack = 0
 12719  006394  0102               	movlb	2	; () banked
 12720  006396  5102               	movf	(_loRa+2)& (0+255),w,b
 12721  006398  0B0F               	andlw	15
 12722  00639A  0A05               	xorlw	5
 12723  00639C  E006               	bz	l2328
 12724                           
 12725                           ; BSR set to: 2
 12726  00639E  5102               	movf	(_loRa+2)& (0+255),w,b
 12727  0063A0  0B0F               	andlw	15
 12728  0063A2  0A03               	xorlw	3
 12729  0063A4  E122               	bnz	l14042
 12730                           
 12731                           ; BSR set to: 2
 12732  0063A6  51F1               	movf	(_loRa+241)& (0+255),w,b
 12733  0063A8  E020               	bz	l14042
 12734  0063AA                     l2328:
 12735                           
 12736                           ; BSR set to: 2
 12737                           ;lorawan.c: 2000: {
 12738                           ;lorawan.c: 2001: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 12739  0063AA  9100               	bcf	_loRa& (0+255),0,b
 12740                           
 12741                           ; BSR set to: 2
 12742                           ;lorawan.c: 2002: loRa.macStatus.macState = IDLE;
 12743  0063AC  0EF0               	movlw	-16
 12744  0063AE  1702               	andwf	(_loRa+2)& (0+255),f,b
 12745                           
 12746                           ;lorawan.c: 2004: if ((loRa.deviceClass == CLASS_A) && (rxPayload.RxAppData != (0)))
 12747  0063B0  5112               	movf	(_loRa+18)& (0+255),w,b
 12748  0063B2  E119               	bnz	l14040
 12749                           
 12750                           ; BSR set to: 2
 12751  0063B4  0101               	movlb	1	; () banked
 12752  0063B6  516E               	movf	_rxPayload& (0+255),w,b
 12753  0063B8  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 12754  0063BA  E015               	bz	l14040
 12755                           
 12756                           ; BSR set to: 1
 12757                           ;lorawan.c: 2005: {
 12758                           ;lorawan.c: 2006: loRa.lorawanMacStatus.synchronization = 0;
 12759  0063BC  0102               	movlb	2	; () banked
 12760  0063BE  9B00               	bcf	_loRa& (0+255),5,b
 12761                           
 12762                           ; BSR set to: 2
 12763                           ;lorawan.c: 2007: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 12764  0063C0  0E00               	movlw	0
 12765  0063C2  0100               	movlb	0	; () banked
 12766  0063C4  6F64               	movwf	RxDataDone@pData& (0+255),b
 12767  0063C6  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 12768  0063C8  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 12769  0063CA  6F67               	movwf	RxDataDone@status& (0+255),b
 12770  0063CC  D801               	call	u15858
 12771  0063CE  D00B               	goto	l14040
 12772  0063D0                     u15858:
 12773  0063D0  0005               	push	
 12774  0063D2  0101               	movlb	1	; () banked
 12775  0063D4  6EFA               	movwf	pclath,c
 12776  0063D6  516E               	movf	_rxPayload& (0+255),w,b
 12777  0063D8  6EFD               	movwf	tosl,c
 12778  0063DA  516F               	movf	(_rxPayload+1)& (0+255),w,b
 12779  0063DC  6EFE               	movwf	tosh,c
 12780  0063DE  50F8               	movf	tblptru,w,c
 12781  0063E0  6EFF               	movwf	tosu,c
 12782  0063E2  50FA               	movf	pclath,w,c
 12783  0063E4  0012               	return		;indir
 12784  0063E6                     l14040:
 12785                           
 12786                           ;lorawan.c: 2008: }
 12787                           ;lorawan.c: 2009: loRa.macStatus.rxDone = 0;
 12788  0063E6  0102               	movlb	2	; () banked
 12789  0063E8  9303               	bcf	(_loRa+3)& (0+255),1,b
 12790  0063EA                     l14042:
 12791                           
 12792                           ; BSR set to: 2
 12793                           ;lorawan.c: 2010: }
 12794                           ;lorawan.c: 2012: if (loRa.deviceClass == CLASS_C)
 12795  0063EA  0E02               	movlw	2
 12796  0063EC  1912               	xorwf	(_loRa+18)& (0+255),w,b
 12797  0063EE  A4D8               	btfss	status,2,c
 12798  0063F0  0012               	return	
 12799                           
 12800                           ; BSR set to: 2
 12801                           ;lorawan.c: 2013: {
 12802                           ;lorawan.c: 2014: loRa.macStatus.macState = CLASS_C_RX2_2_OPEN;
 12803  0063F2  5102               	movf	(_loRa+2)& (0+255),w,b
 12804  0063F4  0BF0               	andlw	-16
 12805  0063F6  0909               	iorlw	9
 12806  0063F8  6F02               	movwf	(_loRa+2)& (0+255),b
 12807                           
 12808                           ; BSR set to: 2
 12809                           ;lorawan.c: 2015: LORAWAN_EnterContinuousReceive();
 12810  0063FA  EFFF  F031         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 12811  0063FE                     __end_of_SetReceptionNotOkState:
 12812                           	opt stack 0
 12813                           tosu	equ	0xFFF
 12814                           tosh	equ	0xFFE
 12815                           tosl	equ	0xFFD
 12816                           pclath	equ	0xFFA
 12817                           tblptru	equ	0xFF8
 12818                           tblptrh	equ	0xFF7
 12819                           tblptrl	equ	0xFF6
 12820                           tablat	equ	0xFF5
 12821                           prodh	equ	0xFF4
 12822                           prodl	equ	0xFF3
 12823                           intcon	equ	0xFF2
 12824                           postinc0	equ	0xFEE
 12825                           wreg	equ	0xFE8
 12826                           postinc1	equ	0xFE6
 12827                           postdec1	equ	0xFE5
 12828                           plusw1	equ	0xFE3
 12829                           fsr1h	equ	0xFE2
 12830                           fsr1l	equ	0xFE1
 12831                           indf2	equ	0xFDF
 12832                           postinc2	equ	0xFDE
 12833                           postdec2	equ	0xFDD
 12834                           fsr2h	equ	0xFDA
 12835                           fsr2l	equ	0xFD9
 12836                           status	equ	0xFD8
 12837                           
 12838 ;; *************** function _SetJoinFailState *****************
 12839 ;; Defined at:
 12840 ;;		line 1104 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 12841 ;; Parameters:    Size  Location     Type
 12842 ;;		None
 12843 ;; Auto vars:     Size  Location     Type
 12844 ;;		None
 12845 ;; Return value:  Size  Location     Type
 12846 ;;                  1    wreg      void 
 12847 ;; Registers used:
 12848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
 12849 ;; Tracked objects:
 12850 ;;		On entry : F/2
 12851 ;;		On exit  : F/1
 12852 ;;		Unchanged: 0/0
 12853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12854 ;;      Params:         0       0       0       0       0       0       0       0       0
 12855 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12856 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12857 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12858 ;;Total ram usage:        0 bytes
 12859 ;; Hardware stack levels used:    1
 12860 ;; Hardware stack levels required when called:    8
 12861 ;; This function calls:
 12862 ;;		_RxJoinResponse
 12863 ;; This function is called by:
 12864 ;;		_LORAWAN_RxTimeout
 12865 ;;		_LORAWAN_RxDone
 12866 ;; This function uses a non-reentrant model
 12867 ;;
 12868                           
 12869                           	psect	text62
 12870  00726C                     __ptext62:
 12871                           	opt stack 0
 12872  00726C                     _SetJoinFailState:
 12873                           	opt stack 18
 12874                           
 12875                           ; BSR set to: 2
 12876                           ;lorawan.c: 1106: loRa.macStatus.networkJoined = 0;
 12877                           
 12878                           ;incstack = 0
 12879  00726C  9902               	bcf	(_loRa+2)& (0+255),4,b
 12880                           
 12881                           ;lorawan.c: 1107: loRa.lorawanMacStatus.joining = 0;
 12882  00726E  9500               	bcf	_loRa& (0+255),2,b
 12883                           
 12884                           ; BSR set to: 2
 12885                           ;lorawan.c: 1108: loRa.macStatus.macState = IDLE;
 12886  007270  0EF0               	movlw	-16
 12887  007272  1702               	andwf	(_loRa+2)& (0+255),f,b
 12888                           
 12889                           ; BSR set to: 2
 12890                           ;lorawan.c: 1109: if (rxPayload.RxJoinResponse != (0))
 12891  007274  0101               	movlb	1	; () banked
 12892  007276  5170               	movf	(_rxPayload+2)& (0+255),w,b
 12893  007278  1171               	iorwf	(_rxPayload+3)& (0+255),w,b
 12894  00727A  B4D8               	btfsc	status,2,c
 12895  00727C  0012               	return	
 12896                           
 12897                           ; BSR set to: 1
 12898                           ;lorawan.c: 1110: {
 12899                           ;lorawan.c: 1111: rxPayload.RxJoinResponse(0);
 12900  00727E  EE21  F070         	lfsr	2,_rxPayload+2
 12901  007282  0005               	push	
 12902  007284  6EFA               	movwf	pclath,c
 12903  007286  50DE               	movf	postinc2,w,c
 12904  007288  6EFD               	movwf	tosl,c
 12905  00728A  50DE               	movf	postinc2,w,c
 12906  00728C  6EFE               	movwf	tosh,c
 12907  00728E  50F8               	movf	tblptru,w,c
 12908  007290  6EFF               	movwf	tosu,c
 12909  007292  50FA               	movf	pclath,w,c
 12910  007294  0C00               	retlw	0	;indir
 12911  007296                     __end_of_SetJoinFailState:
 12912                           	opt stack 0
 12913                           tosu	equ	0xFFF
 12914                           tosh	equ	0xFFE
 12915                           tosl	equ	0xFFD
 12916                           pclath	equ	0xFFA
 12917                           tblptru	equ	0xFF8
 12918                           tblptrh	equ	0xFF7
 12919                           tblptrl	equ	0xFF6
 12920                           tablat	equ	0xFF5
 12921                           prodh	equ	0xFF4
 12922                           prodl	equ	0xFF3
 12923                           intcon	equ	0xFF2
 12924                           postinc0	equ	0xFEE
 12925                           wreg	equ	0xFE8
 12926                           postinc1	equ	0xFE6
 12927                           postdec1	equ	0xFE5
 12928                           plusw1	equ	0xFE3
 12929                           fsr1h	equ	0xFE2
 12930                           fsr1l	equ	0xFE1
 12931                           indf2	equ	0xFDF
 12932                           postinc2	equ	0xFDE
 12933                           postdec2	equ	0xFDD
 12934                           fsr2h	equ	0xFDA
 12935                           fsr2l	equ	0xFD9
 12936                           status	equ	0xFD8
 12937                           
 12938 ;; *************** function _RxJoinResponse *****************
 12939 ;; Defined at:
 12940 ;;		line 129 in file "main.c"
 12941 ;; Parameters:    Size  Location     Type
 12942 ;;  status          1    wreg     unsigned char 
 12943 ;; Auto vars:     Size  Location     Type
 12944 ;;  status          1    0[COMRAM] unsigned char 
 12945 ;; Return value:  Size  Location     Type
 12946 ;;                  1    wreg      void 
 12947 ;; Registers used:
 12948 ;;		wreg, status,2
 12949 ;; Tracked objects:
 12950 ;;		On entry : F/1
 12951 ;;		On exit  : F/1
 12952 ;;		Unchanged: 0/0
 12953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12954 ;;      Params:         0       0       0       0       0       0       0       0       0
 12955 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12956 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12957 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12958 ;;Total ram usage:        0 bytes
 12959 ;; Hardware stack levels used:    1
 12960 ;; Hardware stack levels required when called:    7
 12961 ;; This function calls:
 12962 ;;		Nothing
 12963 ;; This function is called by:
 12964 ;;		_main
 12965 ;;		_SetJoinFailState
 12966 ;;		_UpdateJoinSuccessState
 12967 ;; This function uses a non-reentrant model
 12968 ;;
 12969                           
 12970                           	psect	text63
 12971  0078A8                     __ptext63:
 12972                           	opt stack 0
 12973  0078A8                     _RxJoinResponse:
 12974                           	opt stack 20
 12975                           
 12976                           ; BSR set to: 1
 12977                           ;main.c: 131: JoinedServer = 1;
 12978                           
 12979                           ; BSR set to: 1
 12980                           ;incstack = 0
 12981  0078A8  0E01               	movlw	1
 12982  0078AA  6F72               	movwf	_JoinedServer& (0+255),b
 12983                           
 12984                           ; BSR set to: 1
 12985  0078AC  0C01               	retlw	1	;funcret
 12986  0078AE                     __end_of_RxJoinResponse:
 12987                           	opt stack 0
 12988                           tosu	equ	0xFFF
 12989                           tosh	equ	0xFFE
 12990                           tosl	equ	0xFFD
 12991                           pclath	equ	0xFFA
 12992                           tblptru	equ	0xFF8
 12993                           tblptrh	equ	0xFF7
 12994                           tblptrl	equ	0xFF6
 12995                           tablat	equ	0xFF5
 12996                           prodh	equ	0xFF4
 12997                           prodl	equ	0xFF3
 12998                           intcon	equ	0xFF2
 12999                           postinc0	equ	0xFEE
 13000                           wreg	equ	0xFE8
 13001                           postinc1	equ	0xFE6
 13002                           postdec1	equ	0xFE5
 13003                           plusw1	equ	0xFE3
 13004                           fsr1h	equ	0xFE2
 13005                           fsr1l	equ	0xFE1
 13006                           indf2	equ	0xFDF
 13007                           postinc2	equ	0xFDE
 13008                           postdec2	equ	0xFDD
 13009                           fsr2h	equ	0xFDA
 13010                           fsr2l	equ	0xFD9
 13011                           status	equ	0xFD8
 13012                           
 13013 ;; *************** function _MacExecuteCommands *****************
 13014 ;; Defined at:
 13015 ;;		line 1575 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13016 ;; Parameters:    Size  Location     Type
 13017 ;;  buffer          2   26[BANK0 ] PTR unsigned char 
 13018 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 13019 ;;  fOptsLen        1   28[BANK0 ] unsigned char 
 13020 ;; Auto vars:     Size  Location     Type
 13021 ;;  ptr             2   32[BANK0 ] PTR unsigned char 
 13022 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 13023 ;;  done            1   31[BANK0 ] unsigned char 
 13024 ;; Return value:  Size  Location     Type
 13025 ;;                  2   26[BANK0 ] PTR unsigned char 
 13026 ;; Registers used:
 13027 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13028 ;; Tracked objects:
 13029 ;;		On entry : F/0
 13030 ;;		On exit  : F/0
 13031 ;;		Unchanged: 0/0
 13032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13033 ;;      Params:         0       3       0       0       0       0       0       0       0
 13034 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13035 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13036 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13037 ;;Total ram usage:        8 bytes
 13038 ;; Hardware stack levels used:    1
 13039 ;; Hardware stack levels required when called:   11
 13040 ;; This function calls:
 13041 ;;		_ExecuteDevStatus
 13042 ;;		_ExecuteDutyCycle
 13043 ;;		_ExecuteLinkAdr
 13044 ;;		_ExecuteLinkCheck
 13045 ;;		_ExecuteNewChannel
 13046 ;;		_ExecuteRxParamSetupReq
 13047 ;;		_ExecuteRxTimingSetup
 13048 ;; This function is called by:
 13049 ;;		_LORAWAN_RxDone
 13050 ;; This function uses a non-reentrant model
 13051 ;;
 13052                           
 13053                           	psect	text64
 13054  002E04                     __ptext64:
 13055                           	opt stack 0
 13056  002E04                     _MacExecuteCommands:
 13057                           	opt stack 15
 13058                           
 13059                           ; BSR set to: 0
 13060                           ;lorawan.c: 1577: bool done = 0;
 13061                           
 13062                           ; BSR set to: 1
 13063                           ;incstack = 0
 13064  002E04  6B7F               	clrf	MacExecuteCommands@done& (0+255),b
 13065                           
 13066                           ; BSR set to: 0
 13067                           ;lorawan.c: 1578: uint8_t *ptr;
 13068                           ;lorawan.c: 1579: ptr = buffer;
 13069  002E06  C07A  F080         	movff	MacExecuteCommands@buffer,MacExecuteCommands@ptr
 13070  002E0A  C07B  F081         	movff	MacExecuteCommands@buffer+1,MacExecuteCommands@ptr+1
 13071                           
 13072                           ;lorawan.c: 1580: while ( (ptr < ( buffer + fOptsLen )) && (done == 0) )
 13073  002E0E  D0DE               	goto	l14104
 13074  002E10                     l14068:
 13075                           
 13076                           ; BSR set to: 0
 13077                           ;lorawan.c: 1581: {
 13078                           ;lorawan.c: 1583: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 13079  002E10  0102               	movlb	2	; () banked
 13080  002E12  51A7               	movf	(_loRa+167)& (0+255),w,b
 13081  002E14  0D02               	mullw	2
 13082  002E16  0EA9               	movlw	low (_loRa+169)
 13083  002E18  24F3               	addwf	prodl,w,c
 13084  002E1A  6ED9               	movwf	fsr2l,c
 13085  002E1C  0E02               	movlw	high (_loRa+169)
 13086  002E1E  20F4               	addwfc	prodh,w,c
 13087  002E20  6EDA               	movwf	fsr2h,c
 13088  002E22  90DF               	bcf	indf2,0,c
 13089                           
 13090                           ;lorawan.c: 1584: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 13091  002E24  51A7               	movf	(_loRa+167)& (0+255),w,b
 13092  002E26  0D02               	mullw	2
 13093  002E28  0EA9               	movlw	low (_loRa+169)
 13094  002E2A  24F3               	addwf	prodl,w,c
 13095  002E2C  6ED9               	movwf	fsr2l,c
 13096  002E2E  0E02               	movlw	high (_loRa+169)
 13097  002E30  20F4               	addwfc	prodh,w,c
 13098  002E32  6EDA               	movwf	fsr2h,c
 13099  002E34  92DF               	bcf	indf2,1,c
 13100                           
 13101                           ;lorawan.c: 1585: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 13102  002E36  51A7               	movf	(_loRa+167)& (0+255),w,b
 13103  002E38  0D02               	mullw	2
 13104  002E3A  0EA9               	movlw	low (_loRa+169)
 13105  002E3C  24F3               	addwf	prodl,w,c
 13106  002E3E  6ED9               	movwf	fsr2l,c
 13107  002E40  0E02               	movlw	high (_loRa+169)
 13108  002E42  20F4               	addwfc	prodh,w,c
 13109  002E44  6EDA               	movwf	fsr2h,c
 13110  002E46  94DF               	bcf	indf2,2,c
 13111                           
 13112                           ;lorawan.c: 1586: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 0;
 13113  002E48  51A7               	movf	(_loRa+167)& (0+255),w,b
 13114  002E4A  0D02               	mullw	2
 13115  002E4C  0EA9               	movlw	low (_loRa+169)
 13116  002E4E  24F3               	addwf	prodl,w,c
 13117  002E50  6ED9               	movwf	fsr2l,c
 13118  002E52  0E02               	movlw	high (_loRa+169)
 13119  002E54  20F4               	addwfc	prodh,w,c
 13120  002E56  6EDA               	movwf	fsr2h,c
 13121  002E58  96DF               	bcf	indf2,3,c
 13122                           
 13123                           ;lorawan.c: 1587: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 0;
 13124  002E5A  51A7               	movf	(_loRa+167)& (0+255),w,b
 13125  002E5C  0D02               	mullw	2
 13126  002E5E  0EA9               	movlw	low (_loRa+169)
 13127  002E60  24F3               	addwf	prodl,w,c
 13128  002E62  6ED9               	movwf	fsr2l,c
 13129  002E64  0E02               	movlw	high (_loRa+169)
 13130  002E66  20F4               	addwfc	prodh,w,c
 13131  002E68  6EDA               	movwf	fsr2h,c
 13132  002E6A  98DF               	bcf	indf2,4,c
 13133                           
 13134                           ;lorawan.c: 1588: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 0;
 13135  002E6C  51A7               	movf	(_loRa+167)& (0+255),w,b
 13136  002E6E  0D02               	mullw	2
 13137  002E70  0EA9               	movlw	low (_loRa+169)
 13138  002E72  24F3               	addwf	prodl,w,c
 13139  002E74  6ED9               	movwf	fsr2l,c
 13140  002E76  0E02               	movlw	high (_loRa+169)
 13141  002E78  20F4               	addwfc	prodh,w,c
 13142  002E7A  6EDA               	movwf	fsr2h,c
 13143  002E7C  9ADF               	bcf	indf2,5,c
 13144                           
 13145                           ;lorawan.c: 1589: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 0;
 13146  002E7E  51A7               	movf	(_loRa+167)& (0+255),w,b
 13147  002E80  0D02               	mullw	2
 13148  002E82  0EA9               	movlw	low (_loRa+169)
 13149  002E84  24F3               	addwf	prodl,w,c
 13150  002E86  6ED9               	movwf	fsr2l,c
 13151  002E88  0E02               	movlw	high (_loRa+169)
 13152  002E8A  20F4               	addwfc	prodh,w,c
 13153  002E8C  6EDA               	movwf	fsr2h,c
 13154  002E8E  9CDF               	bcf	indf2,6,c
 13155                           
 13156                           ;lorawan.c: 1590: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 0;
 13157  002E90  51A7               	movf	(_loRa+167)& (0+255),w,b
 13158  002E92  0D02               	mullw	2
 13159  002E94  0EA9               	movlw	low (_loRa+169)
 13160  002E96  24F3               	addwf	prodl,w,c
 13161  002E98  6ED9               	movwf	fsr2l,c
 13162  002E9A  0E02               	movlw	high (_loRa+169)
 13163  002E9C  20F4               	addwfc	prodh,w,c
 13164  002E9E  6EDA               	movwf	fsr2h,c
 13165  002EA0  9EDF               	bcf	indf2,7,c
 13166                           
 13167                           ; BSR set to: 2
 13168                           ;lorawan.c: 1593: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = *ptr;
 13169  002EA2  C080  FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 13170  002EA6  C081  FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 13171  002EAA  51A7               	movf	(_loRa+167)& (0+255),w,b
 13172  002EAC  0D02               	mullw	2
 13173  002EAE  0EA8               	movlw	low (_loRa+168)
 13174  002EB0  24F3               	addwf	prodl,w,c
 13175  002EB2  6EE9               	movwf	fsr0l,c
 13176  002EB4  0E02               	movlw	high (_loRa+168)
 13177  002EB6  20F4               	addwfc	prodh,w,c
 13178  002EB8  6EEA               	movwf	fsr0h,c
 13179  002EBA  CFDF FFEF          	movff	indf2,indf0
 13180                           
 13181                           ;lorawan.c: 1595: switch (*ptr ++)
 13182  002EBE  D060               	goto	l14096
 13183  002EC0                     l14072:
 13184                           
 13185                           ; BSR set to: 0
 13186                           ;lorawan.c: 1598: {
 13187                           ;lorawan.c: 1599: ptr = ExecuteLinkCheck (ptr );
 13188  002EC0  C080  F064         	movff	MacExecuteCommands@ptr,ExecuteLinkCheck@ptr
 13189  002EC4  C081  F065         	movff	MacExecuteCommands@ptr+1,ExecuteLinkCheck@ptr+1
 13190  002EC8  EC98  F038         	call	_ExecuteLinkCheck
 13191  002ECC  C064  F080         	movff	?_ExecuteLinkCheck,MacExecuteCommands@ptr
 13192  002ED0  C065  F081         	movff	?_ExecuteLinkCheck+1,MacExecuteCommands@ptr+1
 13193  002ED4                     l14074:
 13194                           
 13195                           ; BSR set to: 0
 13196                           ;lorawan.c: 1601: loRa.macCommands[loRa.crtMacCmdIndex].receivedCid = 0xFF;
 13197  002ED4  0102               	movlb	2	; () banked
 13198  002ED6  51A7               	movf	(_loRa+167)& (0+255),w,b
 13199  002ED8  0D02               	mullw	2
 13200  002EDA  0EA8               	movlw	low (_loRa+168)
 13201  002EDC  24F3               	addwf	prodl,w,c
 13202  002EDE  6ED9               	movwf	fsr2l,c
 13203  002EE0  0E02               	movlw	high (_loRa+168)
 13204  002EE2  20F4               	addwfc	prodh,w,c
 13205  002EE4  6EDA               	movwf	fsr2h,c
 13206  002EE6  68DF               	setf	indf2,c
 13207                           
 13208                           ;lorawan.c: 1602: } break;
 13209  002EE8  D062               	goto	l14098
 13210  002EEA                     l14076:
 13211                           
 13212                           ; BSR set to: 0
 13213                           ;lorawan.c: 1605: {
 13214                           ;lorawan.c: 1606: ptr = ExecuteLinkAdr (ptr );
 13215  002EEA  C080  F071         	movff	MacExecuteCommands@ptr,ExecuteLinkAdr@ptr
 13216  002EEE  C081  F072         	movff	MacExecuteCommands@ptr+1,ExecuteLinkAdr@ptr+1
 13217  002EF2  ECB6  F01A         	call	_ExecuteLinkAdr	;wreg free
 13218  002EF6  C071  F080         	movff	?_ExecuteLinkAdr,MacExecuteCommands@ptr
 13219  002EFA  C072  F081         	movff	?_ExecuteLinkAdr+1,MacExecuteCommands@ptr+1
 13220                           
 13221                           ;lorawan.c: 1607: } break;
 13222  002EFE  D057               	goto	l14098
 13223  002F00                     l14078:
 13224                           
 13225                           ; BSR set to: 0
 13226                           ;lorawan.c: 1610: {
 13227                           ;lorawan.c: 1611: ptr = ExecuteDutyCycle(ptr);
 13228  002F00  C080  F064         	movff	MacExecuteCommands@ptr,ExecuteDutyCycle@ptr
 13229  002F04  C081  F065         	movff	MacExecuteCommands@ptr+1,ExecuteDutyCycle@ptr+1
 13230  002F08  EC19  F035         	call	_ExecuteDutyCycle	;wreg free
 13231  002F0C  C064  F080         	movff	?_ExecuteDutyCycle,MacExecuteCommands@ptr
 13232  002F10  C065  F081         	movff	?_ExecuteDutyCycle+1,MacExecuteCommands@ptr+1
 13233                           
 13234                           ;lorawan.c: 1612: } break;
 13235  002F14  D04C               	goto	l14098
 13236  002F16                     l14080:
 13237                           
 13238                           ; BSR set to: 0
 13239                           ;lorawan.c: 1615: {
 13240                           ;lorawan.c: 1616: ptr = ExecuteRxParamSetupReq (ptr);
 13241  002F16  C080  F070         	movff	MacExecuteCommands@ptr,ExecuteRxParamSetupReq@ptr
 13242  002F1A  C081  F071         	movff	MacExecuteCommands@ptr+1,ExecuteRxParamSetupReq@ptr+1
 13243  002F1E  EC6C  F021         	call	_ExecuteRxParamSetupReq	;wreg free
 13244  002F22  C070  F080         	movff	?_ExecuteRxParamSetupReq,MacExecuteCommands@ptr
 13245  002F26  C071  F081         	movff	?_ExecuteRxParamSetupReq+1,MacExecuteCommands@ptr+1
 13246                           
 13247                           ;lorawan.c: 1617: } break;
 13248  002F2A  D041               	goto	l14098
 13249  002F2C                     l14082:
 13250                           
 13251                           ; BSR set to: 0
 13252                           ;lorawan.c: 1620: {
 13253                           ;lorawan.c: 1621: ptr = ExecuteDevStatus (ptr);
 13254  002F2C  C080  F064         	movff	MacExecuteCommands@ptr,ExecuteDevStatus@ptr
 13255  002F30  C081  F065         	movff	MacExecuteCommands@ptr+1,ExecuteDevStatus@ptr+1
 13256  002F34  EC03  F03C         	call	_ExecuteDevStatus	;wreg free
 13257  002F38  C064  F080         	movff	?_ExecuteDevStatus,MacExecuteCommands@ptr
 13258  002F3C  C065  F081         	movff	?_ExecuteDevStatus+1,MacExecuteCommands@ptr+1
 13259                           
 13260                           ;lorawan.c: 1622: } break;
 13261  002F40  D036               	goto	l14098
 13262  002F42                     l14084:
 13263                           
 13264                           ; BSR set to: 0
 13265                           ;lorawan.c: 1625: {
 13266                           ;lorawan.c: 1626: ptr = ExecuteNewChannel (ptr);
 13267  002F42  C080  F070         	movff	MacExecuteCommands@ptr,ExecuteNewChannel@ptr
 13268  002F46  C081  F071         	movff	MacExecuteCommands@ptr+1,ExecuteNewChannel@ptr+1
 13269  002F4A  ECD5  F019         	call	_ExecuteNewChannel	;wreg free
 13270  002F4E  C070  F080         	movff	?_ExecuteNewChannel,MacExecuteCommands@ptr
 13271  002F52  C071  F081         	movff	?_ExecuteNewChannel+1,MacExecuteCommands@ptr+1
 13272                           
 13273                           ;lorawan.c: 1628: } break;
 13274  002F56  D02B               	goto	l14098
 13275  002F58                     l14086:
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;lorawan.c: 1631: {
 13279                           ;lorawan.c: 1632: ptr = ExecuteRxTimingSetup (ptr);
 13280  002F58  C080  F069         	movff	MacExecuteCommands@ptr,ExecuteRxTimingSetup@ptr
 13281  002F5C  C081  F06A         	movff	MacExecuteCommands@ptr+1,ExecuteRxTimingSetup@ptr+1
 13282  002F60  ECD6  F039         	call	_ExecuteRxTimingSetup	;wreg free
 13283  002F64  C069  F080         	movff	?_ExecuteRxTimingSetup,MacExecuteCommands@ptr
 13284  002F68  C06A  F081         	movff	?_ExecuteRxTimingSetup+1,MacExecuteCommands@ptr+1
 13285                           
 13286                           ;lorawan.c: 1633: } break;
 13287  002F6C  D020               	goto	l14098
 13288  002F6E                     l14088:
 13289                           
 13290                           ; BSR set to: 0
 13291                           ;lorawan.c: 1636: {
 13292                           ;lorawan.c: 1637: done = 1;
 13293  002F6E  0E01               	movlw	1
 13294  002F70  6F7F               	movwf	MacExecuteCommands@done& (0+255),b
 13295                           
 13296                           ; BSR set to: 0
 13297                           ;lorawan.c: 1638: ptr = buffer + fOptsLen;
 13298  002F72  517C               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 13299  002F74  257A               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 13300  002F76  6F80               	movwf	MacExecuteCommands@ptr& (0+255),b
 13301  002F78  0E00               	movlw	0
 13302  002F7A  217B               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 13303  002F7C  6F81               	movwf	(MacExecuteCommands@ptr+1)& (0+255),b
 13304  002F7E  D7AA               	goto	l14074
 13305  002F80                     l14096:
 13306                           
 13307                           ; BSR set to: 2
 13308  002F80  C080  FFD9         	movff	MacExecuteCommands@ptr,fsr2l
 13309  002F84  C081  FFDA         	movff	MacExecuteCommands@ptr+1,fsr2h
 13310  002F88  0100               	movlb	0	; () banked
 13311  002F8A  4B80               	infsnz	MacExecuteCommands@ptr& (0+255),f,b
 13312  002F8C  2B81               	incf	(MacExecuteCommands@ptr+1)& (0+255),f,b
 13313  002F8E  50DF               	movf	indf2,w,c
 13314                           
 13315                           ; Switch size 1, requested type "speed"
 13316                           ; Number of cases is 7, Range of values is 2 to 8
 13317                           ; switch strategies available:
 13318                           ; Name         Instructions Cycles
 13319                           ; simple_byte           22    12 (average)
 13320                           ;	Chosen strategy is simple_byte
 13321  002F90  0A02               	xorlw	2	; case 2
 13322  002F92  E096               	bz	l14072
 13323  002F94  0A01               	xorlw	1	; case 3
 13324  002F96  E0A9               	bz	l14076
 13325  002F98  0A07               	xorlw	7	; case 4
 13326  002F9A  E0B2               	bz	l14078
 13327  002F9C  0A01               	xorlw	1	; case 5
 13328  002F9E  E0BB               	bz	l14080
 13329  002FA0  0A03               	xorlw	3	; case 6
 13330  002FA2  E0C4               	bz	l14082
 13331  002FA4  0A01               	xorlw	1	; case 7
 13332  002FA6  E0CD               	bz	l14084
 13333  002FA8  0A0F               	xorlw	15	; case 8
 13334  002FAA  E0D6               	bz	l14086
 13335  002FAC  D7E0               	goto	l14088
 13336  002FAE                     l14098:
 13337                           
 13338                           ;lorawan.c: 1643: if((loRa.macCommands[loRa.crtMacCmdIndex].receivedCid != 0xFF) &&
 13339                           ;lorawan.c: 1644: (loRa.crtMacCmdIndex < 16))
 13340  002FAE  0102               	movlb	2	; () banked
 13341  002FB0  51A7               	movf	(_loRa+167)& (0+255),w,b
 13342  002FB2  0D02               	mullw	2
 13343  002FB4  0EA8               	movlw	low (_loRa+168)
 13344  002FB6  24F3               	addwf	prodl,w,c
 13345  002FB8  6ED9               	movwf	fsr2l,c
 13346  002FBA  0E02               	movlw	high (_loRa+168)
 13347  002FBC  20F4               	addwfc	prodh,w,c
 13348  002FBE  6EDA               	movwf	fsr2h,c
 13349  002FC0  28DE               	incf	postinc2,w,c
 13350  002FC2  E004               	bz	l14104
 13351                           
 13352                           ; BSR set to: 2
 13353  002FC4  0E10               	movlw	16
 13354  002FC6  61A7               	cpfslt	(_loRa+167)& (0+255),b
 13355  002FC8  D001               	goto	l14104
 13356                           
 13357                           ; BSR set to: 2
 13358                           ;lorawan.c: 1645: {
 13359                           ;lorawan.c: 1646: loRa.crtMacCmdIndex ++;
 13360  002FCA  2BA7               	incf	(_loRa+167)& (0+255),f,b
 13361  002FCC                     l14104:
 13362  002FCC  0100               	movlb	0	; () banked
 13363  002FCE  517C               	movf	MacExecuteCommands@fOptsLen& (0+255),w,b
 13364  002FD0  257A               	addwf	MacExecuteCommands@buffer& (0+255),w,b
 13365  002FD2  6F7D               	movwf	??_MacExecuteCommands& (0+255),b
 13366  002FD4  0E00               	movlw	0
 13367  002FD6  217B               	addwfc	(MacExecuteCommands@buffer+1)& (0+255),w,b
 13368  002FD8  6F7E               	movwf	(??_MacExecuteCommands+1)& (0+255),b
 13369  002FDA  517D               	movf	??_MacExecuteCommands& (0+255),w,b
 13370  002FDC  5D80               	subwf	MacExecuteCommands@ptr& (0+255),w,b
 13371  002FDE  517E               	movf	(??_MacExecuteCommands+1)& (0+255),w,b
 13372  002FE0  5981               	subwfb	(MacExecuteCommands@ptr+1)& (0+255),w,b
 13373  002FE2  E203               	bc	l14108
 13374                           
 13375                           ; BSR set to: 0
 13376  002FE4  517F               	movf	MacExecuteCommands@done& (0+255),w,b
 13377  002FE6  E101 D713          	bz	l14068
 13378  002FEA                     l14108:
 13379                           
 13380                           ; BSR set to: 0
 13381                           ;lorawan.c: 1647: }
 13382                           ;lorawan.c: 1648: }
 13383                           ;lorawan.c: 1649: return ptr;
 13384  002FEA  C080  F07A         	movff	MacExecuteCommands@ptr,?_MacExecuteCommands
 13385  002FEE  C081  F07B         	movff	MacExecuteCommands@ptr+1,?_MacExecuteCommands+1
 13386                           
 13387                           ; BSR set to: 0
 13388  002FF2  0012               	return		;funcret
 13389  002FF4                     __end_of_MacExecuteCommands:
 13390                           	opt stack 0
 13391                           tosu	equ	0xFFF
 13392                           tosh	equ	0xFFE
 13393                           tosl	equ	0xFFD
 13394                           pclath	equ	0xFFA
 13395                           tblptru	equ	0xFF8
 13396                           tblptrh	equ	0xFF7
 13397                           tblptrl	equ	0xFF6
 13398                           tablat	equ	0xFF5
 13399                           prodh	equ	0xFF4
 13400                           prodl	equ	0xFF3
 13401                           intcon	equ	0xFF2
 13402                           indf0	equ	0xFEF
 13403                           postinc0	equ	0xFEE
 13404                           fsr0h	equ	0xFEA
 13405                           fsr0l	equ	0xFE9
 13406                           wreg	equ	0xFE8
 13407                           postinc1	equ	0xFE6
 13408                           postdec1	equ	0xFE5
 13409                           plusw1	equ	0xFE3
 13410                           fsr1h	equ	0xFE2
 13411                           fsr1l	equ	0xFE1
 13412                           indf2	equ	0xFDF
 13413                           postinc2	equ	0xFDE
 13414                           postdec2	equ	0xFDD
 13415                           fsr2h	equ	0xFDA
 13416                           fsr2l	equ	0xFD9
 13417                           status	equ	0xFD8
 13418                           
 13419 ;; *************** function _ExecuteRxTimingSetup *****************
 13420 ;; Defined at:
 13421 ;;		line 1659 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13422 ;; Parameters:    Size  Location     Type
 13423 ;;  ptr             2    9[BANK0 ] PTR unsigned char 
 13424 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 13425 ;; Auto vars:     Size  Location     Type
 13426 ;;  delay           1   11[BANK0 ] unsigned char 
 13427 ;; Return value:  Size  Location     Type
 13428 ;;                  2    9[BANK0 ] PTR unsigned char 
 13429 ;; Registers used:
 13430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13431 ;; Tracked objects:
 13432 ;;		On entry : F/0
 13433 ;;		On exit  : F/2
 13434 ;;		Unchanged: 0/0
 13435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13436 ;;      Params:         0       2       0       0       0       0       0       0       0
 13437 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13438 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13439 ;;      Totals:         0       3       0       0       0       0       0       0       0
 13440 ;;Total ram usage:        3 bytes
 13441 ;; Hardware stack levels used:    1
 13442 ;; Hardware stack levels required when called:    8
 13443 ;; This function calls:
 13444 ;;		_UpdateReceiveDelays
 13445 ;; This function is called by:
 13446 ;;		_MacExecuteCommands
 13447 ;; This function uses a non-reentrant model
 13448 ;;
 13449                           
 13450                           	psect	text65
 13451  0073AC                     __ptext65:
 13452                           	opt stack 0
 13453  0073AC                     _ExecuteRxTimingSetup:
 13454                           	opt stack 17
 13455                           
 13456                           ; BSR set to: 0
 13457                           ;lorawan.c: 1661: uint8_t delay;
 13458                           ;lorawan.c: 1663: delay = (*ptr) & 0x0F;
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;incstack = 0
 13462  0073AC  C069  FFD9         	movff	ExecuteRxTimingSetup@ptr,fsr2l
 13463  0073B0  C06A  FFDA         	movff	ExecuteRxTimingSetup@ptr+1,fsr2h
 13464  0073B4  50DF               	movf	indf2,w,c
 13465  0073B6  0B0F               	andlw	15
 13466  0073B8  6F6B               	movwf	ExecuteRxTimingSetup@delay& (0+255),b
 13467                           
 13468                           ; BSR set to: 0
 13469                           ;lorawan.c: 1664: ptr++;
 13470  0073BA  4B69               	infsnz	ExecuteRxTimingSetup@ptr& (0+255),f,b
 13471  0073BC  2B6A               	incf	(ExecuteRxTimingSetup@ptr+1)& (0+255),f,b
 13472                           
 13473                           ; BSR set to: 0
 13474                           ;lorawan.c: 1666: UpdateReceiveDelays (delay);
 13475  0073BE  516B               	movf	ExecuteRxTimingSetup@delay& (0+255),w,b
 13476  0073C0  ECB4  F035         	call	_UpdateReceiveDelays
 13477                           
 13478                           ; BSR set to: 2
 13479                           ;lorawan.c: 1667: loRa.macStatus.rxTimingSetup = 1;
 13480  0073C4  8104               	bsf	(_loRa+4)& (0+255),0,b
 13481                           
 13482                           ; BSR set to: 2
 13483                           ;lorawan.c: 1669: return ptr;
 13484  0073C6  C069  F069         	movff	ExecuteRxTimingSetup@ptr,?_ExecuteRxTimingSetup
 13485  0073CA  C06A  F06A         	movff	ExecuteRxTimingSetup@ptr+1,?_ExecuteRxTimingSetup+1
 13486                           
 13487                           ; BSR set to: 2
 13488  0073CE  0012               	return		;funcret
 13489  0073D0                     __end_of_ExecuteRxTimingSetup:
 13490                           	opt stack 0
 13491                           tosu	equ	0xFFF
 13492                           tosh	equ	0xFFE
 13493                           tosl	equ	0xFFD
 13494                           pclath	equ	0xFFA
 13495                           tblptru	equ	0xFF8
 13496                           tblptrh	equ	0xFF7
 13497                           tblptrl	equ	0xFF6
 13498                           tablat	equ	0xFF5
 13499                           prodh	equ	0xFF4
 13500                           prodl	equ	0xFF3
 13501                           intcon	equ	0xFF2
 13502                           indf0	equ	0xFEF
 13503                           postinc0	equ	0xFEE
 13504                           fsr0h	equ	0xFEA
 13505                           fsr0l	equ	0xFE9
 13506                           wreg	equ	0xFE8
 13507                           postinc1	equ	0xFE6
 13508                           postdec1	equ	0xFE5
 13509                           plusw1	equ	0xFE3
 13510                           fsr1h	equ	0xFE2
 13511                           fsr1l	equ	0xFE1
 13512                           indf2	equ	0xFDF
 13513                           postinc2	equ	0xFDE
 13514                           postdec2	equ	0xFDD
 13515                           fsr2h	equ	0xFDA
 13516                           fsr2l	equ	0xFD9
 13517                           status	equ	0xFD8
 13518                           
 13519 ;; *************** function _UpdateReceiveDelays *****************
 13520 ;; Defined at:
 13521 ;;		line 2026 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;  delay           1    wreg     unsigned char 
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;  delay           1    8[BANK0 ] unsigned char 
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      void 
 13528 ;; Registers used:
 13529 ;;		wreg, status,2, status,0, prodl, prodh
 13530 ;; Tracked objects:
 13531 ;;		On entry : C/3
 13532 ;;		On exit  : F/2
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13535 ;;      Params:         0       0       0       0       0       0       0       0       0
 13536 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13537 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13538 ;;      Totals:         0       5       0       0       0       0       0       0       0
 13539 ;;Total ram usage:        5 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; Hardware stack levels required when called:    7
 13542 ;; This function calls:
 13543 ;;		Nothing
 13544 ;; This function is called by:
 13545 ;;		_LORAWAN_RxDone
 13546 ;;		_ExecuteRxTimingSetup
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           	psect	text66
 13551  006B68                     __ptext66:
 13552                           	opt stack 0
 13553  006B68                     _UpdateReceiveDelays:
 13554                           	opt stack 19
 13555                           
 13556                           ; BSR set to: 2
 13557                           ;incstack = 0
 13558                           ;UpdateReceiveDelays@delay stored from wreg
 13559  006B68  0100               	movlb	0	; () banked
 13560  006B6A  6F68               	movwf	UpdateReceiveDelays@delay& (0+255),b
 13561                           
 13562                           ;lorawan.c: 2028: loRa.protocolParameters.receiveDelay1 = 1000 * delay ;
 13563  006B6C  5168               	movf	UpdateReceiveDelays@delay& (0+255),w,b
 13564  006B6E  6F64               	movwf	??_UpdateReceiveDelays& (0+255),b
 13565  006B70  6B65               	clrf	(??_UpdateReceiveDelays+1)& (0+255),b
 13566  006B72  0EE8               	movlw	232
 13567  006B74  0364               	mulwf	??_UpdateReceiveDelays& (0+255),b
 13568  006B76  CFF3 F066          	movff	prodl,??_UpdateReceiveDelays+2
 13569  006B7A  CFF4 F067          	movff	prodh,??_UpdateReceiveDelays+3
 13570  006B7E  0365               	mulwf	(??_UpdateReceiveDelays+1)& (0+255),b
 13571  006B80  50F3               	movf	prodl,w,c
 13572  006B82  2767               	addwf	(??_UpdateReceiveDelays+3)& (0+255),f,b
 13573  006B84  0E03               	movlw	3
 13574  006B86  0364               	mulwf	??_UpdateReceiveDelays& (0+255),b
 13575  006B88  50F3               	movf	prodl,w,c
 13576  006B8A  2767               	addwf	(??_UpdateReceiveDelays+3)& (0+255),f,b
 13577  006B8C  C066  F294         	movff	??_UpdateReceiveDelays+2,_loRa+148
 13578  006B90  C067  F295         	movff	??_UpdateReceiveDelays+3,_loRa+149
 13579                           
 13580                           ; BSR set to: 0
 13581                           ;lorawan.c: 2029: if (delay == 0)
 13582  006B94  5168               	movf	UpdateReceiveDelays@delay& (0+255),w,b
 13583  006B96  E105               	bnz	l13140
 13584                           
 13585                           ; BSR set to: 0
 13586                           ;lorawan.c: 2030: {
 13587                           ;lorawan.c: 2031: loRa.protocolParameters.receiveDelay1 = 1000;
 13588  006B98  0E03               	movlw	3
 13589  006B9A  0102               	movlb	2	; () banked
 13590  006B9C  6F95               	movwf	(_loRa+149)& (0+255),b
 13591  006B9E  0EE8               	movlw	232
 13592  006BA0  6F94               	movwf	(_loRa+148)& (0+255),b
 13593  006BA2                     l13140:
 13594                           
 13595                           ;lorawan.c: 2032: }
 13596                           ;lorawan.c: 2034: loRa.protocolParameters.receiveDelay2 = loRa.protocolParameters.receiv
      +                          eDelay1 + 1000;
 13597  006BA2  0EE8               	movlw	232
 13598  006BA4  0102               	movlb	2	; () banked
 13599  006BA6  2594               	addwf	(_loRa+148)& (0+255),w,b
 13600  006BA8  6F96               	movwf	(_loRa+150)& (0+255),b
 13601  006BAA  0E03               	movlw	3
 13602  006BAC  2195               	addwfc	(_loRa+149)& (0+255),w,b
 13603  006BAE  6F97               	movwf	(_loRa+151)& (0+255),b
 13604                           
 13605                           ; BSR set to: 2
 13606  006BB0  0012               	return		;funcret
 13607  006BB2                     __end_of_UpdateReceiveDelays:
 13608                           	opt stack 0
 13609                           tosu	equ	0xFFF
 13610                           tosh	equ	0xFFE
 13611                           tosl	equ	0xFFD
 13612                           pclath	equ	0xFFA
 13613                           tblptru	equ	0xFF8
 13614                           tblptrh	equ	0xFF7
 13615                           tblptrl	equ	0xFF6
 13616                           tablat	equ	0xFF5
 13617                           prodh	equ	0xFF4
 13618                           prodl	equ	0xFF3
 13619                           intcon	equ	0xFF2
 13620                           indf0	equ	0xFEF
 13621                           postinc0	equ	0xFEE
 13622                           fsr0h	equ	0xFEA
 13623                           fsr0l	equ	0xFE9
 13624                           wreg	equ	0xFE8
 13625                           postinc1	equ	0xFE6
 13626                           postdec1	equ	0xFE5
 13627                           plusw1	equ	0xFE3
 13628                           fsr1h	equ	0xFE2
 13629                           fsr1l	equ	0xFE1
 13630                           indf2	equ	0xFDF
 13631                           postinc2	equ	0xFDE
 13632                           postdec2	equ	0xFDD
 13633                           fsr2h	equ	0xFDA
 13634                           fsr2l	equ	0xFD9
 13635                           status	equ	0xFD8
 13636                           
 13637 ;; *************** function _ExecuteRxParamSetupReq *****************
 13638 ;; Defined at:
 13639 ;;		line 740 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 13640 ;; Parameters:    Size  Location     Type
 13641 ;;  ptr             2   16[BANK0 ] PTR unsigned char 
 13642 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 13643 ;; Auto vars:     Size  Location     Type
 13644 ;;  frequency       4   18[BANK0 ] unsigned long 
 13645 ;;  dlSettings      1   22[BANK0 ] struct .
 13646 ;; Return value:  Size  Location     Type
 13647 ;;                  2   16[BANK0 ] PTR unsigned char 
 13648 ;; Registers used:
 13649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13650 ;; Tracked objects:
 13651 ;;		On entry : F/0
 13652 ;;		On exit  : F/2
 13653 ;;		Unchanged: 0/0
 13654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13655 ;;      Params:         0       2       0       0       0       0       0       0       0
 13656 ;;      Locals:         0       5       0       0       0       0       0       0       0
 13657 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13658 ;;      Totals:         0       7       0       0       0       0       0       0       0
 13659 ;;Total ram usage:        7 bytes
 13660 ;; Hardware stack levels used:    1
 13661 ;; Hardware stack levels required when called:    8
 13662 ;; This function calls:
 13663 ;;		_UpdateReceiveWindow2Parameters
 13664 ;;		_ValidateDataRate
 13665 ;;		_ValidateFrequency
 13666 ;;		_ValidateRxOffset
 13667 ;;		___lmul
 13668 ;; This function is called by:
 13669 ;;		_MacExecuteCommands
 13670 ;; This function uses a non-reentrant model
 13671 ;;
 13672                           
 13673                           	psect	text67
 13674  0042D8                     __ptext67:
 13675                           	opt stack 0
 13676  0042D8                     _ExecuteRxParamSetupReq:
 13677                           	opt stack 17
 13678                           
 13679                           ; BSR set to: 0
 13680                           ;lorawan_eu.c: 747: dlSettings.value = *(ptr++);
 13681                           
 13682                           ; BSR set to: 0
 13683                           
 13684                           ; BSR set to: 2
 13685                           ;incstack = 0
 13686  0042D8  C070  FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 13687  0042DC  C071  FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 13688  0042E0  50DF               	movf	indf2,w,c
 13689  0042E2  6F76               	movwf	ExecuteRxParamSetupReq@dlSettings& (0+255),b
 13690                           
 13691                           ; BSR set to: 0
 13692  0042E4  4B70               	infsnz	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 13693  0042E6  2B71               	incf	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 13694                           
 13695                           ; BSR set to: 0
 13696                           ;lorawan_eu.c: 749: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 13697  0042E8  C070  FFD9         	movff	ExecuteRxParamSetupReq@ptr,fsr2l
 13698  0042EC  C071  FFDA         	movff	ExecuteRxParamSetupReq@ptr+1,fsr2h
 13699  0042F0  0EFF               	movlw	255
 13700  0042F2  14DE               	andwf	postinc2,w,c
 13701  0042F4  6F72               	movwf	ExecuteRxParamSetupReq@frequency& (0+255),b
 13702  0042F6  0EFF               	movlw	255
 13703  0042F8  14DE               	andwf	postinc2,w,c
 13704  0042FA  6F73               	movwf	(ExecuteRxParamSetupReq@frequency+1)& (0+255),b
 13705  0042FC  0EFF               	movlw	255
 13706  0042FE  14DE               	andwf	postinc2,w,c
 13707  004300  6F74               	movwf	(ExecuteRxParamSetupReq@frequency+2)& (0+255),b
 13708  004302  0E00               	movlw	0
 13709  004304  14DE               	andwf	postinc2,w,c
 13710  004306  6F75               	movwf	(ExecuteRxParamSetupReq@frequency+3)& (0+255),b
 13711                           
 13712                           ; BSR set to: 0
 13713                           ;lorawan_eu.c: 750: frequency = frequency * 100;
 13714  004308  C072  F064         	movff	ExecuteRxParamSetupReq@frequency,___lmul@multiplier
 13715  00430C  C073  F065         	movff	ExecuteRxParamSetupReq@frequency+1,___lmul@multiplier+1
 13716  004310  C074  F066         	movff	ExecuteRxParamSetupReq@frequency+2,___lmul@multiplier+2
 13717  004314  C075  F067         	movff	ExecuteRxParamSetupReq@frequency+3,___lmul@multiplier+3
 13718  004318  0E64               	movlw	100
 13719  00431A  6F68               	movwf	___lmul@multiplicand& (0+255),b
 13720  00431C  6B69               	clrf	(___lmul@multiplicand+1)& (0+255),b
 13721  00431E  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 13722  004320  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 13723  004322  ECF7  F02E         	call	___lmul	;wreg free
 13724  004326  C064  F072         	movff	?___lmul,ExecuteRxParamSetupReq@frequency
 13725  00432A  C065  F073         	movff	?___lmul+1,ExecuteRxParamSetupReq@frequency+1
 13726  00432E  C066  F074         	movff	?___lmul+2,ExecuteRxParamSetupReq@frequency+2
 13727  004332  C067  F075         	movff	?___lmul+3,ExecuteRxParamSetupReq@frequency+3
 13728                           
 13729                           ; BSR set to: 0
 13730                           ;lorawan_eu.c: 751: ptr = ptr + 3;
 13731  004336  0E03               	movlw	3
 13732  004338  2770               	addwf	ExecuteRxParamSetupReq@ptr& (0+255),f,b
 13733  00433A  0E00               	movlw	0
 13734  00433C  2371               	addwfc	(ExecuteRxParamSetupReq@ptr+1)& (0+255),f,b
 13735                           
 13736                           ; BSR set to: 0
 13737                           ;lorawan_eu.c: 753: if (ValidateFrequency (frequency) == OK)
 13738  00433E  C072  F064         	movff	ExecuteRxParamSetupReq@frequency,ValidateFrequency@frequencyNew
 13739  004342  C073  F065         	movff	ExecuteRxParamSetupReq@frequency+1,ValidateFrequency@frequencyNew+1
 13740  004346  C074  F066         	movff	ExecuteRxParamSetupReq@frequency+2,ValidateFrequency@frequencyNew+2
 13741  00434A  C075  F067         	movff	ExecuteRxParamSetupReq@frequency+3,ValidateFrequency@frequencyNew+3
 13742  00434E  ECEE  F033         	call	_ValidateFrequency	;wreg free
 13743  004352  0900               	iorlw	0
 13744  004354  E10A               	bnz	l13574
 13745                           
 13746                           ; BSR set to: 0
 13747                           ;lorawan_eu.c: 754: {
 13748                           ;lorawan_eu.c: 755: loRa.macCommands[loRa.crtMacCmdIndex].channelAck = 1;
 13749  004356  0102               	movlb	2	; () banked
 13750  004358  51A7               	movf	(_loRa+167)& (0+255),w,b
 13751  00435A  0D02               	mullw	2
 13752  00435C  0EA9               	movlw	low (_loRa+169)
 13753  00435E  24F3               	addwf	prodl,w,c
 13754  004360  6ED9               	movwf	fsr2l,c
 13755  004362  0E02               	movlw	high (_loRa+169)
 13756  004364  20F4               	addwfc	prodh,w,c
 13757  004366  6EDA               	movwf	fsr2h,c
 13758  004368  86DF               	bsf	indf2,3,c
 13759  00436A                     l13574:
 13760                           
 13761                           ;lorawan_eu.c: 756: }
 13762                           ;lorawan_eu.c: 758: if (ValidateDataRate (dlSettings.bits.rx2DataRate) == OK)
 13763  00436A  0100               	movlb	0	; () banked
 13764  00436C  5176               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 13765  00436E  0B0F               	andlw	15
 13766  004370  EC93  F03B         	call	_ValidateDataRate
 13767  004374  0900               	iorlw	0
 13768  004376  E10A               	bnz	l13578
 13769                           
 13770                           ; BSR set to: 0
 13771                           ;lorawan_eu.c: 759: {
 13772                           ;lorawan_eu.c: 760: loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck = 1;
 13773  004378  0102               	movlb	2	; () banked
 13774  00437A  51A7               	movf	(_loRa+167)& (0+255),w,b
 13775  00437C  0D02               	mullw	2
 13776  00437E  0EA9               	movlw	low (_loRa+169)
 13777  004380  24F3               	addwf	prodl,w,c
 13778  004382  6ED9               	movwf	fsr2l,c
 13779  004384  0E02               	movlw	high (_loRa+169)
 13780  004386  20F4               	addwfc	prodh,w,c
 13781  004388  6EDA               	movwf	fsr2h,c
 13782  00438A  88DF               	bsf	indf2,4,c
 13783  00438C                     l13578:
 13784                           
 13785                           ;lorawan_eu.c: 761: }
 13786                           ;lorawan_eu.c: 763: if (ValidateRxOffset (dlSettings.bits.rx1DROffset) == OK)
 13787  00438C  0100               	movlb	0	; () banked
 13788  00438E  3976               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 13789  004390  0B07               	andlw	7
 13790  004392  EC89  F03B         	call	_ValidateRxOffset
 13791  004396  0900               	iorlw	0
 13792  004398  E10A               	bnz	l1146
 13793                           
 13794                           ; BSR set to: 0
 13795                           ;lorawan_eu.c: 764: {
 13796                           ;lorawan_eu.c: 765: loRa.macCommands[loRa.crtMacCmdIndex].rx1DROffestAck = 1;
 13797  00439A  0102               	movlb	2	; () banked
 13798  00439C  51A7               	movf	(_loRa+167)& (0+255),w,b
 13799  00439E  0D02               	mullw	2
 13800  0043A0  0EA9               	movlw	low (_loRa+169)
 13801  0043A2  24F3               	addwf	prodl,w,c
 13802  0043A4  6ED9               	movwf	fsr2l,c
 13803  0043A6  0E02               	movlw	high (_loRa+169)
 13804  0043A8  20F4               	addwfc	prodh,w,c
 13805  0043AA  6EDA               	movwf	fsr2h,c
 13806  0043AC  8ADF               	bsf	indf2,5,c
 13807  0043AE                     l1146:
 13808                           
 13809                           ;lorawan_eu.c: 766: }
 13810                           ;lorawan_eu.c: 768: if ( (loRa.macCommands[loRa.crtMacCmdIndex].dataRateReceiveWindowAck
      +                           == 1) && (loRa.macCommands[loRa.crtMacCmdIndex].channelAck == 1) && (loRa.macCommands[l
      +                          oRa.crtMacCmdIndex].rx1DROffestAck == 1))
 13811  0043AE  0102               	movlb	2	; () banked
 13812  0043B0  51A7               	movf	(_loRa+167)& (0+255),w,b
 13813  0043B2  0D02               	mullw	2
 13814  0043B4  0EA9               	movlw	low (_loRa+169)
 13815  0043B6  24F3               	addwf	prodl,w,c
 13816  0043B8  6ED9               	movwf	fsr2l,c
 13817  0043BA  0E02               	movlw	high (_loRa+169)
 13818  0043BC  20F4               	addwfc	prodh,w,c
 13819  0043BE  6EDA               	movwf	fsr2h,c
 13820  0043C0  A8DF               	btfss	indf2,4,c
 13821  0043C2  D029               	goto	l13592
 13822                           
 13823                           ; BSR set to: 2
 13824  0043C4  51A7               	movf	(_loRa+167)& (0+255),w,b
 13825  0043C6  0D02               	mullw	2
 13826  0043C8  0EA9               	movlw	low (_loRa+169)
 13827  0043CA  24F3               	addwf	prodl,w,c
 13828  0043CC  6ED9               	movwf	fsr2l,c
 13829  0043CE  0E02               	movlw	high (_loRa+169)
 13830  0043D0  20F4               	addwfc	prodh,w,c
 13831  0043D2  6EDA               	movwf	fsr2h,c
 13832  0043D4  A6DF               	btfss	indf2,3,c
 13833  0043D6  D01F               	goto	l13592
 13834                           
 13835                           ; BSR set to: 2
 13836  0043D8  51A7               	movf	(_loRa+167)& (0+255),w,b
 13837  0043DA  0D02               	mullw	2
 13838  0043DC  0EA9               	movlw	low (_loRa+169)
 13839  0043DE  24F3               	addwf	prodl,w,c
 13840  0043E0  6ED9               	movwf	fsr2l,c
 13841  0043E2  0E02               	movlw	high (_loRa+169)
 13842  0043E4  20F4               	addwfc	prodh,w,c
 13843  0043E6  6EDA               	movwf	fsr2h,c
 13844  0043E8  AADF               	btfss	indf2,5,c
 13845  0043EA  D015               	goto	l13592
 13846                           
 13847                           ; BSR set to: 2
 13848                           ;lorawan_eu.c: 769: {
 13849                           ;lorawan_eu.c: 770: loRa.offset = dlSettings.bits.rx1DROffset;
 13850  0043EC  0100               	movlb	0	; () banked
 13851  0043EE  3976               	swapf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 13852  0043F0  0B07               	andlw	7
 13853  0043F2  0102               	movlb	2	; () banked
 13854  0043F4  6FEF               	movwf	(_loRa+239)& (0+255),b
 13855                           
 13856                           ; BSR set to: 2
 13857                           ;lorawan_eu.c: 771: UpdateReceiveWindow2Parameters (frequency, dlSettings.bits.rx2DataRa
      +                          te);
 13858  0043F6  C072  F064         	movff	ExecuteRxParamSetupReq@frequency,UpdateReceiveWindow2Parameters@frequency
 13859  0043FA  C073  F065         	movff	ExecuteRxParamSetupReq@frequency+1,UpdateReceiveWindow2Parameters@frequency+1
 13860  0043FE  C074  F066         	movff	ExecuteRxParamSetupReq@frequency+2,UpdateReceiveWindow2Parameters@frequency+2
 13861  004402  C075  F067         	movff	ExecuteRxParamSetupReq@frequency+3,UpdateReceiveWindow2Parameters@frequency+3
 13862  004406  0100               	movlb	0	; () banked
 13863  004408  5176               	movf	ExecuteRxParamSetupReq@dlSettings& (0+255),w,b
 13864  00440A  0B0F               	andlw	15
 13865  00440C  6F68               	movwf	UpdateReceiveWindow2Parameters@dataRate& (0+255),b
 13866  00440E  EC73  F03B         	call	_UpdateReceiveWindow2Parameters	;wreg free
 13867                           
 13868                           ; BSR set to: 0
 13869                           ;lorawan_eu.c: 772: loRa.macStatus.secondReceiveWindowModified = 1;
 13870  004412  0102               	movlb	2	; () banked
 13871  004414  8F03               	bsf	(_loRa+3)& (0+255),7,b
 13872  004416                     l13592:
 13873                           
 13874                           ; BSR set to: 2
 13875                           ;lorawan_eu.c: 773: }
 13876                           ;lorawan_eu.c: 775: return ptr;
 13877  004416  C070  F070         	movff	ExecuteRxParamSetupReq@ptr,?_ExecuteRxParamSetupReq
 13878  00441A  C071  F071         	movff	ExecuteRxParamSetupReq@ptr+1,?_ExecuteRxParamSetupReq+1
 13879                           
 13880                           ; BSR set to: 2
 13881  00441E  0012               	return		;funcret
 13882  004420                     __end_of_ExecuteRxParamSetupReq:
 13883                           	opt stack 0
 13884                           tosu	equ	0xFFF
 13885                           tosh	equ	0xFFE
 13886                           tosl	equ	0xFFD
 13887                           pclath	equ	0xFFA
 13888                           tblptru	equ	0xFF8
 13889                           tblptrh	equ	0xFF7
 13890                           tblptrl	equ	0xFF6
 13891                           tablat	equ	0xFF5
 13892                           prodh	equ	0xFF4
 13893                           prodl	equ	0xFF3
 13894                           intcon	equ	0xFF2
 13895                           indf0	equ	0xFEF
 13896                           postinc0	equ	0xFEE
 13897                           fsr0h	equ	0xFEA
 13898                           fsr0l	equ	0xFE9
 13899                           wreg	equ	0xFE8
 13900                           postinc1	equ	0xFE6
 13901                           postdec1	equ	0xFE5
 13902                           plusw1	equ	0xFE3
 13903                           fsr1h	equ	0xFE2
 13904                           fsr1l	equ	0xFE1
 13905                           indf2	equ	0xFDF
 13906                           postinc2	equ	0xFDE
 13907                           postdec2	equ	0xFDD
 13908                           fsr2h	equ	0xFDA
 13909                           fsr2l	equ	0xFD9
 13910                           status	equ	0xFD8
 13911                           
 13912 ;; *************** function _ValidateRxOffset *****************
 13913 ;; Defined at:
 13914 ;;		line 1076 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 13915 ;; Parameters:    Size  Location     Type
 13916 ;;  rxOffset        1    wreg     unsigned char 
 13917 ;; Auto vars:     Size  Location     Type
 13918 ;;  rxOffset        1    4[BANK0 ] unsigned char 
 13919 ;;  result          1    5[BANK0 ] enum E17190
 13920 ;; Return value:  Size  Location     Type
 13921 ;;                  1    wreg      enum E17190
 13922 ;; Registers used:
 13923 ;;		wreg, status,2, status,0
 13924 ;; Tracked objects:
 13925 ;;		On entry : F/0
 13926 ;;		On exit  : F/0
 13927 ;;		Unchanged: 0/0
 13928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13929 ;;      Params:         0       0       0       0       0       0       0       0       0
 13930 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13931 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13932 ;;      Totals:         0       2       0       0       0       0       0       0       0
 13933 ;;Total ram usage:        2 bytes
 13934 ;; Hardware stack levels used:    1
 13935 ;; Hardware stack levels required when called:    7
 13936 ;; This function calls:
 13937 ;;		Nothing
 13938 ;; This function is called by:
 13939 ;;		_ExecuteRxParamSetupReq
 13940 ;; This function uses a non-reentrant model
 13941 ;;
 13942                           
 13943                           	psect	text68
 13944  007712                     __ptext68:
 13945                           	opt stack 0
 13946  007712                     _ValidateRxOffset:
 13947                           	opt stack 17
 13948                           
 13949                           ; BSR set to: 2
 13950                           ;incstack = 0
 13951                           ;ValidateRxOffset@rxOffset stored from wreg
 13952  007712  6F64               	movwf	ValidateRxOffset@rxOffset& (0+255),b
 13953                           
 13954                           ;lorawan_eu.c: 1078: LorawanError_t result = OK;
 13955  007714  0100               	movlb	0	; () banked
 13956  007716  6B65               	clrf	ValidateRxOffset@result& (0+255),b
 13957                           
 13958                           ; BSR set to: 0
 13959                           ;lorawan_eu.c: 1080: if (rxOffset > 5)
 13960  007718  0E05               	movlw	5
 13961  00771A  6564               	cpfsgt	ValidateRxOffset@rxOffset& (0+255),b
 13962  00771C  D002               	goto	l1242
 13963                           
 13964                           ; BSR set to: 0
 13965                           ;lorawan_eu.c: 1081: {
 13966                           ;lorawan_eu.c: 1082: result = INVALID_PARAMETER;
 13967  00771E  0E03               	movlw	3
 13968  007720  6F65               	movwf	ValidateRxOffset@result& (0+255),b
 13969  007722                     l1242:
 13970                           
 13971                           ; BSR set to: 0
 13972                           ;lorawan_eu.c: 1083: }
 13973                           ;lorawan_eu.c: 1085: return result;
 13974  007722  5165               	movf	ValidateRxOffset@result& (0+255),w,b
 13975                           
 13976                           ; BSR set to: 0
 13977  007724  0012               	return		;funcret
 13978  007726                     __end_of_ValidateRxOffset:
 13979                           	opt stack 0
 13980                           tosu	equ	0xFFF
 13981                           tosh	equ	0xFFE
 13982                           tosl	equ	0xFFD
 13983                           pclath	equ	0xFFA
 13984                           tblptru	equ	0xFF8
 13985                           tblptrh	equ	0xFF7
 13986                           tblptrl	equ	0xFF6
 13987                           tablat	equ	0xFF5
 13988                           prodh	equ	0xFF4
 13989                           prodl	equ	0xFF3
 13990                           intcon	equ	0xFF2
 13991                           indf0	equ	0xFEF
 13992                           postinc0	equ	0xFEE
 13993                           fsr0h	equ	0xFEA
 13994                           fsr0l	equ	0xFE9
 13995                           wreg	equ	0xFE8
 13996                           postinc1	equ	0xFE6
 13997                           postdec1	equ	0xFE5
 13998                           plusw1	equ	0xFE3
 13999                           fsr1h	equ	0xFE2
 14000                           fsr1l	equ	0xFE1
 14001                           indf2	equ	0xFDF
 14002                           postinc2	equ	0xFDE
 14003                           postdec2	equ	0xFDD
 14004                           fsr2h	equ	0xFDA
 14005                           fsr2l	equ	0xFD9
 14006                           status	equ	0xFD8
 14007                           
 14008 ;; *************** function _UpdateReceiveWindow2Parameters *****************
 14009 ;; Defined at:
 14010 ;;		line 1084 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 14011 ;; Parameters:    Size  Location     Type
 14012 ;;  frequency       4    4[BANK0 ] unsigned long 
 14013 ;;  dataRate        1    8[BANK0 ] unsigned char 
 14014 ;; Auto vars:     Size  Location     Type
 14015 ;;		None
 14016 ;; Return value:  Size  Location     Type
 14017 ;;                  1    wreg      void 
 14018 ;; Registers used:
 14019 ;;		None
 14020 ;; Tracked objects:
 14021 ;;		On entry : F/0
 14022 ;;		On exit  : F/0
 14023 ;;		Unchanged: F/0
 14024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14025 ;;      Params:         0       5       0       0       0       0       0       0       0
 14026 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14027 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14028 ;;      Totals:         0       5       0       0       0       0       0       0       0
 14029 ;;Total ram usage:        5 bytes
 14030 ;; Hardware stack levels used:    1
 14031 ;; Hardware stack levels required when called:    7
 14032 ;; This function calls:
 14033 ;;		Nothing
 14034 ;; This function is called by:
 14035 ;;		_ExecuteRxParamSetupReq
 14036 ;; This function uses a non-reentrant model
 14037 ;;
 14038                           
 14039                           	psect	text69
 14040  0076E6                     __ptext69:
 14041                           	opt stack 0
 14042  0076E6                     _UpdateReceiveWindow2Parameters:
 14043                           	opt stack 17
 14044                           
 14045                           ; BSR set to: 0
 14046                           ;lorawan.c: 1086: loRa.receiveWindow2Parameters.dataRate = dataRate;
 14047                           
 14048                           ; BSR set to: 0
 14049                           ;incstack = 0
 14050  0076E6  C068  F21C         	movff	UpdateReceiveWindow2Parameters@dataRate,_loRa+28
 14051                           
 14052                           ;lorawan.c: 1087: loRa.receiveWindow2Parameters.frequency = frequency;
 14053  0076EA  C064  F218         	movff	UpdateReceiveWindow2Parameters@frequency,_loRa+24
 14054  0076EE  C065  F219         	movff	UpdateReceiveWindow2Parameters@frequency+1,_loRa+25
 14055  0076F2  C066  F21A         	movff	UpdateReceiveWindow2Parameters@frequency+2,_loRa+26
 14056  0076F6  C067  F21B         	movff	UpdateReceiveWindow2Parameters@frequency+3,_loRa+27
 14057                           
 14058                           ; BSR set to: 0
 14059  0076FA  0012               	return		;funcret
 14060  0076FC                     __end_of_UpdateReceiveWindow2Parameters:
 14061                           	opt stack 0
 14062                           tosu	equ	0xFFF
 14063                           tosh	equ	0xFFE
 14064                           tosl	equ	0xFFD
 14065                           pclath	equ	0xFFA
 14066                           tblptru	equ	0xFF8
 14067                           tblptrh	equ	0xFF7
 14068                           tblptrl	equ	0xFF6
 14069                           tablat	equ	0xFF5
 14070                           prodh	equ	0xFF4
 14071                           prodl	equ	0xFF3
 14072                           intcon	equ	0xFF2
 14073                           indf0	equ	0xFEF
 14074                           postinc0	equ	0xFEE
 14075                           fsr0h	equ	0xFEA
 14076                           fsr0l	equ	0xFE9
 14077                           wreg	equ	0xFE8
 14078                           postinc1	equ	0xFE6
 14079                           postdec1	equ	0xFE5
 14080                           plusw1	equ	0xFE3
 14081                           fsr1h	equ	0xFE2
 14082                           fsr1l	equ	0xFE1
 14083                           indf2	equ	0xFDF
 14084                           postinc2	equ	0xFDE
 14085                           postdec2	equ	0xFDD
 14086                           fsr2h	equ	0xFDA
 14087                           fsr2l	equ	0xFD9
 14088                           status	equ	0xFD8
 14089                           
 14090 ;; *************** function _ExecuteNewChannel *****************
 14091 ;; Defined at:
 14092 ;;		line 677 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14093 ;; Parameters:    Size  Location     Type
 14094 ;;  ptr             2   16[BANK0 ] PTR unsigned char 
 14095 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 14096 ;; Auto vars:     Size  Location     Type
 14097 ;;  frequency       4   19[BANK0 ] unsigned long 
 14098 ;;  channelIndex    1   23[BANK0 ] unsigned char 
 14099 ;;  drRange         1   18[BANK0 ] struct .
 14100 ;; Return value:  Size  Location     Type
 14101 ;;                  2   16[BANK0 ] PTR unsigned char 
 14102 ;; Registers used:
 14103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14104 ;; Tracked objects:
 14105 ;;		On entry : F/0
 14106 ;;		On exit  : F/2
 14107 ;;		Unchanged: 0/0
 14108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14109 ;;      Params:         0       2       0       0       0       0       0       0       0
 14110 ;;      Locals:         0       6       0       0       0       0       0       0       0
 14111 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14112 ;;      Totals:         0       8       0       0       0       0       0       0       0
 14113 ;;Total ram usage:        8 bytes
 14114 ;; Hardware stack levels used:    1
 14115 ;; Hardware stack levels required when called:    9
 14116 ;; This function calls:
 14117 ;;		_LORAWAN_SetChannelIdStatus
 14118 ;;		_UpdateChannelIdStatus
 14119 ;;		_UpdateDataRange
 14120 ;;		_UpdateDutyCycle
 14121 ;;		_UpdateFrequency
 14122 ;;		_ValidateChannelId
 14123 ;;		_ValidateDataRange
 14124 ;;		_ValidateFrequency
 14125 ;;		___lmul
 14126 ;; This function is called by:
 14127 ;;		_MacExecuteCommands
 14128 ;; This function uses a non-reentrant model
 14129 ;;
 14130                           
 14131                           	psect	text70
 14132  0033AA                     __ptext70:
 14133                           	opt stack 0
 14134  0033AA                     _ExecuteNewChannel:
 14135                           	opt stack 16
 14136                           
 14137                           ; BSR set to: 0
 14138                           ;lorawan_eu.c: 683: channelIndex = *(ptr++);
 14139                           
 14140                           ; BSR set to: 0
 14141                           
 14142                           ; BSR set to: 0
 14143                           ;incstack = 0
 14144  0033AA  C070  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 14145  0033AE  C071  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 14146  0033B2  50DF               	movf	indf2,w,c
 14147  0033B4  6F77               	movwf	ExecuteNewChannel@channelIndex& (0+255),b
 14148                           
 14149                           ; BSR set to: 0
 14150  0033B6  4B70               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 14151  0033B8  2B71               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14152                           
 14153                           ; BSR set to: 0
 14154                           ;lorawan_eu.c: 685: frequency = (*((uint32_t*)ptr)) & 0x00FFFFFF;
 14155  0033BA  C070  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 14156  0033BE  C071  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 14157  0033C2  0EFF               	movlw	255
 14158  0033C4  14DE               	andwf	postinc2,w,c
 14159  0033C6  6F73               	movwf	ExecuteNewChannel@frequency& (0+255),b
 14160  0033C8  0EFF               	movlw	255
 14161  0033CA  14DE               	andwf	postinc2,w,c
 14162  0033CC  6F74               	movwf	(ExecuteNewChannel@frequency+1)& (0+255),b
 14163  0033CE  0EFF               	movlw	255
 14164  0033D0  14DE               	andwf	postinc2,w,c
 14165  0033D2  6F75               	movwf	(ExecuteNewChannel@frequency+2)& (0+255),b
 14166  0033D4  0E00               	movlw	0
 14167  0033D6  14DE               	andwf	postinc2,w,c
 14168  0033D8  6F76               	movwf	(ExecuteNewChannel@frequency+3)& (0+255),b
 14169                           
 14170                           ; BSR set to: 0
 14171                           ;lorawan_eu.c: 686: frequency = frequency * 100;
 14172  0033DA  C073  F064         	movff	ExecuteNewChannel@frequency,___lmul@multiplier
 14173  0033DE  C074  F065         	movff	ExecuteNewChannel@frequency+1,___lmul@multiplier+1
 14174  0033E2  C075  F066         	movff	ExecuteNewChannel@frequency+2,___lmul@multiplier+2
 14175  0033E6  C076  F067         	movff	ExecuteNewChannel@frequency+3,___lmul@multiplier+3
 14176  0033EA  0E64               	movlw	100
 14177  0033EC  6F68               	movwf	___lmul@multiplicand& (0+255),b
 14178  0033EE  6B69               	clrf	(___lmul@multiplicand+1)& (0+255),b
 14179  0033F0  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 14180  0033F2  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 14181  0033F4  ECF7  F02E         	call	___lmul	;wreg free
 14182  0033F8  C064  F073         	movff	?___lmul,ExecuteNewChannel@frequency
 14183  0033FC  C065  F074         	movff	?___lmul+1,ExecuteNewChannel@frequency+1
 14184  003400  C066  F075         	movff	?___lmul+2,ExecuteNewChannel@frequency+2
 14185  003404  C067  F076         	movff	?___lmul+3,ExecuteNewChannel@frequency+3
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;lorawan_eu.c: 687: ptr = ptr + 3;
 14189  003408  0E03               	movlw	3
 14190  00340A  2770               	addwf	ExecuteNewChannel@ptr& (0+255),f,b
 14191  00340C  0E00               	movlw	0
 14192  00340E  2371               	addwfc	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14193                           
 14194                           ; BSR set to: 0
 14195                           ;lorawan_eu.c: 689: drRange.value = *(ptr++);
 14196  003410  C070  FFD9         	movff	ExecuteNewChannel@ptr,fsr2l
 14197  003414  C071  FFDA         	movff	ExecuteNewChannel@ptr+1,fsr2h
 14198  003418  50DF               	movf	indf2,w,c
 14199  00341A  6F72               	movwf	ExecuteNewChannel@drRange& (0+255),b
 14200                           
 14201                           ; BSR set to: 0
 14202  00341C  4B70               	infsnz	ExecuteNewChannel@ptr& (0+255),f,b
 14203  00341E  2B71               	incf	(ExecuteNewChannel@ptr+1)& (0+255),f,b
 14204                           
 14205                           ; BSR set to: 0
 14206                           ;lorawan_eu.c: 691: if (ValidateChannelId (channelIndex, 0) == OK)
 14207  003420  6B64               	clrf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 14208  003422  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14209  003424  EC7C  F03A         	call	_ValidateChannelId
 14210  003428  0900               	iorlw	0
 14211  00342A  E12B               	bnz	l1129
 14212                           
 14213                           ; BSR set to: 0
 14214                           ;lorawan_eu.c: 692: {
 14215                           ;lorawan_eu.c: 693: if ( (ValidateFrequency (frequency) == OK) || (frequency == 0) )
 14216  00342C  C073  F064         	movff	ExecuteNewChannel@frequency,ValidateFrequency@frequencyNew
 14217  003430  C074  F065         	movff	ExecuteNewChannel@frequency+1,ValidateFrequency@frequencyNew+1
 14218  003434  C075  F066         	movff	ExecuteNewChannel@frequency+2,ValidateFrequency@frequencyNew+2
 14219  003438  C076  F067         	movff	ExecuteNewChannel@frequency+3,ValidateFrequency@frequencyNew+3
 14220  00343C  ECEE  F033         	call	_ValidateFrequency	;wreg free
 14221  003440  0900               	iorlw	0
 14222  003442  E005               	bz	l13530
 14223                           
 14224                           ; BSR set to: 0
 14225  003444  5173               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 14226  003446  1174               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 14227  003448  1175               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 14228  00344A  1176               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 14229  00344C  E10A               	bnz	l13532
 14230  00344E                     l13530:
 14231                           
 14232                           ; BSR set to: 0
 14233                           ;lorawan_eu.c: 694: {
 14234                           ;lorawan_eu.c: 695: loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck = 1;
 14235  00344E  0102               	movlb	2	; () banked
 14236  003450  51A7               	movf	(_loRa+167)& (0+255),w,b
 14237  003452  0D02               	mullw	2
 14238  003454  0EA9               	movlw	low (_loRa+169)
 14239  003456  24F3               	addwf	prodl,w,c
 14240  003458  6ED9               	movwf	fsr2l,c
 14241  00345A  0E02               	movlw	high (_loRa+169)
 14242  00345C  20F4               	addwfc	prodh,w,c
 14243  00345E  6EDA               	movwf	fsr2h,c
 14244  003460  8EDF               	bsf	indf2,7,c
 14245  003462                     l13532:
 14246                           
 14247                           ;lorawan_eu.c: 696: }
 14248                           ;lorawan_eu.c: 698: if (ValidateDataRange (drRange.value) == OK)
 14249  003462  0100               	movlb	0	; () banked
 14250  003464  5172               	movf	ExecuteNewChannel@drRange& (0+255),w,b
 14251  003466  EC32  F038         	call	_ValidateDataRange
 14252  00346A  0900               	iorlw	0
 14253  00346C  E10A               	bnz	l1129
 14254                           
 14255                           ; BSR set to: 0
 14256                           ;lorawan_eu.c: 699: {
 14257                           ;lorawan_eu.c: 700: loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck = 1;
 14258  00346E  0102               	movlb	2	; () banked
 14259  003470  51A7               	movf	(_loRa+167)& (0+255),w,b
 14260  003472  0D02               	mullw	2
 14261  003474  0EA9               	movlw	low (_loRa+169)
 14262  003476  24F3               	addwf	prodl,w,c
 14263  003478  6ED9               	movwf	fsr2l,c
 14264  00347A  0E02               	movlw	high (_loRa+169)
 14265  00347C  20F4               	addwfc	prodh,w,c
 14266  00347E  6EDA               	movwf	fsr2h,c
 14267  003480  8CDF               	bsf	indf2,6,c
 14268  003482                     l1129:
 14269                           
 14270                           ;lorawan_eu.c: 701: }
 14271                           ;lorawan_eu.c: 702: }
 14272                           ;lorawan_eu.c: 704: if ( (loRa.macCommands[loRa.crtMacCmdIndex].channelFrequencyAck == 1
      +                          ) && (loRa.macCommands[loRa.crtMacCmdIndex].dataRateRangeAck == 1) )
 14273  003482  0102               	movlb	2	; () banked
 14274  003484  51A7               	movf	(_loRa+167)& (0+255),w,b
 14275  003486  0D02               	mullw	2
 14276  003488  0EA9               	movlw	low (_loRa+169)
 14277  00348A  24F3               	addwf	prodl,w,c
 14278  00348C  6ED9               	movwf	fsr2l,c
 14279  00348E  0E02               	movlw	high (_loRa+169)
 14280  003490  20F4               	addwfc	prodh,w,c
 14281  003492  6EDA               	movwf	fsr2h,c
 14282  003494  AEDF               	btfss	indf2,7,c
 14283  003496  D065               	goto	l13554
 14284                           
 14285                           ; BSR set to: 2
 14286  003498  51A7               	movf	(_loRa+167)& (0+255),w,b
 14287  00349A  0D02               	mullw	2
 14288  00349C  0EA9               	movlw	low (_loRa+169)
 14289  00349E  24F3               	addwf	prodl,w,c
 14290  0034A0  6ED9               	movwf	fsr2l,c
 14291  0034A2  0E02               	movlw	high (_loRa+169)
 14292  0034A4  20F4               	addwfc	prodh,w,c
 14293  0034A6  6EDA               	movwf	fsr2h,c
 14294  0034A8  ACDF               	btfss	indf2,6,c
 14295  0034AA  D05B               	goto	l13554
 14296                           
 14297                           ; BSR set to: 2
 14298                           ;lorawan_eu.c: 705: {
 14299                           ;lorawan_eu.c: 706: if (loRa.lastUsedChannelIndex < 16)
 14300  0034AC  0E10               	movlw	16
 14301  0034AE  61DA               	cpfslt	(_loRa+218)& (0+255),b
 14302  0034B0  D029               	goto	l13546
 14303                           
 14304                           ; BSR set to: 2
 14305                           ;lorawan_eu.c: 707: {
 14306                           ;lorawan_eu.c: 708: if (frequency != 0)
 14307  0034B2  0100               	movlb	0	; () banked
 14308  0034B4  5173               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 14309  0034B6  1174               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 14310  0034B8  1175               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 14311  0034BA  1176               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 14312  0034BC  E01E               	bz	l13544
 14313                           
 14314                           ; BSR set to: 0
 14315                           ;lorawan_eu.c: 709: {
 14316                           ;lorawan_eu.c: 710: UpdateFrequency (channelIndex, frequency);
 14317  0034BE  C073  F064         	movff	ExecuteNewChannel@frequency,UpdateFrequency@frequencyNew
 14318  0034C2  C074  F065         	movff	ExecuteNewChannel@frequency+1,UpdateFrequency@frequencyNew+1
 14319  0034C6  C075  F066         	movff	ExecuteNewChannel@frequency+2,UpdateFrequency@frequencyNew+2
 14320  0034CA  C076  F067         	movff	ExecuteNewChannel@frequency+3,UpdateFrequency@frequencyNew+3
 14321  0034CE  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14322  0034D0  ECC2  F037         	call	_UpdateFrequency
 14323                           
 14324                           ;lorawan_eu.c: 711: UpdateDataRange (channelIndex, drRange.value);
 14325  0034D4  C072  F064         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 14326  0034D8  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14327  0034DA  EC5B  F025         	call	_UpdateDataRange
 14328                           
 14329                           ;lorawan_eu.c: 712: UpdateDutyCycle (channelIndex, 302);
 14330  0034DE  0E01               	movlw	1
 14331  0034E0  0100               	movlb	0	; () banked
 14332  0034E2  6F65               	movwf	(UpdateDutyCycle@dutyCycleNew+1)& (0+255),b
 14333  0034E4  0E2E               	movlw	46
 14334  0034E6  6F64               	movwf	UpdateDutyCycle@dutyCycleNew& (0+255),b
 14335  0034E8  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14336  0034EA  EC7F  F038         	call	_UpdateDutyCycle
 14337                           
 14338                           ;lorawan_eu.c: 713: UpdateChannelIdStatus (channelIndex, 1);
 14339  0034EE  0E01               	movlw	1
 14340  0034F0  6F64               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 14341  0034F2  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14342  0034F4  ECD9  F023         	call	_UpdateChannelIdStatus
 14343                           
 14344                           ;lorawan_eu.c: 714: }
 14345  0034F8  D032               	goto	l13552
 14346  0034FA                     l13544:
 14347                           
 14348                           ; BSR set to: 0
 14349                           ;lorawan_eu.c: 715: else
 14350                           ;lorawan_eu.c: 716: {
 14351                           ;lorawan_eu.c: 717: LORAWAN_SetChannelIdStatus (channelIndex, 0);
 14352  0034FA  6B68               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14353  0034FC  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14354  0034FE  ECDF  F037         	call	_LORAWAN_SetChannelIdStatus
 14355  003502  D02D               	goto	l13552
 14356  003504                     l13546:
 14357                           
 14358                           ; BSR set to: 2
 14359                           ;lorawan_eu.c: 720: else
 14360                           ;lorawan_eu.c: 721: {
 14361                           ;lorawan_eu.c: 722: if (frequency != 0)
 14362  003504  0100               	movlb	0	; () banked
 14363  003506  5173               	movf	ExecuteNewChannel@frequency& (0+255),w,b
 14364  003508  1174               	iorwf	(ExecuteNewChannel@frequency+1)& (0+255),w,b
 14365  00350A  1175               	iorwf	(ExecuteNewChannel@frequency+2)& (0+255),w,b
 14366  00350C  1176               	iorwf	(ExecuteNewChannel@frequency+3)& (0+255),w,b
 14367  00350E  E022               	bz	l13550
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;lorawan_eu.c: 723: {
 14371                           ;lorawan_eu.c: 724: UpdateFrequency (channelIndex + 16, frequency);
 14372  003510  C073  F064         	movff	ExecuteNewChannel@frequency,UpdateFrequency@frequencyNew
 14373  003514  C074  F065         	movff	ExecuteNewChannel@frequency+1,UpdateFrequency@frequencyNew+1
 14374  003518  C075  F066         	movff	ExecuteNewChannel@frequency+2,UpdateFrequency@frequencyNew+2
 14375  00351C  C076  F067         	movff	ExecuteNewChannel@frequency+3,UpdateFrequency@frequencyNew+3
 14376  003520  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14377  003522  0F10               	addlw	16
 14378  003524  ECC2  F037         	call	_UpdateFrequency
 14379                           
 14380                           ;lorawan_eu.c: 725: UpdateDataRange (channelIndex + 16, drRange.value);
 14381  003528  C072  F064         	movff	ExecuteNewChannel@drRange,UpdateDataRange@dataRangeNew
 14382  00352C  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14383  00352E  0F10               	addlw	16
 14384  003530  EC5B  F025         	call	_UpdateDataRange
 14385                           
 14386                           ;lorawan_eu.c: 726: UpdateDutyCycle (channelIndex + 16, 302);
 14387  003534  0E01               	movlw	1
 14388  003536  0100               	movlb	0	; () banked
 14389  003538  6F65               	movwf	(UpdateDutyCycle@dutyCycleNew+1)& (0+255),b
 14390  00353A  0E2E               	movlw	46
 14391  00353C  6F64               	movwf	UpdateDutyCycle@dutyCycleNew& (0+255),b
 14392  00353E  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14393  003540  0F10               	addlw	16
 14394  003542  EC7F  F038         	call	_UpdateDutyCycle
 14395                           
 14396                           ;lorawan_eu.c: 727: UpdateChannelIdStatus (channelIndex + 16, 1);
 14397  003546  0E01               	movlw	1
 14398  003548  6F64               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 14399  00354A  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14400  00354C  0F10               	addlw	16
 14401  00354E  ECD9  F023         	call	_UpdateChannelIdStatus
 14402                           
 14403                           ;lorawan_eu.c: 728: }
 14404  003552  D005               	goto	l13552
 14405  003554                     l13550:
 14406                           
 14407                           ; BSR set to: 0
 14408                           ;lorawan_eu.c: 729: else
 14409                           ;lorawan_eu.c: 730: {
 14410                           ;lorawan_eu.c: 731: LORAWAN_SetChannelIdStatus (channelIndex + 16, 0);
 14411  003554  6B68               	clrf	LORAWAN_SetChannelIdStatus@statusNew& (0+255),b
 14412  003556  5177               	movf	ExecuteNewChannel@channelIndex& (0+255),w,b
 14413  003558  0F10               	addlw	16
 14414  00355A  ECDF  F037         	call	_LORAWAN_SetChannelIdStatus
 14415  00355E                     l13552:
 14416                           
 14417                           ;lorawan_eu.c: 732: }
 14418                           ;lorawan_eu.c: 733: }
 14419                           ;lorawan_eu.c: 735: loRa.macStatus.channelsModified = 1;
 14420  00355E  0102               	movlb	2	; () banked
 14421  003560  8703               	bsf	(_loRa+3)& (0+255),3,b
 14422  003562                     l13554:
 14423                           
 14424                           ; BSR set to: 2
 14425                           ;lorawan_eu.c: 736: }
 14426                           ;lorawan_eu.c: 737: return ptr;
 14427  003562  C070  F070         	movff	ExecuteNewChannel@ptr,?_ExecuteNewChannel
 14428  003566  C071  F071         	movff	ExecuteNewChannel@ptr+1,?_ExecuteNewChannel+1
 14429                           
 14430                           ; BSR set to: 2
 14431  00356A  0012               	return		;funcret
 14432  00356C                     __end_of_ExecuteNewChannel:
 14433                           	opt stack 0
 14434                           tosu	equ	0xFFF
 14435                           tosh	equ	0xFFE
 14436                           tosl	equ	0xFFD
 14437                           pclath	equ	0xFFA
 14438                           tblptru	equ	0xFF8
 14439                           tblptrh	equ	0xFF7
 14440                           tblptrl	equ	0xFF6
 14441                           tablat	equ	0xFF5
 14442                           prodh	equ	0xFF4
 14443                           prodl	equ	0xFF3
 14444                           intcon	equ	0xFF2
 14445                           indf0	equ	0xFEF
 14446                           postinc0	equ	0xFEE
 14447                           fsr0h	equ	0xFEA
 14448                           fsr0l	equ	0xFE9
 14449                           wreg	equ	0xFE8
 14450                           postinc1	equ	0xFE6
 14451                           postdec1	equ	0xFE5
 14452                           plusw1	equ	0xFE3
 14453                           fsr1h	equ	0xFE2
 14454                           fsr1l	equ	0xFE1
 14455                           indf2	equ	0xFDF
 14456                           postinc2	equ	0xFDE
 14457                           postdec2	equ	0xFDD
 14458                           fsr2h	equ	0xFDA
 14459                           fsr2l	equ	0xFD9
 14460                           status	equ	0xFD8
 14461                           
 14462 ;; *************** function _ValidateFrequency *****************
 14463 ;; Defined at:
 14464 ;;		line 1088 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14465 ;; Parameters:    Size  Location     Type
 14466 ;;  frequencyNew    4    4[BANK0 ] unsigned long 
 14467 ;; Auto vars:     Size  Location     Type
 14468 ;;  result          1    8[BANK0 ] enum E17190
 14469 ;; Return value:  Size  Location     Type
 14470 ;;                  1    wreg      enum E17190
 14471 ;; Registers used:
 14472 ;;		wreg, status,2, status,0
 14473 ;; Tracked objects:
 14474 ;;		On entry : F/0
 14475 ;;		On exit  : F/0
 14476 ;;		Unchanged: 0/0
 14477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14478 ;;      Params:         0       4       0       0       0       0       0       0       0
 14479 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14480 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14481 ;;      Totals:         0       5       0       0       0       0       0       0       0
 14482 ;;Total ram usage:        5 bytes
 14483 ;; Hardware stack levels used:    1
 14484 ;; Hardware stack levels required when called:    7
 14485 ;; This function calls:
 14486 ;;		Nothing
 14487 ;; This function is called by:
 14488 ;;		_ExecuteNewChannel
 14489 ;;		_ExecuteRxParamSetupReq
 14490 ;;		_UpdateCfList
 14491 ;; This function uses a non-reentrant model
 14492 ;;
 14493                           
 14494                           	psect	text71
 14495  0067DC                     __ptext71:
 14496                           	opt stack 0
 14497  0067DC                     _ValidateFrequency:
 14498                           	opt stack 18
 14499                           
 14500                           ; BSR set to: 0
 14501                           ;lorawan_eu.c: 1090: LorawanError_t result = OK;
 14502                           
 14503                           ; BSR set to: 2
 14504                           ;incstack = 0
 14505  0067DC  6B68               	clrf	ValidateFrequency@result& (0+255),b
 14506                           
 14507                           ; BSR set to: 0
 14508                           ;lorawan_eu.c: 1092: if(ISM_EU868 == loRa.ismBand)
 14509  0067DE  0102               	movlb	2	; () banked
 14510  0067E0  51A4               	movf	(_loRa+164)& (0+255),w,b
 14511  0067E2  E116               	bnz	l12800
 14512                           
 14513                           ; BSR set to: 2
 14514                           ;lorawan_eu.c: 1093: {
 14515                           ;lorawan_eu.c: 1094: if ( (frequencyNew > 870000000) || (frequencyNew < 863000000) )
 14516  0067E4  0E81               	movlw	129
 14517  0067E6  0100               	movlb	0	; () banked
 14518  0067E8  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 14519  0067EA  0E25               	movlw	37
 14520  0067EC  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 14521  0067EE  0EDB               	movlw	219
 14522  0067F0  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 14523  0067F2  0E33               	movlw	51
 14524  0067F4  5967               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 14525  0067F6  E209               	bc	l12798
 14526                           
 14527                           ; BSR set to: 0
 14528  0067F8  0EC0               	movlw	192
 14529  0067FA  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 14530  0067FC  0E55               	movlw	85
 14531  0067FE  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 14532  006800  0E70               	movlw	112
 14533  006802  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 14534  006804  0E33               	movlw	51
 14535  006806  5967               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 14536  006808  E215               	bc	l1250
 14537  00680A                     l12798:
 14538                           
 14539                           ; BSR set to: 0
 14540                           ;lorawan_eu.c: 1095: {
 14541                           ;lorawan_eu.c: 1096: result = INVALID_PARAMETER ;
 14542  00680A  0E03               	movlw	3
 14543  00680C  6F68               	movwf	ValidateFrequency@result& (0+255),b
 14544  00680E  D012               	goto	l1250
 14545  006810                     l12800:
 14546                           
 14547                           ; BSR set to: 2
 14548                           ;lorawan_eu.c: 1099: else
 14549                           ;lorawan_eu.c: 1100: {
 14550                           ;lorawan_eu.c: 1101: if ( (frequencyNew > 434790000) || (frequencyNew < 433050000) )
 14551  006810  0E71               	movlw	113
 14552  006812  0100               	movlb	0	; () banked
 14553  006814  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 14554  006816  0E5E               	movlw	94
 14555  006818  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 14556  00681A  0EEA               	movlw	234
 14557  00681C  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 14558  00681E  0E19               	movlw	25
 14559  006820  5967               	subwfb	(ValidateFrequency@frequencyNew+3)& (0+255),w,b
 14560  006822  E2F3               	bc	l12798
 14561                           
 14562                           ; BSR set to: 0
 14563  006824  0E90               	movlw	144
 14564  006826  5D64               	subwf	ValidateFrequency@frequencyNew& (0+255),w,b
 14565  006828  0ED1               	movlw	209
 14566  00682A  5965               	subwfb	(ValidateFrequency@frequencyNew+1)& (0+255),w,b
 14567  00682C  0ECF               	movlw	207
 14568  00682E  5966               	subwfb	(ValidateFrequency@frequencyNew+2)& (0+255),w,b
 14569  006830  0E19               	movlw	25
 14570  006832  D7E9               	goto	L7
 14571  006834                     l1250:
 14572                           
 14573                           ; BSR set to: 0
 14574                           ;lorawan_eu.c: 1104: }
 14575                           ;lorawan_eu.c: 1105: }
 14576                           ;lorawan_eu.c: 1107: return result;
 14577  006834  5168               	movf	ValidateFrequency@result& (0+255),w,b
 14578                           
 14579                           ; BSR set to: 0
 14580  006836  0012               	return		;funcret
 14581  006838                     __end_of_ValidateFrequency:
 14582                           	opt stack 0
 14583                           tosu	equ	0xFFF
 14584                           tosh	equ	0xFFE
 14585                           tosl	equ	0xFFD
 14586                           pclath	equ	0xFFA
 14587                           tblptru	equ	0xFF8
 14588                           tblptrh	equ	0xFF7
 14589                           tblptrl	equ	0xFF6
 14590                           tablat	equ	0xFF5
 14591                           prodh	equ	0xFF4
 14592                           prodl	equ	0xFF3
 14593                           intcon	equ	0xFF2
 14594                           indf0	equ	0xFEF
 14595                           postinc0	equ	0xFEE
 14596                           fsr0h	equ	0xFEA
 14597                           fsr0l	equ	0xFE9
 14598                           wreg	equ	0xFE8
 14599                           postinc1	equ	0xFE6
 14600                           postdec1	equ	0xFE5
 14601                           plusw1	equ	0xFE3
 14602                           fsr1h	equ	0xFE2
 14603                           fsr1l	equ	0xFE1
 14604                           indf2	equ	0xFDF
 14605                           postinc2	equ	0xFDE
 14606                           postdec2	equ	0xFDD
 14607                           fsr2h	equ	0xFDA
 14608                           fsr2l	equ	0xFD9
 14609                           status	equ	0xFD8
 14610                           
 14611 ;; *************** function _ValidateDataRange *****************
 14612 ;; Defined at:
 14613 ;;		line 1110 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14614 ;; Parameters:    Size  Location     Type
 14615 ;;  dataRangeNew    1    wreg     unsigned char 
 14616 ;; Auto vars:     Size  Location     Type
 14617 ;;  dataRangeNew    1    7[BANK0 ] unsigned char 
 14618 ;;  dataRateMin     1    9[BANK0 ] unsigned char 
 14619 ;;  dataRateMax     1    8[BANK0 ] unsigned char 
 14620 ;;  result          1    6[BANK0 ] enum E17190
 14621 ;; Return value:  Size  Location     Type
 14622 ;;                  1    wreg      enum E17190
 14623 ;; Registers used:
 14624 ;;		wreg, status,2, status,0, cstack
 14625 ;; Tracked objects:
 14626 ;;		On entry : F/0
 14627 ;;		On exit  : F/0
 14628 ;;		Unchanged: 0/0
 14629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14630 ;;      Params:         0       0       0       0       0       0       0       0       0
 14631 ;;      Locals:         0       4       0       0       0       0       0       0       0
 14632 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14633 ;;      Totals:         0       4       0       0       0       0       0       0       0
 14634 ;;Total ram usage:        4 bytes
 14635 ;; Hardware stack levels used:    1
 14636 ;; Hardware stack levels required when called:    8
 14637 ;; This function calls:
 14638 ;;		_ValidateDataRate
 14639 ;; This function is called by:
 14640 ;;		_ExecuteNewChannel
 14641 ;; This function uses a non-reentrant model
 14642 ;;
 14643                           
 14644                           	psect	text72
 14645  007064                     __ptext72:
 14646                           	opt stack 0
 14647  007064                     _ValidateDataRange:
 14648                           	opt stack 16
 14649                           
 14650                           ; BSR set to: 0
 14651                           ;incstack = 0
 14652                           ;ValidateDataRange@dataRangeNew stored from wreg
 14653  007064  6F67               	movwf	ValidateDataRange@dataRangeNew& (0+255),b
 14654                           
 14655                           ;lorawan_eu.c: 1112: LorawanError_t result = OK;
 14656  007066  0100               	movlb	0	; () banked
 14657  007068  6B66               	clrf	ValidateDataRange@result& (0+255),b
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;lorawan_eu.c: 1113: uint8_t dataRateMax, dataRateMin;
 14661                           ;lorawan_eu.c: 1115: dataRateMin = dataRangeNew & 0x0F;
 14662  00706A  5167               	movf	ValidateDataRange@dataRangeNew& (0+255),w,b
 14663  00706C  0B0F               	andlw	15
 14664  00706E  6F69               	movwf	ValidateDataRange@dataRateMin& (0+255),b
 14665                           
 14666                           ;lorawan_eu.c: 1116: dataRateMax = (dataRangeNew & 0xF0) >> (4);
 14667  007070  3967               	swapf	ValidateDataRange@dataRangeNew& (0+255),w,b
 14668  007072  0B0F               	andlw	15
 14669  007074  6F68               	movwf	ValidateDataRange@dataRateMax& (0+255),b
 14670                           
 14671                           ; BSR set to: 0
 14672                           ;lorawan_eu.c: 1118: if ( (ValidateDataRate (dataRateMax) != OK) || (ValidateDataRate (d
      +                          ataRateMin) != OK ) || (dataRateMax < dataRateMin) )
 14673  007076  5168               	movf	ValidateDataRange@dataRateMax& (0+255),w,b
 14674  007078  EC93  F03B         	call	_ValidateDataRate
 14675  00707C  0900               	iorlw	0
 14676  00707E  E108               	bnz	l12820
 14677                           
 14678                           ; BSR set to: 0
 14679  007080  5169               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 14680  007082  EC93  F03B         	call	_ValidateDataRate
 14681  007086  0900               	iorlw	0
 14682  007088  E103               	bnz	l12820
 14683                           
 14684                           ; BSR set to: 0
 14685  00708A  5169               	movf	ValidateDataRange@dataRateMin& (0+255),w,b
 14686  00708C  5D68               	subwf	ValidateDataRange@dataRateMax& (0+255),w,b
 14687  00708E  E202               	bc	l1257
 14688  007090                     l12820:
 14689                           
 14690                           ; BSR set to: 0
 14691                           ;lorawan_eu.c: 1119: {
 14692                           ;lorawan_eu.c: 1120: result = INVALID_PARAMETER;
 14693  007090  0E03               	movlw	3
 14694  007092  6F66               	movwf	ValidateDataRange@result& (0+255),b
 14695  007094                     l1257:
 14696                           
 14697                           ; BSR set to: 0
 14698                           ;lorawan_eu.c: 1121: }
 14699                           ;lorawan_eu.c: 1122: return result;
 14700  007094  5166               	movf	ValidateDataRange@result& (0+255),w,b
 14701                           
 14702                           ; BSR set to: 0
 14703  007096  0012               	return		;funcret
 14704  007098                     __end_of_ValidateDataRange:
 14705                           	opt stack 0
 14706                           tosu	equ	0xFFF
 14707                           tosh	equ	0xFFE
 14708                           tosl	equ	0xFFD
 14709                           pclath	equ	0xFFA
 14710                           tblptru	equ	0xFF8
 14711                           tblptrh	equ	0xFF7
 14712                           tblptrl	equ	0xFF6
 14713                           tablat	equ	0xFF5
 14714                           prodh	equ	0xFF4
 14715                           prodl	equ	0xFF3
 14716                           intcon	equ	0xFF2
 14717                           indf0	equ	0xFEF
 14718                           postinc0	equ	0xFEE
 14719                           fsr0h	equ	0xFEA
 14720                           fsr0l	equ	0xFE9
 14721                           wreg	equ	0xFE8
 14722                           postinc1	equ	0xFE6
 14723                           postdec1	equ	0xFE5
 14724                           plusw1	equ	0xFE3
 14725                           fsr1h	equ	0xFE2
 14726                           fsr1l	equ	0xFE1
 14727                           indf2	equ	0xFDF
 14728                           postinc2	equ	0xFDE
 14729                           postdec2	equ	0xFDD
 14730                           fsr2h	equ	0xFDA
 14731                           fsr2l	equ	0xFD9
 14732                           status	equ	0xFD8
 14733                           
 14734 ;; *************** function _UpdateFrequency *****************
 14735 ;; Defined at:
 14736 ;;		line 1154 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14737 ;; Parameters:    Size  Location     Type
 14738 ;;  channelId       1    wreg     unsigned char 
 14739 ;;  frequencyNew    4    4[BANK0 ] unsigned long 
 14740 ;; Auto vars:     Size  Location     Type
 14741 ;;  channelId       1    8[BANK0 ] unsigned char 
 14742 ;; Return value:  Size  Location     Type
 14743 ;;                  1    wreg      void 
 14744 ;; Registers used:
 14745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14746 ;; Tracked objects:
 14747 ;;		On entry : F/0
 14748 ;;		On exit  : F/0
 14749 ;;		Unchanged: 0/0
 14750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14751 ;;      Params:         0       4       0       0       0       0       0       0       0
 14752 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14753 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14754 ;;      Totals:         0       5       0       0       0       0       0       0       0
 14755 ;;Total ram usage:        5 bytes
 14756 ;; Hardware stack levels used:    1
 14757 ;; Hardware stack levels required when called:    7
 14758 ;; This function calls:
 14759 ;;		Nothing
 14760 ;; This function is called by:
 14761 ;;		_ExecuteNewChannel
 14762 ;; This function uses a non-reentrant model
 14763 ;;
 14764                           
 14765                           	psect	text73
 14766  006F84                     __ptext73:
 14767                           	opt stack 0
 14768  006F84                     _UpdateFrequency:
 14769                           	opt stack 17
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;incstack = 0
 14773                           ;UpdateFrequency@channelId stored from wreg
 14774  006F84  6F68               	movwf	UpdateFrequency@channelId& (0+255),b
 14775                           
 14776                           ;lorawan_eu.c: 1156: Channels[channelId].frequency = frequencyNew;
 14777  006F86  0100               	movlb	0	; () banked
 14778  006F88  5168               	movf	UpdateFrequency@channelId& (0+255),w,b
 14779  006F8A  0D0E               	mullw	14
 14780  006F8C  0E00               	movlw	low _Channels
 14781  006F8E  24F3               	addwf	prodl,w,c
 14782  006F90  6ED9               	movwf	fsr2l,c
 14783  006F92  0E04               	movlw	high _Channels
 14784  006F94  20F4               	addwfc	prodh,w,c
 14785  006F96  6EDA               	movwf	fsr2h,c
 14786  006F98  C064  FFDE         	movff	UpdateFrequency@frequencyNew,postinc2
 14787  006F9C  C065  FFDE         	movff	UpdateFrequency@frequencyNew+1,postinc2
 14788  006FA0  C066  FFDE         	movff	UpdateFrequency@frequencyNew+2,postinc2
 14789  006FA4  C067  FFDE         	movff	UpdateFrequency@frequencyNew+3,postinc2
 14790                           
 14791                           ;lorawan_eu.c: 1157: Channels[channelId].parametersDefined |= 0X01;
 14792  006FA8  5168               	movf	UpdateFrequency@channelId& (0+255),w,b
 14793  006FAA  0D0E               	mullw	14
 14794  006FAC  0E0D               	movlw	low (_Channels+13)
 14795  006FAE  24F3               	addwf	prodl,w,c
 14796  006FB0  6ED9               	movwf	fsr2l,c
 14797  006FB2  0E04               	movlw	high (_Channels+13)
 14798  006FB4  20F4               	addwfc	prodh,w,c
 14799  006FB6  6EDA               	movwf	fsr2h,c
 14800  006FB8  0E00               	movlw	0
 14801  006FBA  80DB               	bsf	plusw2,0,c
 14802                           
 14803                           ; BSR set to: 0
 14804  006FBC  0C00               	retlw	0	;funcret
 14805  006FBE                     __end_of_UpdateFrequency:
 14806                           	opt stack 0
 14807                           tosu	equ	0xFFF
 14808                           tosh	equ	0xFFE
 14809                           tosl	equ	0xFFD
 14810                           pclath	equ	0xFFA
 14811                           tblptru	equ	0xFF8
 14812                           tblptrh	equ	0xFF7
 14813                           tblptrl	equ	0xFF6
 14814                           tablat	equ	0xFF5
 14815                           prodh	equ	0xFF4
 14816                           prodl	equ	0xFF3
 14817                           intcon	equ	0xFF2
 14818                           indf0	equ	0xFEF
 14819                           postinc0	equ	0xFEE
 14820                           fsr0h	equ	0xFEA
 14821                           fsr0l	equ	0xFE9
 14822                           wreg	equ	0xFE8
 14823                           postinc1	equ	0xFE6
 14824                           postdec1	equ	0xFE5
 14825                           plusw1	equ	0xFE3
 14826                           fsr1h	equ	0xFE2
 14827                           fsr1l	equ	0xFE1
 14828                           indf2	equ	0xFDF
 14829                           postinc2	equ	0xFDE
 14830                           postdec2	equ	0xFDD
 14831                           plusw2	equ	0xFDB
 14832                           fsr2h	equ	0xFDA
 14833                           fsr2l	equ	0xFD9
 14834                           status	equ	0xFD8
 14835                           
 14836 ;; *************** function _UpdateDutyCycle *****************
 14837 ;; Defined at:
 14838 ;;		line 1160 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14839 ;; Parameters:    Size  Location     Type
 14840 ;;  channelId       1    wreg     unsigned char 
 14841 ;;  dutyCycleNew    2    4[BANK0 ] unsigned int 
 14842 ;; Auto vars:     Size  Location     Type
 14843 ;;  channelId       1    6[BANK0 ] unsigned char 
 14844 ;; Return value:  Size  Location     Type
 14845 ;;                  1    wreg      void 
 14846 ;; Registers used:
 14847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14848 ;; Tracked objects:
 14849 ;;		On entry : F/0
 14850 ;;		On exit  : F/0
 14851 ;;		Unchanged: 0/0
 14852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14853 ;;      Params:         0       2       0       0       0       0       0       0       0
 14854 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14855 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14856 ;;      Totals:         0       3       0       0       0       0       0       0       0
 14857 ;;Total ram usage:        3 bytes
 14858 ;; Hardware stack levels used:    1
 14859 ;; Hardware stack levels required when called:    7
 14860 ;; This function calls:
 14861 ;;		Nothing
 14862 ;; This function is called by:
 14863 ;;		_ExecuteNewChannel
 14864 ;; This function uses a non-reentrant model
 14865 ;;
 14866                           
 14867                           	psect	text74
 14868  0070FE                     __ptext74:
 14869                           	opt stack 0
 14870  0070FE                     _UpdateDutyCycle:
 14871                           	opt stack 17
 14872                           
 14873                           ; BSR set to: 0
 14874                           ;incstack = 0
 14875                           ;UpdateDutyCycle@channelId stored from wreg
 14876  0070FE  6F66               	movwf	UpdateDutyCycle@channelId& (0+255),b
 14877                           
 14878                           ;lorawan_eu.c: 1162: Channels[channelId].dutyCycle = dutyCycleNew;
 14879  007100  0100               	movlb	0	; () banked
 14880  007102  5166               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 14881  007104  0D0E               	mullw	14
 14882  007106  0E06               	movlw	low (_Channels+6)
 14883  007108  24F3               	addwf	prodl,w,c
 14884  00710A  6ED9               	movwf	fsr2l,c
 14885  00710C  0E04               	movlw	high (_Channels+6)
 14886  00710E  20F4               	addwfc	prodh,w,c
 14887  007110  6EDA               	movwf	fsr2h,c
 14888  007112  C064  FFDE         	movff	UpdateDutyCycle@dutyCycleNew,postinc2
 14889  007116  C065  FFDD         	movff	UpdateDutyCycle@dutyCycleNew+1,postdec2
 14890                           
 14891                           ;lorawan_eu.c: 1163: Channels[channelId].parametersDefined |= 0x04;
 14892  00711A  5166               	movf	UpdateDutyCycle@channelId& (0+255),w,b
 14893  00711C  0D0E               	mullw	14
 14894  00711E  0E0D               	movlw	low (_Channels+13)
 14895  007120  24F3               	addwf	prodl,w,c
 14896  007122  6ED9               	movwf	fsr2l,c
 14897  007124  0E04               	movlw	high (_Channels+13)
 14898  007126  20F4               	addwfc	prodh,w,c
 14899  007128  6EDA               	movwf	fsr2h,c
 14900  00712A  0E00               	movlw	0
 14901  00712C  84DB               	bsf	plusw2,2,c
 14902                           
 14903                           ; BSR set to: 0
 14904  00712E  0C00               	retlw	0	;funcret
 14905  007130                     __end_of_UpdateDutyCycle:
 14906                           	opt stack 0
 14907                           tosu	equ	0xFFF
 14908                           tosh	equ	0xFFE
 14909                           tosl	equ	0xFFD
 14910                           pclath	equ	0xFFA
 14911                           tblptru	equ	0xFF8
 14912                           tblptrh	equ	0xFF7
 14913                           tblptrl	equ	0xFF6
 14914                           tablat	equ	0xFF5
 14915                           prodh	equ	0xFF4
 14916                           prodl	equ	0xFF3
 14917                           intcon	equ	0xFF2
 14918                           indf0	equ	0xFEF
 14919                           postinc0	equ	0xFEE
 14920                           fsr0h	equ	0xFEA
 14921                           fsr0l	equ	0xFE9
 14922                           wreg	equ	0xFE8
 14923                           postinc1	equ	0xFE6
 14924                           postdec1	equ	0xFE5
 14925                           plusw1	equ	0xFE3
 14926                           fsr1h	equ	0xFE2
 14927                           fsr1l	equ	0xFE1
 14928                           indf2	equ	0xFDF
 14929                           postinc2	equ	0xFDE
 14930                           postdec2	equ	0xFDD
 14931                           plusw2	equ	0xFDB
 14932                           fsr2h	equ	0xFDA
 14933                           fsr2l	equ	0xFD9
 14934                           status	equ	0xFD8
 14935                           
 14936 ;; *************** function _UpdateDataRange *****************
 14937 ;; Defined at:
 14938 ;;		line 1009 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 14939 ;; Parameters:    Size  Location     Type
 14940 ;;  channelId       1    wreg     unsigned char 
 14941 ;;  dataRangeNew    1    4[BANK0 ] unsigned char 
 14942 ;; Auto vars:     Size  Location     Type
 14943 ;;  channelId       1    6[BANK0 ] unsigned char 
 14944 ;;  i               1    7[BANK0 ] unsigned char 
 14945 ;; Return value:  Size  Location     Type
 14946 ;;                  1    wreg      void 
 14947 ;; Registers used:
 14948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14949 ;; Tracked objects:
 14950 ;;		On entry : F/0
 14951 ;;		On exit  : F/2
 14952 ;;		Unchanged: 0/0
 14953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14954 ;;      Params:         0       1       0       0       0       0       0       0       0
 14955 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14956 ;;      Temps:          0       1       0       0       0       0       0       0       0
 14957 ;;      Totals:         0       4       0       0       0       0       0       0       0
 14958 ;;Total ram usage:        4 bytes
 14959 ;; Hardware stack levels used:    1
 14960 ;; Hardware stack levels required when called:    7
 14961 ;; This function calls:
 14962 ;;		Nothing
 14963 ;; This function is called by:
 14964 ;;		_ExecuteNewChannel
 14965 ;; This function uses a non-reentrant model
 14966 ;;
 14967                           
 14968                           	psect	text75
 14969  004AB6                     __ptext75:
 14970                           	opt stack 0
 14971  004AB6                     _UpdateDataRange:
 14972                           	opt stack 17
 14973                           
 14974                           ; BSR set to: 0
 14975                           ;incstack = 0
 14976                           ;UpdateDataRange@channelId stored from wreg
 14977  004AB6  6F66               	movwf	UpdateDataRange@channelId& (0+255),b
 14978                           
 14979                           ;lorawan_eu.c: 1011: uint8_t i;
 14980                           ;lorawan_eu.c: 1014: loRa.minDataRate = 7;
 14981  004AB8  0E07               	movlw	7
 14982  004ABA  0102               	movlb	2	; () banked
 14983  004ABC  6FEB               	movwf	(_loRa+235)& (0+255),b
 14984                           
 14985                           ; BSR set to: 2
 14986                           ;lorawan_eu.c: 1015: loRa.maxDataRate = 0;
 14987  004ABE  6BEC               	clrf	(_loRa+236)& (0+255),b
 14988                           
 14989                           ; BSR set to: 2
 14990                           ;lorawan_eu.c: 1017: Channels[channelId].dataRange.value = dataRangeNew;
 14991  004AC0  0100               	movlb	0	; () banked
 14992  004AC2  5166               	movf	UpdateDataRange@channelId& (0+255),w,b
 14993  004AC4  0D0E               	mullw	14
 14994  004AC6  0E05               	movlw	low (_Channels+5)
 14995  004AC8  24F3               	addwf	prodl,w,c
 14996  004ACA  6ED9               	movwf	fsr2l,c
 14997  004ACC  0E04               	movlw	high (_Channels+5)
 14998  004ACE  20F4               	addwfc	prodh,w,c
 14999  004AD0  6EDA               	movwf	fsr2h,c
 15000  004AD2  C064  FFDF         	movff	UpdateDataRange@dataRangeNew,indf2
 15001                           
 15002                           ; BSR set to: 0
 15003                           ;lorawan_eu.c: 1018: Channels[channelId].parametersDefined |= 0X02;
 15004  004AD6  5166               	movf	UpdateDataRange@channelId& (0+255),w,b
 15005  004AD8  0D0E               	mullw	14
 15006  004ADA  0E0D               	movlw	low (_Channels+13)
 15007  004ADC  24F3               	addwf	prodl,w,c
 15008  004ADE  6ED9               	movwf	fsr2l,c
 15009  004AE0  0E04               	movlw	high (_Channels+13)
 15010  004AE2  20F4               	addwfc	prodh,w,c
 15011  004AE4  6EDA               	movwf	fsr2h,c
 15012  004AE6  0E00               	movlw	0
 15013  004AE8  82DB               	bsf	plusw2,1,c
 15014                           
 15015                           ; BSR set to: 0
 15016                           ;lorawan_eu.c: 1019: for (i=0; i < loRa.maxChannels; i++)
 15017  004AEA  6B67               	clrf	UpdateDataRange@i& (0+255),b
 15018  004AEC  D04E               	goto	l12846
 15019  004AEE                     l12834:
 15020                           
 15021                           ; BSR set to: 0
 15022                           ;lorawan_eu.c: 1020: {
 15023                           ;lorawan_eu.c: 1021: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 15024  004AEE  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15025  004AF0  0D0E               	mullw	14
 15026  004AF2  0E05               	movlw	low (_Channels+5)
 15027  004AF4  24F3               	addwf	prodl,w,c
 15028  004AF6  6ED9               	movwf	fsr2l,c
 15029  004AF8  0E04               	movlw	high (_Channels+5)
 15030  004AFA  20F4               	addwfc	prodh,w,c
 15031  004AFC  6EDA               	movwf	fsr2h,c
 15032  004AFE  50DF               	movf	223,w,c
 15033  004B00  0B0F               	andlw	15
 15034  004B02  0100               	movlb	0	; () banked
 15035  004B04  6F65               	movwf	??_UpdateDataRange& (0+255),b
 15036  004B06  0102               	movlb	2	; () banked
 15037  004B08  51EB               	movf	(_loRa+235)& (0+255),w,b
 15038  004B0A  0100               	movlb	0	; () banked
 15039  004B0C  5D65               	subwf	??_UpdateDataRange& (0+255),w,b
 15040  004B0E  E216               	bc	l1223
 15041                           
 15042                           ; BSR set to: 0
 15043  004B10  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15044  004B12  0D0E               	mullw	14
 15045  004B14  0E04               	movlw	low (_Channels+4)
 15046  004B16  24F3               	addwf	prodl,w,c
 15047  004B18  6ED9               	movwf	fsr2l,c
 15048  004B1A  0E04               	movlw	high (_Channels+4)
 15049  004B1C  20F4               	addwfc	prodh,w,c
 15050  004B1E  6EDA               	movwf	fsr2h,c
 15051  004B20  04DE               	decf	postinc2,w,c
 15052  004B22  E10C               	bnz	l1223
 15053                           
 15054                           ; BSR set to: 0
 15055                           ;lorawan_eu.c: 1022: {
 15056                           ;lorawan_eu.c: 1023: loRa.minDataRate = Channels[i].dataRange.min;
 15057  004B24  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15058  004B26  0D0E               	mullw	14
 15059  004B28  0E05               	movlw	low (_Channels+5)
 15060  004B2A  24F3               	addwf	prodl,w,c
 15061  004B2C  6ED9               	movwf	fsr2l,c
 15062  004B2E  0E04               	movlw	high (_Channels+5)
 15063  004B30  20F4               	addwfc	prodh,w,c
 15064  004B32  6EDA               	movwf	fsr2h,c
 15065  004B34  50DF               	movf	223,w,c
 15066  004B36  0B0F               	andlw	15
 15067  004B38  0102               	movlb	2	; () banked
 15068  004B3A  6FEB               	movwf	(_loRa+235)& (0+255),b
 15069  004B3C                     l1223:
 15070                           
 15071                           ;lorawan_eu.c: 1024: }
 15072                           ;lorawan_eu.c: 1025: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 15073  004B3C  0100               	movlb	0	; () banked
 15074  004B3E  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15075  004B40  0D0E               	mullw	14
 15076  004B42  0E05               	movlw	low (_Channels+5)
 15077  004B44  24F3               	addwf	prodl,w,c
 15078  004B46  6ED9               	movwf	fsr2l,c
 15079  004B48  0E04               	movlw	high (_Channels+5)
 15080  004B4A  20F4               	addwfc	prodh,w,c
 15081  004B4C  6EDA               	movwf	fsr2h,c
 15082  004B4E  38DF               	swapf	223,w,c
 15083  004B50  0B0F               	andlw	15
 15084  004B52  0102               	movlb	2	; () banked
 15085  004B54  61EC               	cpfslt	(_loRa+236)& (0+255),b
 15086  004B56  D017               	goto	l12844
 15087                           
 15088                           ; BSR set to: 2
 15089  004B58  0100               	movlb	0	; () banked
 15090  004B5A  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15091  004B5C  0D0E               	mullw	14
 15092  004B5E  0E04               	movlw	low (_Channels+4)
 15093  004B60  24F3               	addwf	prodl,w,c
 15094  004B62  6ED9               	movwf	fsr2l,c
 15095  004B64  0E04               	movlw	high (_Channels+4)
 15096  004B66  20F4               	addwfc	prodh,w,c
 15097  004B68  6EDA               	movwf	fsr2h,c
 15098  004B6A  04DE               	decf	postinc2,w,c
 15099  004B6C  E10C               	bnz	l12844
 15100                           
 15101                           ; BSR set to: 0
 15102                           ;lorawan_eu.c: 1026: {
 15103                           ;lorawan_eu.c: 1027: loRa.maxDataRate = Channels[i].dataRange.max;
 15104  004B6E  5167               	movf	UpdateDataRange@i& (0+255),w,b
 15105  004B70  0D0E               	mullw	14
 15106  004B72  0E05               	movlw	low (_Channels+5)
 15107  004B74  24F3               	addwf	prodl,w,c
 15108  004B76  6ED9               	movwf	fsr2l,c
 15109  004B78  0E04               	movlw	high (_Channels+5)
 15110  004B7A  20F4               	addwfc	prodh,w,c
 15111  004B7C  6EDA               	movwf	fsr2h,c
 15112  004B7E  38DF               	swapf	223,w,c
 15113  004B80  0B0F               	andlw	15
 15114  004B82  0102               	movlb	2	; () banked
 15115  004B84  6FEC               	movwf	(_loRa+236)& (0+255),b
 15116  004B86                     l12844:
 15117  004B86  0100               	movlb	0	; () banked
 15118  004B88  2B67               	incf	UpdateDataRange@i& (0+255),f,b
 15119  004B8A                     l12846:
 15120                           
 15121                           ; BSR set to: 0
 15122  004B8A  0102               	movlb	2	; () banked
 15123  004B8C  51ED               	movf	(_loRa+237)& (0+255),w,b
 15124  004B8E  0100               	movlb	0	; () banked
 15125  004B90  5D67               	subwf	UpdateDataRange@i& (0+255),w,b
 15126  004B92  E3AD               	bnc	l12834
 15127                           
 15128                           ; BSR set to: 0
 15129                           ;lorawan_eu.c: 1028: }
 15130                           ;lorawan_eu.c: 1029: }
 15131                           ;lorawan_eu.c: 1031: if (loRa.currentDataRate > loRa.maxDataRate)
 15132  004B94  0102               	movlb	2	; () banked
 15133  004B96  51DF               	movf	(_loRa+223)& (0+255),w,b
 15134  004B98  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 15135  004B9A  E202               	bc	l12852
 15136                           
 15137                           ; BSR set to: 2
 15138                           ;lorawan_eu.c: 1032: {
 15139                           ;lorawan_eu.c: 1033: loRa.currentDataRate = loRa.maxDataRate;
 15140  004B9C  C2EC  F2DF         	movff	_loRa+236,_loRa+223
 15141  004BA0                     l12852:
 15142                           
 15143                           ; BSR set to: 2
 15144                           ;lorawan_eu.c: 1034: }
 15145                           ;lorawan_eu.c: 1036: if (loRa.currentDataRate < loRa.minDataRate)
 15146  004BA0  51EB               	movf	(_loRa+235)& (0+255),w,b
 15147  004BA2  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 15148  004BA4  A0D8               	btfss	status,0,c
 15149                           
 15150                           ; BSR set to: 2
 15151                           ;lorawan_eu.c: 1037: {
 15152                           ;lorawan_eu.c: 1038: loRa.currentDataRate = loRa.minDataRate;
 15153  004BA6  C2EB  F2DF         	movff	_loRa+235,_loRa+223
 15154                           
 15155                           ; BSR set to: 2
 15156  004BAA  0012               	return		;funcret
 15157  004BAC                     __end_of_UpdateDataRange:
 15158                           	opt stack 0
 15159                           tosu	equ	0xFFF
 15160                           tosh	equ	0xFFE
 15161                           tosl	equ	0xFFD
 15162                           pclath	equ	0xFFA
 15163                           tblptru	equ	0xFF8
 15164                           tblptrh	equ	0xFF7
 15165                           tblptrl	equ	0xFF6
 15166                           tablat	equ	0xFF5
 15167                           prodh	equ	0xFF4
 15168                           prodl	equ	0xFF3
 15169                           intcon	equ	0xFF2
 15170                           indf0	equ	0xFEF
 15171                           postinc0	equ	0xFEE
 15172                           fsr0h	equ	0xFEA
 15173                           fsr0l	equ	0xFE9
 15174                           wreg	equ	0xFE8
 15175                           postinc1	equ	0xFE6
 15176                           postdec1	equ	0xFE5
 15177                           plusw1	equ	0xFE3
 15178                           fsr1h	equ	0xFE2
 15179                           fsr1l	equ	0xFE1
 15180                           indf2	equ	0xFDF
 15181                           postinc2	equ	0xFDE
 15182                           postdec2	equ	0xFDD
 15183                           plusw2	equ	0xFDB
 15184                           fsr2h	equ	0xFDA
 15185                           fsr2l	equ	0xFD9
 15186                           status	equ	0xFD8
 15187                           
 15188 ;; *************** function _LORAWAN_SetChannelIdStatus *****************
 15189 ;; Defined at:
 15190 ;;		line 282 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;  channelId       1    wreg     unsigned char 
 15193 ;;  statusNew       1    8[BANK0 ] unsigned char 
 15194 ;; Auto vars:     Size  Location     Type
 15195 ;;  channelId       1   10[BANK0 ] unsigned char 
 15196 ;;  result          1    0        enum E17190
 15197 ;; Return value:  Size  Location     Type
 15198 ;;                  1    wreg      enum E17190
 15199 ;; Registers used:
 15200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15201 ;; Tracked objects:
 15202 ;;		On entry : F/0
 15203 ;;		On exit  : D/0
 15204 ;;		Unchanged: 0/0
 15205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15206 ;;      Params:         0       1       0       0       0       0       0       0       0
 15207 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15208 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15209 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15210 ;;Total ram usage:        3 bytes
 15211 ;; Hardware stack levels used:    1
 15212 ;; Hardware stack levels required when called:    8
 15213 ;; This function calls:
 15214 ;;		_UpdateChannelIdStatus
 15215 ;;		_ValidateChannelId
 15216 ;; This function is called by:
 15217 ;;		_ExecuteNewChannel
 15218 ;;		_UpdateCfList
 15219 ;; This function uses a non-reentrant model
 15220 ;;
 15221                           
 15222                           	psect	text76
 15223  006FBE                     __ptext76:
 15224                           	opt stack 0
 15225  006FBE                     _LORAWAN_SetChannelIdStatus:
 15226                           	opt stack 17
 15227                           
 15228                           ; BSR set to: 2
 15229                           ;incstack = 0
 15230                           ;LORAWAN_SetChannelIdStatus@channelId stored from wreg
 15231  006FBE  6F6A               	movwf	LORAWAN_SetChannelIdStatus@channelId& (0+255),b
 15232                           
 15233                           ;lorawan_eu.c: 287: if (ValidateChannelId (channelId, 1) != OK)
 15234  006FC0  0E01               	movlw	1
 15235  006FC2  0100               	movlb	0	; () banked
 15236  006FC4  6F64               	movwf	ValidateChannelId@allowedForDefaultChannels& (0+255),b
 15237  006FC6  516A               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15238  006FC8  EC7C  F03A         	call	_ValidateChannelId
 15239  006FCC  0900               	iorlw	0
 15240  006FCE  E001               	bz	l12862
 15241                           
 15242                           ; BSR set to: 0
 15243                           ;lorawan_eu.c: 290: }
 15244  006FD0  0012               	return	
 15245  006FD2                     l12862:
 15246                           
 15247                           ; BSR set to: 0
 15248                           ;lorawan_eu.c: 292: else
 15249                           ;lorawan_eu.c: 293: {
 15250                           ;lorawan_eu.c: 294: if ( (Channels[channelId].parametersDefined & (0X01 | 0X02 | 0x04) )
      +                           == (0X01 | 0X02 | 0x04) )
 15251  006FD2  516A               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15252  006FD4  0D0E               	mullw	14
 15253  006FD6  0E0D               	movlw	low (_Channels+13)
 15254  006FD8  24F3               	addwf	prodl,w,c
 15255  006FDA  6ED9               	movwf	fsr2l,c
 15256  006FDC  0E04               	movlw	high (_Channels+13)
 15257  006FDE  20F4               	addwfc	prodh,w,c
 15258  006FE0  6EDA               	movwf	fsr2h,c
 15259  006FE2  50DF               	movf	indf2,w,c
 15260  006FE4  0B07               	andlw	7
 15261  006FE6  0A07               	xorlw	7
 15262  006FE8  A4D8               	btfss	status,2,c
 15263  006FEA  0012               	return	
 15264                           
 15265                           ; BSR set to: 0
 15266                           ;lorawan_eu.c: 295: {
 15267                           ;lorawan_eu.c: 296: UpdateChannelIdStatus (channelId, statusNew);
 15268  006FEC  C068  F064         	movff	LORAWAN_SetChannelIdStatus@statusNew,UpdateChannelIdStatus@statusNew
 15269  006FF0  516A               	movf	LORAWAN_SetChannelIdStatus@channelId& (0+255),w,b
 15270  006FF2  EFD9  F023         	goto	_UpdateChannelIdStatus
 15271  006FF6                     __end_of_LORAWAN_SetChannelIdStatus:
 15272                           	opt stack 0
 15273                           tosu	equ	0xFFF
 15274                           tosh	equ	0xFFE
 15275                           tosl	equ	0xFFD
 15276                           pclath	equ	0xFFA
 15277                           tblptru	equ	0xFF8
 15278                           tblptrh	equ	0xFF7
 15279                           tblptrl	equ	0xFF6
 15280                           tablat	equ	0xFF5
 15281                           prodh	equ	0xFF4
 15282                           prodl	equ	0xFF3
 15283                           intcon	equ	0xFF2
 15284                           indf0	equ	0xFEF
 15285                           postinc0	equ	0xFEE
 15286                           fsr0h	equ	0xFEA
 15287                           fsr0l	equ	0xFE9
 15288                           wreg	equ	0xFE8
 15289                           postinc1	equ	0xFE6
 15290                           postdec1	equ	0xFE5
 15291                           plusw1	equ	0xFE3
 15292                           fsr1h	equ	0xFE2
 15293                           fsr1l	equ	0xFE1
 15294                           indf2	equ	0xFDF
 15295                           postinc2	equ	0xFDE
 15296                           postdec2	equ	0xFDD
 15297                           plusw2	equ	0xFDB
 15298                           fsr2h	equ	0xFDA
 15299                           fsr2l	equ	0xFD9
 15300                           status	equ	0xFD8
 15301                           
 15302 ;; *************** function _ValidateChannelId *****************
 15303 ;; Defined at:
 15304 ;;		line 1125 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15305 ;; Parameters:    Size  Location     Type
 15306 ;;  channelId       1    wreg     unsigned char 
 15307 ;;  allowedForDe    1    4[BANK0 ] unsigned char 
 15308 ;; Auto vars:     Size  Location     Type
 15309 ;;  channelId       1    6[BANK0 ] unsigned char 
 15310 ;;  result          1    5[BANK0 ] enum E17190
 15311 ;; Return value:  Size  Location     Type
 15312 ;;                  1    wreg      enum E17190
 15313 ;; Registers used:
 15314 ;;		wreg, status,2, status,0
 15315 ;; Tracked objects:
 15316 ;;		On entry : F/0
 15317 ;;		On exit  : F/0
 15318 ;;		Unchanged: 0/0
 15319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15320 ;;      Params:         0       1       0       0       0       0       0       0       0
 15321 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15322 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15323 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15324 ;;Total ram usage:        3 bytes
 15325 ;; Hardware stack levels used:    1
 15326 ;; Hardware stack levels required when called:    7
 15327 ;; This function calls:
 15328 ;;		Nothing
 15329 ;; This function is called by:
 15330 ;;		_LORAWAN_SetChannelIdStatus
 15331 ;;		_ExecuteNewChannel
 15332 ;; This function uses a non-reentrant model
 15333 ;;
 15334                           
 15335                           	psect	text77
 15336  0074F8                     __ptext77:
 15337                           	opt stack 0
 15338  0074F8                     _ValidateChannelId:
 15339                           	opt stack 17
 15340                           
 15341                           ;incstack = 0
 15342                           ;ValidateChannelId@channelId stored from wreg
 15343  0074F8  6F66               	movwf	ValidateChannelId@channelId& (0+255),b
 15344                           
 15345                           ;lorawan_eu.c: 1127: LorawanError_t result = OK;
 15346  0074FA  0100               	movlb	0	; () banked
 15347  0074FC  6B65               	clrf	ValidateChannelId@result& (0+255),b
 15348                           
 15349                           ; BSR set to: 0
 15350                           ;lorawan_eu.c: 1129: if ( (channelId >= 16) || ( (allowedForDefaultChannels == 0) && (ch
      +                          annelId < 3) ) )
 15351  0074FE  0E10               	movlw	16
 15352  007500  6166               	cpfslt	ValidateChannelId@channelId& (0+255),b
 15353  007502  D005               	goto	l12600
 15354                           
 15355                           ; BSR set to: 0
 15356  007504  5164               	movf	ValidateChannelId@allowedForDefaultChannels& (0+255),w,b
 15357  007506  E105               	bnz	l1263
 15358                           
 15359                           ; BSR set to: 0
 15360  007508  0E03               	movlw	3
 15361  00750A  6166               	cpfslt	ValidateChannelId@channelId& (0+255),b
 15362  00750C  D002               	goto	l1263
 15363  00750E                     l12600:
 15364                           
 15365                           ; BSR set to: 0
 15366                           ;lorawan_eu.c: 1130: {
 15367                           ;lorawan_eu.c: 1131: result = INVALID_PARAMETER ;
 15368  00750E  0E03               	movlw	3
 15369  007510  6F65               	movwf	ValidateChannelId@result& (0+255),b
 15370  007512                     l1263:
 15371                           
 15372                           ; BSR set to: 0
 15373                           ;lorawan_eu.c: 1132: }
 15374                           ;lorawan_eu.c: 1134: return result;
 15375  007512  5165               	movf	ValidateChannelId@result& (0+255),w,b
 15376                           
 15377                           ; BSR set to: 0
 15378  007514  0012               	return		;funcret
 15379  007516                     __end_of_ValidateChannelId:
 15380                           	opt stack 0
 15381                           tosu	equ	0xFFF
 15382                           tosh	equ	0xFFE
 15383                           tosl	equ	0xFFD
 15384                           pclath	equ	0xFFA
 15385                           tblptru	equ	0xFF8
 15386                           tblptrh	equ	0xFF7
 15387                           tblptrl	equ	0xFF6
 15388                           tablat	equ	0xFF5
 15389                           prodh	equ	0xFF4
 15390                           prodl	equ	0xFF3
 15391                           intcon	equ	0xFF2
 15392                           indf0	equ	0xFEF
 15393                           postinc0	equ	0xFEE
 15394                           fsr0h	equ	0xFEA
 15395                           fsr0l	equ	0xFE9
 15396                           wreg	equ	0xFE8
 15397                           postinc1	equ	0xFE6
 15398                           postdec1	equ	0xFE5
 15399                           plusw1	equ	0xFE3
 15400                           fsr1h	equ	0xFE2
 15401                           fsr1l	equ	0xFE1
 15402                           indf2	equ	0xFDF
 15403                           postinc2	equ	0xFDE
 15404                           postdec2	equ	0xFDD
 15405                           plusw2	equ	0xFDB
 15406                           fsr2h	equ	0xFDA
 15407                           fsr2l	equ	0xFD9
 15408                           status	equ	0xFD8
 15409                           
 15410 ;; *************** function _ExecuteLinkCheck *****************
 15411 ;; Defined at:
 15412 ;;		line 1652 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 15413 ;; Parameters:    Size  Location     Type
 15414 ;;  ptr             2    4[BANK0 ] PTR unsigned char 
 15415 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 15416 ;; Auto vars:     Size  Location     Type
 15417 ;;		None
 15418 ;; Return value:  Size  Location     Type
 15419 ;;                  2    4[BANK0 ] PTR unsigned char 
 15420 ;; Registers used:
 15421 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15422 ;; Tracked objects:
 15423 ;;		On entry : F/0
 15424 ;;		On exit  : F/0
 15425 ;;		Unchanged: 0/0
 15426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15427 ;;      Params:         0       2       0       0       0       0       0       0       0
 15428 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15429 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15430 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15431 ;;Total ram usage:        2 bytes
 15432 ;; Hardware stack levels used:    1
 15433 ;; Hardware stack levels required when called:    7
 15434 ;; This function calls:
 15435 ;;		Nothing
 15436 ;; This function is called by:
 15437 ;;		_MacExecuteCommands
 15438 ;; This function uses a non-reentrant model
 15439 ;;
 15440                           
 15441                           	psect	text78
 15442  007130                     __ptext78:
 15443                           	opt stack 0
 15444  007130                     _ExecuteLinkCheck:
 15445                           	opt stack 18
 15446                           
 15447                           ; BSR set to: 0
 15448                           ;lorawan.c: 1654: loRa.linkCheckMargin = *(ptr++);
 15449                           
 15450                           ; BSR set to: 0
 15451                           ;incstack = 0
 15452  007130  C064  FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 15453  007134  C065  FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 15454  007138  50DF               	movf	indf2,w,c
 15455  00713A  0102               	movlb	2	; () banked
 15456  00713C  6FDD               	movwf	(_loRa+221)& (0+255),b
 15457                           
 15458                           ; BSR set to: 2
 15459  00713E  0100               	movlb	0	; () banked
 15460  007140  4B64               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 15461  007142  2B65               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 15462                           
 15463                           ; BSR set to: 0
 15464                           ;lorawan.c: 1655: loRa.linkCheckGwCnt = *(ptr++);
 15465  007144  C064  FFD9         	movff	ExecuteLinkCheck@ptr,fsr2l
 15466  007148  C065  FFDA         	movff	ExecuteLinkCheck@ptr+1,fsr2h
 15467  00714C  50DF               	movf	indf2,w,c
 15468  00714E  0102               	movlb	2	; () banked
 15469  007150  6FDE               	movwf	(_loRa+222)& (0+255),b
 15470  007152  0100               	movlb	0	; () banked
 15471  007154  4B64               	infsnz	ExecuteLinkCheck@ptr& (0+255),f,b
 15472  007156  2B65               	incf	(ExecuteLinkCheck@ptr+1)& (0+255),f,b
 15473                           
 15474                           ; BSR set to: 0
 15475                           ;lorawan.c: 1656: return ptr;
 15476  007158  C064  F064         	movff	ExecuteLinkCheck@ptr,?_ExecuteLinkCheck
 15477  00715C  C065  F065         	movff	ExecuteLinkCheck@ptr+1,?_ExecuteLinkCheck+1
 15478                           
 15479                           ; BSR set to: 0
 15480  007160  0012               	return		;funcret
 15481  007162                     __end_of_ExecuteLinkCheck:
 15482                           	opt stack 0
 15483                           tosu	equ	0xFFF
 15484                           tosh	equ	0xFFE
 15485                           tosl	equ	0xFFD
 15486                           pclath	equ	0xFFA
 15487                           tblptru	equ	0xFF8
 15488                           tblptrh	equ	0xFF7
 15489                           tblptrl	equ	0xFF6
 15490                           tablat	equ	0xFF5
 15491                           prodh	equ	0xFF4
 15492                           prodl	equ	0xFF3
 15493                           intcon	equ	0xFF2
 15494                           indf0	equ	0xFEF
 15495                           postinc0	equ	0xFEE
 15496                           fsr0h	equ	0xFEA
 15497                           fsr0l	equ	0xFE9
 15498                           wreg	equ	0xFE8
 15499                           postinc1	equ	0xFE6
 15500                           postdec1	equ	0xFE5
 15501                           plusw1	equ	0xFE3
 15502                           fsr1h	equ	0xFE2
 15503                           fsr1l	equ	0xFE1
 15504                           indf2	equ	0xFDF
 15505                           postinc2	equ	0xFDE
 15506                           postdec2	equ	0xFDD
 15507                           plusw2	equ	0xFDB
 15508                           fsr2h	equ	0xFDA
 15509                           fsr2l	equ	0xFD9
 15510                           status	equ	0xFD8
 15511                           
 15512 ;; *************** function _ExecuteLinkAdr *****************
 15513 ;; Defined at:
 15514 ;;		line 613 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15515 ;; Parameters:    Size  Location     Type
 15516 ;;  ptr             2   17[BANK0 ] PTR unsigned char 
 15517 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 15518 ;; Auto vars:     Size  Location     Type
 15519 ;;  redundancy      2   23[BANK0 ] PTR struct .
 15520 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 15521 ;;  channelMask     2   20[BANK0 ] unsigned int 
 15522 ;;  dataRate        1   25[BANK0 ] unsigned char 
 15523 ;;  txPower         1   22[BANK0 ] unsigned char 
 15524 ;; Return value:  Size  Location     Type
 15525 ;;                  2   17[BANK0 ] PTR unsigned char 
 15526 ;; Registers used:
 15527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15528 ;; Tracked objects:
 15529 ;;		On entry : F/0
 15530 ;;		On exit  : F/2
 15531 ;;		Unchanged: 0/0
 15532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15533 ;;      Params:         0       2       0       0       0       0       0       0       0
 15534 ;;      Locals:         0       6       0       0       0       0       0       0       0
 15535 ;;      Temps:          0       1       0       0       0       0       0       0       0
 15536 ;;      Totals:         0       9       0       0       0       0       0       0       0
 15537 ;;Total ram usage:        9 bytes
 15538 ;; Hardware stack levels used:    1
 15539 ;; Hardware stack levels required when called:   10
 15540 ;; This function calls:
 15541 ;;		_EnableChannels
 15542 ;;		_UpdateCurrentDataRate
 15543 ;;		_UpdateTxPower
 15544 ;;		_ValidateChannelMask
 15545 ;;		_ValidateChannelMaskCntl
 15546 ;;		_ValidateDataRate
 15547 ;;		_ValidateTxPower
 15548 ;; This function is called by:
 15549 ;;		_MacExecuteCommands
 15550 ;; This function uses a non-reentrant model
 15551 ;;
 15552                           
 15553                           	psect	text79
 15554  00356C                     __ptext79:
 15555                           	opt stack 0
 15556  00356C                     _ExecuteLinkAdr:
 15557                           	opt stack 15
 15558                           
 15559                           ; BSR set to: 0
 15560                           ;lorawan_eu.c: 615: uint8_t txPower, dataRate;
 15561                           ;lorawan_eu.c: 616: uint16_t channelMask;
 15562                           ;lorawan_eu.c: 618: txPower = *(ptr) & 0x0F;
 15563                           
 15564                           ; BSR set to: 0
 15565                           ;incstack = 0
 15566  00356C  C071  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 15567  003570  C072  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 15568  003574  50DF               	movf	indf2,w,c
 15569  003576  0B0F               	andlw	15
 15570  003578  6F76               	movwf	ExecuteLinkAdr@txPower& (0+255),b
 15571                           
 15572                           ;lorawan_eu.c: 619: dataRate = ( *(ptr) & 0xF0 ) >> (4);
 15573  00357A  C071  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 15574  00357E  C072  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 15575  003582  50DF               	movf	indf2,w,c
 15576  003584  6F73               	movwf	??_ExecuteLinkAdr& (0+255),b
 15577  003586  3973               	swapf	??_ExecuteLinkAdr& (0+255),w,b
 15578  003588  0B0F               	andlw	15
 15579  00358A  6F79               	movwf	ExecuteLinkAdr@dataRate& (0+255),b
 15580                           
 15581                           ; BSR set to: 0
 15582                           ;lorawan_eu.c: 620: ptr++;
 15583  00358C  4B71               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 15584  00358E  2B72               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 15585                           
 15586                           ; BSR set to: 0
 15587                           ;lorawan_eu.c: 621: channelMask = (*((uint16_t*)ptr));
 15588  003590  C071  FFD9         	movff	ExecuteLinkAdr@ptr,fsr2l
 15589  003594  C072  FFDA         	movff	ExecuteLinkAdr@ptr+1,fsr2h
 15590  003598  CFDE F074          	movff	postinc2,ExecuteLinkAdr@channelMask
 15591  00359C  CFDD F075          	movff	postdec2,ExecuteLinkAdr@channelMask+1
 15592                           
 15593                           ; BSR set to: 0
 15594                           ;lorawan_eu.c: 622: ptr = ptr + sizeof (channelMask);
 15595  0035A0  0E02               	movlw	2
 15596  0035A2  2771               	addwf	ExecuteLinkAdr@ptr& (0+255),f,b
 15597  0035A4  0E00               	movlw	0
 15598  0035A6  2372               	addwfc	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 15599                           
 15600                           ; BSR set to: 0
 15601                           ;lorawan_eu.c: 623: Redundancy_t *redundancy;
 15602                           ;lorawan_eu.c: 624: redundancy = (Redundancy_t*)(ptr++);
 15603  0035A8  C071  F077         	movff	ExecuteLinkAdr@ptr,ExecuteLinkAdr@redundancy
 15604  0035AC  C072  F078         	movff	ExecuteLinkAdr@ptr+1,ExecuteLinkAdr@redundancy+1
 15605                           
 15606                           ; BSR set to: 0
 15607  0035B0  4B71               	infsnz	ExecuteLinkAdr@ptr& (0+255),f,b
 15608  0035B2  2B72               	incf	(ExecuteLinkAdr@ptr+1)& (0+255),f,b
 15609                           
 15610                           ; BSR set to: 0
 15611                           ;lorawan_eu.c: 626: if (1 == loRa.macStatus.adr)
 15612  0035B4  0102               	movlb	2	; () banked
 15613  0035B6  AD02               	btfss	(_loRa+2)& (0+255),6,b
 15614  0035B8  D092               	goto	l13498
 15615                           
 15616                           ; BSR set to: 2
 15617                           ;lorawan_eu.c: 627: {
 15618                           ;lorawan_eu.c: 628: if ( (ValidateChannelMaskCntl(redundancy->chMaskCntl) == OK) && (Val
      +                          idateChannelMask(channelMask) == OK) )
 15619  0035BA  C077  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 15620  0035BE  C078  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 15621  0035C2  0100               	movlb	0	; () banked
 15622  0035C4  38DF               	swapf	223,w,c
 15623  0035C6  0B07               	andlw	7
 15624  0035C8  EC67  F03B         	call	_ValidateChannelMaskCntl
 15625  0035CC  0900               	iorlw	0
 15626  0035CE  E112               	bnz	l13466
 15627                           
 15628                           ; BSR set to: 0
 15629  0035D0  C074  F064         	movff	ExecuteLinkAdr@channelMask,ValidateChannelMask@channelMask
 15630  0035D4  C075  F065         	movff	ExecuteLinkAdr@channelMask+1,ValidateChannelMask@channelMask+1
 15631  0035D8  ECFB  F037         	call	_ValidateChannelMask	;wreg free
 15632  0035DC  0900               	iorlw	0
 15633  0035DE  E10A               	bnz	l13466
 15634                           
 15635                           ; BSR set to: 0
 15636                           ;lorawan_eu.c: 629: {
 15637                           ;lorawan_eu.c: 630: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 1;
 15638  0035E0  0102               	movlb	2	; () banked
 15639  0035E2  51A7               	movf	(_loRa+167)& (0+255),w,b
 15640  0035E4  0D02               	mullw	2
 15641  0035E6  0EA9               	movlw	low (_loRa+169)
 15642  0035E8  24F3               	addwf	prodl,w,c
 15643  0035EA  6ED9               	movwf	fsr2l,c
 15644  0035EC  0E02               	movlw	high (_loRa+169)
 15645  0035EE  20F4               	addwfc	prodh,w,c
 15646  0035F0  6EDA               	movwf	fsr2h,c
 15647  0035F2  80DF               	bsf	indf2,0,c
 15648  0035F4                     l13466:
 15649                           
 15650                           ;lorawan_eu.c: 631: }
 15651                           ;lorawan_eu.c: 633: if ( (ValidateDataRate (dataRate) == OK) && (dataRate >= loRa.minDat
      +                          aRate) && (dataRate <= loRa.maxDataRate) )
 15652  0035F4  0100               	movlb	0	; () banked
 15653  0035F6  5179               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 15654  0035F8  EC93  F03B         	call	_ValidateDataRate
 15655  0035FC  0900               	iorlw	0
 15656  0035FE  E112               	bnz	l13474
 15657                           
 15658                           ; BSR set to: 0
 15659  003600  0102               	movlb	2	; () banked
 15660  003602  51EB               	movf	(_loRa+235)& (0+255),w,b
 15661  003604  0100               	movlb	0	; () banked
 15662  003606  5D79               	subwf	ExecuteLinkAdr@dataRate& (0+255),w,b
 15663  003608  E30D               	bnc	l13474
 15664                           
 15665                           ; BSR set to: 0
 15666  00360A  5179               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 15667  00360C  0102               	movlb	2	; () banked
 15668  00360E  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 15669  003610  E309               	bnc	l13474
 15670                           
 15671                           ; BSR set to: 2
 15672                           ;lorawan_eu.c: 634: {
 15673                           ;lorawan_eu.c: 635: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 1;
 15674  003612  51A7               	movf	(_loRa+167)& (0+255),w,b
 15675  003614  0D02               	mullw	2
 15676  003616  0EA9               	movlw	low (_loRa+169)
 15677  003618  24F3               	addwf	prodl,w,c
 15678  00361A  6ED9               	movwf	fsr2l,c
 15679  00361C  0E02               	movlw	high (_loRa+169)
 15680  00361E  20F4               	addwfc	prodh,w,c
 15681  003620  6EDA               	movwf	fsr2h,c
 15682  003622  82DF               	bsf	indf2,1,c
 15683  003624                     l13474:
 15684                           
 15685                           ;lorawan_eu.c: 636: }
 15686                           ;lorawan_eu.c: 638: if (ValidateTxPower (txPower) == OK)
 15687  003624  0100               	movlb	0	; () banked
 15688  003626  5176               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 15689  003628  EC0B  F03A         	call	_ValidateTxPower
 15690  00362C  0900               	iorlw	0
 15691  00362E  E10A               	bnz	l1118
 15692                           
 15693                           ; BSR set to: 0
 15694                           ;lorawan_eu.c: 639: {
 15695                           ;lorawan_eu.c: 640: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 1;
 15696  003630  0102               	movlb	2	; () banked
 15697  003632  51A7               	movf	(_loRa+167)& (0+255),w,b
 15698  003634  0D02               	mullw	2
 15699  003636  0EA9               	movlw	low (_loRa+169)
 15700  003638  24F3               	addwf	prodl,w,c
 15701  00363A  6ED9               	movwf	fsr2l,c
 15702  00363C  0E02               	movlw	high (_loRa+169)
 15703  00363E  20F4               	addwfc	prodh,w,c
 15704  003640  6EDA               	movwf	fsr2h,c
 15705  003642  84DF               	bsf	indf2,2,c
 15706  003644                     l1118:
 15707                           
 15708                           ;lorawan_eu.c: 641: }
 15709                           ;lorawan_eu.c: 643: if ( (loRa.macCommands[loRa.crtMacCmdIndex].powerAck == 1) && (loRa.
      +                          macCommands[loRa.crtMacCmdIndex].dataRateAck == 1) && (loRa.macCommands[loRa.crtMacCmdIn
      +                          dex].channelMaskAck == 1) )
 15710  003644  0102               	movlb	2	; () banked
 15711  003646  51A7               	movf	(_loRa+167)& (0+255),w,b
 15712  003648  0D02               	mullw	2
 15713  00364A  0EA9               	movlw	low (_loRa+169)
 15714  00364C  24F3               	addwf	prodl,w,c
 15715  00364E  6ED9               	movwf	fsr2l,c
 15716  003650  0E02               	movlw	high (_loRa+169)
 15717  003652  20F4               	addwfc	prodh,w,c
 15718  003654  6EDA               	movwf	fsr2h,c
 15719  003656  A4DF               	btfss	indf2,2,c
 15720  003658  D05D               	goto	l13500
 15721                           
 15722                           ; BSR set to: 2
 15723  00365A  51A7               	movf	(_loRa+167)& (0+255),w,b
 15724  00365C  0D02               	mullw	2
 15725  00365E  0EA9               	movlw	low (_loRa+169)
 15726  003660  24F3               	addwf	prodl,w,c
 15727  003662  6ED9               	movwf	fsr2l,c
 15728  003664  0E02               	movlw	high (_loRa+169)
 15729  003666  20F4               	addwfc	prodh,w,c
 15730  003668  6EDA               	movwf	fsr2h,c
 15731  00366A  A2DF               	btfss	indf2,1,c
 15732  00366C  D053               	goto	l13500
 15733                           
 15734                           ; BSR set to: 2
 15735  00366E  51A7               	movf	(_loRa+167)& (0+255),w,b
 15736  003670  0D02               	mullw	2
 15737  003672  0EA9               	movlw	low (_loRa+169)
 15738  003674  24F3               	addwf	prodl,w,c
 15739  003676  6ED9               	movwf	fsr2l,c
 15740  003678  0E02               	movlw	high (_loRa+169)
 15741  00367A  20F4               	addwfc	prodh,w,c
 15742  00367C  6EDA               	movwf	fsr2h,c
 15743  00367E  A0DF               	btfss	indf2,0,c
 15744  003680  D049               	goto	l13500
 15745                           
 15746                           ; BSR set to: 2
 15747                           ;lorawan_eu.c: 644: {
 15748                           ;lorawan_eu.c: 645: EnableChannels (channelMask, redundancy->chMaskCntl);
 15749  003682  C074  F06E         	movff	ExecuteLinkAdr@channelMask,EnableChannels@channelMask
 15750  003686  C075  F06F         	movff	ExecuteLinkAdr@channelMask+1,EnableChannels@channelMask+1
 15751  00368A  C077  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 15752  00368E  C078  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 15753  003692  0100               	movlb	0	; () banked
 15754  003694  38DF               	swapf	223,w,c
 15755  003696  0B07               	andlw	7
 15756  003698  6F70               	movwf	EnableChannels@channelMaskCntl& (0+255),b
 15757  00369A  EC7E  F03B         	call	_EnableChannels	;wreg free
 15758                           
 15759                           ; BSR set to: 0
 15760                           ;lorawan_eu.c: 647: UpdateTxPower (txPower);
 15761  00369E  5176               	movf	ExecuteLinkAdr@txPower& (0+255),w,b
 15762  0036A0  EC25  F03C         	call	_UpdateTxPower
 15763                           
 15764                           ;lorawan_eu.c: 648: loRa.macStatus.txPowerModified = 1;
 15765  0036A4  0102               	movlb	2	; () banked
 15766  0036A6  8903               	bsf	(_loRa+3)& (0+255),4,b
 15767                           
 15768                           ; BSR set to: 2
 15769                           ;lorawan_eu.c: 649: UpdateCurrentDataRate (dataRate);
 15770  0036A8  0100               	movlb	0	; () banked
 15771  0036AA  5179               	movf	ExecuteLinkAdr@dataRate& (0+255),w,b
 15772  0036AC  EC29  F03C         	call	_UpdateCurrentDataRate
 15773                           
 15774                           ;lorawan_eu.c: 651: if (redundancy->nbRep == 0)
 15775  0036B0  C077  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 15776  0036B4  C078  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 15777  0036B8  0100               	movlb	0	; () banked
 15778  0036BA  50DF               	movf	223,w,c
 15779  0036BC  0B0F               	andlw	15
 15780  0036BE  E103               	bnz	l13494
 15781                           
 15782                           ; BSR set to: 0
 15783                           ;lorawan_eu.c: 652: {
 15784                           ;lorawan_eu.c: 653: loRa.maxRepetitionsUnconfirmedUplink = 0;
 15785  0036C0  0102               	movlb	2	; () banked
 15786  0036C2  6BD6               	clrf	(_loRa+214)& (0+255),b
 15787                           
 15788                           ;lorawan_eu.c: 654: }
 15789  0036C4  D00A               	goto	l13496
 15790  0036C6                     l13494:
 15791                           
 15792                           ; BSR set to: 0
 15793                           ;lorawan_eu.c: 655: else
 15794                           ;lorawan_eu.c: 656: {
 15795                           ;lorawan_eu.c: 657: loRa.maxRepetitionsUnconfirmedUplink = redundancy->nbRep - 1;
 15796  0036C6  C077  FFD9         	movff	ExecuteLinkAdr@redundancy,fsr2l
 15797  0036CA  C078  FFDA         	movff	ExecuteLinkAdr@redundancy+1,fsr2h
 15798  0036CE  50DF               	movf	223,w,c
 15799  0036D0  0B0F               	andlw	15
 15800  0036D2  6F73               	movwf	??_ExecuteLinkAdr& (0+255),b
 15801  0036D4  0573               	decf	??_ExecuteLinkAdr& (0+255),w,b
 15802  0036D6  0102               	movlb	2	; () banked
 15803  0036D8  6FD6               	movwf	(_loRa+214)& (0+255),b
 15804  0036DA                     l13496:
 15805                           
 15806                           ; BSR set to: 2
 15807                           ;lorawan_eu.c: 658: }
 15808                           ;lorawan_eu.c: 659: loRa.macStatus.nbRepModified = 1;
 15809  0036DA  8B03               	bsf	(_loRa+3)& (0+255),5,b
 15810  0036DC  D01B               	goto	l13500
 15811  0036DE                     l13498:
 15812                           
 15813                           ; BSR set to: 2
 15814                           ;lorawan_eu.c: 662: else
 15815                           ;lorawan_eu.c: 663: {
 15816                           ;lorawan_eu.c: 664: loRa.macCommands[loRa.crtMacCmdIndex].channelMaskAck = 0;
 15817  0036DE  51A7               	movf	(_loRa+167)& (0+255),w,b
 15818  0036E0  0D02               	mullw	2
 15819  0036E2  0EA9               	movlw	low (_loRa+169)
 15820  0036E4  24F3               	addwf	prodl,w,c
 15821  0036E6  6ED9               	movwf	fsr2l,c
 15822  0036E8  0E02               	movlw	high (_loRa+169)
 15823  0036EA  20F4               	addwfc	prodh,w,c
 15824  0036EC  6EDA               	movwf	fsr2h,c
 15825  0036EE  90DF               	bcf	indf2,0,c
 15826                           
 15827                           ;lorawan_eu.c: 665: loRa.macCommands[loRa.crtMacCmdIndex].dataRateAck = 0;
 15828  0036F0  51A7               	movf	(_loRa+167)& (0+255),w,b
 15829  0036F2  0D02               	mullw	2
 15830  0036F4  0EA9               	movlw	low (_loRa+169)
 15831  0036F6  24F3               	addwf	prodl,w,c
 15832  0036F8  6ED9               	movwf	fsr2l,c
 15833  0036FA  0E02               	movlw	high (_loRa+169)
 15834  0036FC  20F4               	addwfc	prodh,w,c
 15835  0036FE  6EDA               	movwf	fsr2h,c
 15836  003700  92DF               	bcf	indf2,1,c
 15837                           
 15838                           ;lorawan_eu.c: 666: loRa.macCommands[loRa.crtMacCmdIndex].powerAck = 0;
 15839  003702  51A7               	movf	(_loRa+167)& (0+255),w,b
 15840  003704  0D02               	mullw	2
 15841  003706  0EA9               	movlw	low (_loRa+169)
 15842  003708  24F3               	addwf	prodl,w,c
 15843  00370A  6ED9               	movwf	fsr2l,c
 15844  00370C  0E02               	movlw	high (_loRa+169)
 15845  00370E  20F4               	addwfc	prodh,w,c
 15846  003710  6EDA               	movwf	fsr2h,c
 15847  003712  94DF               	bcf	indf2,2,c
 15848  003714                     l13500:
 15849                           
 15850                           ; BSR set to: 2
 15851                           ;lorawan_eu.c: 667: }
 15852                           ;lorawan_eu.c: 669: return ptr;
 15853  003714  C071  F071         	movff	ExecuteLinkAdr@ptr,?_ExecuteLinkAdr
 15854  003718  C072  F072         	movff	ExecuteLinkAdr@ptr+1,?_ExecuteLinkAdr+1
 15855                           
 15856                           ; BSR set to: 2
 15857  00371C  0012               	return		;funcret
 15858  00371E                     __end_of_ExecuteLinkAdr:
 15859                           	opt stack 0
 15860                           tosu	equ	0xFFF
 15861                           tosh	equ	0xFFE
 15862                           tosl	equ	0xFFD
 15863                           pclath	equ	0xFFA
 15864                           tblptru	equ	0xFF8
 15865                           tblptrh	equ	0xFF7
 15866                           tblptrl	equ	0xFF6
 15867                           tablat	equ	0xFF5
 15868                           prodh	equ	0xFF4
 15869                           prodl	equ	0xFF3
 15870                           intcon	equ	0xFF2
 15871                           indf0	equ	0xFEF
 15872                           postinc0	equ	0xFEE
 15873                           fsr0h	equ	0xFEA
 15874                           fsr0l	equ	0xFE9
 15875                           wreg	equ	0xFE8
 15876                           postinc1	equ	0xFE6
 15877                           postdec1	equ	0xFE5
 15878                           plusw1	equ	0xFE3
 15879                           fsr1h	equ	0xFE2
 15880                           fsr1l	equ	0xFE1
 15881                           indf2	equ	0xFDF
 15882                           postinc2	equ	0xFDE
 15883                           postdec2	equ	0xFDD
 15884                           plusw2	equ	0xFDB
 15885                           fsr2h	equ	0xFDA
 15886                           fsr2l	equ	0xFD9
 15887                           status	equ	0xFD8
 15888                           
 15889 ;; *************** function _ValidateTxPower *****************
 15890 ;; Defined at:
 15891 ;;		line 582 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 15892 ;; Parameters:    Size  Location     Type
 15893 ;;  txPowerNew      1    wreg     unsigned char 
 15894 ;; Auto vars:     Size  Location     Type
 15895 ;;  txPowerNew      1    5[BANK0 ] unsigned char 
 15896 ;;  result          1    4[BANK0 ] enum E17190
 15897 ;; Return value:  Size  Location     Type
 15898 ;;                  1    wreg      enum E17190
 15899 ;; Registers used:
 15900 ;;		wreg, status,2, status,0
 15901 ;; Tracked objects:
 15902 ;;		On entry : F/0
 15903 ;;		On exit  : F/0
 15904 ;;		Unchanged: 0/0
 15905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15906 ;;      Params:         0       0       0       0       0       0       0       0       0
 15907 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15908 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15909 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15910 ;;Total ram usage:        2 bytes
 15911 ;; Hardware stack levels used:    1
 15912 ;; Hardware stack levels required when called:    7
 15913 ;; This function calls:
 15914 ;;		Nothing
 15915 ;; This function is called by:
 15916 ;;		_ExecuteLinkAdr
 15917 ;; This function uses a non-reentrant model
 15918 ;;
 15919                           
 15920                           	psect	text80
 15921  007416                     __ptext80:
 15922                           	opt stack 0
 15923  007416                     _ValidateTxPower:
 15924                           	opt stack 17
 15925                           
 15926                           ; BSR set to: 2
 15927                           ;incstack = 0
 15928                           ;ValidateTxPower@txPowerNew stored from wreg
 15929  007416  6F65               	movwf	ValidateTxPower@txPowerNew& (0+255),b
 15930                           
 15931                           ;lorawan_eu.c: 584: LorawanError_t result = OK;
 15932  007418  0100               	movlb	0	; () banked
 15933  00741A  6B64               	clrf	ValidateTxPower@result& (0+255),b
 15934                           
 15935                           ; BSR set to: 0
 15936                           ;lorawan_eu.c: 586: if (((ISM_EU868 == loRa.ismBand) && (0 == txPowerNew)) || (txPowerNe
      +                          w > 5))
 15937  00741C  0102               	movlb	2	; () banked
 15938  00741E  51A4               	movf	(_loRa+164)& (0+255),w,b
 15939  007420  E103               	bnz	l12888
 15940                           
 15941                           ; BSR set to: 2
 15942  007422  0100               	movlb	0	; () banked
 15943  007424  5165               	movf	ValidateTxPower@txPowerNew& (0+255),w,b
 15944  007426  E004               	bz	l12890
 15945  007428                     l12888:
 15946  007428  0E05               	movlw	5
 15947  00742A  0100               	movlb	0	; () banked
 15948  00742C  6565               	cpfsgt	ValidateTxPower@txPowerNew& (0+255),b
 15949  00742E  D002               	goto	l1102
 15950  007430                     l12890:
 15951                           
 15952                           ; BSR set to: 0
 15953                           ;lorawan_eu.c: 587: {
 15954                           ;lorawan_eu.c: 588: result = INVALID_PARAMETER;
 15955  007430  0E03               	movlw	3
 15956  007432  6F64               	movwf	ValidateTxPower@result& (0+255),b
 15957  007434                     l1102:
 15958                           
 15959                           ; BSR set to: 0
 15960                           ;lorawan_eu.c: 589: }
 15961                           ;lorawan_eu.c: 591: return result;
 15962  007434  5164               	movf	ValidateTxPower@result& (0+255),w,b
 15963                           
 15964                           ; BSR set to: 0
 15965  007436  0012               	return		;funcret
 15966  007438                     __end_of_ValidateTxPower:
 15967                           	opt stack 0
 15968                           tosu	equ	0xFFF
 15969                           tosh	equ	0xFFE
 15970                           tosl	equ	0xFFD
 15971                           pclath	equ	0xFFA
 15972                           tblptru	equ	0xFF8
 15973                           tblptrh	equ	0xFF7
 15974                           tblptrl	equ	0xFF6
 15975                           tablat	equ	0xFF5
 15976                           prodh	equ	0xFF4
 15977                           prodl	equ	0xFF3
 15978                           intcon	equ	0xFF2
 15979                           indf0	equ	0xFEF
 15980                           postinc0	equ	0xFEE
 15981                           fsr0h	equ	0xFEA
 15982                           fsr0l	equ	0xFE9
 15983                           wreg	equ	0xFE8
 15984                           postinc1	equ	0xFE6
 15985                           postdec1	equ	0xFE5
 15986                           plusw1	equ	0xFE3
 15987                           fsr1h	equ	0xFE2
 15988                           fsr1l	equ	0xFE1
 15989                           indf2	equ	0xFDF
 15990                           postinc2	equ	0xFDE
 15991                           postdec2	equ	0xFDD
 15992                           plusw2	equ	0xFDB
 15993                           fsr2h	equ	0xFDA
 15994                           fsr2l	equ	0xFD9
 15995                           status	equ	0xFD8
 15996                           
 15997 ;; *************** function _ValidateDataRate *****************
 15998 ;; Defined at:
 15999 ;;		line 570 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16000 ;; Parameters:    Size  Location     Type
 16001 ;;  dataRate        1    wreg     unsigned char 
 16002 ;; Auto vars:     Size  Location     Type
 16003 ;;  dataRate        1    4[BANK0 ] unsigned char 
 16004 ;;  result          1    5[BANK0 ] enum E17190
 16005 ;; Return value:  Size  Location     Type
 16006 ;;                  1    wreg      enum E17190
 16007 ;; Registers used:
 16008 ;;		wreg, status,2, status,0
 16009 ;; Tracked objects:
 16010 ;;		On entry : F/0
 16011 ;;		On exit  : F/0
 16012 ;;		Unchanged: 0/0
 16013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16014 ;;      Params:         0       0       0       0       0       0       0       0       0
 16015 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16016 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16017 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16018 ;;Total ram usage:        2 bytes
 16019 ;; Hardware stack levels used:    1
 16020 ;; Hardware stack levels required when called:    7
 16021 ;; This function calls:
 16022 ;;		Nothing
 16023 ;; This function is called by:
 16024 ;;		_ExecuteLinkAdr
 16025 ;;		_ExecuteRxParamSetupReq
 16026 ;;		_ValidateDataRange
 16027 ;; This function uses a non-reentrant model
 16028 ;;
 16029                           
 16030                           	psect	text81
 16031  007726                     __ptext81:
 16032                           	opt stack 0
 16033  007726                     _ValidateDataRate:
 16034                           	opt stack 17
 16035                           
 16036                           ; BSR set to: 0
 16037                           ;incstack = 0
 16038                           ;ValidateDataRate@dataRate stored from wreg
 16039  007726  6F64               	movwf	ValidateDataRate@dataRate& (0+255),b
 16040                           
 16041                           ;lorawan_eu.c: 572: LorawanError_t result = OK;
 16042  007728  0100               	movlb	0	; () banked
 16043  00772A  6B65               	clrf	ValidateDataRate@result& (0+255),b
 16044                           
 16045                           ; BSR set to: 0
 16046                           ;lorawan_eu.c: 574: if ( dataRate > 7 )
 16047  00772C  0E07               	movlw	7
 16048  00772E  6564               	cpfsgt	ValidateDataRate@dataRate& (0+255),b
 16049  007730  D002               	goto	l1098
 16050                           
 16051                           ; BSR set to: 0
 16052                           ;lorawan_eu.c: 575: {
 16053                           ;lorawan_eu.c: 576: result = INVALID_PARAMETER;
 16054  007732  0E03               	movlw	3
 16055  007734  6F65               	movwf	ValidateDataRate@result& (0+255),b
 16056  007736                     l1098:
 16057                           
 16058                           ; BSR set to: 0
 16059                           ;lorawan_eu.c: 577: }
 16060                           ;lorawan_eu.c: 579: return result;
 16061  007736  5165               	movf	ValidateDataRate@result& (0+255),w,b
 16062                           
 16063                           ; BSR set to: 0
 16064  007738  0012               	return		;funcret
 16065  00773A                     __end_of_ValidateDataRate:
 16066                           	opt stack 0
 16067                           tosu	equ	0xFFF
 16068                           tosh	equ	0xFFE
 16069                           tosl	equ	0xFFD
 16070                           pclath	equ	0xFFA
 16071                           tblptru	equ	0xFF8
 16072                           tblptrh	equ	0xFF7
 16073                           tblptrl	equ	0xFF6
 16074                           tablat	equ	0xFF5
 16075                           prodh	equ	0xFF4
 16076                           prodl	equ	0xFF3
 16077                           intcon	equ	0xFF2
 16078                           indf0	equ	0xFEF
 16079                           postinc0	equ	0xFEE
 16080                           fsr0h	equ	0xFEA
 16081                           fsr0l	equ	0xFE9
 16082                           wreg	equ	0xFE8
 16083                           postinc1	equ	0xFE6
 16084                           postdec1	equ	0xFE5
 16085                           plusw1	equ	0xFE3
 16086                           fsr1h	equ	0xFE2
 16087                           fsr1l	equ	0xFE1
 16088                           indf2	equ	0xFDF
 16089                           postinc2	equ	0xFDE
 16090                           postdec2	equ	0xFDD
 16091                           plusw2	equ	0xFDB
 16092                           fsr2h	equ	0xFDA
 16093                           fsr2l	equ	0xFD9
 16094                           status	equ	0xFD8
 16095                           
 16096 ;; *************** function _ValidateChannelMaskCntl *****************
 16097 ;; Defined at:
 16098 ;;		line 1137 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16099 ;; Parameters:    Size  Location     Type
 16100 ;;  channelMaskC    1    wreg     unsigned char 
 16101 ;; Auto vars:     Size  Location     Type
 16102 ;;  channelMaskC    1    5[BANK0 ] unsigned char 
 16103 ;;  result          1    4[BANK0 ] enum E17190
 16104 ;; Return value:  Size  Location     Type
 16105 ;;                  1    wreg      enum E17190
 16106 ;; Registers used:
 16107 ;;		wreg, status,2, status,0
 16108 ;; Tracked objects:
 16109 ;;		On entry : F/0
 16110 ;;		On exit  : F/0
 16111 ;;		Unchanged: 0/0
 16112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16113 ;;      Params:         0       0       0       0       0       0       0       0       0
 16114 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16115 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16116 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16117 ;;Total ram usage:        2 bytes
 16118 ;; Hardware stack levels used:    1
 16119 ;; Hardware stack levels required when called:    7
 16120 ;; This function calls:
 16121 ;;		Nothing
 16122 ;; This function is called by:
 16123 ;;		_ExecuteLinkAdr
 16124 ;; This function uses a non-reentrant model
 16125 ;;
 16126                           
 16127                           	psect	text82
 16128  0076CE                     __ptext82:
 16129                           	opt stack 0
 16130  0076CE                     _ValidateChannelMaskCntl:
 16131                           	opt stack 17
 16132                           
 16133                           ; BSR set to: 0
 16134                           ;incstack = 0
 16135                           ;ValidateChannelMaskCntl@channelMaskCntl stored from wreg
 16136  0076CE  6F65               	movwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),b
 16137                           
 16138                           ;lorawan_eu.c: 1139: LorawanError_t result = OK;
 16139  0076D0  0100               	movlb	0	; () banked
 16140  0076D2  6B64               	clrf	ValidateChannelMaskCntl@result& (0+255),b
 16141                           
 16142                           ; BSR set to: 0
 16143                           ;lorawan_eu.c: 1141: if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
 16144  0076D4  5165               	movf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 16145  0076D6  E005               	bz	l1269
 16146                           
 16147                           ; BSR set to: 0
 16148  0076D8  0E06               	movlw	6
 16149  0076DA  1965               	xorwf	ValidateChannelMaskCntl@channelMaskCntl& (0+255),w,b
 16150  0076DC  E002               	bz	l1269
 16151                           
 16152                           ; BSR set to: 0
 16153                           ;lorawan_eu.c: 1142: {
 16154                           ;lorawan_eu.c: 1143: result = INVALID_PARAMETER;
 16155  0076DE  0E03               	movlw	3
 16156  0076E0  6F64               	movwf	ValidateChannelMaskCntl@result& (0+255),b
 16157  0076E2                     l1269:
 16158                           
 16159                           ; BSR set to: 0
 16160                           ;lorawan_eu.c: 1144: }
 16161                           ;lorawan_eu.c: 1146: return result;
 16162  0076E2  5164               	movf	ValidateChannelMaskCntl@result& (0+255),w,b
 16163                           
 16164                           ; BSR set to: 0
 16165  0076E4  0012               	return		;funcret
 16166  0076E6                     __end_of_ValidateChannelMaskCntl:
 16167                           	opt stack 0
 16168                           tosu	equ	0xFFF
 16169                           tosh	equ	0xFFE
 16170                           tosl	equ	0xFFD
 16171                           pclath	equ	0xFFA
 16172                           tblptru	equ	0xFF8
 16173                           tblptrh	equ	0xFF7
 16174                           tblptrl	equ	0xFF6
 16175                           tablat	equ	0xFF5
 16176                           prodh	equ	0xFF4
 16177                           prodl	equ	0xFF3
 16178                           intcon	equ	0xFF2
 16179                           indf0	equ	0xFEF
 16180                           postinc0	equ	0xFEE
 16181                           fsr0h	equ	0xFEA
 16182                           fsr0l	equ	0xFE9
 16183                           wreg	equ	0xFE8
 16184                           postinc1	equ	0xFE6
 16185                           postdec1	equ	0xFE5
 16186                           plusw1	equ	0xFE3
 16187                           fsr1h	equ	0xFE2
 16188                           fsr1l	equ	0xFE1
 16189                           indf2	equ	0xFDF
 16190                           postinc2	equ	0xFDE
 16191                           postdec2	equ	0xFDD
 16192                           plusw2	equ	0xFDB
 16193                           fsr2h	equ	0xFDA
 16194                           fsr2l	equ	0xFD9
 16195                           status	equ	0xFD8
 16196                           
 16197 ;; *************** function _ValidateChannelMask *****************
 16198 ;; Defined at:
 16199 ;;		line 1166 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16200 ;; Parameters:    Size  Location     Type
 16201 ;;  channelMask     2    4[BANK0 ] unsigned int 
 16202 ;; Auto vars:     Size  Location     Type
 16203 ;;  i               1    6[BANK0 ] unsigned char 
 16204 ;; Return value:  Size  Location     Type
 16205 ;;                  1    wreg      enum E17190
 16206 ;; Registers used:
 16207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16208 ;; Tracked objects:
 16209 ;;		On entry : F/0
 16210 ;;		On exit  : F/0
 16211 ;;		Unchanged: 0/0
 16212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16213 ;;      Params:         0       2       0       0       0       0       0       0       0
 16214 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16215 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16216 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16217 ;;Total ram usage:        3 bytes
 16218 ;; Hardware stack levels used:    1
 16219 ;; Hardware stack levels required when called:    7
 16220 ;; This function calls:
 16221 ;;		Nothing
 16222 ;; This function is called by:
 16223 ;;		_ExecuteLinkAdr
 16224 ;; This function uses a non-reentrant model
 16225 ;;
 16226                           
 16227                           	psect	text83
 16228  006FF6                     __ptext83:
 16229                           	opt stack 0
 16230  006FF6                     _ValidateChannelMask:
 16231                           	opt stack 17
 16232                           
 16233                           ; BSR set to: 0
 16234                           ;lorawan_eu.c: 1170: if(channelMask != 0x0000U)
 16235                           
 16236                           ; BSR set to: 0
 16237                           
 16238                           ; BSR set to: 0
 16239                           ;incstack = 0
 16240  006FF6  5164               	movf	ValidateChannelMask@channelMask& (0+255),w,b
 16241  006FF8  1165               	iorwf	(ValidateChannelMask@channelMask+1)& (0+255),w,b
 16242  006FFA  B4D8               	btfsc	status,2,c
 16243  006FFC  0C03               	retlw	3
 16244                           
 16245                           ; BSR set to: 0
 16246                           ;lorawan_eu.c: 1171: {
 16247                           ;lorawan_eu.c: 1172: for (i = 0; i < 16; i++)
 16248  006FFE  6B66               	clrf	ValidateChannelMask@i& (0+255),b
 16249  007000                     l1283:
 16250                           
 16251                           ; BSR set to: 0
 16252                           ;lorawan_eu.c: 1173: {
 16253                           ;lorawan_eu.c: 1174: if ( ( (channelMask & (1 << (0))) == (1 << (0))) && ( (Channels[i].
      +                          parametersDefined & (0X01 | 0X02 | 0x04) ) != (0X01 | 0X02 | 0x04) ) )
 16254  007000  A164               	btfss	ValidateChannelMask@channelMask& (0+255),0,b
 16255  007002  D00D               	goto	l12922
 16256                           
 16257                           ; BSR set to: 0
 16258  007004  5166               	movf	ValidateChannelMask@i& (0+255),w,b
 16259  007006  0D0E               	mullw	14
 16260  007008  0E0D               	movlw	low (_Channels+13)
 16261  00700A  24F3               	addwf	prodl,w,c
 16262  00700C  6ED9               	movwf	fsr2l,c
 16263  00700E  0E04               	movlw	high (_Channels+13)
 16264  007010  20F4               	addwfc	prodh,w,c
 16265  007012  6EDA               	movwf	fsr2h,c
 16266  007014  50DF               	movf	indf2,w,c
 16267  007016  0B07               	andlw	7
 16268  007018  0A07               	xorlw	7
 16269  00701A  E001               	bz	l12922
 16270                           
 16271                           ; BSR set to: 0
 16272                           ;lorawan_eu.c: 1175: {
 16273                           ;lorawan_eu.c: 1176: return INVALID_PARAMETER;
 16274  00701C  0C03               	retlw	3
 16275  00701E                     l12922:
 16276                           
 16277                           ; BSR set to: 0
 16278                           ;lorawan_eu.c: 1178: else
 16279                           ;lorawan_eu.c: 1179: {
 16280                           ;lorawan_eu.c: 1180: channelMask = channelMask >> (1);
 16281  00701E  90D8               	bcf	status,0,c
 16282  007020  3365               	rrcf	(ValidateChannelMask@channelMask+1)& (0+255),f,b
 16283  007022  3364               	rrcf	ValidateChannelMask@channelMask& (0+255),f,b
 16284                           
 16285                           ; BSR set to: 0
 16286  007024  2B66               	incf	ValidateChannelMask@i& (0+255),f,b
 16287                           
 16288                           ; BSR set to: 0
 16289  007026  0E0F               	movlw	15
 16290  007028  6566               	cpfsgt	ValidateChannelMask@i& (0+255),b
 16291  00702A  D7EA               	goto	l1283
 16292  00702C  0C00               	retlw	0
 16293  00702E                     __end_of_ValidateChannelMask:
 16294                           	opt stack 0
 16295                           tosu	equ	0xFFF
 16296                           tosh	equ	0xFFE
 16297                           tosl	equ	0xFFD
 16298                           pclath	equ	0xFFA
 16299                           tblptru	equ	0xFF8
 16300                           tblptrh	equ	0xFF7
 16301                           tblptrl	equ	0xFF6
 16302                           tablat	equ	0xFF5
 16303                           prodh	equ	0xFF4
 16304                           prodl	equ	0xFF3
 16305                           intcon	equ	0xFF2
 16306                           indf0	equ	0xFEF
 16307                           postinc0	equ	0xFEE
 16308                           fsr0h	equ	0xFEA
 16309                           fsr0l	equ	0xFE9
 16310                           wreg	equ	0xFE8
 16311                           postinc1	equ	0xFE6
 16312                           postdec1	equ	0xFE5
 16313                           plusw1	equ	0xFE3
 16314                           fsr1h	equ	0xFE2
 16315                           fsr1l	equ	0xFE1
 16316                           indf2	equ	0xFDF
 16317                           postinc2	equ	0xFDE
 16318                           postdec2	equ	0xFDD
 16319                           plusw2	equ	0xFDB
 16320                           fsr2h	equ	0xFDA
 16321                           fsr2l	equ	0xFD9
 16322                           status	equ	0xFD8
 16323                           
 16324 ;; *************** function _UpdateTxPower *****************
 16325 ;; Defined at:
 16326 ;;		line 1029 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16327 ;; Parameters:    Size  Location     Type
 16328 ;;  txPowerNew      1    wreg     unsigned char 
 16329 ;; Auto vars:     Size  Location     Type
 16330 ;;  txPowerNew      1    4[BANK0 ] unsigned char 
 16331 ;; Return value:  Size  Location     Type
 16332 ;;                  1    wreg      void 
 16333 ;; Registers used:
 16334 ;;		wreg
 16335 ;; Tracked objects:
 16336 ;;		On entry : F/0
 16337 ;;		On exit  : 0/0
 16338 ;;		Unchanged: 0/0
 16339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16340 ;;      Params:         0       0       0       0       0       0       0       0       0
 16341 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16342 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16343 ;;      Totals:         0       1       0       0       0       0       0       0       0
 16344 ;;Total ram usage:        1 bytes
 16345 ;; Hardware stack levels used:    1
 16346 ;; Hardware stack levels required when called:    7
 16347 ;; This function calls:
 16348 ;;		Nothing
 16349 ;; This function is called by:
 16350 ;;		_ExecuteLinkAdr
 16351 ;; This function uses a non-reentrant model
 16352 ;;
 16353                           
 16354                           	psect	text84
 16355  00784A                     __ptext84:
 16356                           	opt stack 0
 16357  00784A                     _UpdateTxPower:
 16358                           	opt stack 17
 16359                           
 16360                           ; BSR set to: 0
 16361                           ;incstack = 0
 16362                           ;UpdateTxPower@txPowerNew stored from wreg
 16363  00784A  6F64               	movwf	UpdateTxPower@txPowerNew& (0+255),b
 16364                           
 16365                           ;lorawan.c: 1031: loRa.txPower = txPowerNew;
 16366  00784C  C064  F2E1         	movff	UpdateTxPower@txPowerNew,_loRa+225
 16367  007850  0012               	return		;funcret
 16368  007852                     __end_of_UpdateTxPower:
 16369                           	opt stack 0
 16370                           tosu	equ	0xFFF
 16371                           tosh	equ	0xFFE
 16372                           tosl	equ	0xFFD
 16373                           pclath	equ	0xFFA
 16374                           tblptru	equ	0xFF8
 16375                           tblptrh	equ	0xFF7
 16376                           tblptrl	equ	0xFF6
 16377                           tablat	equ	0xFF5
 16378                           prodh	equ	0xFF4
 16379                           prodl	equ	0xFF3
 16380                           intcon	equ	0xFF2
 16381                           indf0	equ	0xFEF
 16382                           postinc0	equ	0xFEE
 16383                           fsr0h	equ	0xFEA
 16384                           fsr0l	equ	0xFE9
 16385                           wreg	equ	0xFE8
 16386                           postinc1	equ	0xFE6
 16387                           postdec1	equ	0xFE5
 16388                           plusw1	equ	0xFE3
 16389                           fsr1h	equ	0xFE2
 16390                           fsr1l	equ	0xFE1
 16391                           indf2	equ	0xFDF
 16392                           postinc2	equ	0xFDE
 16393                           postdec2	equ	0xFDD
 16394                           plusw2	equ	0xFDB
 16395                           fsr2h	equ	0xFDA
 16396                           fsr2l	equ	0xFD9
 16397                           status	equ	0xFD8
 16398                           
 16399 ;; *************** function _UpdateCurrentDataRate *****************
 16400 ;; Defined at:
 16401 ;;		line 1024 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 16402 ;; Parameters:    Size  Location     Type
 16403 ;;  valueNew        1    wreg     unsigned char 
 16404 ;; Auto vars:     Size  Location     Type
 16405 ;;  valueNew        1    4[BANK0 ] unsigned char 
 16406 ;; Return value:  Size  Location     Type
 16407 ;;                  1    wreg      void 
 16408 ;; Registers used:
 16409 ;;		wreg
 16410 ;; Tracked objects:
 16411 ;;		On entry : F/0
 16412 ;;		On exit  : 0/0
 16413 ;;		Unchanged: 0/0
 16414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16415 ;;      Params:         0       0       0       0       0       0       0       0       0
 16416 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16417 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16418 ;;      Totals:         0       1       0       0       0       0       0       0       0
 16419 ;;Total ram usage:        1 bytes
 16420 ;; Hardware stack levels used:    1
 16421 ;; Hardware stack levels required when called:    7
 16422 ;; This function calls:
 16423 ;;		Nothing
 16424 ;; This function is called by:
 16425 ;;		_ExecuteLinkAdr
 16426 ;; This function uses a non-reentrant model
 16427 ;;
 16428                           
 16429                           	psect	text85
 16430  007852                     __ptext85:
 16431                           	opt stack 0
 16432  007852                     _UpdateCurrentDataRate:
 16433                           	opt stack 17
 16434                           
 16435                           ;incstack = 0
 16436                           ;UpdateCurrentDataRate@valueNew stored from wreg
 16437  007852  6F64               	movwf	UpdateCurrentDataRate@valueNew& (0+255),b
 16438                           
 16439                           ;lorawan.c: 1026: loRa.currentDataRate = valueNew;
 16440  007854  C064  F2DF         	movff	UpdateCurrentDataRate@valueNew,_loRa+223
 16441  007858  0012               	return		;funcret
 16442  00785A                     __end_of_UpdateCurrentDataRate:
 16443                           	opt stack 0
 16444                           tosu	equ	0xFFF
 16445                           tosh	equ	0xFFE
 16446                           tosl	equ	0xFFD
 16447                           pclath	equ	0xFFA
 16448                           tblptru	equ	0xFF8
 16449                           tblptrh	equ	0xFF7
 16450                           tblptrl	equ	0xFF6
 16451                           tablat	equ	0xFF5
 16452                           prodh	equ	0xFF4
 16453                           prodl	equ	0xFF3
 16454                           intcon	equ	0xFF2
 16455                           indf0	equ	0xFEF
 16456                           postinc0	equ	0xFEE
 16457                           fsr0h	equ	0xFEA
 16458                           fsr0l	equ	0xFE9
 16459                           wreg	equ	0xFE8
 16460                           postinc1	equ	0xFE6
 16461                           postdec1	equ	0xFE5
 16462                           plusw1	equ	0xFE3
 16463                           fsr1h	equ	0xFE2
 16464                           fsr1l	equ	0xFE1
 16465                           indf2	equ	0xFDF
 16466                           postinc2	equ	0xFDE
 16467                           postdec2	equ	0xFDD
 16468                           plusw2	equ	0xFDB
 16469                           fsr2h	equ	0xFDA
 16470                           fsr2l	equ	0xFD9
 16471                           status	equ	0xFD8
 16472                           
 16473 ;; *************** function _EnableChannels *****************
 16474 ;; Defined at:
 16475 ;;		line 1149 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16476 ;; Parameters:    Size  Location     Type
 16477 ;;  channelMask     2   14[BANK0 ] unsigned int 
 16478 ;;  channelMaskC    1   16[BANK0 ] unsigned char 
 16479 ;; Auto vars:     Size  Location     Type
 16480 ;;		None
 16481 ;; Return value:  Size  Location     Type
 16482 ;;                  1    wreg      void 
 16483 ;; Registers used:
 16484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16485 ;; Tracked objects:
 16486 ;;		On entry : F/0
 16487 ;;		On exit  : F/0
 16488 ;;		Unchanged: 0/0
 16489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16490 ;;      Params:         0       3       0       0       0       0       0       0       0
 16491 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16492 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16493 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16494 ;;Total ram usage:        3 bytes
 16495 ;; Hardware stack levels used:    1
 16496 ;; Hardware stack levels required when called:    9
 16497 ;; This function calls:
 16498 ;;		_EnableChannels1
 16499 ;; This function is called by:
 16500 ;;		_ExecuteLinkAdr
 16501 ;; This function uses a non-reentrant model
 16502 ;;
 16503                           
 16504                           	psect	text86
 16505  0076FC                     __ptext86:
 16506                           	opt stack 0
 16507  0076FC                     _EnableChannels:
 16508                           	opt stack 15
 16509                           
 16510                           ; BSR set to: 0
 16511                           ;lorawan_eu.c: 1151: EnableChannels1 (channelMask, channelMaskCntl, 0, 16);
 16512                           
 16513                           ;incstack = 0
 16514  0076FC  C06E  F068         	movff	EnableChannels@channelMask,EnableChannels1@channelMask
 16515  007700  C06F  F069         	movff	EnableChannels@channelMask+1,EnableChannels1@channelMask+1
 16516  007704  C070  F06A         	movff	EnableChannels@channelMaskCntl,EnableChannels1@channelMaskCntl
 16517  007708  6B6B               	clrf	EnableChannels1@channelIndexMin& (0+255),b
 16518  00770A  0E10               	movlw	16
 16519  00770C  6F6C               	movwf	EnableChannels1@channelIndexMax& (0+255),b
 16520  00770E  EF1C  F034         	goto	_EnableChannels1	;wreg free
 16521  007712                     __end_of_EnableChannels:
 16522                           	opt stack 0
 16523                           tosu	equ	0xFFF
 16524                           tosh	equ	0xFFE
 16525                           tosl	equ	0xFFD
 16526                           pclath	equ	0xFFA
 16527                           tblptru	equ	0xFF8
 16528                           tblptrh	equ	0xFF7
 16529                           tblptrl	equ	0xFF6
 16530                           tablat	equ	0xFF5
 16531                           prodh	equ	0xFF4
 16532                           prodl	equ	0xFF3
 16533                           intcon	equ	0xFF2
 16534                           indf0	equ	0xFEF
 16535                           postinc0	equ	0xFEE
 16536                           fsr0h	equ	0xFEA
 16537                           fsr0l	equ	0xFE9
 16538                           wreg	equ	0xFE8
 16539                           postinc1	equ	0xFE6
 16540                           postdec1	equ	0xFE5
 16541                           plusw1	equ	0xFE3
 16542                           fsr1h	equ	0xFE2
 16543                           fsr1l	equ	0xFE1
 16544                           indf2	equ	0xFDF
 16545                           postinc2	equ	0xFDE
 16546                           postdec2	equ	0xFDD
 16547                           plusw2	equ	0xFDB
 16548                           fsr2h	equ	0xFDA
 16549                           fsr2l	equ	0xFD9
 16550                           status	equ	0xFD8
 16551                           
 16552 ;; *************** function _EnableChannels1 *****************
 16553 ;; Defined at:
 16554 ;;		line 1193 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16555 ;; Parameters:    Size  Location     Type
 16556 ;;  channelMask     2    8[BANK0 ] unsigned int 
 16557 ;;  channelMaskC    1   10[BANK0 ] unsigned char 
 16558 ;;  channelIndex    1   11[BANK0 ] unsigned char 
 16559 ;;  channelIndex    1   12[BANK0 ] unsigned char 
 16560 ;; Auto vars:     Size  Location     Type
 16561 ;;  i               1   13[BANK0 ] unsigned char 
 16562 ;; Return value:  Size  Location     Type
 16563 ;;                  1    wreg      void 
 16564 ;; Registers used:
 16565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16566 ;; Tracked objects:
 16567 ;;		On entry : F/0
 16568 ;;		On exit  : F/0
 16569 ;;		Unchanged: 0/0
 16570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16571 ;;      Params:         0       5       0       0       0       0       0       0       0
 16572 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16573 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16574 ;;      Totals:         0       6       0       0       0       0       0       0       0
 16575 ;;Total ram usage:        6 bytes
 16576 ;; Hardware stack levels used:    1
 16577 ;; Hardware stack levels required when called:    8
 16578 ;; This function calls:
 16579 ;;		_UpdateChannelIdStatus
 16580 ;; This function is called by:
 16581 ;;		_EnableChannels
 16582 ;; This function uses a non-reentrant model
 16583 ;;
 16584                           
 16585                           	psect	text87
 16586  006838                     __ptext87:
 16587                           	opt stack 0
 16588  006838                     _EnableChannels1:
 16589                           	opt stack 15
 16590                           
 16591                           ; BSR set to: 0
 16592                           ;lorawan_eu.c: 1195: uint8_t i;
 16593                           ;lorawan_eu.c: 1197: if (channelMaskCntl == 6)
 16594                           
 16595                           ; BSR set to: 0
 16596                           ;incstack = 0
 16597  006838  0E06               	movlw	6
 16598  00683A  196A               	xorwf	EnableChannels1@channelMaskCntl& (0+255),w,b
 16599  00683C  E10E               	bnz	l12632
 16600                           
 16601                           ; BSR set to: 0
 16602                           ;lorawan_eu.c: 1198: {
 16603                           ;lorawan_eu.c: 1199: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 16604  00683E  C06B  F06D         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 16605  006842  D007               	goto	l12630
 16606  006844                     l12626:
 16607                           
 16608                           ; BSR set to: 0
 16609                           ;lorawan_eu.c: 1200: {
 16610                           ;lorawan_eu.c: 1201: UpdateChannelIdStatus (i, 1);
 16611  006844  0E01               	movlw	1
 16612  006846  6F64               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 16613  006848  516D               	movf	EnableChannels1@i& (0+255),w,b
 16614  00684A  ECD9  F023         	call	_UpdateChannelIdStatus
 16615                           
 16616                           ; BSR set to: 2
 16617  00684E  0100               	movlb	0	; () banked
 16618  006850  2B6D               	incf	EnableChannels1@i& (0+255),f,b
 16619  006852                     l12630:
 16620                           
 16621                           ; BSR set to: 0
 16622  006852  516C               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 16623  006854  5D6D               	subwf	EnableChannels1@i& (0+255),w,b
 16624  006856  E3F6               	bnc	l12626
 16625  006858  0012               	return	
 16626  00685A                     l12632:
 16627                           
 16628                           ; BSR set to: 0
 16629                           ;lorawan_eu.c: 1204: else if (channelMaskCntl == 0)
 16630  00685A  516A               	movf	EnableChannels1@channelMaskCntl& (0+255),w,b
 16631  00685C  A4D8               	btfss	status,2,c
 16632  00685E  0012               	return	
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;lorawan_eu.c: 1205: {
 16636                           ;lorawan_eu.c: 1206: for ( i = channelIndexMin; i < channelIndexMax; i++ )
 16637  006860  C06B  F06D         	movff	EnableChannels1@channelIndexMin,EnableChannels1@i
 16638  006864  D011               	goto	l12644
 16639  006866                     l1298:
 16640                           
 16641                           ; BSR set to: 0
 16642                           ;lorawan_eu.c: 1207: {
 16643                           ;lorawan_eu.c: 1208: if ( channelMask & (1 << (0)) == (1 << (0)))
 16644  006866  A168               	btfss	EnableChannels1@channelMask& (0+255),0,b
 16645  006868  D006               	goto	l12638
 16646                           
 16647                           ; BSR set to: 0
 16648                           ;lorawan_eu.c: 1209: {
 16649                           ;lorawan_eu.c: 1210: UpdateChannelIdStatus (i, 1);
 16650  00686A  0E01               	movlw	1
 16651  00686C  6F64               	movwf	UpdateChannelIdStatus@statusNew& (0+255),b
 16652  00686E  516D               	movf	EnableChannels1@i& (0+255),w,b
 16653  006870  ECD9  F023         	call	_UpdateChannelIdStatus
 16654                           
 16655                           ;lorawan_eu.c: 1211: }
 16656  006874  D004               	goto	l12640
 16657  006876                     l12638:
 16658                           
 16659                           ; BSR set to: 0
 16660                           ;lorawan_eu.c: 1212: else
 16661                           ;lorawan_eu.c: 1213: {
 16662                           ;lorawan_eu.c: 1214: UpdateChannelIdStatus (i, 0);
 16663  006876  6B64               	clrf	UpdateChannelIdStatus@statusNew& (0+255),b
 16664  006878  516D               	movf	EnableChannels1@i& (0+255),w,b
 16665  00687A  ECD9  F023         	call	_UpdateChannelIdStatus
 16666  00687E                     l12640:
 16667                           
 16668                           ; BSR set to: 2
 16669                           ;lorawan_eu.c: 1215: }
 16670                           ;lorawan_eu.c: 1216: channelMask = channelMask >> (1);
 16671  00687E  0100               	movlb	0	; () banked
 16672  006880  90D8               	bcf	status,0,c
 16673  006882  3369               	rrcf	(EnableChannels1@channelMask+1)& (0+255),f,b
 16674  006884  3368               	rrcf	EnableChannels1@channelMask& (0+255),f,b
 16675                           
 16676                           ; BSR set to: 0
 16677  006886  2B6D               	incf	EnableChannels1@i& (0+255),f,b
 16678  006888                     l12644:
 16679                           
 16680                           ; BSR set to: 0
 16681  006888  516C               	movf	EnableChannels1@channelIndexMax& (0+255),w,b
 16682  00688A  5D6D               	subwf	EnableChannels1@i& (0+255),w,b
 16683  00688C  E3EC               	bnc	l1298
 16684                           
 16685                           ; BSR set to: 0
 16686  00688E  0012               	return		;funcret
 16687  006890                     __end_of_EnableChannels1:
 16688                           	opt stack 0
 16689                           tosu	equ	0xFFF
 16690                           tosh	equ	0xFFE
 16691                           tosl	equ	0xFFD
 16692                           pclath	equ	0xFFA
 16693                           tblptru	equ	0xFF8
 16694                           tblptrh	equ	0xFF7
 16695                           tblptrl	equ	0xFF6
 16696                           tablat	equ	0xFF5
 16697                           prodh	equ	0xFF4
 16698                           prodl	equ	0xFF3
 16699                           intcon	equ	0xFF2
 16700                           indf0	equ	0xFEF
 16701                           postinc0	equ	0xFEE
 16702                           fsr0h	equ	0xFEA
 16703                           fsr0l	equ	0xFE9
 16704                           wreg	equ	0xFE8
 16705                           postinc1	equ	0xFE6
 16706                           postdec1	equ	0xFE5
 16707                           plusw1	equ	0xFE3
 16708                           fsr1h	equ	0xFE2
 16709                           fsr1l	equ	0xFE1
 16710                           indf2	equ	0xFDF
 16711                           postinc2	equ	0xFDE
 16712                           postdec2	equ	0xFDD
 16713                           plusw2	equ	0xFDB
 16714                           fsr2h	equ	0xFDA
 16715                           fsr2l	equ	0xFD9
 16716                           status	equ	0xFD8
 16717                           
 16718 ;; *************** function _UpdateChannelIdStatus *****************
 16719 ;; Defined at:
 16720 ;;		line 1042 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16721 ;; Parameters:    Size  Location     Type
 16722 ;;  channelId       1    wreg     unsigned char 
 16723 ;;  statusNew       1    4[BANK0 ] unsigned char 
 16724 ;; Auto vars:     Size  Location     Type
 16725 ;;  channelId       1    6[BANK0 ] unsigned char 
 16726 ;;  i               1    7[BANK0 ] unsigned char 
 16727 ;; Return value:  Size  Location     Type
 16728 ;;                  1    wreg      void 
 16729 ;; Registers used:
 16730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16731 ;; Tracked objects:
 16732 ;;		On entry : F/0
 16733 ;;		On exit  : F/2
 16734 ;;		Unchanged: 0/0
 16735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16736 ;;      Params:         0       1       0       0       0       0       0       0       0
 16737 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16738 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16739 ;;      Totals:         0       4       0       0       0       0       0       0       0
 16740 ;;Total ram usage:        4 bytes
 16741 ;; Hardware stack levels used:    1
 16742 ;; Hardware stack levels required when called:    7
 16743 ;; This function calls:
 16744 ;;		Nothing
 16745 ;; This function is called by:
 16746 ;;		_LORAWAN_SetChannelIdStatus
 16747 ;;		_ExecuteNewChannel
 16748 ;;		_EnableChannels1
 16749 ;; This function uses a non-reentrant model
 16750 ;;
 16751                           
 16752                           	psect	text88
 16753  0047B2                     __ptext88:
 16754                           	opt stack 0
 16755  0047B2                     _UpdateChannelIdStatus:
 16756                           	opt stack 17
 16757                           
 16758                           ; BSR set to: 0
 16759                           ;incstack = 0
 16760                           ;UpdateChannelIdStatus@channelId stored from wreg
 16761  0047B2  6F66               	movwf	UpdateChannelIdStatus@channelId& (0+255),b
 16762                           
 16763                           ;lorawan_eu.c: 1044: uint8_t i;
 16764                           ;lorawan_eu.c: 1046: Channels[channelId].status = statusNew;
 16765  0047B4  0100               	movlb	0	; () banked
 16766  0047B6  5166               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 16767  0047B8  0D0E               	mullw	14
 16768  0047BA  0E04               	movlw	low (_Channels+4)
 16769  0047BC  24F3               	addwf	prodl,w,c
 16770  0047BE  6ED9               	movwf	fsr2l,c
 16771  0047C0  0E04               	movlw	high (_Channels+4)
 16772  0047C2  20F4               	addwfc	prodh,w,c
 16773  0047C4  6EDA               	movwf	fsr2h,c
 16774  0047C6  C064  FFDF         	movff	UpdateChannelIdStatus@statusNew,indf2
 16775                           
 16776                           ;lorawan_eu.c: 1047: if(Channels[channelId].status == 0)
 16777  0047CA  5166               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 16778  0047CC  0D0E               	mullw	14
 16779  0047CE  0E04               	movlw	low (_Channels+4)
 16780  0047D0  24F3               	addwf	prodl,w,c
 16781  0047D2  6ED9               	movwf	fsr2l,c
 16782  0047D4  0E04               	movlw	high (_Channels+4)
 16783  0047D6  20F4               	addwfc	prodh,w,c
 16784  0047D8  6EDA               	movwf	fsr2h,c
 16785  0047DA  50DF               	movf	indf2,w,c
 16786  0047DC  E10C               	bnz	l12342
 16787                           
 16788                           ; BSR set to: 0
 16789                           ;lorawan_eu.c: 1048: {
 16790                           ;lorawan_eu.c: 1050: Channels[channelId].channelTimer = 0;
 16791  0047DE  5166               	movf	UpdateChannelIdStatus@channelId& (0+255),w,b
 16792  0047E0  0D0E               	mullw	14
 16793  0047E2  0E08               	movlw	low (_Channels+8)
 16794  0047E4  24F3               	addwf	prodl,w,c
 16795  0047E6  6ED9               	movwf	fsr2l,c
 16796  0047E8  0E04               	movlw	high (_Channels+8)
 16797  0047EA  20F4               	addwfc	prodh,w,c
 16798  0047EC  6EDA               	movwf	fsr2h,c
 16799  0047EE  6ADE               	clrf	postinc2,c
 16800  0047F0  6ADE               	clrf	postinc2,c
 16801  0047F2  6ADE               	clrf	postinc2,c
 16802  0047F4  6ADD               	clrf	postdec2,c
 16803  0047F6                     l12342:
 16804                           
 16805                           ; BSR set to: 0
 16806                           ;lorawan_eu.c: 1051: }
 16807                           ;lorawan_eu.c: 1053: for (i = 0; i < loRa.maxChannels; i++)
 16808  0047F6  6B67               	clrf	UpdateChannelIdStatus@i& (0+255),b
 16809  0047F8  D04E               	goto	l12356
 16810  0047FA                     l12344:
 16811                           
 16812                           ; BSR set to: 0
 16813                           ;lorawan_eu.c: 1054: {
 16814                           ;lorawan_eu.c: 1055: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i]
      +                          .status == 1) )
 16815  0047FA  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16816  0047FC  0D0E               	mullw	14
 16817  0047FE  0E05               	movlw	low (_Channels+5)
 16818  004800  24F3               	addwf	prodl,w,c
 16819  004802  6ED9               	movwf	fsr2l,c
 16820  004804  0E04               	movlw	high (_Channels+5)
 16821  004806  20F4               	addwfc	prodh,w,c
 16822  004808  6EDA               	movwf	fsr2h,c
 16823  00480A  50DF               	movf	223,w,c
 16824  00480C  0B0F               	andlw	15
 16825  00480E  0100               	movlb	0	; () banked
 16826  004810  6F65               	movwf	??_UpdateChannelIdStatus& (0+255),b
 16827  004812  0102               	movlb	2	; () banked
 16828  004814  51EB               	movf	(_loRa+235)& (0+255),w,b
 16829  004816  0100               	movlb	0	; () banked
 16830  004818  5D65               	subwf	??_UpdateChannelIdStatus& (0+255),w,b
 16831  00481A  E216               	bc	l1234
 16832                           
 16833                           ; BSR set to: 0
 16834  00481C  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16835  00481E  0D0E               	mullw	14
 16836  004820  0E04               	movlw	low (_Channels+4)
 16837  004822  24F3               	addwf	prodl,w,c
 16838  004824  6ED9               	movwf	fsr2l,c
 16839  004826  0E04               	movlw	high (_Channels+4)
 16840  004828  20F4               	addwfc	prodh,w,c
 16841  00482A  6EDA               	movwf	fsr2h,c
 16842  00482C  04DE               	decf	postinc2,w,c
 16843  00482E  E10C               	bnz	l1234
 16844                           
 16845                           ; BSR set to: 0
 16846                           ;lorawan_eu.c: 1056: {
 16847                           ;lorawan_eu.c: 1057: loRa.minDataRate = Channels[i].dataRange.min;
 16848  004830  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16849  004832  0D0E               	mullw	14
 16850  004834  0E05               	movlw	low (_Channels+5)
 16851  004836  24F3               	addwf	prodl,w,c
 16852  004838  6ED9               	movwf	fsr2l,c
 16853  00483A  0E04               	movlw	high (_Channels+5)
 16854  00483C  20F4               	addwfc	prodh,w,c
 16855  00483E  6EDA               	movwf	fsr2h,c
 16856  004840  50DF               	movf	223,w,c
 16857  004842  0B0F               	andlw	15
 16858  004844  0102               	movlb	2	; () banked
 16859  004846  6FEB               	movwf	(_loRa+235)& (0+255),b
 16860  004848                     l1234:
 16861                           
 16862                           ;lorawan_eu.c: 1058: }
 16863                           ;lorawan_eu.c: 1059: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i]
      +                          .status == 1) )
 16864  004848  0100               	movlb	0	; () banked
 16865  00484A  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16866  00484C  0D0E               	mullw	14
 16867  00484E  0E05               	movlw	low (_Channels+5)
 16868  004850  24F3               	addwf	prodl,w,c
 16869  004852  6ED9               	movwf	fsr2l,c
 16870  004854  0E04               	movlw	high (_Channels+5)
 16871  004856  20F4               	addwfc	prodh,w,c
 16872  004858  6EDA               	movwf	fsr2h,c
 16873  00485A  38DF               	swapf	223,w,c
 16874  00485C  0B0F               	andlw	15
 16875  00485E  0102               	movlb	2	; () banked
 16876  004860  61EC               	cpfslt	(_loRa+236)& (0+255),b
 16877  004862  D017               	goto	l12354
 16878                           
 16879                           ; BSR set to: 2
 16880  004864  0100               	movlb	0	; () banked
 16881  004866  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16882  004868  0D0E               	mullw	14
 16883  00486A  0E04               	movlw	low (_Channels+4)
 16884  00486C  24F3               	addwf	prodl,w,c
 16885  00486E  6ED9               	movwf	fsr2l,c
 16886  004870  0E04               	movlw	high (_Channels+4)
 16887  004872  20F4               	addwfc	prodh,w,c
 16888  004874  6EDA               	movwf	fsr2h,c
 16889  004876  04DE               	decf	postinc2,w,c
 16890  004878  E10C               	bnz	l12354
 16891                           
 16892                           ; BSR set to: 0
 16893                           ;lorawan_eu.c: 1060: {
 16894                           ;lorawan_eu.c: 1061: loRa.maxDataRate = Channels[i].dataRange.max;
 16895  00487A  5167               	movf	UpdateChannelIdStatus@i& (0+255),w,b
 16896  00487C  0D0E               	mullw	14
 16897  00487E  0E05               	movlw	low (_Channels+5)
 16898  004880  24F3               	addwf	prodl,w,c
 16899  004882  6ED9               	movwf	fsr2l,c
 16900  004884  0E04               	movlw	high (_Channels+5)
 16901  004886  20F4               	addwfc	prodh,w,c
 16902  004888  6EDA               	movwf	fsr2h,c
 16903  00488A  38DF               	swapf	223,w,c
 16904  00488C  0B0F               	andlw	15
 16905  00488E  0102               	movlb	2	; () banked
 16906  004890  6FEC               	movwf	(_loRa+236)& (0+255),b
 16907  004892                     l12354:
 16908  004892  0100               	movlb	0	; () banked
 16909  004894  2B67               	incf	UpdateChannelIdStatus@i& (0+255),f,b
 16910  004896                     l12356:
 16911                           
 16912                           ; BSR set to: 0
 16913  004896  0102               	movlb	2	; () banked
 16914  004898  51ED               	movf	(_loRa+237)& (0+255),w,b
 16915  00489A  0100               	movlb	0	; () banked
 16916  00489C  5D67               	subwf	UpdateChannelIdStatus@i& (0+255),w,b
 16917  00489E  E3AD               	bnc	l12344
 16918                           
 16919                           ; BSR set to: 0
 16920                           ;lorawan_eu.c: 1062: }
 16921                           ;lorawan_eu.c: 1063: }
 16922                           ;lorawan_eu.c: 1065: if (loRa.currentDataRate > loRa.maxDataRate)
 16923  0048A0  0102               	movlb	2	; () banked
 16924  0048A2  51DF               	movf	(_loRa+223)& (0+255),w,b
 16925  0048A4  5DEC               	subwf	(_loRa+236)& (0+255),w,b
 16926  0048A6  E202               	bc	l12362
 16927                           
 16928                           ; BSR set to: 2
 16929                           ;lorawan_eu.c: 1066: {
 16930                           ;lorawan_eu.c: 1067: loRa.currentDataRate = loRa.maxDataRate;
 16931  0048A8  C2EC  F2DF         	movff	_loRa+236,_loRa+223
 16932  0048AC                     l12362:
 16933                           
 16934                           ; BSR set to: 2
 16935                           ;lorawan_eu.c: 1068: }
 16936                           ;lorawan_eu.c: 1070: if (loRa.currentDataRate < loRa.minDataRate)
 16937  0048AC  51EB               	movf	(_loRa+235)& (0+255),w,b
 16938  0048AE  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 16939  0048B0  A0D8               	btfss	status,0,c
 16940                           
 16941                           ; BSR set to: 2
 16942                           ;lorawan_eu.c: 1071: {
 16943                           ;lorawan_eu.c: 1072: loRa.currentDataRate = loRa.minDataRate;
 16944  0048B2  C2EB  F2DF         	movff	_loRa+235,_loRa+223
 16945                           
 16946                           ; BSR set to: 2
 16947  0048B6  0012               	return		;funcret
 16948  0048B8                     __end_of_UpdateChannelIdStatus:
 16949                           	opt stack 0
 16950                           tosu	equ	0xFFF
 16951                           tosh	equ	0xFFE
 16952                           tosl	equ	0xFFD
 16953                           pclath	equ	0xFFA
 16954                           tblptru	equ	0xFF8
 16955                           tblptrh	equ	0xFF7
 16956                           tblptrl	equ	0xFF6
 16957                           tablat	equ	0xFF5
 16958                           prodh	equ	0xFF4
 16959                           prodl	equ	0xFF3
 16960                           intcon	equ	0xFF2
 16961                           indf0	equ	0xFEF
 16962                           postinc0	equ	0xFEE
 16963                           fsr0h	equ	0xFEA
 16964                           fsr0l	equ	0xFE9
 16965                           wreg	equ	0xFE8
 16966                           postinc1	equ	0xFE6
 16967                           postdec1	equ	0xFE5
 16968                           plusw1	equ	0xFE3
 16969                           fsr1h	equ	0xFE2
 16970                           fsr1l	equ	0xFE1
 16971                           indf2	equ	0xFDF
 16972                           postinc2	equ	0xFDE
 16973                           postdec2	equ	0xFDD
 16974                           plusw2	equ	0xFDB
 16975                           fsr2h	equ	0xFDA
 16976                           fsr2l	equ	0xFD9
 16977                           status	equ	0xFD8
 16978                           
 16979 ;; *************** function _ExecuteDutyCycle *****************
 16980 ;; Defined at:
 16981 ;;		line 594 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 16982 ;; Parameters:    Size  Location     Type
 16983 ;;  ptr             2    4[BANK0 ] PTR unsigned char 
 16984 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 16985 ;; Auto vars:     Size  Location     Type
 16986 ;;  maxDCycle       1    9[BANK0 ] unsigned char 
 16987 ;; Return value:  Size  Location     Type
 16988 ;;                  2    4[BANK0 ] PTR unsigned char 
 16989 ;; Registers used:
 16990 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16991 ;; Tracked objects:
 16992 ;;		On entry : F/0
 16993 ;;		On exit  : D/0
 16994 ;;		Unchanged: 0/0
 16995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16996 ;;      Params:         0       2       0       0       0       0       0       0       0
 16997 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16998 ;;      Temps:          0       3       0       0       0       0       0       0       0
 16999 ;;      Totals:         0       6       0       0       0       0       0       0       0
 17000 ;;Total ram usage:        6 bytes
 17001 ;; Hardware stack levels used:    1
 17002 ;; Hardware stack levels required when called:    7
 17003 ;; This function calls:
 17004 ;;		Nothing
 17005 ;; This function is called by:
 17006 ;;		_MacExecuteCommands
 17007 ;; This function uses a non-reentrant model
 17008 ;;
 17009                           
 17010                           	psect	text89
 17011  006A32                     __ptext89:
 17012                           	opt stack 0
 17013  006A32                     _ExecuteDutyCycle:
 17014                           	opt stack 18
 17015                           
 17016                           ; BSR set to: 0
 17017                           ;lorawan_eu.c: 596: uint8_t maxDCycle;
 17018                           ;lorawan_eu.c: 598: maxDCycle = *(ptr++);
 17019                           
 17020                           ; BSR set to: 2
 17021                           ;incstack = 0
 17022  006A32  C064  FFD9         	movff	ExecuteDutyCycle@ptr,fsr2l
 17023  006A36  C065  FFDA         	movff	ExecuteDutyCycle@ptr+1,fsr2h
 17024  006A3A  50DF               	movf	indf2,w,c
 17025  006A3C  6F69               	movwf	ExecuteDutyCycle@maxDCycle& (0+255),b
 17026                           
 17027                           ; BSR set to: 0
 17028  006A3E  4B64               	infsnz	ExecuteDutyCycle@ptr& (0+255),f,b
 17029  006A40  2B65               	incf	(ExecuteDutyCycle@ptr+1)& (0+255),f,b
 17030                           
 17031                           ; BSR set to: 0
 17032                           ;lorawan_eu.c: 599: if (maxDCycle < 15)
 17033  006A42  0E0F               	movlw	15
 17034  006A44  6169               	cpfslt	ExecuteDutyCycle@maxDCycle& (0+255),b
 17035  006A46  D012               	goto	l1110
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;lorawan_eu.c: 600: {
 17039                           ;lorawan_eu.c: 601: loRa.prescaler = 1 << maxDCycle;
 17040  006A48  C069  F066         	movff	ExecuteDutyCycle@maxDCycle,??_ExecuteDutyCycle
 17041  006A4C  0E01               	movlw	1
 17042  006A4E  6F67               	movwf	(??_ExecuteDutyCycle+1)& (0+255),b
 17043  006A50  6B68               	clrf	(??_ExecuteDutyCycle+2)& (0+255),b
 17044  006A52  2B66               	incf	??_ExecuteDutyCycle& (0+255),f,b
 17045  006A54  D003               	goto	u14874
 17046  006A56                     u14875:
 17047  006A56  90D8               	bcf	status,0,c
 17048  006A58  3767               	rlcf	(??_ExecuteDutyCycle+1)& (0+255),f,b
 17049  006A5A  3768               	rlcf	(??_ExecuteDutyCycle+2)& (0+255),f,b
 17050  006A5C                     u14874:
 17051  006A5C  2F66               	decfsz	??_ExecuteDutyCycle& (0+255),f,b
 17052  006A5E  D7FB               	goto	u14875
 17053  006A60  C067  F2DB         	movff	??_ExecuteDutyCycle+1,_loRa+219
 17054  006A64  C068  F2DC         	movff	??_ExecuteDutyCycle+2,_loRa+220
 17055                           
 17056                           ;lorawan_eu.c: 602: loRa.macStatus.prescalerModified = 1;
 17057  006A68  0102               	movlb	2	; () banked
 17058  006A6A  8D03               	bsf	(_loRa+3)& (0+255),6,b
 17059  006A6C                     l1110:
 17060                           
 17061                           ;lorawan_eu.c: 603: }
 17062                           ;lorawan_eu.c: 605: if (maxDCycle == 255)
 17063  006A6C  0100               	movlb	0	; () banked
 17064  006A6E  2969               	incf	ExecuteDutyCycle@maxDCycle& (0+255),w,b
 17065  006A70  E102               	bnz	l13442
 17066                           
 17067                           ; BSR set to: 0
 17068                           ;lorawan_eu.c: 606: {
 17069                           ;lorawan_eu.c: 607: loRa.macStatus.silentImmediately = 1;
 17070  006A72  0102               	movlb	2	; () banked
 17071  006A74  8F02               	bsf	(_loRa+2)& (0+255),7,b
 17072  006A76                     l13442:
 17073                           
 17074                           ;lorawan_eu.c: 608: }
 17075                           ;lorawan_eu.c: 610: return ptr;
 17076  006A76  C064  F064         	movff	ExecuteDutyCycle@ptr,?_ExecuteDutyCycle
 17077  006A7A  C065  F065         	movff	ExecuteDutyCycle@ptr+1,?_ExecuteDutyCycle+1
 17078  006A7E  0012               	return		;funcret
 17079  006A80                     __end_of_ExecuteDutyCycle:
 17080                           	opt stack 0
 17081                           tosu	equ	0xFFF
 17082                           tosh	equ	0xFFE
 17083                           tosl	equ	0xFFD
 17084                           pclath	equ	0xFFA
 17085                           tblptru	equ	0xFF8
 17086                           tblptrh	equ	0xFF7
 17087                           tblptrl	equ	0xFF6
 17088                           tablat	equ	0xFF5
 17089                           prodh	equ	0xFF4
 17090                           prodl	equ	0xFF3
 17091                           intcon	equ	0xFF2
 17092                           indf0	equ	0xFEF
 17093                           postinc0	equ	0xFEE
 17094                           fsr0h	equ	0xFEA
 17095                           fsr0l	equ	0xFE9
 17096                           wreg	equ	0xFE8
 17097                           postinc1	equ	0xFE6
 17098                           postdec1	equ	0xFE5
 17099                           plusw1	equ	0xFE3
 17100                           fsr1h	equ	0xFE2
 17101                           fsr1l	equ	0xFE1
 17102                           indf2	equ	0xFDF
 17103                           postinc2	equ	0xFDE
 17104                           postdec2	equ	0xFDD
 17105                           plusw2	equ	0xFDB
 17106                           fsr2h	equ	0xFDA
 17107                           fsr2l	equ	0xFD9
 17108                           status	equ	0xFD8
 17109                           
 17110 ;; *************** function _ExecuteDevStatus *****************
 17111 ;; Defined at:
 17112 ;;		line 672 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 17113 ;; Parameters:    Size  Location     Type
 17114 ;;  ptr             2    4[BANK0 ] PTR unsigned char 
 17115 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 17116 ;; Auto vars:     Size  Location     Type
 17117 ;;		None
 17118 ;; Return value:  Size  Location     Type
 17119 ;;                  2    4[BANK0 ] PTR unsigned char 
 17120 ;; Registers used:
 17121 ;;		wreg, status,2, status,0
 17122 ;; Tracked objects:
 17123 ;;		On entry : F/0
 17124 ;;		On exit  : F/0
 17125 ;;		Unchanged: F/0
 17126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17127 ;;      Params:         0       2       0       0       0       0       0       0       0
 17128 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17129 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17130 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17131 ;;Total ram usage:        2 bytes
 17132 ;; Hardware stack levels used:    1
 17133 ;; Hardware stack levels required when called:    7
 17134 ;; This function calls:
 17135 ;;		Nothing
 17136 ;; This function is called by:
 17137 ;;		_MacExecuteCommands
 17138 ;; This function uses a non-reentrant model
 17139 ;;
 17140                           
 17141                           	psect	text90
 17142  007806                     __ptext90:
 17143                           	opt stack 0
 17144  007806                     _ExecuteDevStatus:
 17145                           	opt stack 18
 17146                           
 17147                           ; BSR set to: 0
 17148                           ;lorawan_eu.c: 674: return ptr;
 17149                           
 17150                           ;incstack = 0
 17151  007806  C064  F064         	movff	ExecuteDevStatus@ptr,?_ExecuteDevStatus
 17152  00780A  C065  F065         	movff	ExecuteDevStatus@ptr+1,?_ExecuteDevStatus+1
 17153                           
 17154                           ; BSR set to: 0
 17155  00780E  0012               	return		;funcret
 17156  007810                     __end_of_ExecuteDevStatus:
 17157                           	opt stack 0
 17158                           tosu	equ	0xFFF
 17159                           tosh	equ	0xFFE
 17160                           tosl	equ	0xFFD
 17161                           pclath	equ	0xFFA
 17162                           tblptru	equ	0xFF8
 17163                           tblptrh	equ	0xFF7
 17164                           tblptrl	equ	0xFF6
 17165                           tablat	equ	0xFF5
 17166                           prodh	equ	0xFF4
 17167                           prodl	equ	0xFF3
 17168                           intcon	equ	0xFF2
 17169                           indf0	equ	0xFEF
 17170                           postinc0	equ	0xFEE
 17171                           fsr0h	equ	0xFEA
 17172                           fsr0l	equ	0xFE9
 17173                           wreg	equ	0xFE8
 17174                           postinc1	equ	0xFE6
 17175                           postdec1	equ	0xFE5
 17176                           plusw1	equ	0xFE3
 17177                           fsr1h	equ	0xFE2
 17178                           fsr1l	equ	0xFE1
 17179                           indf2	equ	0xFDF
 17180                           postinc2	equ	0xFDE
 17181                           postdec2	equ	0xFDD
 17182                           plusw2	equ	0xFDB
 17183                           fsr2h	equ	0xFDA
 17184                           fsr2l	equ	0xFD9
 17185                           status	equ	0xFD8
 17186                           
 17187 ;; *************** function _LORAWAN_Send *****************
 17188 ;; Defined at:
 17189 ;;		line 185 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17190 ;; Parameters:    Size  Location     Type
 17191 ;;  confirmed       1    wreg     enum E17158
 17192 ;;  port            1  129[BANK0 ] unsigned char 
 17193 ;;  buffer          2  130[BANK0 ] PTR void 
 17194 ;;		 -> payload(2), NULL(0), 
 17195 ;;  bufferLength    1  132[BANK0 ] unsigned char 
 17196 ;; Auto vars:     Size  Location     Type
 17197 ;;  confirmed       1  135[BANK0 ] enum E17158
 17198 ;;  result          1  134[BANK0 ] enum E17131
 17199 ;; Return value:  Size  Location     Type
 17200 ;;                  1    wreg      enum E17131
 17201 ;; Registers used:
 17202 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17203 ;; Tracked objects:
 17204 ;;		On entry : F/0
 17205 ;;		On exit  : D/0
 17206 ;;		Unchanged: 0/0
 17207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17208 ;;      Params:         0       4       0       0       0       0       0       0       0
 17209 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17210 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17211 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17212 ;;Total ram usage:        7 bytes
 17213 ;; Hardware stack levels used:    1
 17214 ;; Hardware stack levels required when called:   13
 17215 ;; This function calls:
 17216 ;;		_AssemblePacket
 17217 ;;		_LORAWAN_GetMaxPayloadSize
 17218 ;;		_RADIO_ReceiveStop
 17219 ;;		_RADIO_Transmit
 17220 ;;		_SelectChannelForTransmission
 17221 ;; This function is called by:
 17222 ;;		_AutomaticReplyCallback
 17223 ;;		_LORAWAN_RxDone
 17224 ;;		_sendPacket
 17225 ;; This function uses a non-reentrant model
 17226 ;;
 17227                           
 17228                           	psect	text91
 17229  005614                     __ptext91:
 17230                           	opt stack 0
 17231  005614                     _LORAWAN_Send:
 17232                           	opt stack 16
 17233                           
 17234                           ; BSR set to: 0
 17235                           ;incstack = 0
 17236                           ;LORAWAN_Send@confirmed stored from wreg
 17237  005614  6FE7               	movwf	LORAWAN_Send@confirmed& (0+255),b
 17238                           
 17239                           ;lorawan.c: 187: LorawanError_t result;
 17240                           ;lorawan.c: 189: if (loRa.macStatus.macPause == 1)
 17241  005616  0102               	movlb	2	; () banked
 17242  005618  A103               	btfss	(_loRa+3)& (0+255),0,b
 17243                           
 17244                           ; BSR set to: 2
 17245                           ;lorawan.c: 192: }
 17246                           ;lorawan.c: 194: if (loRa.macStatus.silentImmediately == 1)
 17247  00561A  BF02               	btfsc	(_loRa+2)& (0+255),7,b
 17248  00561C  0012               	return	
 17249                           
 17250                           ; BSR set to: 2
 17251                           ;lorawan.c: 197: }
 17252                           ;lorawan.c: 199: if (loRa.macStatus.networkJoined == 0)
 17253  00561E  A902               	btfss	(_loRa+2)& (0+255),4,b
 17254  005620  0012               	return	
 17255                           
 17256                           ; BSR set to: 2
 17257                           ;lorawan.c: 202: }
 17258                           ;lorawan.c: 204: if ( (port < 1) && (bufferLength != 0) )
 17259  005622  0100               	movlb	0	; () banked
 17260  005624  51E1               	movf	LORAWAN_Send@port& (0+255),w,b
 17261  005626  E103               	bnz	l13900
 17262                           
 17263                           ; BSR set to: 0
 17264  005628  51E4               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 17265  00562A  E001               	bz	l13900
 17266  00562C  0012               	return	
 17267  00562E                     l13900:
 17268                           
 17269                           ; BSR set to: 0
 17270                           ;lorawan.c: 207: }
 17271                           ;lorawan.c: 210: if (bufferLength > LORAWAN_GetMaxPayloadSize ())
 17272  00562E  ECEB  F036         	call	_LORAWAN_GetMaxPayloadSize	;wreg free
 17273  005632  6FE5               	movwf	??_LORAWAN_Send& (0+255),b
 17274  005634  51E4               	movf	LORAWAN_Send@bufferLength& (0+255),w,b
 17275  005636  5DE5               	subwf	??_LORAWAN_Send& (0+255),w,b
 17276  005638  E201               	bc	l13904
 17277  00563A  0012               	return	
 17278  00563C                     l13904:
 17279                           
 17280                           ; BSR set to: 0
 17281                           ;lorawan.c: 213: }
 17282                           ;lorawan.c: 215: if (loRa.fCntUp.value == (4294967295UL))
 17283  00563C  0102               	movlb	2	; () banked
 17284  00563E  2906               	incf	(_loRa+6)& (0+255),w,b
 17285  005640  E108               	bnz	l13908
 17286  005642  2907               	incf	(_loRa+7)& (0+255),w,b
 17287  005644  E106               	bnz	l13908
 17288  005646  2908               	incf	(_loRa+8)& (0+255),w,b
 17289  005648  E104               	bnz	l13908
 17290  00564A  2909               	incf	(_loRa+9)& (0+255),w,b
 17291  00564C  E102               	bnz	l13908
 17292                           
 17293                           ; BSR set to: 2
 17294                           ;lorawan.c: 216: {
 17295                           ;lorawan.c: 218: loRa.macStatus.rejoinNeeded = 1;
 17296  00564E  8304               	bsf	(_loRa+4)& (0+255),1,b
 17297                           
 17298                           ;lorawan.c: 219: return FRAME_COUNTER_ERROR_REJOIN_NEEDED;
 17299                           ;	Return value of _LORAWAN_Send is never used
 17300  005650  0012               	return	
 17301  005652                     l13908:
 17302                           
 17303                           ; BSR set to: 2
 17304                           ;lorawan.c: 220: }
 17305                           ;lorawan.c: 222: if ((loRa.macStatus.macState != IDLE) && (CLASS_A == loRa.deviceClass))
 17306  005652  5102               	movf	(_loRa+2)& (0+255),w,b
 17307  005654  0B0F               	andlw	15
 17308  005656  E003               	bz	l13914
 17309                           
 17310                           ; BSR set to: 2
 17311  005658  5112               	movf	(_loRa+18)& (0+255),w,b
 17312  00565A  E101               	bnz	l13914
 17313  00565C  0012               	return	
 17314  00565E                     l13914:
 17315                           
 17316                           ; BSR set to: 2
 17317                           ;lorawan.c: 225: }
 17318                           ;lorawan.c: 227: result = SelectChannelForTransmission (1);
 17319  00565E  0E01               	movlw	1
 17320  005660  EC60  F033         	call	_SelectChannelForTransmission
 17321  005664  6FE6               	movwf	LORAWAN_Send@result& (0+255),b
 17322                           
 17323                           ; BSR set to: 0
 17324                           ;lorawan.c: 228: if (result != OK)
 17325  005666  51E6               	movf	LORAWAN_Send@result& (0+255),w,b
 17326  005668  E001               	bz	l13922
 17327  00566A  0012               	return	
 17328  00566C                     l13922:
 17329                           
 17330                           ; BSR set to: 0
 17331                           ;lorawan.c: 232: else
 17332                           ;lorawan.c: 233: {
 17333                           ;lorawan.c: 234: if (CLASS_C == loRa.deviceClass)
 17334  00566C  0E02               	movlw	2
 17335  00566E  0102               	movlb	2	; () banked
 17336  005670  1912               	xorwf	(_loRa+18)& (0+255),w,b
 17337  005672  E102               	bnz	l13926
 17338                           
 17339                           ; BSR set to: 2
 17340                           ;lorawan.c: 235: {
 17341                           ;lorawan.c: 236: RADIO_ReceiveStop();
 17342  005674  EC8B  F03A         	call	_RADIO_ReceiveStop	;wreg free
 17343  005678                     l13926:
 17344                           
 17345                           ;lorawan.c: 237: }
 17346                           ;lorawan.c: 239: AssemblePacket (confirmed, port, buffer, bufferLength);
 17347  005678  C0E1  F166         	movff	LORAWAN_Send@port,AssemblePacket@port
 17348  00567C  C0E2  F167         	movff	LORAWAN_Send@buffer,AssemblePacket@buffer
 17349  005680  C0E3  F168         	movff	LORAWAN_Send@buffer+1,AssemblePacket@buffer+1
 17350  005684  C0E4  F169         	movff	LORAWAN_Send@bufferLength,AssemblePacket@bufferLength
 17351  005688  0101               	movlb	1	; () banked
 17352  00568A  6B6A               	clrf	(AssemblePacket@bufferLength+1)& (0+255),b
 17353  00568C  0100               	movlb	0	; () banked
 17354  00568E  51E7               	movf	LORAWAN_Send@confirmed& (0+255),w,b
 17355  005690  ECA4  F00D         	call	_AssemblePacket
 17356                           
 17357                           ; BSR set to: 2
 17358                           ;lorawan.c: 241: if (RADIO_Transmit (&macBuffer[16], loRa.lastPacketLength) == OK)
 17359  005694  0EF0               	movlw	low (_macBuffer+16)
 17360  005696  0100               	movlb	0	; () banked
 17361  005698  6F94               	movwf	RADIO_Transmit@buffer& (0+255),b
 17362  00569A  0E04               	movlw	high (_macBuffer+16)
 17363  00569C  6F95               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 17364  00569E  C2D4  F096         	movff	_loRa+212,RADIO_Transmit@bufferLen
 17365  0056A2  ECFA  F017         	call	_RADIO_Transmit	;wreg free
 17366  0056A6  5194               	movf	?_RADIO_Transmit& (0+255),w,b
 17367  0056A8  1195               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 17368  0056AA  A4D8               	btfss	status,2,c
 17369  0056AC  0012               	return	
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;lorawan.c: 242: {
 17373                           ;lorawan.c: 243: loRa.fCntUp.value ++;
 17374  0056AE  0102               	movlb	2	; () banked
 17375  0056B0  2B06               	incf	(_loRa+6)& (0+255),f,b
 17376  0056B2  0E00               	movlw	0
 17377  0056B4  2307               	addwfc	(_loRa+7)& (0+255),f,b
 17378  0056B6  2308               	addwfc	(_loRa+8)& (0+255),f,b
 17379  0056B8  2309               	addwfc	(_loRa+9)& (0+255),f,b
 17380                           
 17381                           ;lorawan.c: 245: if (CNF == confirmed)
 17382  0056BA  0100               	movlb	0	; () banked
 17383  0056BC  05E7               	decf	LORAWAN_Send@confirmed& (0+255),w,b
 17384  0056BE  E102               	bnz	l1767
 17385                           
 17386                           ; BSR set to: 0
 17387                           ;lorawan.c: 246: {
 17388                           ;lorawan.c: 247: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 17389  0056C0  0102               	movlb	2	; () banked
 17390  0056C2  8100               	bsf	_loRa& (0+255),0,b
 17391  0056C4                     l1767:
 17392                           
 17393                           ;lorawan.c: 248: }
 17394                           ;lorawan.c: 249: loRa.lorawanMacStatus.synchronization = 1;
 17395  0056C4  0102               	movlb	2	; () banked
 17396  0056C6  8B00               	bsf	_loRa& (0+255),5,b
 17397                           
 17398                           ; BSR set to: 2
 17399                           ;lorawan.c: 250: loRa.macStatus.macState = TRANSMISSION_OCCURRING;
 17400  0056C8  5102               	movf	(_loRa+2)& (0+255),w,b
 17401  0056CA  0BF0               	andlw	-16
 17402  0056CC  0901               	iorlw	1
 17403  0056CE  6F02               	movwf	(_loRa+2)& (0+255),b
 17404                           
 17405                           ;lorawan.c: 251: }
 17406  0056D0  0012               	return		;funcret
 17407  0056D2                     __end_of_LORAWAN_Send:
 17408                           	opt stack 0
 17409                           tosu	equ	0xFFF
 17410                           tosh	equ	0xFFE
 17411                           tosl	equ	0xFFD
 17412                           pclath	equ	0xFFA
 17413                           tblptru	equ	0xFF8
 17414                           tblptrh	equ	0xFF7
 17415                           tblptrl	equ	0xFF6
 17416                           tablat	equ	0xFF5
 17417                           prodh	equ	0xFF4
 17418                           prodl	equ	0xFF3
 17419                           intcon	equ	0xFF2
 17420                           indf0	equ	0xFEF
 17421                           postinc0	equ	0xFEE
 17422                           fsr0h	equ	0xFEA
 17423                           fsr0l	equ	0xFE9
 17424                           wreg	equ	0xFE8
 17425                           postinc1	equ	0xFE6
 17426                           postdec1	equ	0xFE5
 17427                           plusw1	equ	0xFE3
 17428                           fsr1h	equ	0xFE2
 17429                           fsr1l	equ	0xFE1
 17430                           indf2	equ	0xFDF
 17431                           postinc2	equ	0xFDE
 17432                           postdec2	equ	0xFDD
 17433                           plusw2	equ	0xFDB
 17434                           fsr2h	equ	0xFDA
 17435                           fsr2l	equ	0xFD9
 17436                           status	equ	0xFD8
 17437                           
 17438 ;; *************** function _LORAWAN_GetMaxPayloadSize *****************
 17439 ;; Defined at:
 17440 ;;		line 1556 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17441 ;; Parameters:    Size  Location     Type
 17442 ;;		None
 17443 ;; Auto vars:     Size  Location     Type
 17444 ;;  result          1   14[BANK0 ] unsigned char 
 17445 ;;  macCommandsL    1   13[BANK0 ] unsigned char 
 17446 ;; Return value:  Size  Location     Type
 17447 ;;                  1    wreg      unsigned char 
 17448 ;; Registers used:
 17449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17450 ;; Tracked objects:
 17451 ;;		On entry : D/2
 17452 ;;		On exit  : F/0
 17453 ;;		Unchanged: 0/0
 17454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17455 ;;      Params:         0       0       0       0       0       0       0       0       0
 17456 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17457 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17458 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17459 ;;Total ram usage:        3 bytes
 17460 ;; Hardware stack levels used:    1
 17461 ;; Hardware stack levels required when called:    8
 17462 ;; This function calls:
 17463 ;;		_CountfOptsLength
 17464 ;; This function is called by:
 17465 ;;		_LORAWAN_Send
 17466 ;;		_AckRetransmissionCallback
 17467 ;; This function uses a non-reentrant model
 17468 ;;
 17469                           
 17470                           	psect	text92
 17471  006DD6                     __ptext92:
 17472                           	opt stack 0
 17473  006DD6                     _LORAWAN_GetMaxPayloadSize:
 17474                           	opt stack 20
 17475                           
 17476                           ;lorawan.c: 1559: uint8_t macCommandsLength;
 17477                           ;lorawan.c: 1561: macCommandsLength = CountfOptsLength();
 17478                           
 17479                           ;incstack = 0
 17480  006DD6  ECCF  F02C         	call	_CountfOptsLength	;wreg free
 17481  006DDA  6F6D               	movwf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),b
 17482                           
 17483                           ; BSR set to: 0
 17484                           ;lorawan.c: 1563: if (loRa.crtMacCmdIndex == 0)
 17485  006DDC  0102               	movlb	2	; () banked
 17486  006DDE  51A7               	movf	(_loRa+167)& (0+255),w,b
 17487  006DE0  E10A               	bnz	l13604
 17488                           
 17489                           ; BSR set to: 2
 17490                           ;lorawan.c: 1564: {
 17491                           ;lorawan.c: 1565: result = maxPayloadSize[loRa.currentDataRate];
 17492  006DE2  0E6D               	movlw	low _maxPayloadSize
 17493  006DE4  25DF               	addwf	(_loRa+223)& (0+255),w,b
 17494  006DE6  6EF6               	movwf	tblptrl,c
 17495  006DE8  6AF7               	clrf	tblptrh,c
 17496  006DEA  0E7F               	movlw	high _maxPayloadSize
 17497  006DEC  22F7               	addwfc	tblptrh,f,c
 17498  006DEE                     	if	0	;There are less than 3 active tblptr bytes
 17499  006DEE                     	endif
 17500  006DEE  0008               	tblrd		*
 17501  006DF0  CFF5 F06E          	movff	tablat,LORAWAN_GetMaxPayloadSize@result
 17502                           
 17503                           ;lorawan.c: 1566: }
 17504  006DF4  D00D               	goto	l13606
 17505  006DF6                     l13604:
 17506                           
 17507                           ; BSR set to: 2
 17508                           ;lorawan.c: 1567: else
 17509                           ;lorawan.c: 1568: {
 17510                           ;lorawan.c: 1569: result = maxPayloadSize[loRa.currentDataRate] - macCommandsLength ;
 17511  006DF6  0E6D               	movlw	low _maxPayloadSize
 17512  006DF8  25DF               	addwf	(_loRa+223)& (0+255),w,b
 17513  006DFA  6EF6               	movwf	tblptrl,c
 17514  006DFC  6AF7               	clrf	tblptrh,c
 17515  006DFE  0E7F               	movlw	high _maxPayloadSize
 17516  006E00  22F7               	addwfc	tblptrh,f,c
 17517  006E02                     	if	0	;There are less than 3 active tblptr bytes
 17518  006E02                     	endif
 17519  006E02  0008               	tblrd		*
 17520  006E04  CFF5 F06C          	movff	tablat,??_LORAWAN_GetMaxPayloadSize
 17521  006E08  0100               	movlb	0	; () banked
 17522  006E0A  516D               	movf	LORAWAN_GetMaxPayloadSize@macCommandsLength& (0+255),w,b
 17523  006E0C  5D6C               	subwf	??_LORAWAN_GetMaxPayloadSize& (0+255),w,b
 17524  006E0E  6F6E               	movwf	LORAWAN_GetMaxPayloadSize@result& (0+255),b
 17525  006E10                     l13606:
 17526                           
 17527                           ;lorawan.c: 1570: }
 17528                           ;lorawan.c: 1572: return result;
 17529  006E10  0100               	movlb	0	; () banked
 17530  006E12  516E               	movf	LORAWAN_GetMaxPayloadSize@result& (0+255),w,b
 17531                           
 17532                           ; BSR set to: 0
 17533  006E14  0012               	return		;funcret
 17534  006E16                     __end_of_LORAWAN_GetMaxPayloadSize:
 17535                           	opt stack 0
 17536                           tosu	equ	0xFFF
 17537                           tosh	equ	0xFFE
 17538                           tosl	equ	0xFFD
 17539                           pclath	equ	0xFFA
 17540                           tblptru	equ	0xFF8
 17541                           tblptrh	equ	0xFF7
 17542                           tblptrl	equ	0xFF6
 17543                           tablat	equ	0xFF5
 17544                           prodh	equ	0xFF4
 17545                           prodl	equ	0xFF3
 17546                           intcon	equ	0xFF2
 17547                           indf0	equ	0xFEF
 17548                           postinc0	equ	0xFEE
 17549                           fsr0h	equ	0xFEA
 17550                           fsr0l	equ	0xFE9
 17551                           wreg	equ	0xFE8
 17552                           postinc1	equ	0xFE6
 17553                           postdec1	equ	0xFE5
 17554                           plusw1	equ	0xFE3
 17555                           fsr1h	equ	0xFE2
 17556                           fsr1l	equ	0xFE1
 17557                           indf2	equ	0xFDF
 17558                           postinc2	equ	0xFDE
 17559                           postdec2	equ	0xFDD
 17560                           plusw2	equ	0xFDB
 17561                           fsr2h	equ	0xFDA
 17562                           fsr2l	equ	0xFD9
 17563                           status	equ	0xFD8
 17564                           
 17565 ;; *************** function _AssemblePacket *****************
 17566 ;; Defined at:
 17567 ;;		line 1672 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;  confirmed       1    wreg     unsigned char 
 17570 ;;  port            1  102[BANK1 ] unsigned char 
 17571 ;;  buffer          2  103[BANK1 ] PTR unsigned char 
 17572 ;;		 -> payload(2), NULL(0), 
 17573 ;;  bufferLength    2  105[BANK1 ] unsigned int 
 17574 ;; Auto vars:     Size  Location     Type
 17575 ;;  confirmed       1  124[BANK0 ] unsigned char 
 17576 ;;  bufferIndex     1  128[BANK0 ] unsigned char 
 17577 ;;  macCmdIdx       1  127[BANK0 ] unsigned char 
 17578 ;;  fCtrl           1  126[BANK0 ] struct .
 17579 ;;  mhdr            1  125[BANK0 ] struct .
 17580 ;; Return value:  Size  Location     Type
 17581 ;;                  1    wreg      void 
 17582 ;; Registers used:
 17583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17584 ;; Tracked objects:
 17585 ;;		On entry : F/0
 17586 ;;		On exit  : F/2
 17587 ;;		Unchanged: 0/0
 17588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17589 ;;      Params:         0       0       5       0       0       0       0       0       0
 17590 ;;      Locals:         0       5       0       0       0       0       0       0       0
 17591 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17592 ;;      Totals:         0       7       5       0       0       0       0       0       0
 17593 ;;Total ram usage:       12 bytes
 17594 ;; Hardware stack levels used:    1
 17595 ;; Hardware stack levels required when called:   12
 17596 ;; This function calls:
 17597 ;;		_AESCmac
 17598 ;;		_AssembleEncryptionBlock
 17599 ;;		_CountfOptsLength
 17600 ;;		_EncryptFRMPayload
 17601 ;;		_FindSmallestDataRate
 17602 ;;		_IncludeMacCommandsResponse
 17603 ;;		_memcpy
 17604 ;;		_memset
 17605 ;; This function is called by:
 17606 ;;		_LORAWAN_Send
 17607 ;; This function uses a non-reentrant model
 17608 ;;
 17609                           
 17610                           	psect	text93
 17611  001B48                     __ptext93:
 17612                           	opt stack 0
 17613  001B48                     _AssemblePacket:
 17614                           	opt stack 16
 17615                           
 17616                           ; BSR set to: 0
 17617                           ;incstack = 0
 17618                           ;AssemblePacket@confirmed stored from wreg
 17619  001B48  6FDC               	movwf	AssemblePacket@confirmed& (0+255),b
 17620                           
 17621                           ;lorawan.c: 1674: Mhdr_t mhdr;
 17622                           ;lorawan.c: 1675: uint8_t bufferIndex = 16;
 17623  001B4A  0E10               	movlw	16
 17624  001B4C  0100               	movlb	0	; () banked
 17625  001B4E  6FE0               	movwf	AssemblePacket@bufferIndex& (0+255),b
 17626                           
 17627                           ; BSR set to: 0
 17628                           ;lorawan.c: 1676: FCtrl_t fCtrl;
 17629                           ;lorawan.c: 1677: uint8_t macCmdIdx = 0;
 17630  001B50  6BDF               	clrf	AssemblePacket@macCmdIdx& (0+255),b
 17631                           
 17632                           ; BSR set to: 0
 17633                           ;lorawan.c: 1679: memset (&mhdr, 0, sizeof (mhdr) );
 17634  001B52  0EDD               	movlw	low AssemblePacket@mhdr
 17635  001B54  6F64               	movwf	memset@p1& (0+255),b
 17636  001B56  6B65               	clrf	(memset@p1+1)& (0+255),b
 17637  001B58  6B67               	clrf	(memset@c+1)& (0+255),b
 17638  001B5A  6B66               	clrf	memset@c& (0+255),b
 17639  001B5C  6B69               	clrf	(memset@n+1)& (0+255),b
 17640  001B5E  0E01               	movlw	1
 17641  001B60  6F68               	movwf	memset@n& (0+255),b
 17642  001B62  EC60  F039         	call	_memset	;wreg free
 17643                           
 17644                           ; BSR set to: 0
 17645                           ;lorawan.c: 1680: memset (&macBuffer[0], 0, sizeof (macBuffer) );
 17646  001B66  0EE0               	movlw	low _macBuffer
 17647  001B68  6F64               	movwf	memset@p1& (0+255),b
 17648  001B6A  0E04               	movlw	high _macBuffer
 17649  001B6C  6F65               	movwf	(memset@p1+1)& (0+255),b
 17650  001B6E  6B67               	clrf	(memset@c+1)& (0+255),b
 17651  001B70  6B66               	clrf	memset@c& (0+255),b
 17652  001B72  0E01               	movlw	1
 17653  001B74  6F69               	movwf	(memset@n+1)& (0+255),b
 17654  001B76  0E0F               	movlw	15
 17655  001B78  6F68               	movwf	memset@n& (0+255),b
 17656  001B7A  EC60  F039         	call	_memset	;wreg free
 17657                           
 17658                           ; BSR set to: 0
 17659                           ;lorawan.c: 1681: memset (aesBuffer, 0, sizeof (aesBuffer) );
 17660  001B7E  0EAB               	movlw	low _aesBuffer
 17661  001B80  6F64               	movwf	memset@p1& (0+255),b
 17662  001B82  0E01               	movlw	high _aesBuffer
 17663  001B84  6F65               	movwf	(memset@p1+1)& (0+255),b
 17664  001B86  6B67               	clrf	(memset@c+1)& (0+255),b
 17665  001B88  6B66               	clrf	memset@c& (0+255),b
 17666  001B8A  6B69               	clrf	(memset@n+1)& (0+255),b
 17667  001B8C  0E10               	movlw	16
 17668  001B8E  6F68               	movwf	memset@n& (0+255),b
 17669  001B90  EC60  F039         	call	_memset	;wreg free
 17670                           
 17671                           ; BSR set to: 0
 17672                           ;lorawan.c: 1683: if (confirmed == 1)
 17673  001B94  05DC               	decf	AssemblePacket@confirmed& (0+255),w,b
 17674  001B96  E107               	bnz	l13626
 17675                           
 17676                           ; BSR set to: 0
 17677                           ;lorawan.c: 1684: {
 17678                           ;lorawan.c: 1685: mhdr.bits.mType = FRAME_TYPE_DATA_CONFIRMED_UP;
 17679  001B98  51DD               	movf	AssemblePacket@mhdr& (0+255),w,b
 17680  001B9A  0B1F               	andlw	-225
 17681  001B9C  0980               	iorlw	128
 17682  001B9E  6FDD               	movwf	AssemblePacket@mhdr& (0+255),b
 17683                           
 17684                           ; BSR set to: 0
 17685                           ;lorawan.c: 1686: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 1;
 17686  001BA0  0102               	movlb	2	; () banked
 17687  001BA2  8100               	bsf	_loRa& (0+255),0,b
 17688                           
 17689                           ;lorawan.c: 1687: }
 17690  001BA4  D004               	goto	l2252
 17691  001BA6                     l13626:
 17692                           
 17693                           ; BSR set to: 0
 17694                           ;lorawan.c: 1688: else
 17695                           ;lorawan.c: 1689: {
 17696                           ;lorawan.c: 1690: mhdr.bits.mType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 17697  001BA6  51DD               	movf	AssemblePacket@mhdr& (0+255),w,b
 17698  001BA8  0B1F               	andlw	-225
 17699  001BAA  0940               	iorlw	64
 17700  001BAC  6FDD               	movwf	AssemblePacket@mhdr& (0+255),b
 17701  001BAE                     l2252:
 17702                           
 17703                           ;lorawan.c: 1691: }
 17704                           ;lorawan.c: 1692: mhdr.bits.major = 0;
 17705  001BAE  0EFC               	movlw	-4
 17706  001BB0  0100               	movlb	0	; () banked
 17707  001BB2  17DD               	andwf	AssemblePacket@mhdr& (0+255),f,b
 17708                           
 17709                           ;lorawan.c: 1693: mhdr.bits.rfu = 0;
 17710  001BB4  0EE3               	movlw	-29
 17711  001BB6  17DD               	andwf	AssemblePacket@mhdr& (0+255),f,b
 17712                           
 17713                           ; BSR set to: 0
 17714                           ;lorawan.c: 1694: macBuffer[bufferIndex++] = mhdr.value;
 17715  001BB8  0EE0               	movlw	low _macBuffer
 17716  001BBA  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17717  001BBC  6ED9               	movwf	fsr2l,c
 17718  001BBE  6ADA               	clrf	fsr2h,c
 17719  001BC0  0E04               	movlw	high _macBuffer
 17720  001BC2  22DA               	addwfc	fsr2h,f,c
 17721  001BC4  C0DD  FFDF         	movff	AssemblePacket@mhdr,indf2
 17722                           
 17723                           ; BSR set to: 0
 17724  001BC8  2BE0               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 17725                           
 17726                           ; BSR set to: 0
 17727                           ;lorawan.c: 1696: memcpy (&macBuffer[bufferIndex], loRa.activationParameters.deviceAddre
      +                          ss.buffer, sizeof (loRa.activationParameters.deviceAddress.buffer) );
 17728  001BCA  0EE0               	movlw	low _macBuffer
 17729  001BCC  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17730  001BCE  6F64               	movwf	memcpy@d1& (0+255),b
 17731  001BD0  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 17732  001BD2  0E04               	movlw	high _macBuffer
 17733  001BD4  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 17734  001BD6  0E1E               	movlw	low (_loRa+30)
 17735  001BD8  6F66               	movwf	memcpy@s1& (0+255),b
 17736  001BDA  0E02               	movlw	high (_loRa+30)
 17737  001BDC  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 17738  001BDE  6B69               	clrf	(memcpy@n+1)& (0+255),b
 17739  001BE0  0E04               	movlw	4
 17740  001BE2  6F68               	movwf	memcpy@n& (0+255),b
 17741  001BE4  EC73  F034         	call	_memcpy	;wreg free
 17742                           
 17743                           ; BSR set to: 0
 17744                           ;lorawan.c: 1697: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.deviceAdd
      +                          ress.buffer);
 17745  001BE8  0E04               	movlw	4
 17746  001BEA  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 17747                           
 17748                           ; BSR set to: 0
 17749                           ;lorawan.c: 1699: fCtrl.value = 0;
 17750  001BEC  6BDE               	clrf	AssemblePacket@fCtrl& (0+255),b
 17751                           
 17752                           ; BSR set to: 0
 17753                           ;lorawan.c: 1701: if (loRa.macStatus.adr == 1)
 17754  001BEE  0102               	movlb	2	; () banked
 17755  001BF0  AD02               	btfss	(_loRa+2)& (0+255),6,b
 17756  001BF2  D030               	goto	l2253
 17757                           
 17758                           ; BSR set to: 2
 17759                           ;lorawan.c: 1702: {
 17760                           ;lorawan.c: 1703: fCtrl.adr = 1;
 17761  001BF4  0100               	movlb	0	; () banked
 17762  001BF6  8FDE               	bsf	AssemblePacket@fCtrl& (0+255),7,b
 17763                           
 17764                           ; BSR set to: 0
 17765                           ;lorawan.c: 1704: if(loRa.currentDataRate > loRa.minDataRate)
 17766  001BF8  0102               	movlb	2	; () banked
 17767  001BFA  51DF               	movf	(_loRa+223)& (0+255),w,b
 17768  001BFC  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 17769  001BFE  E229               	bc	l2254
 17770                           
 17771                           ; BSR set to: 2
 17772                           ;lorawan.c: 1705: {
 17773                           ;lorawan.c: 1706: fCtrl.adrAckReq = 1;
 17774  001C00  0100               	movlb	0	; () banked
 17775  001C02  8DDE               	bsf	AssemblePacket@fCtrl& (0+255),6,b
 17776                           
 17777                           ;lorawan.c: 1707: loRa.lorawanMacStatus.adrAckRequest = 1;
 17778  001C04  0102               	movlb	2	; () banked
 17779  001C06  8900               	bsf	_loRa& (0+255),4,b
 17780                           
 17781                           ; BSR set to: 2
 17782                           ;lorawan.c: 1708: loRa.adrAckCnt ++;
 17783  001C08  4BD0               	infsnz	(_loRa+208)& (0+255),f,b
 17784  001C0A  2BD1               	incf	(_loRa+209)& (0+255),f,b
 17785                           
 17786                           ; BSR set to: 2
 17787                           ;lorawan.c: 1710: if ( loRa.adrAckCnt == loRa.protocolParameters.adrAckLimit )
 17788  001C0C  51A2               	movf	(_loRa+162)& (0+255),w,b
 17789  001C0E  19D0               	xorwf	(_loRa+208)& (0+255),w,b
 17790  001C10  11D1               	iorwf	(_loRa+209)& (0+255),w,b
 17791  001C12  E102               	bnz	l13652
 17792                           
 17793                           ; BSR set to: 2
 17794                           ;lorawan.c: 1711: {
 17795                           ;lorawan.c: 1712: loRa.counterAdrAckDelay = 0;
 17796  001C14  6BEE               	clrf	(_loRa+238)& (0+255),b
 17797  001C16  D01A               	goto	L9
 17798  001C18                     l13652:
 17799                           
 17800                           ; BSR set to: 2
 17801                           ;lorawan.c: 1716: else
 17802                           ;lorawan.c: 1717: {
 17803                           ;lorawan.c: 1718: if (loRa.adrAckCnt > loRa.protocolParameters.adrAckLimit)
 17804  001C18  51A2               	movf	(_loRa+162)& (0+255),w,b
 17805  001C1A  0100               	movlb	0	; () banked
 17806  001C1C  6FDA               	movwf	??_AssemblePacket& (0+255),b
 17807  001C1E  6BDB               	clrf	(??_AssemblePacket+1)& (0+255),b
 17808  001C20  0102               	movlb	2	; () banked
 17809  001C22  51D0               	movf	(_loRa+208)& (0+255),w,b
 17810  001C24  0100               	movlb	0	; () banked
 17811  001C26  5DDA               	subwf	??_AssemblePacket& (0+255),w,b
 17812  001C28  0102               	movlb	2	; () banked
 17813  001C2A  51D1               	movf	(_loRa+209)& (0+255),w,b
 17814  001C2C  0100               	movlb	0	; () banked
 17815  001C2E  59DB               	subwfb	(??_AssemblePacket+1)& (0+255),w,b
 17816  001C30  E20E               	bc	l2257
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;lorawan.c: 1719: {
 17820                           ;lorawan.c: 1721: loRa.counterAdrAckDelay ++ ;
 17821  001C32  0102               	movlb	2	; () banked
 17822  001C34  2BEE               	incf	(_loRa+238)& (0+255),f,b
 17823                           
 17824                           ; BSR set to: 2
 17825                           ;lorawan.c: 1724: if (loRa.counterAdrAckDelay > loRa.protocolParameters.adrAckDelay)
 17826  001C36  51EE               	movf	(_loRa+238)& (0+255),w,b
 17827  001C38  5DA3               	subwf	(_loRa+163)& (0+255),w,b
 17828  001C3A  E20C               	bc	l2253
 17829                           
 17830                           ; BSR set to: 2
 17831                           ;lorawan.c: 1725: {
 17832                           ;lorawan.c: 1726: loRa.counterAdrAckDelay = 0;
 17833  001C3C  6BEE               	clrf	(_loRa+238)& (0+255),b
 17834                           
 17835                           ; BSR set to: 2
 17836                           ;lorawan.c: 1728: if(0 == FindSmallestDataRate())
 17837  001C3E  EC7E  F02D         	call	_FindSmallestDataRate	;wreg free
 17838  001C42  0900               	iorlw	0
 17839  001C44  E107               	bnz	l2253
 17840                           
 17841                           ; BSR set to: 0
 17842                           ;lorawan.c: 1729: {
 17843                           ;lorawan.c: 1731: loRa.adrAckCnt = 0;
 17844  001C46  0102               	movlb	2	; () banked
 17845  001C48  6BD0               	clrf	(_loRa+208)& (0+255),b
 17846  001C4A  6BD1               	clrf	(_loRa+209)& (0+255),b
 17847  001C4C                     L9:
 17848                           
 17849                           ;lorawan.c: 1732: fCtrl.adrAckReq = 0;
 17850  001C4C  0100               	movlb	0	; () banked
 17851  001C4E                     l2257:
 17852                           
 17853                           ; BSR set to: 0
 17854                           ;lorawan.c: 1737: else
 17855                           ;lorawan.c: 1738: {
 17856                           ;lorawan.c: 1739: fCtrl.adrAckReq = 0;
 17857  001C4E  9DDE               	bcf	AssemblePacket@fCtrl& (0+255),6,b
 17858                           
 17859                           ;lorawan.c: 1740: loRa.lorawanMacStatus.adrAckRequest = 0;
 17860  001C50  0102               	movlb	2	; () banked
 17861  001C52                     l2254:
 17862                           
 17863                           ; BSR set to: 2
 17864                           ;lorawan.c: 1744: else
 17865                           ;lorawan.c: 1745: {
 17866                           ;lorawan.c: 1746: loRa.lorawanMacStatus.adrAckRequest = 0;
 17867  001C52  9900               	bcf	_loRa& (0+255),4,b
 17868  001C54                     l2253:
 17869                           
 17870                           ;lorawan.c: 1747: }
 17871                           ;lorawan.c: 1748: }
 17872                           ;lorawan.c: 1750: if (loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage == 1)
 17873  001C54  0102               	movlb	2	; () banked
 17874  001C56  A300               	btfss	_loRa& (0+255),1,b
 17875  001C58  D004               	goto	l2262
 17876                           
 17877                           ; BSR set to: 2
 17878                           ;lorawan.c: 1751: {
 17879                           ;lorawan.c: 1752: fCtrl.ack = 1;
 17880  001C5A  0100               	movlb	0	; () banked
 17881  001C5C  8BDE               	bsf	AssemblePacket@fCtrl& (0+255),5,b
 17882                           
 17883                           ;lorawan.c: 1753: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 0;
 17884  001C5E  0102               	movlb	2	; () banked
 17885  001C60  9300               	bcf	_loRa& (0+255),1,b
 17886  001C62                     l2262:
 17887                           
 17888                           ; BSR set to: 2
 17889                           ;lorawan.c: 1754: }
 17890                           ;lorawan.c: 1756: fCtrl.fPending = 0;
 17891  001C62  0100               	movlb	0	; () banked
 17892  001C64  99DE               	bcf	AssemblePacket@fCtrl& (0+255),4,b
 17893                           
 17894                           ; BSR set to: 0
 17895                           ;lorawan.c: 1758: if ( (loRa.crtMacCmdIndex == 0) || (bufferLength == 0) )
 17896  001C66  0102               	movlb	2	; () banked
 17897  001C68  51A7               	movf	(_loRa+167)& (0+255),w,b
 17898  001C6A  E004               	bz	l13670
 17899                           
 17900                           ; BSR set to: 2
 17901  001C6C  0101               	movlb	1	; () banked
 17902  001C6E  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 17903  001C70  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 17904  001C72  E104               	bnz	l13672
 17905  001C74                     l13670:
 17906                           
 17907                           ;lorawan.c: 1759: {
 17908                           ;lorawan.c: 1760: fCtrl.fOptsLen = 0;
 17909  001C74  0EF0               	movlw	-16
 17910  001C76  0100               	movlb	0	; () banked
 17911  001C78  17DE               	andwf	AssemblePacket@fCtrl& (0+255),f,b
 17912                           
 17913                           ;lorawan.c: 1761: }
 17914  001C7A  D007               	goto	l13674
 17915  001C7C                     l13672:
 17916                           
 17917                           ; BSR set to: 1
 17918                           ;lorawan.c: 1763: else
 17919                           ;lorawan.c: 1764: {
 17920                           ;lorawan.c: 1765: fCtrl.fOptsLen = CountfOptsLength();
 17921  001C7C  ECCF  F02C         	call	_CountfOptsLength	;wreg free
 17922  001C80  6FDA               	movwf	??_AssemblePacket& (0+255),b
 17923  001C82  19DE               	xorwf	AssemblePacket@fCtrl& (0+255),w,b
 17924  001C84  0BF0               	andlw	-16
 17925  001C86  19DA               	xorwf	??_AssemblePacket& (0+255),w,b
 17926  001C88  6FDE               	movwf	AssemblePacket@fCtrl& (0+255),b
 17927  001C8A                     l13674:
 17928                           
 17929                           ; BSR set to: 0
 17930                           ;lorawan.c: 1766: }
 17931                           ;lorawan.c: 1767: macBuffer[bufferIndex++] = fCtrl.value;
 17932  001C8A  0EE0               	movlw	low _macBuffer
 17933  001C8C  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17934  001C8E  6ED9               	movwf	fsr2l,c
 17935  001C90  6ADA               	clrf	fsr2h,c
 17936  001C92  0E04               	movlw	high _macBuffer
 17937  001C94  22DA               	addwfc	fsr2h,f,c
 17938  001C96  C0DE  FFDF         	movff	AssemblePacket@fCtrl,indf2
 17939                           
 17940                           ; BSR set to: 0
 17941  001C9A  2BE0               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 17942                           
 17943                           ; BSR set to: 0
 17944                           ;lorawan.c: 1769: memcpy (&macBuffer[bufferIndex], &loRa.fCntUp.members.valueLow, sizeof
      +                           (loRa.fCntUp.members.valueLow) );
 17945  001C9C  0EE0               	movlw	low _macBuffer
 17946  001C9E  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17947  001CA0  6F64               	movwf	memcpy@d1& (0+255),b
 17948  001CA2  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 17949  001CA4  0E04               	movlw	high _macBuffer
 17950  001CA6  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 17951  001CA8  0E06               	movlw	low (_loRa+6)
 17952  001CAA  6F66               	movwf	memcpy@s1& (0+255),b
 17953  001CAC  0E02               	movlw	high (_loRa+6)
 17954  001CAE  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 17955  001CB0  6B69               	clrf	(memcpy@n+1)& (0+255),b
 17956  001CB2  0E02               	movlw	2
 17957  001CB4  6F68               	movwf	memcpy@n& (0+255),b
 17958  001CB6  EC73  F034         	call	_memcpy	;wreg free
 17959                           
 17960                           ; BSR set to: 0
 17961                           ;lorawan.c: 1771: bufferIndex = bufferIndex + sizeof(loRa.fCntUp.members.valueLow);
 17962  001CBA  0E02               	movlw	2
 17963  001CBC  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 17964                           
 17965                           ; BSR set to: 0
 17966                           ;lorawan.c: 1773: if ( (loRa.crtMacCmdIndex != 0) && (bufferLength != 0) )
 17967  001CBE  0102               	movlb	2	; () banked
 17968  001CC0  51A7               	movf	(_loRa+167)& (0+255),w,b
 17969  001CC2  E00F               	bz	l13688
 17970                           
 17971                           ; BSR set to: 2
 17972  001CC4  0101               	movlb	1	; () banked
 17973  001CC6  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 17974  001CC8  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 17975  001CCA  E00B               	bz	l13688
 17976                           
 17977                           ; BSR set to: 1
 17978                           ;lorawan.c: 1774: {
 17979                           ;lorawan.c: 1775: IncludeMacCommandsResponse (macBuffer, &bufferIndex, 1);
 17980  001CCC  0EE0               	movlw	low _macBuffer
 17981  001CCE  0100               	movlb	0	; () banked
 17982  001CD0  6F64               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 17983  001CD2  0E04               	movlw	high _macBuffer
 17984  001CD4  6F65               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 17985  001CD6  0EE0               	movlw	low AssemblePacket@bufferIndex
 17986  001CD8  6F66               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 17987  001CDA  0E01               	movlw	1
 17988  001CDC  6F67               	movwf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 17989  001CDE  EC23  F00F         	call	_IncludeMacCommandsResponse	;wreg free
 17990  001CE2                     l13688:
 17991                           
 17992                           ;lorawan.c: 1776: }
 17993                           ;lorawan.c: 1778: macBuffer[bufferIndex++] = port;
 17994  001CE2  0EE0               	movlw	low _macBuffer
 17995  001CE4  0100               	movlb	0	; () banked
 17996  001CE6  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 17997  001CE8  6ED9               	movwf	fsr2l,c
 17998  001CEA  6ADA               	clrf	fsr2h,c
 17999  001CEC  0E04               	movlw	high _macBuffer
 18000  001CEE  22DA               	addwfc	fsr2h,f,c
 18001  001CF0  C166  FFDF         	movff	AssemblePacket@port,indf2
 18002                           
 18003                           ; BSR set to: 0
 18004  001CF4  2BE0               	incf	AssemblePacket@bufferIndex& (0+255),f,b
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;lorawan.c: 1780: if (bufferLength != 0)
 18008  001CF6  0101               	movlb	1	; () banked
 18009  001CF8  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18010  001CFA  116A               	iorwf	(AssemblePacket@bufferLength+1)& (0+255),w,b
 18011  001CFC  E031               	bz	l13700
 18012                           
 18013                           ; BSR set to: 1
 18014                           ;lorawan.c: 1781: {
 18015                           ;lorawan.c: 1782: memcpy (&macBuffer[bufferIndex], buffer, bufferLength);
 18016  001CFE  0EE0               	movlw	low _macBuffer
 18017  001D00  0100               	movlb	0	; () banked
 18018  001D02  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18019  001D04  6F64               	movwf	memcpy@d1& (0+255),b
 18020  001D06  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 18021  001D08  0E04               	movlw	high _macBuffer
 18022  001D0A  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 18023  001D0C  C167  F066         	movff	AssemblePacket@buffer,memcpy@s1
 18024  001D10  C168  F067         	movff	AssemblePacket@buffer+1,memcpy@s1+1
 18025  001D14  C169  F068         	movff	AssemblePacket@bufferLength,memcpy@n
 18026  001D18  C16A  F069         	movff	AssemblePacket@bufferLength+1,memcpy@n+1
 18027  001D1C  EC73  F034         	call	_memcpy	;wreg free
 18028                           
 18029                           ; BSR set to: 0
 18030                           ;lorawan.c: 1783: EncryptFRMPayload (buffer, bufferLength, 0, loRa.fCntUp.value, loRa.ac
      +                          tivationParameters.applicationSessionKey, bufferIndex, macBuffer, 0);
 18031  001D20  C167  F0A4         	movff	AssemblePacket@buffer,EncryptFRMPayload@buffer
 18032  001D24  C168  F0A5         	movff	AssemblePacket@buffer+1,EncryptFRMPayload@buffer+1
 18033  001D28  C169  F0A6         	movff	AssemblePacket@bufferLength,EncryptFRMPayload@bufferLength
 18034  001D2C  6BA7               	clrf	EncryptFRMPayload@dir& (0+255),b
 18035  001D2E  C206  F0A8         	movff	_loRa+6,EncryptFRMPayload@frameCounter
 18036  001D32  C207  F0A9         	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 18037  001D36  C208  F0AA         	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 18038  001D3A  C209  F0AB         	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 18039  001D3E  0E32               	movlw	low (_loRa+50)
 18040  001D40  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 18041  001D42  0E02               	movlw	high (_loRa+50)
 18042  001D44  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 18043  001D46  C0E0  F0AE         	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 18044  001D4A  0EE0               	movlw	low _macBuffer
 18045  001D4C  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 18046  001D4E  0E04               	movlw	high _macBuffer
 18047  001D50  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 18048  001D52  6BB1               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 18049  001D54  ECC2  F020         	call	_EncryptFRMPayload	;wreg free
 18050                           
 18051                           ; BSR set to: 0
 18052                           ;lorawan.c: 1784: bufferIndex = bufferIndex + bufferLength;
 18053  001D58  0101               	movlb	1	; () banked
 18054  001D5A  5169               	movf	AssemblePacket@bufferLength& (0+255),w,b
 18055  001D5C  0100               	movlb	0	; () banked
 18056  001D5E  D02A               	goto	L8
 18057  001D60                     l13700:
 18058                           
 18059                           ; BSR set to: 1
 18060                           ;lorawan.c: 1786: else if ( (loRa.crtMacCmdIndex > 0) )
 18061  001D60  0102               	movlb	2	; () banked
 18062  001D62  51A7               	movf	(_loRa+167)& (0+255),w,b
 18063  001D64  E028               	bz	l13706
 18064                           
 18065                           ; BSR set to: 2
 18066                           ;lorawan.c: 1787: {
 18067                           ;lorawan.c: 1790: IncludeMacCommandsResponse (radioBuffer, &macCmdIdx, 0 );
 18068  001D66  0EEF               	movlw	low _radioBuffer
 18069  001D68  0100               	movlb	0	; () banked
 18070  001D6A  6F64               	movwf	IncludeMacCommandsResponse@macBuffer& (0+255),b
 18071  001D6C  0E05               	movlw	high _radioBuffer
 18072  001D6E  6F65               	movwf	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),b
 18073  001D70  0EDF               	movlw	low AssemblePacket@macCmdIdx
 18074  001D72  6F66               	movwf	IncludeMacCommandsResponse@pBufferIndex& (0+255),b
 18075  001D74  6B67               	clrf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),b
 18076  001D76  EC23  F00F         	call	_IncludeMacCommandsResponse	;wreg free
 18077                           
 18078                           ;lorawan.c: 1791: EncryptFRMPayload (radioBuffer, macCmdIdx, 0, loRa.fCntUp.value, loRa.
      +                          activationParameters.networkSessionKey, bufferIndex, macBuffer, 0);
 18079  001D7A  0EEF               	movlw	low _radioBuffer
 18080  001D7C  6FA4               	movwf	EncryptFRMPayload@buffer& (0+255),b
 18081  001D7E  0E05               	movlw	high _radioBuffer
 18082  001D80  6FA5               	movwf	(EncryptFRMPayload@buffer+1)& (0+255),b
 18083  001D82  C0DF  F0A6         	movff	AssemblePacket@macCmdIdx,EncryptFRMPayload@bufferLength
 18084  001D86  6BA7               	clrf	EncryptFRMPayload@dir& (0+255),b
 18085  001D88  C206  F0A8         	movff	_loRa+6,EncryptFRMPayload@frameCounter
 18086  001D8C  C207  F0A9         	movff	_loRa+7,EncryptFRMPayload@frameCounter+1
 18087  001D90  C208  F0AA         	movff	_loRa+8,EncryptFRMPayload@frameCounter+2
 18088  001D94  C209  F0AB         	movff	_loRa+9,EncryptFRMPayload@frameCounter+3
 18089  001D98  0E22               	movlw	low (_loRa+34)
 18090  001D9A  6FAC               	movwf	EncryptFRMPayload@key& (0+255),b
 18091  001D9C  0E02               	movlw	high (_loRa+34)
 18092  001D9E  6FAD               	movwf	(EncryptFRMPayload@key+1)& (0+255),b
 18093  001DA0  C0E0  F0AE         	movff	AssemblePacket@bufferIndex,EncryptFRMPayload@macBufferIndex
 18094  001DA4  0EE0               	movlw	low _macBuffer
 18095  001DA6  6FAF               	movwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),b
 18096  001DA8  0E04               	movlw	high _macBuffer
 18097  001DAA  6FB0               	movwf	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),b
 18098  001DAC  6BB1               	clrf	EncryptFRMPayload@multicastStatus& (0+255),b
 18099  001DAE  ECC2  F020         	call	_EncryptFRMPayload	;wreg free
 18100                           
 18101                           ; BSR set to: 0
 18102                           ;lorawan.c: 1792: bufferIndex = bufferIndex + macCmdIdx;
 18103  001DB2  51DF               	movf	AssemblePacket@macCmdIdx& (0+255),w,b
 18104  001DB4                     L8:
 18105  001DB4  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18106  001DB6                     l13706:
 18107                           
 18108                           ;lorawan.c: 1793: }
 18109                           ;lorawan.c: 1795: AssembleEncryptionBlock (0, loRa.fCntUp.value, bufferIndex - 16, 0x49,
      +                           0);
 18110  001DB6  C206  F06E         	movff	_loRa+6,AssembleEncryptionBlock@frameCounter
 18111  001DBA  C207  F06F         	movff	_loRa+7,AssembleEncryptionBlock@frameCounter+1
 18112  001DBE  C208  F070         	movff	_loRa+8,AssembleEncryptionBlock@frameCounter+2
 18113  001DC2  C209  F071         	movff	_loRa+9,AssembleEncryptionBlock@frameCounter+3
 18114  001DC6  0100               	movlb	0	; () banked
 18115  001DC8  51E0               	movf	AssemblePacket@bufferIndex& (0+255),w,b
 18116  001DCA  0FF0               	addlw	240
 18117  001DCC  6F72               	movwf	AssembleEncryptionBlock@blockId& (0+255),b
 18118  001DCE  0E49               	movlw	73
 18119  001DD0  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 18120  001DD2  0E00               	movlw	0
 18121  001DD4  6B74               	clrf	AssembleEncryptionBlock@multicastStatus& (0+255),b
 18122  001DD6  EC1E  F02C         	call	_AssembleEncryptionBlock
 18123                           
 18124                           ; BSR set to: 0
 18125                           ;lorawan.c: 1796: memcpy (&macBuffer[0], aesBuffer, sizeof (aesBuffer));
 18126  001DDA  0EE0               	movlw	low _macBuffer
 18127  001DDC  6F64               	movwf	memcpy@d1& (0+255),b
 18128  001DDE  0E04               	movlw	high _macBuffer
 18129  001DE0  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 18130  001DE2  0EAB               	movlw	low _aesBuffer
 18131  001DE4  6F66               	movwf	memcpy@s1& (0+255),b
 18132  001DE6  0E01               	movlw	high _aesBuffer
 18133  001DE8  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 18134  001DEA  6B69               	clrf	(memcpy@n+1)& (0+255),b
 18135  001DEC  0E10               	movlw	16
 18136  001DEE  6F68               	movwf	memcpy@n& (0+255),b
 18137  001DF0  EC73  F034         	call	_memcpy	;wreg free
 18138                           
 18139                           ; BSR set to: 0
 18140                           ;lorawan.c: 1798: AESCmac (loRa.activationParameters.networkSessionKey, aesBuffer, macBu
      +                          ffer, bufferIndex );
 18141  001DF4  0E22               	movlw	low (_loRa+34)
 18142  001DF6  6FCC               	movwf	AESCmac@key& (0+255),b
 18143  001DF8  0E02               	movlw	high (_loRa+34)
 18144  001DFA  6FCD               	movwf	(AESCmac@key+1)& (0+255),b
 18145  001DFC  0EAB               	movlw	low _aesBuffer
 18146  001DFE  6FCE               	movwf	AESCmac@output& (0+255),b
 18147  001E00  0E01               	movlw	high _aesBuffer
 18148  001E02  6FCF               	movwf	(AESCmac@output+1)& (0+255),b
 18149  001E04  0EE0               	movlw	low _macBuffer
 18150  001E06  6FD0               	movwf	AESCmac@input& (0+255),b
 18151  001E08  0E04               	movlw	high _macBuffer
 18152  001E0A  6FD1               	movwf	(AESCmac@input+1)& (0+255),b
 18153  001E0C  C0E0  F0D2         	movff	AssemblePacket@bufferIndex,AESCmac@size
 18154  001E10  EC16  F00C         	call	_AESCmac	;wreg free
 18155                           
 18156                           ; BSR set to: 0
 18157                           ;lorawan.c: 1800: memcpy (&macBuffer[bufferIndex], aesBuffer, 4);
 18158  001E14  0EE0               	movlw	low _macBuffer
 18159  001E16  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18160  001E18  6F64               	movwf	memcpy@d1& (0+255),b
 18161  001E1A  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 18162  001E1C  0E04               	movlw	high _macBuffer
 18163  001E1E  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 18164  001E20  0EAB               	movlw	low _aesBuffer
 18165  001E22  6F66               	movwf	memcpy@s1& (0+255),b
 18166  001E24  0E01               	movlw	high _aesBuffer
 18167  001E26  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 18168  001E28  6B69               	clrf	(memcpy@n+1)& (0+255),b
 18169  001E2A  0E04               	movlw	4
 18170  001E2C  6F68               	movwf	memcpy@n& (0+255),b
 18171  001E2E  EC73  F034         	call	_memcpy	;wreg free
 18172                           
 18173                           ; BSR set to: 0
 18174                           ;lorawan.c: 1801: bufferIndex = bufferIndex + 4;
 18175  001E32  0E04               	movlw	4
 18176  001E34  27E0               	addwf	AssemblePacket@bufferIndex& (0+255),f,b
 18177                           
 18178                           ; BSR set to: 0
 18179                           ;lorawan.c: 1803: loRa.lastPacketLength = bufferIndex - 16;
 18180  001E36  0EF0               	movlw	240
 18181  001E38  25E0               	addwf	AssemblePacket@bufferIndex& (0+255),w,b
 18182  001E3A  0102               	movlb	2	; () banked
 18183  001E3C  6FD4               	movwf	(_loRa+212)& (0+255),b
 18184  001E3E  6BD5               	clrf	(_loRa+213)& (0+255),b
 18185  001E40  0EFF               	movlw	255
 18186  001E42  23D5               	addwfc	(_loRa+213)& (0+255),f,b
 18187                           
 18188                           ; BSR set to: 2
 18189  001E44  0CFF               	retlw	255	;funcret
 18190  001E46                     __end_of_AssemblePacket:
 18191                           	opt stack 0
 18192                           tosu	equ	0xFFF
 18193                           tosh	equ	0xFFE
 18194                           tosl	equ	0xFFD
 18195                           pclath	equ	0xFFA
 18196                           tblptru	equ	0xFF8
 18197                           tblptrh	equ	0xFF7
 18198                           tblptrl	equ	0xFF6
 18199                           tablat	equ	0xFF5
 18200                           prodh	equ	0xFF4
 18201                           prodl	equ	0xFF3
 18202                           intcon	equ	0xFF2
 18203                           indf0	equ	0xFEF
 18204                           postinc0	equ	0xFEE
 18205                           fsr0h	equ	0xFEA
 18206                           fsr0l	equ	0xFE9
 18207                           wreg	equ	0xFE8
 18208                           postinc1	equ	0xFE6
 18209                           postdec1	equ	0xFE5
 18210                           plusw1	equ	0xFE3
 18211                           fsr1h	equ	0xFE2
 18212                           fsr1l	equ	0xFE1
 18213                           indf2	equ	0xFDF
 18214                           postinc2	equ	0xFDE
 18215                           postdec2	equ	0xFDD
 18216                           plusw2	equ	0xFDB
 18217                           fsr2h	equ	0xFDA
 18218                           fsr2l	equ	0xFD9
 18219                           status	equ	0xFD8
 18220                           
 18221 ;; *************** function _IncludeMacCommandsResponse *****************
 18222 ;; Defined at:
 18223 ;;		line 1845 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18224 ;; Parameters:    Size  Location     Type
 18225 ;;  macBuffer       2    4[BANK0 ] PTR unsigned char 
 18226 ;;		 -> macBuffer(271), radioBuffer(271), 
 18227 ;;  pBufferIndex    1    6[BANK0 ] PTR unsigned char 
 18228 ;;		 -> AssemblePacket@macCmdIdx(1), AssemblePacket@bufferIndex(1), 
 18229 ;;  bIncludeInFo    1    7[BANK0 ] unsigned char 
 18230 ;; Auto vars:     Size  Location     Type
 18231 ;;  bufferIndex     1   15[BANK0 ] unsigned char 
 18232 ;;  i               1   14[BANK0 ] unsigned char 
 18233 ;; Return value:  Size  Location     Type
 18234 ;;                  1    wreg      void 
 18235 ;; Registers used:
 18236 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18237 ;; Tracked objects:
 18238 ;;		On entry : F/0
 18239 ;;		On exit  : F/0
 18240 ;;		Unchanged: 0/0
 18241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18242 ;;      Params:         0       4       0       0       0       0       0       0       0
 18243 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18244 ;;      Temps:          0       6       0       0       0       0       0       0       0
 18245 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18246 ;;Total ram usage:       12 bytes
 18247 ;; Hardware stack levels used:    1
 18248 ;; Hardware stack levels required when called:    8
 18249 ;; This function calls:
 18250 ;;		_RADIO_GetPacketSnr
 18251 ;; This function is called by:
 18252 ;;		_AssemblePacket
 18253 ;; This function uses a non-reentrant model
 18254 ;;
 18255                           
 18256                           	psect	text94
 18257  001E46                     __ptext94:
 18258                           	opt stack 0
 18259  001E46                     _IncludeMacCommandsResponse:
 18260                           	opt stack 19
 18261                           
 18262                           ; BSR set to: 0
 18263                           ;lorawan.c: 1848: uint8_t bufferIndex = *pBufferIndex;
 18264                           
 18265                           ; BSR set to: 0
 18266                           
 18267                           ; BSR set to: 2
 18268                           ;incstack = 0
 18269  001E46  5166               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 18270  001E48  6ED9               	movwf	fsr2l,c
 18271  001E4A  6ADA               	clrf	fsr2h,c
 18272  001E4C  50DF               	movf	indf2,w,c
 18273  001E4E  6F6F               	movwf	IncludeMacCommandsResponse@bufferIndex& (0+255),b
 18274                           
 18275                           ; BSR set to: 0
 18276                           ;lorawan.c: 1850: for(i = 0; i < loRa.crtMacCmdIndex ; i++)
 18277  001E50  6B6E               	clrf	IncludeMacCommandsResponse@i& (0+255),b
 18278  001E52  D166               	goto	l13300
 18279  001E54                     l13204:
 18280                           
 18281                           ; BSR set to: 0
 18282                           ;lorawan.c: 1851: {
 18283                           ;lorawan.c: 1852: if((bIncludeInFopts) && (loRa.macCommands[i].receivedCid != 0xFF))
 18284  001E54  5167               	movf	IncludeMacCommandsResponse@bIncludeInFopts& (0+255),w,b
 18285  001E56  E101 D148          	bz	l13296
 18286                           
 18287                           ; BSR set to: 0
 18288  001E5A  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18289  001E5C  0D02               	mullw	2
 18290  001E5E  0EA8               	movlw	low (_loRa+168)
 18291  001E60  24F3               	addwf	prodl,w,c
 18292  001E62  6ED9               	movwf	fsr2l,c
 18293  001E64  0E02               	movlw	high (_loRa+168)
 18294  001E66  20F4               	addwfc	prodh,w,c
 18295  001E68  6EDA               	movwf	fsr2h,c
 18296  001E6A  28DE               	incf	postinc2,w,c
 18297  001E6C  E101 D13D          	bz	l13296
 18298                           
 18299                           ; BSR set to: 0
 18300                           ;lorawan.c: 1853: {
 18301                           ;lorawan.c: 1854: if((bufferIndex - (*pBufferIndex) + macEndDevCmdReplyLen[loRa.macComma
      +                          nds[i].receivedCid - 2]) > 0x0F)
 18302  001E70  0EFE               	movlw	254
 18303  001E72  6F68               	movwf	??_IncludeMacCommandsResponse& (0+255),b
 18304  001E74  6969               	setf	(??_IncludeMacCommandsResponse+1)& (0+255),b
 18305  001E76  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18306  001E78  0D02               	mullw	2
 18307  001E7A  0EA8               	movlw	low (_loRa+168)
 18308  001E7C  24F3               	addwf	prodl,w,c
 18309  001E7E  6ED9               	movwf	fsr2l,c
 18310  001E80  0E02               	movlw	high (_loRa+168)
 18311  001E82  20F4               	addwfc	prodh,w,c
 18312  001E84  6EDA               	movwf	fsr2h,c
 18313  001E86  50DF               	movf	indf2,w,c
 18314  001E88  6F6A               	movwf	(??_IncludeMacCommandsResponse+2)& (0+255),b
 18315  001E8A  6B6B               	clrf	(??_IncludeMacCommandsResponse+3)& (0+255),b
 18316  001E8C  5168               	movf	??_IncludeMacCommandsResponse& (0+255),w,b
 18317  001E8E  276A               	addwf	(??_IncludeMacCommandsResponse+2)& (0+255),f,b
 18318  001E90  5169               	movf	(??_IncludeMacCommandsResponse+1)& (0+255),w,b
 18319  001E92  236B               	addwfc	(??_IncludeMacCommandsResponse+3)& (0+255),f,b
 18320  001E94  0E94               	movlw	low _macEndDevCmdReplyLen
 18321  001E96  256A               	addwf	(??_IncludeMacCommandsResponse+2)& (0+255),w,b
 18322  001E98  6EF6               	movwf	tblptrl,c
 18323  001E9A  0E7F               	movlw	high _macEndDevCmdReplyLen
 18324  001E9C  216B               	addwfc	(??_IncludeMacCommandsResponse+3)& (0+255),w,b
 18325  001E9E  6EF7               	movwf	tblptrh,c
 18326  001EA0                     	if	0	;There are less than 3 active tblptr bytes
 18327  001EA0                     	endif
 18328  001EA0  0008               	tblrd		*
 18329  001EA2  50F5               	movf	tablat,w,c
 18330  001EA4  C06F  F06C         	movff	IncludeMacCommandsResponse@bufferIndex,??_IncludeMacCommandsResponse+4
 18331  001EA8  6B6D               	clrf	(??_IncludeMacCommandsResponse+5)& (0+255),b
 18332  001EAA  276C               	addwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 18333  001EAC  0E00               	movlw	0
 18334  001EAE  236D               	addwfc	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 18335  001EB0  5166               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 18336  001EB2  6ED9               	movwf	fsr2l,c
 18337  001EB4  6ADA               	clrf	fsr2h,c
 18338  001EB6  50DF               	movf	indf2,w,c
 18339  001EB8  5F6C               	subwf	(??_IncludeMacCommandsResponse+4)& (0+255),f,b
 18340  001EBA  0E00               	movlw	0
 18341  001EBC  5B6D               	subwfb	(??_IncludeMacCommandsResponse+5)& (0+255),f,b
 18342  001EBE  BF6D               	btfsc	(??_IncludeMacCommandsResponse+5)& (0+255),7,b
 18343  001EC0  D114               	goto	l13296
 18344  001EC2  516D               	movf	(??_IncludeMacCommandsResponse+5)& (0+255),w,b
 18345  001EC4  E105               	bnz	u14590
 18346  001EC6  0E10               	movlw	16
 18347  001EC8  5D6C               	subwf	(??_IncludeMacCommandsResponse+4)& (0+255),w,b
 18348  001ECA  E301 D12F          	bc	l13302
 18349  001ECE  D10D               	goto	l13296
 18350  001ED0                     u14590:
 18351  001ED0  D12D               	goto	l13302
 18352  001ED2                     l13212:
 18353                           
 18354                           ; BSR set to: 0
 18355                           ;lorawan.c: 1862: {
 18356                           ;lorawan.c: 1863: macBuffer[bufferIndex++] = LINK_ADR_CID;
 18357  001ED2  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18358  001ED4  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18359  001ED6  6ED9               	movwf	fsr2l,c
 18360  001ED8  0E00               	movlw	0
 18361  001EDA  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18362  001EDC  6EDA               	movwf	fsr2h,c
 18363  001EDE  0E03               	movlw	3
 18364  001EE0  6EDF               	movwf	indf2,c
 18365                           
 18366                           ; BSR set to: 0
 18367  001EE2  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18368                           
 18369                           ; BSR set to: 0
 18370                           ;lorawan.c: 1864: macBuffer[bufferIndex] = 0x00;
 18371  001EE4  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18372  001EE6  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18373  001EE8  6ED9               	movwf	fsr2l,c
 18374  001EEA  0E00               	movlw	0
 18375  001EEC  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18376  001EEE  6EDA               	movwf	fsr2h,c
 18377  001EF0  6ADF               	clrf	indf2,c
 18378                           
 18379                           ; BSR set to: 0
 18380                           ;lorawan.c: 1865: if (loRa.macCommands[i].channelMaskAck == 1)
 18381  001EF2  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18382  001EF4  0D02               	mullw	2
 18383  001EF6  0EA9               	movlw	low (_loRa+169)
 18384  001EF8  24F3               	addwf	prodl,w,c
 18385  001EFA  6ED9               	movwf	fsr2l,c
 18386  001EFC  0E02               	movlw	high (_loRa+169)
 18387  001EFE  20F4               	addwfc	prodh,w,c
 18388  001F00  6EDA               	movwf	fsr2h,c
 18389  001F02  A0DF               	btfss	indf2,0,c
 18390  001F04  D009               	goto	l13222
 18391                           
 18392                           ; BSR set to: 2
 18393                           ;lorawan.c: 1866: {
 18394                           ;lorawan.c: 1867: macBuffer[bufferIndex] |= 0x01;
 18395  001F06  0100               	movlb	0	; () banked
 18396  001F08  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18397  001F0A  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18398  001F0C  6ED9               	movwf	fsr2l,c
 18399  001F0E  0E00               	movlw	0
 18400  001F10  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18401  001F12  6EDA               	movwf	fsr2h,c
 18402  001F14  0E00               	movlw	0
 18403  001F16  80DB               	bsf	plusw2,0,c
 18404  001F18                     l13222:
 18405                           
 18406                           ;lorawan.c: 1868: }
 18407                           ;lorawan.c: 1870: if (loRa.macCommands[i].dataRateAck == 1)
 18408  001F18  0100               	movlb	0	; () banked
 18409  001F1A  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18410  001F1C  0D02               	mullw	2
 18411  001F1E  0EA9               	movlw	low (_loRa+169)
 18412  001F20  24F3               	addwf	prodl,w,c
 18413  001F22  6ED9               	movwf	fsr2l,c
 18414  001F24  0E02               	movlw	high (_loRa+169)
 18415  001F26  20F4               	addwfc	prodh,w,c
 18416  001F28  6EDA               	movwf	fsr2h,c
 18417  001F2A  A2DF               	btfss	indf2,1,c
 18418  001F2C  D008               	goto	l13226
 18419                           
 18420                           ; BSR set to: 2
 18421                           ;lorawan.c: 1871: {
 18422                           ;lorawan.c: 1872: macBuffer[bufferIndex] |= 0x02;
 18423  001F2E  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18424  001F30  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18425  001F32  6ED9               	movwf	fsr2l,c
 18426  001F34  0E00               	movlw	0
 18427  001F36  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18428  001F38  6EDA               	movwf	fsr2h,c
 18429  001F3A  0E00               	movlw	0
 18430  001F3C  82DB               	bsf	plusw2,1,c
 18431  001F3E                     l13226:
 18432                           
 18433                           ;lorawan.c: 1873: }
 18434                           ;lorawan.c: 1875: if (loRa.macCommands[i].powerAck == 1)
 18435  001F3E  0100               	movlb	0	; () banked
 18436  001F40  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18437  001F42  0D02               	mullw	2
 18438  001F44  0EA9               	movlw	low (_loRa+169)
 18439  001F46  24F3               	addwf	prodl,w,c
 18440  001F48  6ED9               	movwf	fsr2l,c
 18441  001F4A  0E02               	movlw	high (_loRa+169)
 18442  001F4C  20F4               	addwfc	prodh,w,c
 18443  001F4E  6EDA               	movwf	fsr2h,c
 18444  001F50  A4DF               	btfss	indf2,2,c
 18445  001F52  D009               	goto	l13230
 18446  001F54                     l13228:
 18447                           
 18448                           ; BSR set to: 2
 18449                           ;lorawan.c: 1876: {
 18450                           ;lorawan.c: 1877: macBuffer[bufferIndex] |= 0x04;
 18451  001F54  0100               	movlb	0	; () banked
 18452  001F56  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18453  001F58  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18454  001F5A  6ED9               	movwf	fsr2l,c
 18455  001F5C  0E00               	movlw	0
 18456  001F5E  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18457  001F60  6EDA               	movwf	fsr2h,c
 18458  001F62  0E00               	movlw	0
 18459  001F64  84DB               	bsf	plusw2,2,c
 18460  001F66                     l13230:
 18461                           
 18462                           ;lorawan.c: 1878: }
 18463                           ;lorawan.c: 1879: bufferIndex ++;
 18464  001F66  0100               	movlb	0	; () banked
 18465  001F68  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18466                           
 18467                           ;lorawan.c: 1880: }
 18468                           ;lorawan.c: 1881: break;
 18469  001F6A  D0D9               	goto	l13298
 18470  001F6C                     l13232:
 18471                           
 18472                           ; BSR set to: 0
 18473                           ;lorawan.c: 1884: {
 18474                           ;lorawan.c: 1885: macBuffer[bufferIndex++] = RX2_SETUP_CID;
 18475  001F6C  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18476  001F6E  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18477  001F70  6ED9               	movwf	fsr2l,c
 18478  001F72  0E00               	movlw	0
 18479  001F74  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18480  001F76  6EDA               	movwf	fsr2h,c
 18481  001F78  0E05               	movlw	5
 18482  001F7A  6EDF               	movwf	indf2,c
 18483                           
 18484                           ; BSR set to: 0
 18485  001F7C  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18486                           
 18487                           ; BSR set to: 0
 18488                           ;lorawan.c: 1886: macBuffer[bufferIndex] = 0x00;
 18489  001F7E  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18490  001F80  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18491  001F82  6ED9               	movwf	fsr2l,c
 18492  001F84  0E00               	movlw	0
 18493  001F86  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18494  001F88  6EDA               	movwf	fsr2h,c
 18495  001F8A  6ADF               	clrf	indf2,c
 18496                           
 18497                           ; BSR set to: 0
 18498                           ;lorawan.c: 1887: if (loRa.macCommands[i].channelAck == 1)
 18499  001F8C  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18500  001F8E  0D02               	mullw	2
 18501  001F90  0EA9               	movlw	low (_loRa+169)
 18502  001F92  24F3               	addwf	prodl,w,c
 18503  001F94  6ED9               	movwf	fsr2l,c
 18504  001F96  0E02               	movlw	high (_loRa+169)
 18505  001F98  20F4               	addwfc	prodh,w,c
 18506  001F9A  6EDA               	movwf	fsr2h,c
 18507  001F9C  A6DF               	btfss	indf2,3,c
 18508  001F9E  D009               	goto	l13242
 18509                           
 18510                           ; BSR set to: 2
 18511                           ;lorawan.c: 1888: {
 18512                           ;lorawan.c: 1889: macBuffer[bufferIndex] |= 0x01;
 18513  001FA0  0100               	movlb	0	; () banked
 18514  001FA2  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18515  001FA4  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18516  001FA6  6ED9               	movwf	fsr2l,c
 18517  001FA8  0E00               	movlw	0
 18518  001FAA  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18519  001FAC  6EDA               	movwf	fsr2h,c
 18520  001FAE  0E00               	movlw	0
 18521  001FB0  80DB               	bsf	plusw2,0,c
 18522  001FB2                     l13242:
 18523                           
 18524                           ;lorawan.c: 1890: }
 18525                           ;lorawan.c: 1892: if (loRa.macCommands[i].dataRateReceiveWindowAck == 1)
 18526  001FB2  0100               	movlb	0	; () banked
 18527  001FB4  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18528  001FB6  0D02               	mullw	2
 18529  001FB8  0EA9               	movlw	low (_loRa+169)
 18530  001FBA  24F3               	addwf	prodl,w,c
 18531  001FBC  6ED9               	movwf	fsr2l,c
 18532  001FBE  0E02               	movlw	high (_loRa+169)
 18533  001FC0  20F4               	addwfc	prodh,w,c
 18534  001FC2  6EDA               	movwf	fsr2h,c
 18535  001FC4  A8DF               	btfss	indf2,4,c
 18536  001FC6  D008               	goto	l13246
 18537                           
 18538                           ; BSR set to: 2
 18539                           ;lorawan.c: 1893: {
 18540                           ;lorawan.c: 1894: macBuffer[bufferIndex] |= 0x02;
 18541  001FC8  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18542  001FCA  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18543  001FCC  6ED9               	movwf	fsr2l,c
 18544  001FCE  0E00               	movlw	0
 18545  001FD0  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18546  001FD2  6EDA               	movwf	fsr2h,c
 18547  001FD4  0E00               	movlw	0
 18548  001FD6  82DB               	bsf	plusw2,1,c
 18549  001FD8                     l13246:
 18550                           
 18551                           ;lorawan.c: 1895: }
 18552                           ;lorawan.c: 1897: if (loRa.macCommands[i].rx1DROffestAck == 1)
 18553  001FD8  0100               	movlb	0	; () banked
 18554  001FDA  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18555  001FDC  0D02               	mullw	2
 18556  001FDE  0EA9               	movlw	low (_loRa+169)
 18557  001FE0  24F3               	addwf	prodl,w,c
 18558  001FE2  6ED9               	movwf	fsr2l,c
 18559  001FE4  0E02               	movlw	high (_loRa+169)
 18560  001FE6  20F4               	addwfc	prodh,w,c
 18561  001FE8  6EDA               	movwf	fsr2h,c
 18562  001FEA  AADF               	btfss	indf2,5,c
 18563  001FEC  D7BC               	goto	l13230
 18564  001FEE  D7B2               	goto	l13228
 18565  001FF0                     l13252:
 18566                           
 18567                           ; BSR set to: 0
 18568                           ;lorawan.c: 1907: {
 18569                           ;lorawan.c: 1908: macBuffer[bufferIndex++] = DEV_STATUS_CID;
 18570  001FF0  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18571  001FF2  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18572  001FF4  6ED9               	movwf	fsr2l,c
 18573  001FF6  0E00               	movlw	0
 18574  001FF8  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18575  001FFA  6EDA               	movwf	fsr2h,c
 18576  001FFC  0E06               	movlw	6
 18577  001FFE  6EDF               	movwf	indf2,c
 18578                           
 18579                           ; BSR set to: 0
 18580  002000  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18581                           
 18582                           ; BSR set to: 0
 18583                           ;lorawan.c: 1909: macBuffer[bufferIndex++] = loRa.batteryLevel;
 18584  002002  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18585  002004  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18586  002006  6ED9               	movwf	fsr2l,c
 18587  002008  0E00               	movlw	0
 18588  00200A  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18589  00200C  6EDA               	movwf	fsr2h,c
 18590  00200E  C2E0  FFDF         	movff	_loRa+224,indf2
 18591  002012  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18592                           
 18593                           ; BSR set to: 0
 18594                           ;lorawan.c: 1910: if ((RADIO_GetPacketSnr() < -32) || (RADIO_GetPacketSnr() > 31))
 18595  002014  EC57  F03C         	call	_RADIO_GetPacketSnr	;wreg free
 18596  002018  0A80               	xorlw	128
 18597  00201A  0FA0               	addlw	160
 18598  00201C  E305               	bnc	l13262
 18599                           
 18600                           ; BSR set to: 1
 18601  00201E  EC57  F03C         	call	_RADIO_GetPacketSnr	;wreg free
 18602  002022  0A80               	xorlw	128
 18603  002024  0F60               	addlw	-160
 18604  002026  E309               	bnc	l13266
 18605  002028                     l13262:
 18606                           
 18607                           ; BSR set to: 1
 18608                           ;lorawan.c: 1911: {
 18609                           ;lorawan.c: 1912: macBuffer[bufferIndex++] = 0x20;
 18610  002028  0100               	movlb	0	; () banked
 18611  00202A  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18612  00202C  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18613  00202E  6ED9               	movwf	fsr2l,c
 18614  002030  0E00               	movlw	0
 18615  002032  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18616  002034  6EDA               	movwf	fsr2h,c
 18617  002036  0E20               	movlw	32
 18618  002038  D00A               	goto	L10
 18619  00203A                     l13266:
 18620                           
 18621                           ; BSR set to: 1
 18622                           ;lorawan.c: 1914: else
 18623                           ;lorawan.c: 1915: {
 18624                           ;lorawan.c: 1916: macBuffer[bufferIndex++] = ((uint8_t)RADIO_GetPacketSnr() & 0x3F);
 18625  00203A  0100               	movlb	0	; () banked
 18626  00203C  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18627  00203E  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18628  002040  6ED9               	movwf	fsr2l,c
 18629  002042  0E00               	movlw	0
 18630  002044  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18631  002046  6EDA               	movwf	fsr2h,c
 18632  002048  EC57  F03C         	call	_RADIO_GetPacketSnr	;wreg free
 18633  00204C  0B3F               	andlw	63
 18634  00204E                     L10:
 18635  00204E  6EDF               	movwf	indf2,c
 18636  002050  D78A               	goto	l13230
 18637  002052                     l13270:
 18638                           
 18639                           ; BSR set to: 0
 18640                           ;lorawan.c: 1922: {
 18641                           ;lorawan.c: 1923: macBuffer[bufferIndex++] = NEW_CHANNEL_CID;
 18642  002052  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18643  002054  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18644  002056  6ED9               	movwf	fsr2l,c
 18645  002058  0E00               	movlw	0
 18646  00205A  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18647  00205C  6EDA               	movwf	fsr2h,c
 18648  00205E  0E07               	movlw	7
 18649  002060  6EDF               	movwf	indf2,c
 18650                           
 18651                           ; BSR set to: 0
 18652  002062  2B6F               	incf	IncludeMacCommandsResponse@bufferIndex& (0+255),f,b
 18653                           
 18654                           ; BSR set to: 0
 18655                           ;lorawan.c: 1924: macBuffer[bufferIndex] = 0x00;
 18656  002064  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18657  002066  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18658  002068  6ED9               	movwf	fsr2l,c
 18659  00206A  0E00               	movlw	0
 18660  00206C  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18661  00206E  6EDA               	movwf	fsr2h,c
 18662  002070  6ADF               	clrf	indf2,c
 18663                           
 18664                           ; BSR set to: 0
 18665                           ;lorawan.c: 1925: if (loRa.macCommands[i].channelFrequencyAck == 1)
 18666  002072  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18667  002074  0D02               	mullw	2
 18668  002076  0EA9               	movlw	low (_loRa+169)
 18669  002078  24F3               	addwf	prodl,w,c
 18670  00207A  6ED9               	movwf	fsr2l,c
 18671  00207C  0E02               	movlw	high (_loRa+169)
 18672  00207E  20F4               	addwfc	prodh,w,c
 18673  002080  6EDA               	movwf	fsr2h,c
 18674  002082  AEDF               	btfss	indf2,7,c
 18675  002084  D009               	goto	l13280
 18676                           
 18677                           ; BSR set to: 2
 18678                           ;lorawan.c: 1926: {
 18679                           ;lorawan.c: 1927: macBuffer[bufferIndex] |= 0x01;
 18680  002086  0100               	movlb	0	; () banked
 18681  002088  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18682  00208A  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18683  00208C  6ED9               	movwf	fsr2l,c
 18684  00208E  0E00               	movlw	0
 18685  002090  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18686  002092  6EDA               	movwf	fsr2h,c
 18687  002094  0E00               	movlw	0
 18688  002096  80DB               	bsf	plusw2,0,c
 18689  002098                     l13280:
 18690                           
 18691                           ;lorawan.c: 1928: }
 18692                           ;lorawan.c: 1930: if (loRa.macCommands[i].dataRateRangeAck == 1)
 18693  002098  0100               	movlb	0	; () banked
 18694  00209A  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18695  00209C  0D02               	mullw	2
 18696  00209E  0EA9               	movlw	low (_loRa+169)
 18697  0020A0  24F3               	addwf	prodl,w,c
 18698  0020A2  6ED9               	movwf	fsr2l,c
 18699  0020A4  0E02               	movlw	high (_loRa+169)
 18700  0020A6  20F4               	addwfc	prodh,w,c
 18701  0020A8  6EDA               	movwf	fsr2h,c
 18702  0020AA  ACDF               	btfss	indf2,6,c
 18703  0020AC  D75C               	goto	l13230
 18704                           
 18705                           ; BSR set to: 2
 18706                           ;lorawan.c: 1931: {
 18707                           ;lorawan.c: 1932: macBuffer[bufferIndex] |= 0x02;
 18708  0020AE  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18709  0020B0  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18710  0020B2  6ED9               	movwf	fsr2l,c
 18711  0020B4  0E00               	movlw	0
 18712  0020B6  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18713  0020B8  6EDA               	movwf	fsr2h,c
 18714  0020BA  0E00               	movlw	0
 18715  0020BC  82DB               	bsf	plusw2,1,c
 18716  0020BE  D753               	goto	l13230
 18717  0020C0                     l2304:
 18718                           
 18719                           ; BSR set to: 0
 18720                           ;lorawan.c: 1939: {
 18721                           ;lorawan.c: 1940: loRa.linkCheckMargin = 255;
 18722  0020C0  0102               	movlb	2	; () banked
 18723  0020C2  69DD               	setf	(_loRa+221)& (0+255),b
 18724                           
 18725                           ;lorawan.c: 1941: loRa.linkCheckGwCnt = 0;
 18726  0020C4  6BDE               	clrf	(_loRa+222)& (0+255),b
 18727  0020C6                     l13286:
 18728                           
 18729                           ;lorawan.c: 1942: macBuffer[bufferIndex++] = loRa.macCommands[i].receivedCid;
 18730  0020C6  0100               	movlb	0	; () banked
 18731  0020C8  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18732  0020CA  0D02               	mullw	2
 18733  0020CC  0EA8               	movlw	low (_loRa+168)
 18734  0020CE  24F3               	addwf	prodl,w,c
 18735  0020D0  6ED9               	movwf	fsr2l,c
 18736  0020D2  0E02               	movlw	high (_loRa+168)
 18737  0020D4  20F4               	addwfc	prodh,w,c
 18738  0020D6  6EDA               	movwf	fsr2h,c
 18739  0020D8  516F               	movf	IncludeMacCommandsResponse@bufferIndex& (0+255),w,b
 18740  0020DA  2564               	addwf	IncludeMacCommandsResponse@macBuffer& (0+255),w,b
 18741  0020DC  6EE9               	movwf	fsr0l,c
 18742  0020DE  0E00               	movlw	0
 18743  0020E0  2165               	addwfc	(IncludeMacCommandsResponse@macBuffer+1)& (0+255),w,b
 18744  0020E2  6EEA               	movwf	fsr0h,c
 18745  0020E4  CFDF FFEF          	movff	indf2,indf0
 18746  0020E8  D73E               	goto	l13230
 18747  0020EA                     l13296:
 18748                           
 18749                           ; BSR set to: 0
 18750  0020EA  516E               	movf	IncludeMacCommandsResponse@i& (0+255),w,b
 18751  0020EC  0D02               	mullw	2
 18752  0020EE  0EA8               	movlw	low (_loRa+168)
 18753  0020F0  24F3               	addwf	prodl,w,c
 18754  0020F2  6ED9               	movwf	fsr2l,c
 18755  0020F4  0E02               	movlw	high (_loRa+168)
 18756  0020F6  20F4               	addwfc	prodh,w,c
 18757  0020F8  6EDA               	movwf	fsr2h,c
 18758  0020FA  50DF               	movf	indf2,w,c
 18759                           
 18760                           ; Switch size 1, requested type "speed"
 18761                           ; Number of cases is 7, Range of values is 2 to 8
 18762                           ; switch strategies available:
 18763                           ; Name         Instructions Cycles
 18764                           ; simple_byte           22    12 (average)
 18765                           ;	Chosen strategy is simple_byte
 18766  0020FC  0A02               	xorlw	2	; case 2
 18767  0020FE  E0E0               	bz	l2304
 18768  002100  0A01               	xorlw	1	; case 3
 18769  002102  E101 D6E6          	bz	l13212
 18770  002106  0A07               	xorlw	7	; case 4
 18771  002108  E0DE               	bz	l13286
 18772  00210A  0A01               	xorlw	1	; case 5
 18773  00210C  E101 D72E          	bz	l13232
 18774  002110  0A03               	xorlw	3	; case 6
 18775  002112  E101 D76D          	bz	l13252
 18776  002116  0A01               	xorlw	1	; case 7
 18777  002118  E09C               	bz	l13270
 18778  00211A  0A0F               	xorlw	15	; case 8
 18779  00211C  E0D4               	bz	l13286
 18780  00211E                     l13298:
 18781                           
 18782                           ; BSR set to: 0
 18783  00211E  2B6E               	incf	IncludeMacCommandsResponse@i& (0+255),f,b
 18784  002120                     l13300:
 18785                           
 18786                           ; BSR set to: 0
 18787  002120  0102               	movlb	2	; () banked
 18788  002122  51A7               	movf	(_loRa+167)& (0+255),w,b
 18789  002124  0100               	movlb	0	; () banked
 18790  002126  5D6E               	subwf	IncludeMacCommandsResponse@i& (0+255),w,b
 18791  002128  E201 D694          	bnc	l13204
 18792  00212C                     l13302:
 18793                           
 18794                           ; BSR set to: 0
 18795                           ;lorawan.c: 1957: }
 18796                           ;lorawan.c: 1959: *pBufferIndex = bufferIndex;
 18797  00212C  5166               	movf	IncludeMacCommandsResponse@pBufferIndex& (0+255),w,b
 18798  00212E  6ED9               	movwf	fsr2l,c
 18799  002130  6ADA               	clrf	fsr2h,c
 18800  002132  C06F  FFDF         	movff	IncludeMacCommandsResponse@bufferIndex,indf2
 18801                           
 18802                           ; BSR set to: 0
 18803  002136  0012               	return		;funcret
 18804  002138                     __end_of_IncludeMacCommandsResponse:
 18805                           	opt stack 0
 18806                           tosu	equ	0xFFF
 18807                           tosh	equ	0xFFE
 18808                           tosl	equ	0xFFD
 18809                           pclath	equ	0xFFA
 18810                           tblptru	equ	0xFF8
 18811                           tblptrh	equ	0xFF7
 18812                           tblptrl	equ	0xFF6
 18813                           tablat	equ	0xFF5
 18814                           prodh	equ	0xFF4
 18815                           prodl	equ	0xFF3
 18816                           intcon	equ	0xFF2
 18817                           indf0	equ	0xFEF
 18818                           postinc0	equ	0xFEE
 18819                           fsr0h	equ	0xFEA
 18820                           fsr0l	equ	0xFE9
 18821                           wreg	equ	0xFE8
 18822                           postinc1	equ	0xFE6
 18823                           postdec1	equ	0xFE5
 18824                           plusw1	equ	0xFE3
 18825                           fsr1h	equ	0xFE2
 18826                           fsr1l	equ	0xFE1
 18827                           indf2	equ	0xFDF
 18828                           postinc2	equ	0xFDE
 18829                           postdec2	equ	0xFDD
 18830                           plusw2	equ	0xFDB
 18831                           fsr2h	equ	0xFDA
 18832                           fsr2l	equ	0xFD9
 18833                           status	equ	0xFD8
 18834                           
 18835 ;; *************** function _RADIO_GetPacketSnr *****************
 18836 ;; Defined at:
 18837 ;;		line 1429 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 18838 ;; Parameters:    Size  Location     Type
 18839 ;;		None
 18840 ;; Auto vars:     Size  Location     Type
 18841 ;;		None
 18842 ;; Return value:  Size  Location     Type
 18843 ;;                  1    wreg      char 
 18844 ;; Registers used:
 18845 ;;		wreg, status,2
 18846 ;; Tracked objects:
 18847 ;;		On entry : E/0
 18848 ;;		On exit  : F/1
 18849 ;;		Unchanged: 0/0
 18850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18851 ;;      Params:         0       0       0       0       0       0       0       0       0
 18852 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18853 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18854 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18855 ;;Total ram usage:        0 bytes
 18856 ;; Hardware stack levels used:    1
 18857 ;; Hardware stack levels required when called:    7
 18858 ;; This function calls:
 18859 ;;		Nothing
 18860 ;; This function is called by:
 18861 ;;		_IncludeMacCommandsResponse
 18862 ;; This function uses a non-reentrant model
 18863 ;;
 18864                           
 18865                           	psect	text95
 18866  0078AE                     __ptext95:
 18867                           	opt stack 0
 18868  0078AE                     _RADIO_GetPacketSnr:
 18869                           	opt stack 19
 18870                           
 18871                           ;radio_driver_SX1276.c: 1431: return RadioConfiguration.packetSNR;
 18872                           
 18873                           ; BSR set to: 0
 18874                           ;incstack = 0
 18875  0078AE  0101               	movlb	1	; () banked
 18876  0078B0  51A7               	movf	(_RadioConfiguration+50)& (0+255),w,b
 18877                           
 18878                           ; BSR set to: 1
 18879  0078B2  0012               	return		;funcret
 18880  0078B4                     __end_of_RADIO_GetPacketSnr:
 18881                           	opt stack 0
 18882                           tosu	equ	0xFFF
 18883                           tosh	equ	0xFFE
 18884                           tosl	equ	0xFFD
 18885                           pclath	equ	0xFFA
 18886                           tblptru	equ	0xFF8
 18887                           tblptrh	equ	0xFF7
 18888                           tblptrl	equ	0xFF6
 18889                           tablat	equ	0xFF5
 18890                           prodh	equ	0xFF4
 18891                           prodl	equ	0xFF3
 18892                           intcon	equ	0xFF2
 18893                           indf0	equ	0xFEF
 18894                           postinc0	equ	0xFEE
 18895                           fsr0h	equ	0xFEA
 18896                           fsr0l	equ	0xFE9
 18897                           wreg	equ	0xFE8
 18898                           postinc1	equ	0xFE6
 18899                           postdec1	equ	0xFE5
 18900                           plusw1	equ	0xFE3
 18901                           fsr1h	equ	0xFE2
 18902                           fsr1l	equ	0xFE1
 18903                           indf2	equ	0xFDF
 18904                           postinc2	equ	0xFDE
 18905                           postdec2	equ	0xFDD
 18906                           plusw2	equ	0xFDB
 18907                           fsr2h	equ	0xFDA
 18908                           fsr2l	equ	0xFD9
 18909                           status	equ	0xFD8
 18910                           
 18911 ;; *************** function _FindSmallestDataRate *****************
 18912 ;; Defined at:
 18913 ;;		line 1963 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 18914 ;; Parameters:    Size  Location     Type
 18915 ;;		None
 18916 ;; Auto vars:     Size  Location     Type
 18917 ;;  dataRate        1    7[BANK0 ] unsigned char 
 18918 ;;  i               1    6[BANK0 ] unsigned char 
 18919 ;;  found           1    5[BANK0 ] unsigned char 
 18920 ;; Return value:  Size  Location     Type
 18921 ;;                  1    wreg      unsigned char 
 18922 ;; Registers used:
 18923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18924 ;; Tracked objects:
 18925 ;;		On entry : F/2
 18926 ;;		On exit  : F/0
 18927 ;;		Unchanged: 0/0
 18928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18929 ;;      Params:         0       0       0       0       0       0       0       0       0
 18930 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18931 ;;      Temps:          0       1       0       0       0       0       0       0       0
 18932 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18933 ;;Total ram usage:        4 bytes
 18934 ;; Hardware stack levels used:    1
 18935 ;; Hardware stack levels required when called:    7
 18936 ;; This function calls:
 18937 ;;		Nothing
 18938 ;; This function is called by:
 18939 ;;		_AckRetransmissionCallback
 18940 ;;		_AssemblePacket
 18941 ;; This function uses a non-reentrant model
 18942 ;;
 18943                           
 18944                           	psect	text96
 18945  005AFC                     __ptext96:
 18946                           	opt stack 0
 18947  005AFC                     _FindSmallestDataRate:
 18948                           	opt stack 20
 18949                           
 18950                           ; BSR set to: 2
 18951                           ;lorawan.c: 1966: bool found = 0;
 18952                           
 18953                           ; BSR set to: 1
 18954                           ;incstack = 0
 18955  005AFC  0100               	movlb	0	; () banked
 18956  005AFE  6B65               	clrf	FindSmallestDataRate@found& (0+255),b
 18957                           
 18958                           ; BSR set to: 0
 18959                           ;lorawan.c: 1968: if (loRa.currentDataRate > loRa.minDataRate)
 18960  005B00  0102               	movlb	2	; () banked
 18961  005B02  51DF               	movf	(_loRa+223)& (0+255),w,b
 18962  005B04  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 18963  005B06  E24A               	bc	l13130
 18964                           
 18965                           ; BSR set to: 2
 18966                           ;lorawan.c: 1969: {
 18967                           ;lorawan.c: 1970: dataRate = loRa.currentDataRate - 1;
 18968  005B08  05DF               	decf	(_loRa+223)& (0+255),w,b
 18969  005B0A  0100               	movlb	0	; () banked
 18970  005B0C  6F67               	movwf	FindSmallestDataRate@dataRate& (0+255),b
 18971                           
 18972                           ;lorawan.c: 1972: while ( (found == 0) && (dataRate >= loRa.minDataRate) )
 18973  005B0E  D03A               	goto	l13122
 18974  005B10                     l2313:
 18975                           
 18976                           ; BSR set to: 0
 18977                           ;lorawan.c: 1973: {
 18978                           ;lorawan.c: 1974: for ( i = 0; i < loRa.maxChannels; i++ )
 18979  005B10  6B66               	clrf	FindSmallestDataRate@i& (0+255),b
 18980  005B12  D02B               	goto	l13114
 18981  005B14                     l13104:
 18982                           
 18983                           ; BSR set to: 0
 18984                           ;lorawan.c: 1975: {
 18985                           ;lorawan.c: 1976: if ( (dataRate >= Channels[i].dataRange.min) && (dataRate <= Channels[
      +                          i].dataRange.max ) && ( Channels[i].status == 1 ) )
 18986  005B14  5166               	movf	FindSmallestDataRate@i& (0+255),w,b
 18987  005B16  0D0E               	mullw	14
 18988  005B18  0E05               	movlw	low (_Channels+5)
 18989  005B1A  24F3               	addwf	prodl,w,c
 18990  005B1C  6ED9               	movwf	fsr2l,c
 18991  005B1E  0E04               	movlw	high (_Channels+5)
 18992  005B20  20F4               	addwfc	prodh,w,c
 18993  005B22  6EDA               	movwf	fsr2h,c
 18994  005B24  50DF               	movf	223,w,c
 18995  005B26  0B0F               	andlw	15
 18996  005B28  0100               	movlb	0	; () banked
 18997  005B2A  6F64               	movwf	??_FindSmallestDataRate& (0+255),b
 18998  005B2C  5164               	movf	??_FindSmallestDataRate& (0+255),w,b
 18999  005B2E  5D67               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 19000  005B30  E31B               	bnc	l13112
 19001                           
 19002                           ; BSR set to: 0
 19003  005B32  5166               	movf	FindSmallestDataRate@i& (0+255),w,b
 19004  005B34  0D0E               	mullw	14
 19005  005B36  0E05               	movlw	low (_Channels+5)
 19006  005B38  24F3               	addwf	prodl,w,c
 19007  005B3A  6ED9               	movwf	fsr2l,c
 19008  005B3C  0E04               	movlw	high (_Channels+5)
 19009  005B3E  20F4               	addwfc	prodh,w,c
 19010  005B40  6EDA               	movwf	fsr2h,c
 19011  005B42  38DF               	swapf	223,w,c
 19012  005B44  0B0F               	andlw	15
 19013  005B46  6F64               	movwf	??_FindSmallestDataRate& (0+255),b
 19014  005B48  5167               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 19015  005B4A  5D64               	subwf	??_FindSmallestDataRate& (0+255),w,b
 19016  005B4C  E30D               	bnc	l13112
 19017                           
 19018                           ; BSR set to: 0
 19019  005B4E  5166               	movf	FindSmallestDataRate@i& (0+255),w,b
 19020  005B50  0D0E               	mullw	14
 19021  005B52  0E04               	movlw	low (_Channels+4)
 19022  005B54  24F3               	addwf	prodl,w,c
 19023  005B56  6ED9               	movwf	fsr2l,c
 19024  005B58  0E04               	movlw	high (_Channels+4)
 19025  005B5A  20F4               	addwfc	prodh,w,c
 19026  005B5C  6EDA               	movwf	fsr2h,c
 19027  005B5E  04DE               	decf	postinc2,w,c
 19028  005B60  E103               	bnz	l13112
 19029                           
 19030                           ; BSR set to: 0
 19031                           ;lorawan.c: 1977: {
 19032                           ;lorawan.c: 1978: found = 1;
 19033  005B62  0E01               	movlw	1
 19034  005B64  6F65               	movwf	FindSmallestDataRate@found& (0+255),b
 19035                           
 19036                           ;lorawan.c: 1979: break;
 19037  005B66  D006               	goto	l13116
 19038  005B68                     l13112:
 19039                           
 19040                           ; BSR set to: 0
 19041  005B68  2B66               	incf	FindSmallestDataRate@i& (0+255),f,b
 19042  005B6A                     l13114:
 19043                           
 19044                           ; BSR set to: 0
 19045  005B6A  0102               	movlb	2	; () banked
 19046  005B6C  51ED               	movf	(_loRa+237)& (0+255),w,b
 19047  005B6E  0100               	movlb	0	; () banked
 19048  005B70  5D66               	subwf	FindSmallestDataRate@i& (0+255),w,b
 19049  005B72  E3D0               	bnc	l13104
 19050  005B74                     l13116:
 19051                           
 19052                           ; BSR set to: 0
 19053                           ;lorawan.c: 1980: }
 19054                           ;lorawan.c: 1981: }
 19055                           ;lorawan.c: 1982: if ( (found == 0) && (dataRate > loRa.minDataRate) )
 19056  005B74  5165               	movf	FindSmallestDataRate@found& (0+255),w,b
 19057  005B76  E106               	bnz	l13122
 19058                           
 19059                           ; BSR set to: 0
 19060  005B78  5167               	movf	FindSmallestDataRate@dataRate& (0+255),w,b
 19061  005B7A  0102               	movlb	2	; () banked
 19062  005B7C  5DEB               	subwf	(_loRa+235)& (0+255),w,b
 19063  005B7E  E202               	bc	l13122
 19064                           
 19065                           ; BSR set to: 2
 19066                           ;lorawan.c: 1983: {
 19067                           ;lorawan.c: 1984: dataRate = dataRate - 1;
 19068  005B80  0100               	movlb	0	; () banked
 19069  005B82  0767               	decf	FindSmallestDataRate@dataRate& (0+255),f,b
 19070  005B84                     l13122:
 19071  005B84  0100               	movlb	0	; () banked
 19072  005B86  5165               	movf	FindSmallestDataRate@found& (0+255),w,b
 19073  005B88  E105               	bnz	l13126
 19074                           
 19075                           ; BSR set to: 0
 19076  005B8A  0102               	movlb	2	; () banked
 19077  005B8C  51EB               	movf	(_loRa+235)& (0+255),w,b
 19078  005B8E  0100               	movlb	0	; () banked
 19079  005B90  5D67               	subwf	FindSmallestDataRate@dataRate& (0+255),w,b
 19080  005B92  E2BE               	bc	l2313
 19081  005B94                     l13126:
 19082                           
 19083                           ; BSR set to: 0
 19084                           ;lorawan.c: 1985: }
 19085                           ;lorawan.c: 1986: }
 19086                           ;lorawan.c: 1988: if (found == 1)
 19087  005B94  0565               	decf	FindSmallestDataRate@found& (0+255),w,b
 19088  005B96  E102               	bnz	l13130
 19089                           
 19090                           ; BSR set to: 0
 19091                           ;lorawan.c: 1989: {
 19092                           ;lorawan.c: 1990: loRa.currentDataRate = dataRate;
 19093  005B98  C067  F2DF         	movff	FindSmallestDataRate@dataRate,_loRa+223
 19094  005B9C                     l13130:
 19095                           
 19096                           ;lorawan.c: 1991: }
 19097                           ;lorawan.c: 1992: }
 19098                           ;lorawan.c: 1994: return found;
 19099  005B9C  0100               	movlb	0	; () banked
 19100  005B9E  5165               	movf	FindSmallestDataRate@found& (0+255),w,b
 19101                           
 19102                           ; BSR set to: 0
 19103  005BA0  0012               	return		;funcret
 19104  005BA2                     __end_of_FindSmallestDataRate:
 19105                           	opt stack 0
 19106                           tosu	equ	0xFFF
 19107                           tosh	equ	0xFFE
 19108                           tosl	equ	0xFFD
 19109                           pclath	equ	0xFFA
 19110                           tblptru	equ	0xFF8
 19111                           tblptrh	equ	0xFF7
 19112                           tblptrl	equ	0xFF6
 19113                           tablat	equ	0xFF5
 19114                           prodh	equ	0xFF4
 19115                           prodl	equ	0xFF3
 19116                           intcon	equ	0xFF2
 19117                           indf0	equ	0xFEF
 19118                           postinc0	equ	0xFEE
 19119                           fsr0h	equ	0xFEA
 19120                           fsr0l	equ	0xFE9
 19121                           wreg	equ	0xFE8
 19122                           postinc1	equ	0xFE6
 19123                           postdec1	equ	0xFE5
 19124                           plusw1	equ	0xFE3
 19125                           fsr1h	equ	0xFE2
 19126                           fsr1l	equ	0xFE1
 19127                           indf2	equ	0xFDF
 19128                           postinc2	equ	0xFDE
 19129                           postdec2	equ	0xFDD
 19130                           plusw2	equ	0xFDB
 19131                           fsr2h	equ	0xFDA
 19132                           fsr2l	equ	0xFD9
 19133                           status	equ	0xFD8
 19134                           
 19135 ;; *************** function _EncryptFRMPayload *****************
 19136 ;; Defined at:
 19137 ;;		line 2205 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19138 ;; Parameters:    Size  Location     Type
 19139 ;;  buffer          2   68[BANK0 ] PTR unsigned char 
 19140 ;;		 -> payload(2), LORAWAN_RxDone@hdr(2), radioBuffer(271), NULL(0), 
 19141 ;;  bufferLength    1   70[BANK0 ] unsigned char 
 19142 ;;  dir             1   71[BANK0 ] unsigned char 
 19143 ;;  frameCounter    4   72[BANK0 ] unsigned long 
 19144 ;;  key             2   76[BANK0 ] PTR unsigned char 
 19145 ;;		 -> loRa.activationParameters(105), loRa(245), 
 19146 ;;  macBufferInd    1   78[BANK0 ] unsigned char 
 19147 ;;  bufferToBeEn    2   79[BANK0 ] PTR unsigned char 
 19148 ;;		 -> macBuffer(271), radioBuffer(271), 
 19149 ;;  multicastSta    1   81[BANK0 ] unsigned char 
 19150 ;; Auto vars:     Size  Location     Type
 19151 ;;  j               1   89[BANK0 ] unsigned char 
 19152 ;;  i               1   88[BANK0 ] unsigned char 
 19153 ;;  k               1   87[BANK0 ] unsigned char 
 19154 ;; Return value:  Size  Location     Type
 19155 ;;                  1    wreg      void 
 19156 ;; Registers used:
 19157 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19158 ;; Tracked objects:
 19159 ;;		On entry : F/0
 19160 ;;		On exit  : F/0
 19161 ;;		Unchanged: 0/0
 19162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19163 ;;      Params:         0      14       0       0       0       0       0       0       0
 19164 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19165 ;;      Temps:          0       5       0       0       0       0       0       0       0
 19166 ;;      Totals:         0      22       0       0       0       0       0       0       0
 19167 ;;Total ram usage:       22 bytes
 19168 ;; Hardware stack levels used:    1
 19169 ;; Hardware stack levels required when called:   10
 19170 ;; This function calls:
 19171 ;;		_AESEncodeLoRa
 19172 ;;		_AssembleEncryptionBlock
 19173 ;; This function is called by:
 19174 ;;		_LORAWAN_RxDone
 19175 ;;		_AssemblePacket
 19176 ;; This function uses a non-reentrant model
 19177 ;;
 19178                           
 19179                           	psect	text97
 19180  004184                     __ptext97:
 19181                           	opt stack 0
 19182  004184                     _EncryptFRMPayload:
 19183                           	opt stack 17
 19184                           
 19185                           ; BSR set to: 0
 19186                           
 19187                           ; BSR set to: 0
 19188                           ;incstack = 0
 19189  004184  6BB8               	clrf	EncryptFRMPayload@i& (0+255),b
 19190  004186  6BB9               	clrf	EncryptFRMPayload@j& (0+255),b
 19191                           
 19192                           ; BSR set to: 0
 19193                           ;lorawan.c: 2209: k = bufferLength / 16;
 19194  004188  39A6               	swapf	EncryptFRMPayload@bufferLength& (0+255),w,b
 19195  00418A  0B0F               	andlw	15
 19196  00418C  6FB7               	movwf	EncryptFRMPayload@k& (0+255),b
 19197                           
 19198                           ; BSR set to: 0
 19199                           ;lorawan.c: 2210: for (i = 1; i <= k; i++)
 19200  00418E  0E01               	movlw	1
 19201  004190  6FB8               	movwf	EncryptFRMPayload@i& (0+255),b
 19202  004192  D051               	goto	l13166
 19203  004194                     l13148:
 19204                           
 19205                           ; BSR set to: 0
 19206                           ;lorawan.c: 2211: {
 19207                           ;lorawan.c: 2212: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 19208  004194  C0A8  F06E         	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 19209  004198  C0A9  F06F         	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 19210  00419C  C0AA  F070         	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 19211  0041A0  C0AB  F071         	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 19212  0041A4  C0B8  F072         	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 19213  0041A8  0E01               	movlw	1
 19214  0041AA  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 19215  0041AC  C0B1  F074         	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 19216  0041B0  51A7               	movf	EncryptFRMPayload@dir& (0+255),w,b
 19217  0041B2  EC1E  F02C         	call	_AssembleEncryptionBlock
 19218                           
 19219                           ;lorawan.c: 2213: AESEncodeLoRa(aesBuffer, key);
 19220  0041B6  0EAB               	movlw	low _aesBuffer
 19221  0041B8  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 19222  0041BA  0E01               	movlw	high _aesBuffer
 19223  0041BC  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 19224  0041BE  C0AC  F092         	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 19225  0041C2  C0AD  F093         	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 19226  0041C6  EC89  F039         	call	_AESEncodeLoRa	;wreg free
 19227                           
 19228                           ; BSR set to: 0
 19229                           ;lorawan.c: 2215: for (j = 0; j < 16; j++)
 19230  0041CA  6BB9               	clrf	EncryptFRMPayload@j& (0+255),b
 19231  0041CC                     l13156:
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;lorawan.c: 2216: {
 19235                           ;lorawan.c: 2217: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[16*(i-1)
      +                           + j];
 19236  0041CC  51AE               	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 19237  0041CE  25AF               	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 19238  0041D0  6ED9               	movwf	fsr2l,c
 19239  0041D2  0E00               	movlw	0
 19240  0041D4  21B0               	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 19241  0041D6  6EDA               	movwf	fsr2h,c
 19242  0041D8  51B8               	movf	EncryptFRMPayload@i& (0+255),w,b
 19243  0041DA  6FB2               	movwf	??_EncryptFRMPayload& (0+255),b
 19244  0041DC  6BB3               	clrf	(??_EncryptFRMPayload+1)& (0+255),b
 19245  0041DE  3BB2               	swapf	??_EncryptFRMPayload& (0+255),f,b
 19246  0041E0  3BB3               	swapf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19247  0041E2  0EF0               	movlw	240
 19248  0041E4  17B3               	andwf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19249  0041E6  51B2               	movf	??_EncryptFRMPayload& (0+255),w,b
 19250  0041E8  0B0F               	andlw	15
 19251  0041EA  13B3               	iorwf	(??_EncryptFRMPayload+1)& (0+255),f,b
 19252  0041EC  0EF0               	movlw	240
 19253  0041EE  17B2               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19254  0041F0  C0A4  F0B4         	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload+2
 19255  0041F4  C0A5  F0B5         	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+3
 19256  0041F8  51B2               	movf	??_EncryptFRMPayload& (0+255),w,b
 19257  0041FA  27B4               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 19258  0041FC  51B3               	movf	(??_EncryptFRMPayload+1)& (0+255),w,b
 19259  0041FE  23B5               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 19260  004200  51B9               	movf	EncryptFRMPayload@j& (0+255),w,b
 19261  004202  27B4               	addwf	(??_EncryptFRMPayload+2)& (0+255),f,b
 19262  004204  0E00               	movlw	0
 19263  004206  23B5               	addwfc	(??_EncryptFRMPayload+3)& (0+255),f,b
 19264  004208  0EF0               	movlw	240
 19265  00420A  25B4               	addwf	(??_EncryptFRMPayload+2)& (0+255),w,b
 19266  00420C  6EE9               	movwf	fsr0l,c
 19267  00420E  0EFF               	movlw	255
 19268  004210  21B5               	addwfc	(??_EncryptFRMPayload+3)& (0+255),w,b
 19269  004212  6EEA               	movwf	fsr0h,c
 19270  004214  50EF               	movf	indf0,w,c
 19271  004216  6FB6               	movwf	(??_EncryptFRMPayload+4)& (0+255),b
 19272  004218  0EAB               	movlw	low _aesBuffer
 19273  00421A  25B9               	addwf	EncryptFRMPayload@j& (0+255),w,b
 19274  00421C  6EE9               	movwf	fsr0l,c
 19275  00421E  6AEA               	clrf	fsr0h,c
 19276  004220  0E01               	movlw	high _aesBuffer
 19277  004222  22EA               	addwfc	fsr0h,f,c
 19278  004224  50EF               	movf	indf0,w,c
 19279  004226  19B6               	xorwf	(??_EncryptFRMPayload+4)& (0+255),w,b
 19280  004228  6EDF               	movwf	indf2,c
 19281                           
 19282                           ; BSR set to: 0
 19283  00422A  2BAE               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 19284                           
 19285                           ; BSR set to: 0
 19286  00422C  2BB9               	incf	EncryptFRMPayload@j& (0+255),f,b
 19287                           
 19288                           ; BSR set to: 0
 19289  00422E  0E0F               	movlw	15
 19290  004230  65B9               	cpfsgt	EncryptFRMPayload@j& (0+255),b
 19291  004232  D7CC               	goto	l13156
 19292                           
 19293                           ; BSR set to: 0
 19294  004234  2BB8               	incf	EncryptFRMPayload@i& (0+255),f,b
 19295  004236                     l13166:
 19296                           
 19297                           ; BSR set to: 0
 19298  004236  51B8               	movf	EncryptFRMPayload@i& (0+255),w,b
 19299  004238  5DB7               	subwf	EncryptFRMPayload@k& (0+255),w,b
 19300  00423A  E2AC               	bc	l13148
 19301                           
 19302                           ; BSR set to: 0
 19303                           ;lorawan.c: 2218: }
 19304                           ;lorawan.c: 2219: }
 19305                           ;lorawan.c: 2221: if ( (bufferLength % 16) != 0 )
 19306  00423C  C0A6  F0B2         	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 19307  004240  0E0F               	movlw	15
 19308  004242  17B2               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19309  004244  B4D8               	btfsc	status,2,c
 19310  004246  0C0F               	retlw	15
 19311                           
 19312                           ; BSR set to: 0
 19313                           ;lorawan.c: 2222: {
 19314                           ;lorawan.c: 2223: AssembleEncryptionBlock (dir, frameCounter, i, 0x01, multicastStatus);
 19315  004248  C0A8  F06E         	movff	EncryptFRMPayload@frameCounter,AssembleEncryptionBlock@frameCounter
 19316  00424C  C0A9  F06F         	movff	EncryptFRMPayload@frameCounter+1,AssembleEncryptionBlock@frameCounter+1
 19317  004250  C0AA  F070         	movff	EncryptFRMPayload@frameCounter+2,AssembleEncryptionBlock@frameCounter+2
 19318  004254  C0AB  F071         	movff	EncryptFRMPayload@frameCounter+3,AssembleEncryptionBlock@frameCounter+3
 19319  004258  C0B8  F072         	movff	EncryptFRMPayload@i,AssembleEncryptionBlock@blockId
 19320  00425C  0E01               	movlw	1
 19321  00425E  6F73               	movwf	AssembleEncryptionBlock@firstByte& (0+255),b
 19322  004260  C0B1  F074         	movff	EncryptFRMPayload@multicastStatus,AssembleEncryptionBlock@multicastStatus
 19323  004264  51A7               	movf	EncryptFRMPayload@dir& (0+255),w,b
 19324  004266  EC1E  F02C         	call	_AssembleEncryptionBlock
 19325                           
 19326                           ;lorawan.c: 2224: AESEncodeLoRa (aesBuffer, key);
 19327  00426A  0EAB               	movlw	low _aesBuffer
 19328  00426C  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 19329  00426E  0E01               	movlw	high _aesBuffer
 19330  004270  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 19331  004272  C0AC  F092         	movff	EncryptFRMPayload@key,AESEncodeLoRa@key
 19332  004276  C0AD  F093         	movff	EncryptFRMPayload@key+1,AESEncodeLoRa@key+1
 19333  00427A  EC89  F039         	call	_AESEncodeLoRa	;wreg free
 19334                           
 19335                           ; BSR set to: 0
 19336                           ;lorawan.c: 2226: for (j = 0; j < (bufferLength % 16); j++)
 19337  00427E  6BB9               	clrf	EncryptFRMPayload@j& (0+255),b
 19338  004280  D023               	goto	l13180
 19339  004282                     l13174:
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;lorawan.c: 2227: {
 19343                           ;lorawan.c: 2228: bufferToBeEncrypted[macBufferIndex++] = aesBuffer[j] ^ buffer[(16*k) +
      +                           j];
 19344  004282  51AE               	movf	EncryptFRMPayload@macBufferIndex& (0+255),w,b
 19345  004284  25AF               	addwf	EncryptFRMPayload@bufferToBeEncrypted& (0+255),w,b
 19346  004286  6ED9               	movwf	fsr2l,c
 19347  004288  0E00               	movlw	0
 19348  00428A  21B0               	addwfc	(EncryptFRMPayload@bufferToBeEncrypted+1)& (0+255),w,b
 19349  00428C  6EDA               	movwf	fsr2h,c
 19350  00428E  51B7               	movf	EncryptFRMPayload@k& (0+255),w,b
 19351  004290  0D10               	mullw	16
 19352  004292  C0A4  F0B2         	movff	EncryptFRMPayload@buffer,??_EncryptFRMPayload
 19353  004296  C0A5  F0B3         	movff	EncryptFRMPayload@buffer+1,??_EncryptFRMPayload+1
 19354  00429A  50F3               	movf	prodl,w,c
 19355  00429C  27B2               	addwf	??_EncryptFRMPayload& (0+255),f,b
 19356  00429E  50F4               	movf	prodh,w,c
 19357  0042A0  23B3               	addwfc	(??_EncryptFRMPayload+1)& (0+255),f,b
 19358  0042A2  51B9               	movf	EncryptFRMPayload@j& (0+255),w,b
 19359  0042A4  25B2               	addwf	??_EncryptFRMPayload& (0+255),w,b
 19360  0042A6  6EE9               	movwf	fsr0l,c
 19361  0042A8  0E00               	movlw	0
 19362  0042AA  21B3               	addwfc	(??_EncryptFRMPayload+1)& (0+255),w,b
 19363  0042AC  6EEA               	movwf	fsr0h,c
 19364  0042AE  50EF               	movf	indf0,w,c
 19365  0042B0  6FB4               	movwf	(??_EncryptFRMPayload+2)& (0+255),b
 19366  0042B2  0EAB               	movlw	low _aesBuffer
 19367  0042B4  25B9               	addwf	EncryptFRMPayload@j& (0+255),w,b
 19368  0042B6  6EE9               	movwf	fsr0l,c
 19369  0042B8  6AEA               	clrf	fsr0h,c
 19370  0042BA  0E01               	movlw	high _aesBuffer
 19371  0042BC  22EA               	addwfc	fsr0h,f,c
 19372  0042BE  50EF               	movf	indf0,w,c
 19373  0042C0  19B4               	xorwf	(??_EncryptFRMPayload+2)& (0+255),w,b
 19374  0042C2  6EDF               	movwf	indf2,c
 19375                           
 19376                           ; BSR set to: 0
 19377  0042C4  2BAE               	incf	EncryptFRMPayload@macBufferIndex& (0+255),f,b
 19378                           
 19379                           ; BSR set to: 0
 19380  0042C6  2BB9               	incf	EncryptFRMPayload@j& (0+255),f,b
 19381  0042C8                     l13180:
 19382                           
 19383                           ; BSR set to: 0
 19384  0042C8  C0A6  F0B2         	movff	EncryptFRMPayload@bufferLength,??_EncryptFRMPayload
 19385  0042CC  0E0F               	movlw	15
 19386  0042CE  17B2               	andwf	??_EncryptFRMPayload& (0+255),f,b
 19387  0042D0  51B2               	movf	??_EncryptFRMPayload& (0+255),w,b
 19388  0042D2  5DB9               	subwf	EncryptFRMPayload@j& (0+255),w,b
 19389  0042D4  E3D6               	bnc	l13174
 19390                           
 19391                           ; BSR set to: 0
 19392  0042D6  0012               	return		;funcret
 19393  0042D8                     __end_of_EncryptFRMPayload:
 19394                           	opt stack 0
 19395                           tosu	equ	0xFFF
 19396                           tosh	equ	0xFFE
 19397                           tosl	equ	0xFFD
 19398                           pclath	equ	0xFFA
 19399                           tblptru	equ	0xFF8
 19400                           tblptrh	equ	0xFF7
 19401                           tblptrl	equ	0xFF6
 19402                           tablat	equ	0xFF5
 19403                           prodh	equ	0xFF4
 19404                           prodl	equ	0xFF3
 19405                           intcon	equ	0xFF2
 19406                           indf0	equ	0xFEF
 19407                           postinc0	equ	0xFEE
 19408                           fsr0h	equ	0xFEA
 19409                           fsr0l	equ	0xFE9
 19410                           wreg	equ	0xFE8
 19411                           postinc1	equ	0xFE6
 19412                           postdec1	equ	0xFE5
 19413                           plusw1	equ	0xFE3
 19414                           fsr1h	equ	0xFE2
 19415                           fsr1l	equ	0xFE1
 19416                           indf2	equ	0xFDF
 19417                           postinc2	equ	0xFDE
 19418                           postdec2	equ	0xFDD
 19419                           plusw2	equ	0xFDB
 19420                           fsr2h	equ	0xFDA
 19421                           fsr2l	equ	0xFD9
 19422                           status	equ	0xFD8
 19423                           
 19424 ;; *************** function _AssembleEncryptionBlock *****************
 19425 ;; Defined at:
 19426 ;;		line 2156 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19427 ;; Parameters:    Size  Location     Type
 19428 ;;  dir             1    wreg     unsigned char 
 19429 ;;  frameCounter    4   14[BANK0 ] unsigned long 
 19430 ;;  blockId         1   18[BANK0 ] unsigned char 
 19431 ;;  firstByte       1   19[BANK0 ] unsigned char 
 19432 ;;  multicastSta    1   20[BANK0 ] unsigned char 
 19433 ;; Auto vars:     Size  Location     Type
 19434 ;;  dir             1   21[BANK0 ] unsigned char 
 19435 ;;  bufferIndex     1   22[BANK0 ] unsigned char 
 19436 ;; Return value:  Size  Location     Type
 19437 ;;                  1    wreg      void 
 19438 ;; Registers used:
 19439 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19440 ;; Tracked objects:
 19441 ;;		On entry : F/0
 19442 ;;		On exit  : F/0
 19443 ;;		Unchanged: 0/0
 19444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19445 ;;      Params:         0       7       0       0       0       0       0       0       0
 19446 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19447 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19448 ;;      Totals:         0       9       0       0       0       0       0       0       0
 19449 ;;Total ram usage:        9 bytes
 19450 ;; Hardware stack levels used:    1
 19451 ;; Hardware stack levels required when called:    8
 19452 ;; This function calls:
 19453 ;;		_memcpy
 19454 ;;		_memset
 19455 ;; This function is called by:
 19456 ;;		_LORAWAN_RxDone
 19457 ;;		_AssemblePacket
 19458 ;;		_EncryptFRMPayload
 19459 ;; This function uses a non-reentrant model
 19460 ;;
 19461                           
 19462                           	psect	text98
 19463  00583C                     __ptext98:
 19464                           	opt stack 0
 19465  00583C                     _AssembleEncryptionBlock:
 19466                           	opt stack 18
 19467                           
 19468                           ; BSR set to: 0
 19469                           ;incstack = 0
 19470                           ;AssembleEncryptionBlock@dir stored from wreg
 19471  00583C  6F75               	movwf	AssembleEncryptionBlock@dir& (0+255),b
 19472                           
 19473                           ;lorawan.c: 2158: uint8_t bufferIndex = 0;
 19474  00583E  0100               	movlb	0	; () banked
 19475  005840  6B76               	clrf	AssembleEncryptionBlock@bufferIndex& (0+255),b
 19476                           
 19477                           ; BSR set to: 0
 19478                           ;lorawan.c: 2160: memset (aesBuffer, 0, sizeof (aesBuffer));
 19479  005842  0EAB               	movlw	low _aesBuffer
 19480  005844  6F64               	movwf	memset@p1& (0+255),b
 19481  005846  0E01               	movlw	high _aesBuffer
 19482  005848  6F65               	movwf	(memset@p1+1)& (0+255),b
 19483  00584A  6B67               	clrf	(memset@c+1)& (0+255),b
 19484  00584C  6B66               	clrf	memset@c& (0+255),b
 19485  00584E  6B69               	clrf	(memset@n+1)& (0+255),b
 19486  005850  0E10               	movlw	16
 19487  005852  6F68               	movwf	memset@n& (0+255),b
 19488  005854  EC60  F039         	call	_memset	;wreg free
 19489                           
 19490                           ; BSR set to: 0
 19491                           ;lorawan.c: 2162: aesBuffer[bufferIndex] = firstByte;
 19492  005858  C073  F1AB         	movff	AssembleEncryptionBlock@firstByte,_aesBuffer
 19493                           
 19494                           ; BSR set to: 0
 19495                           ;lorawan.c: 2164: bufferIndex = bufferIndex + 5;
 19496  00585C  0E05               	movlw	5
 19497  00585E  2776               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19498                           
 19499                           ; BSR set to: 0
 19500                           ;lorawan.c: 2166: aesBuffer[bufferIndex++] = dir;
 19501  005860  0EAB               	movlw	low _aesBuffer
 19502  005862  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19503  005864  6ED9               	movwf	fsr2l,c
 19504  005866  6ADA               	clrf	fsr2h,c
 19505  005868  0E01               	movlw	high _aesBuffer
 19506  00586A  22DA               	addwfc	fsr2h,f,c
 19507  00586C  C075  FFDF         	movff	AssembleEncryptionBlock@dir,indf2
 19508                           
 19509                           ; BSR set to: 0
 19510  005870  2B76               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19511                           
 19512                           ; BSR set to: 0
 19513                           ;lorawan.c: 2168: if (0 == multicastStatus)
 19514  005872  5174               	movf	AssembleEncryptionBlock@multicastStatus& (0+255),w,b
 19515  005874  E112               	bnz	l12708
 19516                           
 19517                           ; BSR set to: 0
 19518                           ;lorawan.c: 2169: {
 19519                           ;lorawan.c: 2170: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.deviceAddr
      +                          ess, sizeof (loRa.activationParameters.deviceAddress));
 19520  005876  0EAB               	movlw	low _aesBuffer
 19521  005878  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19522  00587A  6F64               	movwf	memcpy@d1& (0+255),b
 19523  00587C  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 19524  00587E  0E01               	movlw	high _aesBuffer
 19525  005880  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 19526  005882  0E1E               	movlw	low (_loRa+30)
 19527  005884  6F66               	movwf	memcpy@s1& (0+255),b
 19528  005886  0E02               	movlw	high (_loRa+30)
 19529  005888  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 19530  00588A  6B69               	clrf	(memcpy@n+1)& (0+255),b
 19531  00588C  0E04               	movlw	4
 19532  00588E  6F68               	movwf	memcpy@n& (0+255),b
 19533  005890  EC73  F034         	call	_memcpy	;wreg free
 19534  005894                     l12706:
 19535                           
 19536                           ; BSR set to: 0
 19537                           ;lorawan.c: 2171: bufferIndex = bufferIndex + sizeof (loRa.activationParameters.deviceAd
      +                          dress);
 19538  005894  0E04               	movlw	4
 19539  005896  2776               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19540                           
 19541                           ;lorawan.c: 2172: }
 19542  005898  D010               	goto	l12712
 19543  00589A                     l12708:
 19544                           
 19545                           ; BSR set to: 0
 19546                           ;lorawan.c: 2173: else
 19547                           ;lorawan.c: 2174: {
 19548                           ;lorawan.c: 2175: memcpy (&aesBuffer[bufferIndex], &loRa.activationParameters.mcastDevic
      +                          eAddress, sizeof (loRa.activationParameters.mcastDeviceAddress));
 19549  00589A  0EAB               	movlw	low _aesBuffer
 19550  00589C  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19551  00589E  6F64               	movwf	memcpy@d1& (0+255),b
 19552  0058A0  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 19553  0058A2  0E01               	movlw	high _aesBuffer
 19554  0058A4  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 19555  0058A6  0E62               	movlw	low (_loRa+98)
 19556  0058A8  6F66               	movwf	memcpy@s1& (0+255),b
 19557  0058AA  0E02               	movlw	high (_loRa+98)
 19558  0058AC  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 19559  0058AE  6B69               	clrf	(memcpy@n+1)& (0+255),b
 19560  0058B0  0E04               	movlw	4
 19561  0058B2  6F68               	movwf	memcpy@n& (0+255),b
 19562  0058B4  EC73  F034         	call	_memcpy	;wreg free
 19563  0058B8  D7ED               	goto	l12706
 19564  0058BA                     l12712:
 19565                           
 19566                           ; BSR set to: 0
 19567                           ;lorawan.c: 2177: }
 19568                           ;lorawan.c: 2179: memcpy (&aesBuffer[bufferIndex], &frameCounter, sizeof (frameCounter))
      +                          ;
 19569  0058BA  0EAB               	movlw	low _aesBuffer
 19570  0058BC  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19571  0058BE  6F64               	movwf	memcpy@d1& (0+255),b
 19572  0058C0  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 19573  0058C2  0E01               	movlw	high _aesBuffer
 19574  0058C4  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 19575  0058C6  0E6E               	movlw	low AssembleEncryptionBlock@frameCounter
 19576  0058C8  6F66               	movwf	memcpy@s1& (0+255),b
 19577  0058CA  6B67               	clrf	(memcpy@s1+1)& (0+255),b
 19578  0058CC  6B69               	clrf	(memcpy@n+1)& (0+255),b
 19579  0058CE  0E04               	movlw	4
 19580  0058D0  6F68               	movwf	memcpy@n& (0+255),b
 19581  0058D2  EC73  F034         	call	_memcpy	;wreg free
 19582                           
 19583                           ;lorawan.c: 2180: bufferIndex = bufferIndex + sizeof (frameCounter) ;
 19584  0058D6  0E04               	movlw	4
 19585  0058D8  2776               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19586                           
 19587                           ; BSR set to: 0
 19588                           ;lorawan.c: 2182: bufferIndex ++;
 19589  0058DA  2B76               	incf	AssembleEncryptionBlock@bufferIndex& (0+255),f,b
 19590                           
 19591                           ; BSR set to: 0
 19592                           ;lorawan.c: 2184: aesBuffer[bufferIndex] = blockId;
 19593  0058DC  0EAB               	movlw	low _aesBuffer
 19594  0058DE  2576               	addwf	AssembleEncryptionBlock@bufferIndex& (0+255),w,b
 19595  0058E0  6ED9               	movwf	fsr2l,c
 19596  0058E2  6ADA               	clrf	fsr2h,c
 19597  0058E4  0E01               	movlw	high _aesBuffer
 19598  0058E6  22DA               	addwfc	fsr2h,f,c
 19599  0058E8  C072  FFDF         	movff	AssembleEncryptionBlock@blockId,indf2
 19600                           
 19601                           ; BSR set to: 0
 19602  0058EC  0012               	return		;funcret
 19603  0058EE                     __end_of_AssembleEncryptionBlock:
 19604                           	opt stack 0
 19605                           tosu	equ	0xFFF
 19606                           tosh	equ	0xFFE
 19607                           tosl	equ	0xFFD
 19608                           pclath	equ	0xFFA
 19609                           tblptru	equ	0xFF8
 19610                           tblptrh	equ	0xFF7
 19611                           tblptrl	equ	0xFF6
 19612                           tablat	equ	0xFF5
 19613                           prodh	equ	0xFF4
 19614                           prodl	equ	0xFF3
 19615                           intcon	equ	0xFF2
 19616                           indf0	equ	0xFEF
 19617                           postinc0	equ	0xFEE
 19618                           fsr0h	equ	0xFEA
 19619                           fsr0l	equ	0xFE9
 19620                           wreg	equ	0xFE8
 19621                           postinc1	equ	0xFE6
 19622                           postdec1	equ	0xFE5
 19623                           plusw1	equ	0xFE3
 19624                           fsr1h	equ	0xFE2
 19625                           fsr1l	equ	0xFE1
 19626                           indf2	equ	0xFDF
 19627                           postinc2	equ	0xFDE
 19628                           postdec2	equ	0xFDD
 19629                           plusw2	equ	0xFDB
 19630                           fsr2h	equ	0xFDA
 19631                           fsr2l	equ	0xFD9
 19632                           status	equ	0xFD8
 19633                           
 19634 ;; *************** function _CountfOptsLength *****************
 19635 ;; Defined at:
 19636 ;;		line 2134 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19637 ;; Parameters:    Size  Location     Type
 19638 ;;		None
 19639 ;; Auto vars:     Size  Location     Type
 19640 ;;  i               1   11[BANK0 ] unsigned char 
 19641 ;;  macCommandLe    1   10[BANK0 ] unsigned char 
 19642 ;; Return value:  Size  Location     Type
 19643 ;;                  1    wreg      unsigned char 
 19644 ;; Registers used:
 19645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 19646 ;; Tracked objects:
 19647 ;;		On entry : C/2
 19648 ;;		On exit  : F/0
 19649 ;;		Unchanged: 0/0
 19650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19651 ;;      Params:         0       0       0       0       0       0       0       0       0
 19652 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19653 ;;      Temps:          0       6       0       0       0       0       0       0       0
 19654 ;;      Totals:         0       8       0       0       0       0       0       0       0
 19655 ;;Total ram usage:        8 bytes
 19656 ;; Hardware stack levels used:    1
 19657 ;; Hardware stack levels required when called:    7
 19658 ;; This function calls:
 19659 ;;		Nothing
 19660 ;; This function is called by:
 19661 ;;		_LORAWAN_GetMaxPayloadSize
 19662 ;;		_AssemblePacket
 19663 ;; This function uses a non-reentrant model
 19664 ;;
 19665                           
 19666                           	psect	text99
 19667  00599E                     __ptext99:
 19668                           	opt stack 0
 19669  00599E                     _CountfOptsLength:
 19670                           	opt stack 20
 19671                           
 19672                           ;lorawan.c: 2136: uint8_t i, macCommandLength=0;
 19673                           
 19674                           ; BSR set to: 0
 19675                           ;incstack = 0
 19676  00599E  0100               	movlb	0	; () banked
 19677  0059A0  6B6A               	clrf	CountfOptsLength@macCommandLength& (0+255),b
 19678                           
 19679                           ;lorawan.c: 2138: for (i = 0; i < loRa.crtMacCmdIndex; i++)
 19680  0059A2  6B6B               	clrf	CountfOptsLength@i& (0+255),b
 19681  0059A4  D04D               	goto	l13192
 19682  0059A6                     l13184:
 19683                           
 19684                           ; BSR set to: 0
 19685                           ;lorawan.c: 2139: {
 19686                           ;lorawan.c: 2140: if(loRa.macCommands[i].receivedCid != 0xFF)
 19687  0059A6  516B               	movf	CountfOptsLength@i& (0+255),w,b
 19688  0059A8  0D02               	mullw	2
 19689  0059AA  0EA8               	movlw	low (_loRa+168)
 19690  0059AC  24F3               	addwf	prodl,w,c
 19691  0059AE  6ED9               	movwf	fsr2l,c
 19692  0059B0  0E02               	movlw	high (_loRa+168)
 19693  0059B2  20F4               	addwfc	prodh,w,c
 19694  0059B4  6EDA               	movwf	fsr2h,c
 19695  0059B6  28DE               	incf	postinc2,w,c
 19696  0059B8  E042               	bz	l13190
 19697                           
 19698                           ; BSR set to: 0
 19699                           ;lorawan.c: 2141: {
 19700                           ;lorawan.c: 2142: if((macCommandLength + macEndDevCmdReplyLen[loRa.macCommands[i].receiv
      +                          edCid - 2]) <= 0x0F)
 19701  0059BA  0EFE               	movlw	254
 19702  0059BC  6F64               	movwf	??_CountfOptsLength& (0+255),b
 19703  0059BE  6965               	setf	(??_CountfOptsLength+1)& (0+255),b
 19704  0059C0  516B               	movf	CountfOptsLength@i& (0+255),w,b
 19705  0059C2  0D02               	mullw	2
 19706  0059C4  0EA8               	movlw	low (_loRa+168)
 19707  0059C6  24F3               	addwf	prodl,w,c
 19708  0059C8  6ED9               	movwf	fsr2l,c
 19709  0059CA  0E02               	movlw	high (_loRa+168)
 19710  0059CC  20F4               	addwfc	prodh,w,c
 19711  0059CE  6EDA               	movwf	fsr2h,c
 19712  0059D0  50DF               	movf	indf2,w,c
 19713  0059D2  6F66               	movwf	(??_CountfOptsLength+2)& (0+255),b
 19714  0059D4  6B67               	clrf	(??_CountfOptsLength+3)& (0+255),b
 19715  0059D6  5164               	movf	??_CountfOptsLength& (0+255),w,b
 19716  0059D8  2766               	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 19717  0059DA  5165               	movf	(??_CountfOptsLength+1)& (0+255),w,b
 19718  0059DC  2367               	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 19719  0059DE  0E94               	movlw	low _macEndDevCmdReplyLen
 19720  0059E0  2566               	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 19721  0059E2  6EF6               	movwf	tblptrl,c
 19722  0059E4  0E7F               	movlw	high _macEndDevCmdReplyLen
 19723  0059E6  2167               	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 19724  0059E8  6EF7               	movwf	tblptrh,c
 19725  0059EA                     	if	0	;There are less than 3 active tblptr bytes
 19726  0059EA                     	endif
 19727  0059EA  0008               	tblrd		*
 19728  0059EC  50F5               	movf	tablat,w,c
 19729  0059EE  C06A  F068         	movff	CountfOptsLength@macCommandLength,??_CountfOptsLength+4
 19730  0059F2  6B69               	clrf	(??_CountfOptsLength+5)& (0+255),b
 19731  0059F4  2768               	addwf	(??_CountfOptsLength+4)& (0+255),f,b
 19732  0059F6  0E00               	movlw	0
 19733  0059F8  2369               	addwfc	(??_CountfOptsLength+5)& (0+255),f,b
 19734  0059FA  BF69               	btfsc	(??_CountfOptsLength+5)& (0+255),7,b
 19735  0059FC  D005               	goto	l13188
 19736  0059FE  5169               	movf	(??_CountfOptsLength+5)& (0+255),w,b
 19737  005A00  E124               	bnz	l13194
 19738  005A02  0E10               	movlw	16
 19739  005A04  5D68               	subwf	(??_CountfOptsLength+4)& (0+255),w,b
 19740  005A06  E221               	bc	l13194
 19741  005A08                     l13188:
 19742                           
 19743                           ; BSR set to: 0
 19744                           ;lorawan.c: 2143: {
 19745                           ;lorawan.c: 2144: macCommandLength += macEndDevCmdReplyLen[loRa.macCommands[i].receivedC
      +                          id - 2];
 19746  005A08  0EFE               	movlw	254
 19747  005A0A  6F64               	movwf	??_CountfOptsLength& (0+255),b
 19748  005A0C  6965               	setf	(??_CountfOptsLength+1)& (0+255),b
 19749  005A0E  516B               	movf	CountfOptsLength@i& (0+255),w,b
 19750  005A10  0D02               	mullw	2
 19751  005A12  0EA8               	movlw	low (_loRa+168)
 19752  005A14  24F3               	addwf	prodl,w,c
 19753  005A16  6ED9               	movwf	fsr2l,c
 19754  005A18  0E02               	movlw	high (_loRa+168)
 19755  005A1A  20F4               	addwfc	prodh,w,c
 19756  005A1C  6EDA               	movwf	fsr2h,c
 19757  005A1E  50DF               	movf	indf2,w,c
 19758  005A20  6F66               	movwf	(??_CountfOptsLength+2)& (0+255),b
 19759  005A22  6B67               	clrf	(??_CountfOptsLength+3)& (0+255),b
 19760  005A24  5164               	movf	??_CountfOptsLength& (0+255),w,b
 19761  005A26  2766               	addwf	(??_CountfOptsLength+2)& (0+255),f,b
 19762  005A28  5165               	movf	(??_CountfOptsLength+1)& (0+255),w,b
 19763  005A2A  2367               	addwfc	(??_CountfOptsLength+3)& (0+255),f,b
 19764  005A2C  0E94               	movlw	low _macEndDevCmdReplyLen
 19765  005A2E  2566               	addwf	(??_CountfOptsLength+2)& (0+255),w,b
 19766  005A30  6EF6               	movwf	tblptrl,c
 19767  005A32  0E7F               	movlw	high _macEndDevCmdReplyLen
 19768  005A34  2167               	addwfc	(??_CountfOptsLength+3)& (0+255),w,b
 19769  005A36  6EF7               	movwf	tblptrh,c
 19770  005A38                     	if	0	;There are less than 3 active tblptr bytes
 19771  005A38                     	endif
 19772  005A38  0008               	tblrd		*
 19773  005A3A  50F5               	movf	tablat,w,c
 19774  005A3C  276A               	addwf	CountfOptsLength@macCommandLength& (0+255),f,b
 19775  005A3E                     l13190:
 19776                           
 19777                           ; BSR set to: 0
 19778  005A3E  2B6B               	incf	CountfOptsLength@i& (0+255),f,b
 19779  005A40                     l13192:
 19780                           
 19781                           ; BSR set to: 0
 19782  005A40  0102               	movlb	2	; () banked
 19783  005A42  51A7               	movf	(_loRa+167)& (0+255),w,b
 19784  005A44  0100               	movlb	0	; () banked
 19785  005A46  5D6B               	subwf	CountfOptsLength@i& (0+255),w,b
 19786  005A48  E3AE               	bnc	l13184
 19787  005A4A                     l13194:
 19788                           
 19789                           ; BSR set to: 0
 19790                           ;lorawan.c: 2149: }
 19791                           ;lorawan.c: 2150: }
 19792                           ;lorawan.c: 2151: }
 19793                           ;lorawan.c: 2153: return macCommandLength;
 19794  005A4A  516A               	movf	CountfOptsLength@macCommandLength& (0+255),w,b
 19795                           
 19796                           ; BSR set to: 0
 19797  005A4C  0012               	return		;funcret
 19798  005A4E                     __end_of_CountfOptsLength:
 19799                           	opt stack 0
 19800                           tosu	equ	0xFFF
 19801                           tosh	equ	0xFFE
 19802                           tosl	equ	0xFFD
 19803                           pclath	equ	0xFFA
 19804                           tblptru	equ	0xFF8
 19805                           tblptrh	equ	0xFF7
 19806                           tblptrl	equ	0xFF6
 19807                           tablat	equ	0xFF5
 19808                           prodh	equ	0xFF4
 19809                           prodl	equ	0xFF3
 19810                           intcon	equ	0xFF2
 19811                           indf0	equ	0xFEF
 19812                           postinc0	equ	0xFEE
 19813                           fsr0h	equ	0xFEA
 19814                           fsr0l	equ	0xFE9
 19815                           wreg	equ	0xFE8
 19816                           postinc1	equ	0xFE6
 19817                           postdec1	equ	0xFE5
 19818                           plusw1	equ	0xFE3
 19819                           fsr1h	equ	0xFE2
 19820                           fsr1l	equ	0xFE1
 19821                           indf2	equ	0xFDF
 19822                           postinc2	equ	0xFDE
 19823                           postdec2	equ	0xFDD
 19824                           plusw2	equ	0xFDB
 19825                           fsr2h	equ	0xFDA
 19826                           fsr2l	equ	0xFD9
 19827                           status	equ	0xFD8
 19828                           
 19829 ;; *************** function _ExtractMic *****************
 19830 ;; Defined at:
 19831 ;;		line 2187 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19832 ;; Parameters:    Size  Location     Type
 19833 ;;  buffer          2   14[BANK0 ] PTR unsigned char 
 19834 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 19835 ;;  bufferLength    1   16[BANK0 ] unsigned char 
 19836 ;; Auto vars:     Size  Location     Type
 19837 ;;  mic             4   20[BANK0 ] unsigned long 
 19838 ;; Return value:  Size  Location     Type
 19839 ;;                  4   14[BANK0 ] unsigned long 
 19840 ;; Registers used:
 19841 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19842 ;; Tracked objects:
 19843 ;;		On entry : F/0
 19844 ;;		On exit  : F/0
 19845 ;;		Unchanged: 0/0
 19846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19847 ;;      Params:         0       4       0       0       0       0       0       0       0
 19848 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19849 ;;      Temps:          0       2       0       0       0       0       0       0       0
 19850 ;;      Totals:         0      10       0       0       0       0       0       0       0
 19851 ;;Total ram usage:       10 bytes
 19852 ;; Hardware stack levels used:    1
 19853 ;; Hardware stack levels required when called:    8
 19854 ;; This function calls:
 19855 ;;		_memcpy
 19856 ;; This function is called by:
 19857 ;;		_LORAWAN_RxDone
 19858 ;; This function uses a non-reentrant model
 19859 ;;
 19860                           
 19861                           	psect	text100
 19862  006D10                     __ptext100:
 19863                           	opt stack 0
 19864  006D10                     _ExtractMic:
 19865                           	opt stack 18
 19866                           
 19867                           ; BSR set to: 0
 19868                           ;lorawan.c: 2189: uint32_t mic = 0;
 19869                           
 19870                           ; BSR set to: 0
 19871                           ;incstack = 0
 19872  006D10  6B74               	clrf	ExtractMic@mic& (0+255),b
 19873  006D12  6B75               	clrf	(ExtractMic@mic+1)& (0+255),b
 19874  006D14  6B76               	clrf	(ExtractMic@mic+2)& (0+255),b
 19875  006D16  6B77               	clrf	(ExtractMic@mic+3)& (0+255),b
 19876                           
 19877                           ; BSR set to: 0
 19878                           ;lorawan.c: 2190: memcpy (&mic, &buffer[bufferLength - 4], sizeof (mic));
 19879  006D18  0E74               	movlw	low ExtractMic@mic
 19880  006D1A  6F64               	movwf	memcpy@d1& (0+255),b
 19881  006D1C  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 19882  006D1E  5170               	movf	ExtractMic@bufferLength& (0+255),w,b
 19883  006D20  256E               	addwf	ExtractMic@buffer& (0+255),w,b
 19884  006D22  6F72               	movwf	??_ExtractMic& (0+255),b
 19885  006D24  0E00               	movlw	0
 19886  006D26  216F               	addwfc	(ExtractMic@buffer+1)& (0+255),w,b
 19887  006D28  6F73               	movwf	(??_ExtractMic+1)& (0+255),b
 19888  006D2A  0EFC               	movlw	252
 19889  006D2C  2572               	addwf	??_ExtractMic& (0+255),w,b
 19890  006D2E  6F66               	movwf	memcpy@s1& (0+255),b
 19891  006D30  0EFF               	movlw	255
 19892  006D32  2173               	addwfc	(??_ExtractMic+1)& (0+255),w,b
 19893  006D34  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 19894  006D36  6B69               	clrf	(memcpy@n+1)& (0+255),b
 19895  006D38  0E04               	movlw	4
 19896  006D3A  6F68               	movwf	memcpy@n& (0+255),b
 19897  006D3C  EC73  F034         	call	_memcpy	;wreg free
 19898                           
 19899                           ; BSR set to: 0
 19900                           ;lorawan.c: 2191: return mic;
 19901  006D40  C074  F06E         	movff	ExtractMic@mic,?_ExtractMic
 19902  006D44  C075  F06F         	movff	ExtractMic@mic+1,?_ExtractMic+1
 19903  006D48  C076  F070         	movff	ExtractMic@mic+2,?_ExtractMic+2
 19904  006D4C  C077  F071         	movff	ExtractMic@mic+3,?_ExtractMic+3
 19905                           
 19906                           ; BSR set to: 0
 19907  006D50  0012               	return		;funcret
 19908  006D52                     __end_of_ExtractMic:
 19909                           	opt stack 0
 19910                           tosu	equ	0xFFF
 19911                           tosh	equ	0xFFE
 19912                           tosl	equ	0xFFD
 19913                           pclath	equ	0xFFA
 19914                           tblptru	equ	0xFF8
 19915                           tblptrh	equ	0xFF7
 19916                           tblptrl	equ	0xFF6
 19917                           tablat	equ	0xFF5
 19918                           prodh	equ	0xFF4
 19919                           prodl	equ	0xFF3
 19920                           intcon	equ	0xFF2
 19921                           indf0	equ	0xFEF
 19922                           postinc0	equ	0xFEE
 19923                           fsr0h	equ	0xFEA
 19924                           fsr0l	equ	0xFE9
 19925                           wreg	equ	0xFE8
 19926                           postinc1	equ	0xFE6
 19927                           postdec1	equ	0xFE5
 19928                           plusw1	equ	0xFE3
 19929                           fsr1h	equ	0xFE2
 19930                           fsr1l	equ	0xFE1
 19931                           indf2	equ	0xFDF
 19932                           postinc2	equ	0xFDE
 19933                           postdec2	equ	0xFDD
 19934                           plusw2	equ	0xFDB
 19935                           fsr2h	equ	0xFDA
 19936                           fsr2l	equ	0xFD9
 19937                           status	equ	0xFD8
 19938                           
 19939 ;; *************** function _ComputeSessionKeys *****************
 19940 ;; Defined at:
 19941 ;;		line 2062 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 19942 ;; Parameters:    Size  Location     Type
 19943 ;;  joinAcceptBu    2   68[BANK0 ] PTR struct .
 19944 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 19945 ;; Auto vars:     Size  Location     Type
 19946 ;;		None
 19947 ;; Return value:  Size  Location     Type
 19948 ;;                  1    wreg      void 
 19949 ;; Registers used:
 19950 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19951 ;; Tracked objects:
 19952 ;;		On entry : D/0
 19953 ;;		On exit  : F/0
 19954 ;;		Unchanged: 0/0
 19955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19956 ;;      Params:         0       2       0       0       0       0       0       0       0
 19957 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19958 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19959 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19960 ;;Total ram usage:        2 bytes
 19961 ;; Hardware stack levels used:    1
 19962 ;; Hardware stack levels required when called:   10
 19963 ;; This function calls:
 19964 ;;		_AESEncodeLoRa
 19965 ;;		_PrepareSessionKeys
 19966 ;; This function is called by:
 19967 ;;		_LORAWAN_RxDone
 19968 ;; This function uses a non-reentrant model
 19969 ;;
 19970                           
 19971                           	psect	text101
 19972  005EF6                     __ptext101:
 19973                           	opt stack 0
 19974  005EF6                     _ComputeSessionKeys:
 19975                           	opt stack 16
 19976                           
 19977                           ;lorawan.c: 2064: PrepareSessionKeys(loRa.activationParameters.applicationSessionKey, jo
      +                          inAcceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 19978                           
 19979                           ; BSR set to: 0
 19980                           ;incstack = 0
 19981  005EF6  0E32               	movlw	low (_loRa+50)
 19982  005EF8  0100               	movlb	0	; () banked
 19983  005EFA  6F6E               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 19984  005EFC  0E02               	movlw	high (_loRa+50)
 19985  005EFE  6F6F               	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 19986  005F00  29A4               	incf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 19987  005F02  6F70               	movwf	PrepareSessionKeys@appNonce& (0+255),b
 19988  005F04  0E00               	movlw	0
 19989  005F06  21A5               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 19990  005F08  6F71               	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 19991  005F0A  0E04               	movlw	4
 19992  005F0C  25A4               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 19993  005F0E  6F72               	movwf	PrepareSessionKeys@networkId& (0+255),b
 19994  005F10  0E00               	movlw	0
 19995  005F12  21A5               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 19996  005F14  6F73               	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 19997  005F16  ECF9  F02F         	call	_PrepareSessionKeys	;wreg free
 19998                           
 19999                           ; BSR set to: 0
 20000                           ;lorawan.c: 2065: loRa.activationParameters.applicationSessionKey[0] = 0x02;
 20001  005F1A  0E02               	movlw	2
 20002  005F1C  0102               	movlb	2	; () banked
 20003  005F1E  6F32               	movwf	(_loRa+50)& (0+255),b
 20004                           
 20005                           ; BSR set to: 2
 20006                           ;lorawan.c: 2066: AESEncodeLoRa(loRa.activationParameters.applicationSessionKey, loRa.ac
      +                          tivationParameters.applicationKey);
 20007  005F20  0E32               	movlw	low (_loRa+50)
 20008  005F22  0100               	movlb	0	; () banked
 20009  005F24  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 20010  005F26  0E02               	movlw	high (_loRa+50)
 20011  005F28  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 20012  005F2A  0E42               	movlw	low (_loRa+66)
 20013  005F2C  6F92               	movwf	AESEncodeLoRa@key& (0+255),b
 20014  005F2E  0E02               	movlw	high (_loRa+66)
 20015  005F30  6F93               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 20016  005F32  EC89  F039         	call	_AESEncodeLoRa	;wreg free
 20017                           
 20018                           ; BSR set to: 0
 20019                           ;lorawan.c: 2068: PrepareSessionKeys(loRa.activationParameters.networkSessionKey, joinAc
      +                          ceptBuffer->members.appNonce, joinAcceptBuffer->members.networkId);
 20020  005F36  0E22               	movlw	low (_loRa+34)
 20021  005F38  6F6E               	movwf	PrepareSessionKeys@sessionKey& (0+255),b
 20022  005F3A  0E02               	movlw	high (_loRa+34)
 20023  005F3C  6F6F               	movwf	(PrepareSessionKeys@sessionKey+1)& (0+255),b
 20024  005F3E  29A4               	incf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 20025  005F40  6F70               	movwf	PrepareSessionKeys@appNonce& (0+255),b
 20026  005F42  0E00               	movlw	0
 20027  005F44  21A5               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 20028  005F46  6F71               	movwf	(PrepareSessionKeys@appNonce+1)& (0+255),b
 20029  005F48  0E04               	movlw	4
 20030  005F4A  25A4               	addwf	ComputeSessionKeys@joinAcceptBuffer& (0+255),w,b
 20031  005F4C  6F72               	movwf	PrepareSessionKeys@networkId& (0+255),b
 20032  005F4E  0E00               	movlw	0
 20033  005F50  21A5               	addwfc	(ComputeSessionKeys@joinAcceptBuffer+1)& (0+255),w,b
 20034  005F52  6F73               	movwf	(PrepareSessionKeys@networkId+1)& (0+255),b
 20035  005F54  ECF9  F02F         	call	_PrepareSessionKeys	;wreg free
 20036                           
 20037                           ; BSR set to: 0
 20038                           ;lorawan.c: 2069: loRa.activationParameters.networkSessionKey[0] = 0x01;
 20039  005F58  0E01               	movlw	1
 20040  005F5A  0102               	movlb	2	; () banked
 20041  005F5C  6F22               	movwf	(_loRa+34)& (0+255),b
 20042                           
 20043                           ;lorawan.c: 2070: AESEncodeLoRa(loRa.activationParameters.networkSessionKey, loRa.activa
      +                          tionParameters.applicationKey);
 20044  005F5E  0E22               	movlw	low (_loRa+34)
 20045  005F60  0100               	movlb	0	; () banked
 20046  005F62  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 20047  005F64  0E02               	movlw	high (_loRa+34)
 20048  005F66  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 20049  005F68  0E42               	movlw	low (_loRa+66)
 20050  005F6A  6F92               	movwf	AESEncodeLoRa@key& (0+255),b
 20051  005F6C  0E02               	movlw	high (_loRa+66)
 20052  005F6E  6F93               	movwf	(AESEncodeLoRa@key+1)& (0+255),b
 20053  005F70  EF89  F039         	goto	_AESEncodeLoRa	;wreg free
 20054  005F74                     __end_of_ComputeSessionKeys:
 20055                           	opt stack 0
 20056                           tosu	equ	0xFFF
 20057                           tosh	equ	0xFFE
 20058                           tosl	equ	0xFFD
 20059                           pclath	equ	0xFFA
 20060                           tblptru	equ	0xFF8
 20061                           tblptrh	equ	0xFF7
 20062                           tblptrl	equ	0xFF6
 20063                           tablat	equ	0xFF5
 20064                           prodh	equ	0xFF4
 20065                           prodl	equ	0xFF3
 20066                           intcon	equ	0xFF2
 20067                           indf0	equ	0xFEF
 20068                           postinc0	equ	0xFEE
 20069                           fsr0h	equ	0xFEA
 20070                           fsr0l	equ	0xFE9
 20071                           wreg	equ	0xFE8
 20072                           postinc1	equ	0xFE6
 20073                           postdec1	equ	0xFE5
 20074                           plusw1	equ	0xFE3
 20075                           fsr1h	equ	0xFE2
 20076                           fsr1l	equ	0xFE1
 20077                           indf2	equ	0xFDF
 20078                           postinc2	equ	0xFDE
 20079                           postdec2	equ	0xFDD
 20080                           plusw2	equ	0xFDB
 20081                           fsr2h	equ	0xFDA
 20082                           fsr2l	equ	0xFD9
 20083                           status	equ	0xFD8
 20084                           
 20085 ;; *************** function _PrepareSessionKeys *****************
 20086 ;; Defined at:
 20087 ;;		line 2045 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20088 ;; Parameters:    Size  Location     Type
 20089 ;;  sessionKey      2   14[BANK0 ] PTR unsigned char 
 20090 ;;		 -> loRa.activationParameters(105), loRa(245), 
 20091 ;;  appNonce        2   16[BANK0 ] PTR unsigned char 
 20092 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20093 ;;  networkId       2   18[BANK0 ] PTR unsigned char 
 20094 ;;		 -> ComputeSessionKeys@joinAcceptBuffer(2), LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20095 ;; Auto vars:     Size  Location     Type
 20096 ;;  index           1   20[BANK0 ] unsigned char 
 20097 ;; Return value:  Size  Location     Type
 20098 ;;                  1    wreg      void 
 20099 ;; Registers used:
 20100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20101 ;; Tracked objects:
 20102 ;;		On entry : F/0
 20103 ;;		On exit  : F/0
 20104 ;;		Unchanged: 0/0
 20105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20106 ;;      Params:         0       6       0       0       0       0       0       0       0
 20107 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20108 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20109 ;;      Totals:         0       7       0       0       0       0       0       0       0
 20110 ;;Total ram usage:        7 bytes
 20111 ;; Hardware stack levels used:    1
 20112 ;; Hardware stack levels required when called:    8
 20113 ;; This function calls:
 20114 ;;		_memcpy
 20115 ;;		_memset
 20116 ;; This function is called by:
 20117 ;;		_ComputeSessionKeys
 20118 ;; This function uses a non-reentrant model
 20119 ;;
 20120                           
 20121                           	psect	text102
 20122  005FF2                     __ptext102:
 20123                           	opt stack 0
 20124  005FF2                     _PrepareSessionKeys:
 20125                           	opt stack 17
 20126                           
 20127                           ; BSR set to: 0
 20128                           ;lorawan.c: 2047: uint8_t index = 0;
 20129                           
 20130                           ; BSR set to: 0
 20131                           ;incstack = 0
 20132  005FF2  6B74               	clrf	PrepareSessionKeys@index& (0+255),b
 20133                           
 20134                           ; BSR set to: 0
 20135                           ;lorawan.c: 2049: memset (&sessionKey[index], 0, sizeof(aesBuffer));
 20136  005FF4  C06E  F064         	movff	PrepareSessionKeys@sessionKey,memset@p1
 20137  005FF8  C06F  F065         	movff	PrepareSessionKeys@sessionKey+1,memset@p1+1
 20138  005FFC  6B67               	clrf	(memset@c+1)& (0+255),b
 20139  005FFE  6B66               	clrf	memset@c& (0+255),b
 20140  006000  6B69               	clrf	(memset@n+1)& (0+255),b
 20141  006002  0E10               	movlw	16
 20142  006004  6F68               	movwf	memset@n& (0+255),b
 20143  006006  EC60  F039         	call	_memset	;wreg free
 20144                           
 20145                           ; BSR set to: 0
 20146                           ;lorawan.c: 2050: index ++;
 20147  00600A  2B74               	incf	PrepareSessionKeys@index& (0+255),f,b
 20148                           
 20149                           ; BSR set to: 0
 20150                           ;lorawan.c: 2052: memcpy(&sessionKey[index], appNonce, 3);
 20151  00600C  5174               	movf	PrepareSessionKeys@index& (0+255),w,b
 20152  00600E  256E               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 20153  006010  6F64               	movwf	memcpy@d1& (0+255),b
 20154  006012  0E00               	movlw	0
 20155  006014  216F               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 20156  006016  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 20157  006018  C070  F066         	movff	PrepareSessionKeys@appNonce,memcpy@s1
 20158  00601C  C071  F067         	movff	PrepareSessionKeys@appNonce+1,memcpy@s1+1
 20159  006020  6B69               	clrf	(memcpy@n+1)& (0+255),b
 20160  006022  0E03               	movlw	3
 20161  006024  6F68               	movwf	memcpy@n& (0+255),b
 20162  006026  EC73  F034         	call	_memcpy	;wreg free
 20163                           
 20164                           ; BSR set to: 0
 20165                           ;lorawan.c: 2053: index = index + 3;
 20166  00602A  0E03               	movlw	3
 20167  00602C  2774               	addwf	PrepareSessionKeys@index& (0+255),f,b
 20168                           
 20169                           ; BSR set to: 0
 20170                           ;lorawan.c: 2055: memcpy(&sessionKey[index], networkId, 3);
 20171  00602E  5174               	movf	PrepareSessionKeys@index& (0+255),w,b
 20172  006030  256E               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 20173  006032  6F64               	movwf	memcpy@d1& (0+255),b
 20174  006034  0E00               	movlw	0
 20175  006036  216F               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 20176  006038  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 20177  00603A  C072  F066         	movff	PrepareSessionKeys@networkId,memcpy@s1
 20178  00603E  C073  F067         	movff	PrepareSessionKeys@networkId+1,memcpy@s1+1
 20179  006042  6B69               	clrf	(memcpy@n+1)& (0+255),b
 20180  006044  0E03               	movlw	3
 20181  006046  6F68               	movwf	memcpy@n& (0+255),b
 20182  006048  EC73  F034         	call	_memcpy	;wreg free
 20183                           
 20184                           ; BSR set to: 0
 20185                           ;lorawan.c: 2056: index = index + 3;
 20186  00604C  0E03               	movlw	3
 20187  00604E  2774               	addwf	PrepareSessionKeys@index& (0+255),f,b
 20188                           
 20189                           ; BSR set to: 0
 20190                           ;lorawan.c: 2058: memcpy(&sessionKey[index], &loRa.devNonce, sizeof(loRa.devNonce) );
 20191  006050  5174               	movf	PrepareSessionKeys@index& (0+255),w,b
 20192  006052  256E               	addwf	PrepareSessionKeys@sessionKey& (0+255),w,b
 20193  006054  6F64               	movwf	memcpy@d1& (0+255),b
 20194  006056  0E00               	movlw	0
 20195  006058  216F               	addwfc	(PrepareSessionKeys@sessionKey+1)& (0+255),w,b
 20196  00605A  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 20197  00605C  0ED2               	movlw	low (_loRa+210)
 20198  00605E  6F66               	movwf	memcpy@s1& (0+255),b
 20199  006060  0E02               	movlw	high (_loRa+210)
 20200  006062  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 20201  006064  6B69               	clrf	(memcpy@n+1)& (0+255),b
 20202  006066  0E02               	movlw	2
 20203  006068  6F68               	movwf	memcpy@n& (0+255),b
 20204  00606A  EF73  F034         	goto	_memcpy	;wreg free
 20205  00606E                     __end_of_PrepareSessionKeys:
 20206                           	opt stack 0
 20207                           tosu	equ	0xFFF
 20208                           tosh	equ	0xFFE
 20209                           tosl	equ	0xFFD
 20210                           pclath	equ	0xFFA
 20211                           tblptru	equ	0xFF8
 20212                           tblptrh	equ	0xFF7
 20213                           tblptrl	equ	0xFF6
 20214                           tablat	equ	0xFF5
 20215                           prodh	equ	0xFF4
 20216                           prodl	equ	0xFF3
 20217                           intcon	equ	0xFF2
 20218                           indf0	equ	0xFEF
 20219                           postinc0	equ	0xFEE
 20220                           fsr0h	equ	0xFEA
 20221                           fsr0l	equ	0xFE9
 20222                           wreg	equ	0xFE8
 20223                           postinc1	equ	0xFE6
 20224                           postdec1	equ	0xFE5
 20225                           plusw1	equ	0xFE3
 20226                           fsr1h	equ	0xFE2
 20227                           fsr1l	equ	0xFE1
 20228                           indf2	equ	0xFDF
 20229                           postinc2	equ	0xFDE
 20230                           postdec2	equ	0xFDD
 20231                           plusw2	equ	0xFDB
 20232                           fsr2h	equ	0xFDA
 20233                           fsr2l	equ	0xFD9
 20234                           status	equ	0xFD8
 20235                           
 20236 ;; *************** function _CheckMcastFlags *****************
 20237 ;; Defined at:
 20238 ;;		line 2097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20239 ;; Parameters:    Size  Location     Type
 20240 ;;  hdr             2    4[BANK0 ] PTR struct .
 20241 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20242 ;; Auto vars:     Size  Location     Type
 20243 ;;		None
 20244 ;; Return value:  Size  Location     Type
 20245 ;;                  1    wreg      unsigned char 
 20246 ;; Registers used:
 20247 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20248 ;; Tracked objects:
 20249 ;;		On entry : F/2
 20250 ;;		On exit  : D/0
 20251 ;;		Unchanged: 0/0
 20252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20253 ;;      Params:         0       2       0       0       0       0       0       0       0
 20254 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20255 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20256 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20257 ;;Total ram usage:        2 bytes
 20258 ;; Hardware stack levels used:    1
 20259 ;; Hardware stack levels required when called:    7
 20260 ;; This function calls:
 20261 ;;		Nothing
 20262 ;; This function is called by:
 20263 ;;		_LORAWAN_RxDone
 20264 ;; This function uses a non-reentrant model
 20265 ;;
 20266                           
 20267                           	psect	text103
 20268  0061DC                     __ptext103:
 20269                           	opt stack 0
 20270  0061DC                     _CheckMcastFlags:
 20271                           	opt stack 19
 20272                           
 20273                           ; BSR set to: 2
 20274                           ;lorawan.c: 2109: if ((0 != hdr->members.fCtrl.ack) || (0 != hdr->members.fCtrl.adrAckRe
      +                          q) || (FRAME_TYPE_DATA_UNCONFIRMED_DOWN != hdr->members.mhdr.bits.mType))
 20275                           
 20276                           ; BSR set to: 0
 20277                           ;incstack = 0
 20278  0061DC  0100               	movlb	0	; () banked
 20279  0061DE  EE20 F005          	lfsr	2,5
 20280  0061E2  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20281  0061E4  26D9               	addwf	fsr2l,f,c
 20282  0061E6  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20283  0061E8  22DA               	addwfc	fsr2h,f,c
 20284  0061EA  BADF               	btfsc	indf2,5,c
 20285  0061EC  0C00               	retlw	0
 20286                           
 20287                           ; BSR set to: 0
 20288  0061EE  EE20 F005          	lfsr	2,5
 20289  0061F2  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20290  0061F4  26D9               	addwf	fsr2l,f,c
 20291  0061F6  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20292  0061F8  22DA               	addwfc	fsr2h,f,c
 20293  0061FA  BCDF               	btfsc	indf2,6,c
 20294  0061FC  0C00               	retlw	0
 20295                           
 20296                           ; BSR set to: 0
 20297  0061FE  C064  FFD9         	movff	CheckMcastFlags@hdr,fsr2l
 20298  006202  C065  FFDA         	movff	CheckMcastFlags@hdr+1,fsr2h
 20299  006206  38DF               	swapf	223,w,c
 20300  006208  32E8               	rrcf	wreg,f,c
 20301  00620A  0B07               	andlw	7
 20302  00620C  0A03               	xorlw	3
 20303  00620E  E001               	bz	l14004
 20304                           
 20305                           ; BSR set to: 0
 20306                           ;lorawan.c: 2110: {
 20307                           ;lorawan.c: 2111: return 0;
 20308  006210  0C00               	retlw	0
 20309  006212                     l14004:
 20310                           
 20311                           ; BSR set to: 0
 20312                           ;lorawan.c: 2112: }
 20313                           ;lorawan.c: 2114: if (0 != hdr->members.fCtrl.fOptsLen)
 20314  006212  EE20 F005          	lfsr	2,5
 20315  006216  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20316  006218  26D9               	addwf	fsr2l,f,c
 20317  00621A  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20318  00621C  22DA               	addwfc	fsr2h,f,c
 20319  00621E  50DF               	movf	223,w,c
 20320  006220  0B0F               	andlw	15
 20321  006222  E001               	bz	l14012
 20322  006224  0C00               	retlw	0
 20323  006226                     l14012:
 20324                           
 20325                           ; BSR set to: 0
 20326                           ;lorawan.c: 2118: else
 20327                           ;lorawan.c: 2119: {
 20328                           ;lorawan.c: 2120: if ( 0 == *(((uint8_t *)hdr) + 8))
 20329  006226  EE20 F008          	lfsr	2,8
 20330  00622A  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20331  00622C  26D9               	addwf	fsr2l,f,c
 20332  00622E  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20333  006230  22DA               	addwfc	fsr2h,f,c
 20334  006232  50DF               	movf	indf2,w,c
 20335  006234  E101               	bnz	l14018
 20336  006236  0C00               	retlw	0
 20337  006238                     l14018:
 20338                           
 20339                           ; BSR set to: 0
 20340                           ;lorawan.c: 2123: }
 20341                           ;lorawan.c: 2124: }
 20342                           ;lorawan.c: 2126: if (hdr->members.fCtrl.fPending == 1)
 20343  006238  EE20 F005          	lfsr	2,5
 20344  00623C  5164               	movf	CheckMcastFlags@hdr& (0+255),w,b
 20345  00623E  26D9               	addwf	fsr2l,f,c
 20346  006240  5165               	movf	(CheckMcastFlags@hdr+1)& (0+255),w,b
 20347  006242  22DA               	addwfc	fsr2h,f,c
 20348  006244  A8DF               	btfss	indf2,4,c
 20349  006246  0C01               	retlw	1
 20350                           
 20351                           ; BSR set to: 0
 20352                           ;lorawan.c: 2127: {
 20353                           ;lorawan.c: 2128: loRa.lorawanMacStatus.fPending = 1;
 20354  006248  0102               	movlb	2	; () banked
 20355  00624A  8700               	bsf	_loRa& (0+255),3,b
 20356                           
 20357                           ;lorawan.c: 2129: }
 20358                           ;lorawan.c: 2131: return 1;
 20359  00624C  0C01               	retlw	1	;funcret
 20360  00624E                     __end_of_CheckMcastFlags:
 20361                           	opt stack 0
 20362                           tosu	equ	0xFFF
 20363                           tosh	equ	0xFFE
 20364                           tosl	equ	0xFFD
 20365                           pclath	equ	0xFFA
 20366                           tblptru	equ	0xFF8
 20367                           tblptrh	equ	0xFF7
 20368                           tblptrl	equ	0xFF6
 20369                           tablat	equ	0xFF5
 20370                           prodh	equ	0xFF4
 20371                           prodl	equ	0xFF3
 20372                           intcon	equ	0xFF2
 20373                           indf0	equ	0xFEF
 20374                           postinc0	equ	0xFEE
 20375                           fsr0h	equ	0xFEA
 20376                           fsr0l	equ	0xFE9
 20377                           wreg	equ	0xFE8
 20378                           postinc1	equ	0xFE6
 20379                           postdec1	equ	0xFE5
 20380                           plusw1	equ	0xFE3
 20381                           fsr1h	equ	0xFE2
 20382                           fsr1l	equ	0xFE1
 20383                           indf2	equ	0xFDF
 20384                           postinc2	equ	0xFDE
 20385                           postdec2	equ	0xFDD
 20386                           plusw2	equ	0xFDB
 20387                           fsr2h	equ	0xFDA
 20388                           fsr2l	equ	0xFD9
 20389                           status	equ	0xFD8
 20390                           
 20391 ;; *************** function _CheckFlags *****************
 20392 ;; Defined at:
 20393 ;;		line 2074 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 20394 ;; Parameters:    Size  Location     Type
 20395 ;;  hdr             2    4[BANK0 ] PTR struct .
 20396 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), 
 20397 ;; Auto vars:     Size  Location     Type
 20398 ;;		None
 20399 ;; Return value:  Size  Location     Type
 20400 ;;                  1    wreg      void 
 20401 ;; Registers used:
 20402 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20403 ;; Tracked objects:
 20404 ;;		On entry : F/2
 20405 ;;		On exit  : D/0
 20406 ;;		Unchanged: 0/0
 20407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20408 ;;      Params:         0       2       0       0       0       0       0       0       0
 20409 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20410 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20411 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20412 ;;Total ram usage:        2 bytes
 20413 ;; Hardware stack levels used:    1
 20414 ;; Hardware stack levels required when called:    7
 20415 ;; This function calls:
 20416 ;;		Nothing
 20417 ;; This function is called by:
 20418 ;;		_LORAWAN_RxDone
 20419 ;; This function uses a non-reentrant model
 20420 ;;
 20421                           
 20422                           	psect	text104
 20423  006720                     __ptext104:
 20424                           	opt stack 0
 20425  006720                     _CheckFlags:
 20426                           	opt stack 19
 20427                           
 20428                           ; BSR set to: 2
 20429                           ;lorawan.c: 2076: if (hdr->members.fCtrl.adr == 1)
 20430                           
 20431                           ;incstack = 0
 20432  006720  0100               	movlb	0	; () banked
 20433  006722  EE20 F005          	lfsr	2,5
 20434  006726  5164               	movf	CheckFlags@hdr& (0+255),w,b
 20435  006728  26D9               	addwf	fsr2l,f,c
 20436  00672A  5165               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 20437  00672C  22DA               	addwfc	fsr2h,f,c
 20438  00672E  AEDF               	btfss	indf2,7,c
 20439  006730  D002               	goto	l14052
 20440                           
 20441                           ; BSR set to: 0
 20442                           ;lorawan.c: 2077: {
 20443                           ;lorawan.c: 2078: loRa.macStatus.adr = 1;
 20444  006732  0102               	movlb	2	; () banked
 20445  006734  8D02               	bsf	(_loRa+2)& (0+255),6,b
 20446  006736                     l14052:
 20447                           
 20448                           ;lorawan.c: 2079: }
 20449                           ;lorawan.c: 2081: if (hdr->members.fCtrl.fPending == 1)
 20450  006736  0100               	movlb	0	; () banked
 20451  006738  EE20 F005          	lfsr	2,5
 20452  00673C  5164               	movf	CheckFlags@hdr& (0+255),w,b
 20453  00673E  26D9               	addwf	fsr2l,f,c
 20454  006740  5165               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 20455  006742  22DA               	addwfc	fsr2h,f,c
 20456  006744  A8DF               	btfss	indf2,4,c
 20457  006746  D002               	goto	l14056
 20458                           
 20459                           ; BSR set to: 0
 20460                           ;lorawan.c: 2082: {
 20461                           ;lorawan.c: 2083: loRa.lorawanMacStatus.fPending = 1;
 20462  006748  0102               	movlb	2	; () banked
 20463  00674A  8700               	bsf	_loRa& (0+255),3,b
 20464  00674C                     l14056:
 20465                           
 20466                           ;lorawan.c: 2084: }
 20467                           ;lorawan.c: 2086: if (hdr->members.fCtrl.adrAckReq == 1)
 20468  00674C  0100               	movlb	0	; () banked
 20469  00674E  EE20 F005          	lfsr	2,5
 20470  006752  5164               	movf	CheckFlags@hdr& (0+255),w,b
 20471  006754  26D9               	addwf	fsr2l,f,c
 20472  006756  5165               	movf	(CheckFlags@hdr+1)& (0+255),w,b
 20473  006758  22DA               	addwfc	fsr2h,f,c
 20474  00675A  ACDF               	btfss	indf2,6,c
 20475  00675C  D002               	goto	l14060
 20476                           
 20477                           ; BSR set to: 0
 20478                           ;lorawan.c: 2087: {
 20479                           ;lorawan.c: 2088: loRa.lorawanMacStatus.adrAckRequest = 1;
 20480  00675E  0102               	movlb	2	; () banked
 20481  006760  8900               	bsf	_loRa& (0+255),4,b
 20482  006762                     l14060:
 20483                           
 20484                           ;lorawan.c: 2089: }
 20485                           ;lorawan.c: 2091: if (hdr->members.mhdr.bits.mType == FRAME_TYPE_DATA_CONFIRMED_DOWN)
 20486  006762  C064  FFD9         	movff	CheckFlags@hdr,fsr2l
 20487  006766  C065  FFDA         	movff	CheckFlags@hdr+1,fsr2h
 20488  00676A  0100               	movlb	0	; () banked
 20489  00676C  38DF               	swapf	223,w,c
 20490  00676E  32E8               	rrcf	wreg,f,c
 20491  006770  0B07               	andlw	7
 20492  006772  0A05               	xorlw	5
 20493  006774  A4D8               	btfss	status,2,c
 20494  006776  0012               	return	
 20495                           
 20496                           ; BSR set to: 0
 20497                           ;lorawan.c: 2092: {
 20498                           ;lorawan.c: 2093: loRa.lorawanMacStatus.ackRequiredFromNextUplinkMessage = 1;
 20499  006778  0102               	movlb	2	; () banked
 20500  00677A  8300               	bsf	_loRa& (0+255),1,b
 20501  00677C  0012               	return		;funcret
 20502  00677E                     __end_of_CheckFlags:
 20503                           	opt stack 0
 20504                           tosu	equ	0xFFF
 20505                           tosh	equ	0xFFE
 20506                           tosl	equ	0xFFD
 20507                           pclath	equ	0xFFA
 20508                           tblptru	equ	0xFF8
 20509                           tblptrh	equ	0xFF7
 20510                           tblptrl	equ	0xFF6
 20511                           tablat	equ	0xFF5
 20512                           prodh	equ	0xFF4
 20513                           prodl	equ	0xFF3
 20514                           intcon	equ	0xFF2
 20515                           indf0	equ	0xFEF
 20516                           postinc0	equ	0xFEE
 20517                           fsr0h	equ	0xFEA
 20518                           fsr0l	equ	0xFE9
 20519                           wreg	equ	0xFE8
 20520                           postinc1	equ	0xFE6
 20521                           postdec1	equ	0xFE5
 20522                           plusw1	equ	0xFE3
 20523                           fsr1h	equ	0xFE2
 20524                           fsr1l	equ	0xFE1
 20525                           indf2	equ	0xFDF
 20526                           postinc2	equ	0xFDE
 20527                           postdec2	equ	0xFDD
 20528                           plusw2	equ	0xFDB
 20529                           fsr2h	equ	0xFDA
 20530                           fsr2l	equ	0xFD9
 20531                           status	equ	0xFD8
 20532                           
 20533 ;; *************** function _RADIO_FSKPacketSent *****************
 20534 ;; Defined at:
 20535 ;;		line 1093 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 20536 ;; Parameters:    Size  Location     Type
 20537 ;;		None
 20538 ;; Auto vars:     Size  Location     Type
 20539 ;;  timeOnAir       4  116[BANK0 ] unsigned long 
 20540 ;;  irqFlags        1  124[BANK0 ] unsigned char 
 20541 ;; Return value:  Size  Location     Type
 20542 ;;                  1    wreg      void 
 20543 ;; Registers used:
 20544 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20545 ;; Tracked objects:
 20546 ;;		On entry : F/0
 20547 ;;		On exit  : C/0
 20548 ;;		Unchanged: 0/0
 20549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20550 ;;      Params:         0       0       0       0       0       0       0       0       0
 20551 ;;      Locals:         0       9       0       0       0       0       0       0       0
 20552 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20553 ;;      Totals:         0      13       0       0       0       0       0       0       0
 20554 ;;Total ram usage:       13 bytes
 20555 ;; Hardware stack levels used:    1
 20556 ;; Hardware stack levels required when called:   15
 20557 ;; This function calls:
 20558 ;;		_LORAWAN_TxDone
 20559 ;;		_RADIO_RegisterRead
 20560 ;;		_RADIO_WriteMode
 20561 ;;		_SwTimerReadValue
 20562 ;;		_SwTimerStop
 20563 ;; This function is called by:
 20564 ;;		_RADIO_DIO0
 20565 ;; This function uses a non-reentrant model
 20566 ;;
 20567                           
 20568                           	psect	text105
 20569  003A50                     __ptext105:
 20570                           	opt stack 0
 20571  003A50                     _RADIO_FSKPacketSent:
 20572                           	opt stack 13
 20573                           
 20574                           ; BSR set to: 0
 20575                           ;radio_driver_SX1276.c: 1095: uint8_t irqFlags;
 20576                           ;radio_driver_SX1276.c: 1096: uint32_t timeOnAir;
 20577                           ;radio_driver_SX1276.c: 1098: irqFlags = RADIO_RegisterRead(0x3F);
 20578                           
 20579                           ;incstack = 0
 20580  003A50  0E3F               	movlw	63
 20581  003A52  ECB0  F039         	call	_RADIO_RegisterRead
 20582  003A56  6FDC               	movwf	RADIO_FSKPacketSent@irqFlags& (0+255),b
 20583                           
 20584                           ; BSR set to: 0
 20585                           ;radio_driver_SX1276.c: 1099: if ((1<<(3)) == (irqFlags & (1<<(3))))
 20586  003A58  A7DC               	btfss	RADIO_FSKPacketSent@irqFlags& (0+255),3,b
 20587  003A5A  0012               	return	
 20588                           
 20589                           ; BSR set to: 0
 20590                           ;radio_driver_SX1276.c: 1100: {
 20591                           ;radio_driver_SX1276.c: 1101: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation,
      +                           0);
 20592  003A5C  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 20593  003A60  0E00               	movlw	0
 20594  003A62  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 20595  003A64  EC6B  F029         	call	_RADIO_WriteMode
 20596                           
 20597                           ;radio_driver_SX1276.c: 1102: RadioConfiguration.flags &= ~(1 << (0));
 20598  003A68  0101               	movlb	1	; () banked
 20599  003A6A  9198               	bcf	(_RadioConfiguration+35)& (0+255),0,b
 20600                           
 20601                           ; BSR set to: 1
 20602                           ;radio_driver_SX1276.c: 1104: SwTimerStop(RadioConfiguration.watchdogTimerId);
 20603  003A6C  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 20604  003A6E  ECF3  F03A         	call	_SwTimerStop
 20605                           
 20606                           ; BSR set to: 0
 20607                           ;radio_driver_SX1276.c: 1106: if ((RadioConfiguration.flags & (1 << (4))) == 0)
 20608  003A72  0101               	movlb	1	; () banked
 20609  003A74  B998               	btfsc	(_RadioConfiguration+35)& (0+255),4,b
 20610  003A76  0012               	return	
 20611                           
 20612                           ; BSR set to: 1
 20613                           ;radio_driver_SX1276.c: 1107: {
 20614                           ;radio_driver_SX1276.c: 1108: timeOnAir = ((uint32_t)20000) - ((SwTimerReadValue(RadioCo
      +                          nfiguration.timeOnAirTimerId)) < 0x00DFAC1FUL ? ( (((uint32_t)(SwTimerReadValue(RadioCon
      +                          figuration.timeOnAirTimerId))) * 125UL) >> (12) ) : ( (((uint32_t)(SwTimerReadValue(Radi
      +                          oConfiguration.t
 20615  003A78  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20616  003A7A  EC0B  F037         	call	_SwTimerReadValue
 20617  003A7E  518E               	movf	(?_SwTimerReadValue+3)& (0+255),w,b
 20618  003A80  E107               	bnz	u17440
 20619  003A82  0E1F               	movlw	31
 20620  003A84  5D8B               	subwf	?_SwTimerReadValue& (0+255),w,b
 20621  003A86  0EAC               	movlw	172
 20622  003A88  598C               	subwfb	(?_SwTimerReadValue+1)& (0+255),w,b
 20623  003A8A  0EDF               	movlw	223
 20624  003A8C  598D               	subwfb	(?_SwTimerReadValue+2)& (0+255),w,b
 20625  003A8E  E346               	bnc	l14952
 20626  003A90                     u17440:
 20627                           
 20628                           ; BSR set to: 0
 20629  003A90  0101               	movlb	1	; () banked
 20630  003A92  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20631  003A94  EC0B  F037         	call	_SwTimerReadValue
 20632  003A98  0E0D               	movlw	13
 20633  003A9A  D005               	goto	u17450
 20634  003A9C                     u17455:
 20635  003A9C  90D8               	bcf	status,0,c
 20636  003A9E  338E               	rrcf	(?_SwTimerReadValue+3)& (0+255),f,b
 20637  003AA0  338D               	rrcf	(?_SwTimerReadValue+2)& (0+255),f,b
 20638  003AA2  338C               	rrcf	(?_SwTimerReadValue+1)& (0+255),f,b
 20639  003AA4  338B               	rrcf	?_SwTimerReadValue& (0+255),f,b
 20640  003AA6                     u17450:
 20641  003AA6  2EE8               	decfsz	wreg,f,c
 20642  003AA8  D7F9               	goto	u17455
 20643  003AAA  0E7D               	movlw	125
 20644  003AAC  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20645  003AAE  CFF3 F0D0          	movff	prodl,??_RADIO_FSKPacketSent
 20646  003AB2  CFF4 F0D1          	movff	prodh,??_RADIO_FSKPacketSent+1
 20647  003AB6  6BD2               	clrf	(??_RADIO_FSKPacketSent+2)& (0+255),b
 20648  003AB8  6BD3               	clrf	(??_RADIO_FSKPacketSent+3)& (0+255),b
 20649  003ABA  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20650  003ABC  50F3               	movf	prodl,w,c
 20651  003ABE  27D1               	addwf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 20652  003AC0  50F4               	movf	prodh,w,c
 20653  003AC2  23D2               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20654  003AC4  0E00               	movlw	0
 20655  003AC6  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20656  003AC8  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20657  003ACA  50F3               	movf	prodl,w,c
 20658  003ACC  27D1               	addwf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 20659  003ACE  50F4               	movf	prodh,w,c
 20660  003AD0  23D2               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20661  003AD2  0E00               	movlw	0
 20662  003AD4  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20663  003AD6  0E7D               	movlw	125
 20664  003AD8  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
 20665  003ADA  50F3               	movf	prodl,w,c
 20666  003ADC  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20667  003ADE  50F4               	movf	prodh,w,c
 20668  003AE0  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20669  003AE2  0E00               	movlw	0
 20670  003AE4  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20671  003AE6  50F3               	movf	prodl,w,c
 20672  003AE8  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20673  003AEA  50F4               	movf	prodh,w,c
 20674  003AEC  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20675  003AEE  0E00               	movlw	0
 20676  003AF0  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20677  003AF2  50F3               	movf	prodl,w,c
 20678  003AF4  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20679  003AF6  50F4               	movf	prodh,w,c
 20680  003AF8  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20681  003AFA  0E7D               	movlw	125
 20682  003AFC  038E               	mulwf	(?_SwTimerReadValue+3)& (0+255),b
 20683  003AFE  50F3               	movf	prodl,w,c
 20684  003B00  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20685  003B02  0E00               	movlw	0
 20686  003B04  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
 20687  003B06  50F3               	movf	prodl,w,c
 20688  003B08  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20689  003B0A  0E00               	movlw	0
 20690  003B0C  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20691  003B0E  50F3               	movf	prodl,w,c
 20692  003B10  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20693  003B12  0E00               	movlw	0
 20694  003B14  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20695  003B16  50F3               	movf	prodl,w,c
 20696  003B18  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20697  003B1A  D045               	goto	L11
 20698  003B1C                     l14952:
 20699                           
 20700                           ; BSR set to: 0
 20701  003B1C  0101               	movlb	1	; () banked
 20702  003B1E  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20703  003B20  EC0B  F037         	call	_SwTimerReadValue
 20704  003B24  0E7D               	movlw	125
 20705  003B26  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20706  003B28  CFF3 F0D0          	movff	prodl,??_RADIO_FSKPacketSent
 20707  003B2C  CFF4 F0D1          	movff	prodh,??_RADIO_FSKPacketSent+1
 20708  003B30  6BD2               	clrf	(??_RADIO_FSKPacketSent+2)& (0+255),b
 20709  003B32  6BD3               	clrf	(??_RADIO_FSKPacketSent+3)& (0+255),b
 20710  003B34  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20711  003B36  50F3               	movf	prodl,w,c
 20712  003B38  27D1               	addwf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 20713  003B3A  50F4               	movf	prodh,w,c
 20714  003B3C  23D2               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20715  003B3E  0E00               	movlw	0
 20716  003B40  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20717  003B42  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20718  003B44  50F3               	movf	prodl,w,c
 20719  003B46  27D1               	addwf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 20720  003B48  50F4               	movf	prodh,w,c
 20721  003B4A  23D2               	addwfc	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20722  003B4C  0E00               	movlw	0
 20723  003B4E  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20724  003B50  0E7D               	movlw	125
 20725  003B52  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
 20726  003B54  50F3               	movf	prodl,w,c
 20727  003B56  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20728  003B58  50F4               	movf	prodh,w,c
 20729  003B5A  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20730  003B5C  0E00               	movlw	0
 20731  003B5E  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20732  003B60  50F3               	movf	prodl,w,c
 20733  003B62  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20734  003B64  50F4               	movf	prodh,w,c
 20735  003B66  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20736  003B68  0E00               	movlw	0
 20737  003B6A  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20738  003B6C  50F3               	movf	prodl,w,c
 20739  003B6E  27D2               	addwf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20740  003B70  50F4               	movf	prodh,w,c
 20741  003B72  23D3               	addwfc	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20742  003B74  0E7D               	movlw	125
 20743  003B76  038E               	mulwf	(?_SwTimerReadValue+3)& (0+255),b
 20744  003B78  50F3               	movf	prodl,w,c
 20745  003B7A  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20746  003B7C  0E00               	movlw	0
 20747  003B7E  038D               	mulwf	(?_SwTimerReadValue+2)& (0+255),b
 20748  003B80  50F3               	movf	prodl,w,c
 20749  003B82  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20750  003B84  0E00               	movlw	0
 20751  003B86  038C               	mulwf	(?_SwTimerReadValue+1)& (0+255),b
 20752  003B88  50F3               	movf	prodl,w,c
 20753  003B8A  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20754  003B8C  0E00               	movlw	0
 20755  003B8E  038B               	mulwf	?_SwTimerReadValue& (0+255),b
 20756  003B90  50F3               	movf	prodl,w,c
 20757  003B92  27D3               	addwf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20758  003B94  0E0D               	movlw	13
 20759  003B96  D005               	goto	u17460
 20760  003B98                     u17465:
 20761  003B98  90D8               	bcf	status,0,c
 20762  003B9A  33D3               	rrcf	(??_RADIO_FSKPacketSent+3)& (0+255),f,b
 20763  003B9C  33D2               	rrcf	(??_RADIO_FSKPacketSent+2)& (0+255),f,b
 20764  003B9E  33D1               	rrcf	(??_RADIO_FSKPacketSent+1)& (0+255),f,b
 20765  003BA0  33D0               	rrcf	??_RADIO_FSKPacketSent& (0+255),f,b
 20766  003BA2                     u17460:
 20767  003BA2  2EE8               	decfsz	wreg,f,c
 20768  003BA4  D7F9               	goto	u17465
 20769  003BA6                     L11:
 20770  003BA6  C0D0  F0D8         	movff	??_RADIO_FSKPacketSent,_RADIO_FSKPacketSent$1071
 20771  003BAA  C0D1  F0D9         	movff	??_RADIO_FSKPacketSent+1,_RADIO_FSKPacketSent$1071+1
 20772  003BAE  C0D2  F0DA         	movff	??_RADIO_FSKPacketSent+2,_RADIO_FSKPacketSent$1071+2
 20773  003BB2  C0D3  F0DB         	movff	??_RADIO_FSKPacketSent+3,_RADIO_FSKPacketSent$1071+3
 20774                           
 20775                           ; BSR set to: 0
 20776  003BB6  51D8               	movf	_RADIO_FSKPacketSent$1071& (0+255),w,b
 20777  003BB8  0820               	sublw	32
 20778  003BBA  6FD4               	movwf	RADIO_FSKPacketSent@timeOnAir& (0+255),b
 20779  003BBC  0E4E               	movlw	78
 20780  003BBE  55D9               	subfwb	(_RADIO_FSKPacketSent$1071+1)& (0+255),w,b
 20781  003BC0  6FD5               	movwf	(RADIO_FSKPacketSent@timeOnAir+1)& (0+255),b
 20782  003BC2  0E00               	movlw	0
 20783  003BC4  55DA               	subfwb	(_RADIO_FSKPacketSent$1071+2)& (0+255),w,b
 20784  003BC6  6FD6               	movwf	(RADIO_FSKPacketSent@timeOnAir+2)& (0+255),b
 20785  003BC8  0E00               	movlw	0
 20786  003BCA  55DB               	subfwb	(_RADIO_FSKPacketSent$1071+3)& (0+255),w,b
 20787  003BCC  6FD7               	movwf	(RADIO_FSKPacketSent@timeOnAir+3)& (0+255),b
 20788                           
 20789                           ; BSR set to: 0
 20790                           ;radio_driver_SX1276.c: 1109: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 20791  003BCE  0101               	movlb	1	; () banked
 20792  003BD0  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 20793  003BD2  ECF3  F03A         	call	_SwTimerStop
 20794                           
 20795                           ; BSR set to: 0
 20796                           ;radio_driver_SX1276.c: 1110: LORAWAN_TxDone((uint16_t)timeOnAir);
 20797  003BD6  C0D4  F09E         	movff	RADIO_FSKPacketSent@timeOnAir,LORAWAN_TxDone@timeOnAir
 20798  003BDA  C0D5  F09F         	movff	RADIO_FSKPacketSent@timeOnAir+1,LORAWAN_TxDone@timeOnAir+1
 20799  003BDE  EF9A  F005         	goto	_LORAWAN_TxDone	;wreg free
 20800  003BE2                     __end_of_RADIO_FSKPacketSent:
 20801                           	opt stack 0
 20802                           tosu	equ	0xFFF
 20803                           tosh	equ	0xFFE
 20804                           tosl	equ	0xFFD
 20805                           pclath	equ	0xFFA
 20806                           tblptru	equ	0xFF8
 20807                           tblptrh	equ	0xFF7
 20808                           tblptrl	equ	0xFF6
 20809                           tablat	equ	0xFF5
 20810                           prodh	equ	0xFF4
 20811                           prodl	equ	0xFF3
 20812                           intcon	equ	0xFF2
 20813                           indf0	equ	0xFEF
 20814                           postinc0	equ	0xFEE
 20815                           fsr0h	equ	0xFEA
 20816                           fsr0l	equ	0xFE9
 20817                           wreg	equ	0xFE8
 20818                           postinc1	equ	0xFE6
 20819                           postdec1	equ	0xFE5
 20820                           plusw1	equ	0xFE3
 20821                           fsr1h	equ	0xFE2
 20822                           fsr1l	equ	0xFE1
 20823                           indf2	equ	0xFDF
 20824                           postinc2	equ	0xFDE
 20825                           postdec2	equ	0xFDD
 20826                           plusw2	equ	0xFDB
 20827                           fsr2h	equ	0xFDA
 20828                           fsr2l	equ	0xFD9
 20829                           status	equ	0xFD8
 20830                           
 20831 ;; *************** function _LORAWAN_TxDone *****************
 20832 ;; Defined at:
 20833 ;;		line 365 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 20834 ;; Parameters:    Size  Location     Type
 20835 ;;  timeOnAir       2   62[BANK0 ] unsigned int 
 20836 ;; Auto vars:     Size  Location     Type
 20837 ;;  minim           4  107[BANK0 ] unsigned long 
 20838 ;;  ticks           4  103[BANK0 ] unsigned long 
 20839 ;;  delta           4   99[BANK0 ] unsigned long 
 20840 ;;  i               1  111[BANK0 ] unsigned char 
 20841 ;;  found           1   98[BANK0 ] unsigned char 
 20842 ;; Return value:  Size  Location     Type
 20843 ;;                  1    wreg      void 
 20844 ;; Registers used:
 20845 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20846 ;; Tracked objects:
 20847 ;;		On entry : E/1
 20848 ;;		On exit  : C/0
 20849 ;;		Unchanged: 0/0
 20850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20851 ;;      Params:         0       2       0       0       0       0       0       0       0
 20852 ;;      Locals:         0      22       0       0       0       0       0       0       0
 20853 ;;      Temps:          0      26       0       0       0       0       0       0       0
 20854 ;;      Totals:         0      50       0       0       0       0       0       0       0
 20855 ;;Total ram usage:       50 bytes
 20856 ;; Hardware stack levels used:    1
 20857 ;; Hardware stack levels required when called:   14
 20858 ;; This function calls:
 20859 ;;		_LORAWAN_EnterContinuousReceive
 20860 ;;		_RADIO_GetStatus
 20861 ;;		_RxDataDone
 20862 ;;		_SwTimerIsRunning
 20863 ;;		_SwTimerReadValue
 20864 ;;		_SwTimerSetTimeout
 20865 ;;		_SwTimerStart
 20866 ;;		_SwTimerStop
 20867 ;;		___lldiv
 20868 ;; This function is called by:
 20869 ;;		_RADIO_TxDone
 20870 ;;		_RADIO_FSKPacketSent
 20871 ;;		_RADIO_WatchdogTimeout
 20872 ;; This function uses a non-reentrant model
 20873 ;;
 20874                           
 20875                           	psect	text106
 20876  000B34                     __ptext106:
 20877                           	opt stack 0
 20878  000B34                     _LORAWAN_TxDone:
 20879                           	opt stack 13
 20880                           
 20881                           ;lorawan_eu.c: 367: if (loRa.macStatus.macPause == 0)
 20882                           
 20883                           ;incstack = 0
 20884  000B34  0102               	movlb	2	; () banked
 20885  000B36  B103               	btfsc	(_loRa+3)& (0+255),0,b
 20886  000B38  EFAC  F009         	goto	l14704
 20887                           
 20888                           ; BSR set to: 2
 20889                           ;lorawan_eu.c: 368: {
 20890                           ;lorawan_eu.c: 369: bool found = 0;
 20891  000B3C  0100               	movlb	0	; () banked
 20892  000B3E  6BC2               	clrf	LORAWAN_TxDone@found& (0+255),b
 20893                           
 20894                           ;lorawan_eu.c: 370: uint8_t i;
 20895                           ;lorawan_eu.c: 371: uint32_t delta = 0, minim = (4294967295UL), ticks;
 20896  000B40  6BC3               	clrf	LORAWAN_TxDone@delta& (0+255),b
 20897  000B42  6BC4               	clrf	(LORAWAN_TxDone@delta+1)& (0+255),b
 20898  000B44  6BC5               	clrf	(LORAWAN_TxDone@delta+2)& (0+255),b
 20899  000B46  6BC6               	clrf	(LORAWAN_TxDone@delta+3)& (0+255),b
 20900  000B48  69CB               	setf	LORAWAN_TxDone@minim& (0+255),b
 20901  000B4A  69CC               	setf	(LORAWAN_TxDone@minim+1)& (0+255),b
 20902  000B4C  69CD               	setf	(LORAWAN_TxDone@minim+2)& (0+255),b
 20903  000B4E  69CE               	setf	(LORAWAN_TxDone@minim+3)& (0+255),b
 20904                           
 20905                           ;lorawan_eu.c: 374: loRa.rx2DelayExpired = 0;
 20906  000B50  0102               	movlb	2	; () banked
 20907  000B52  6BF1               	clrf	(_loRa+241)& (0+255),b
 20908                           
 20909                           ; BSR set to: 2
 20910                           ;lorawan_eu.c: 376: loRa.macStatus.macState = BEFORE_RX1;
 20911  000B54  5102               	movf	(_loRa+2)& (0+255),w,b
 20912  000B56  0BF0               	andlw	-16
 20913  000B58  0902               	iorlw	2
 20914  000B5A  6F02               	movwf	(_loRa+2)& (0+255),b
 20915                           
 20916                           ; BSR set to: 2
 20917                           ;lorawan_eu.c: 378: i = loRa.lastUsedChannelIndex;
 20918  000B5C  C2DA  F0CF         	movff	_loRa+218,LORAWAN_TxDone@i
 20919                           
 20920                           ; BSR set to: 2
 20921                           ;lorawan_eu.c: 381: if (loRa.lorawanMacStatus.joining == 1)
 20922  000B60  A500               	btfss	_loRa& (0+255),2,b
 20923  000B62  D10A               	goto	l14634
 20924                           
 20925                           ; BSR set to: 2
 20926                           ;lorawan_eu.c: 382: {
 20927                           ;lorawan_eu.c: 383: SwTimerSetTimeout(loRa.joinAccept1TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 20928  000B64  0E7D               	movlw	low _rxWindowOffset
 20929  000B66  2517               	addwf	(_loRa+23)& (0+255),w,b
 20930  000B68  6EF6               	movwf	tblptrl,c
 20931  000B6A  6AF7               	clrf	tblptrh,c
 20932  000B6C  0E7F               	movlw	high _rxWindowOffset
 20933  000B6E  22F7               	addwfc	tblptrh,f,c
 20934  000B70                     	if	0	;There are less than 3 active tblptr bytes
 20935  000B70                     	endif
 20936  000B70  0008               	tblrd		*
 20937  000B72  CFF5 F0A0          	movff	tablat,??_LORAWAN_TxDone
 20938  000B76  5198               	movf	(_loRa+152)& (0+255),w,b
 20939  000B78  0100               	movlb	0	; () banked
 20940  000B7A  25A0               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 20941  000B7C  6FA1               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 20942  000B7E  0E00               	movlw	0
 20943  000B80  BFA0               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 20944  000B82  0EFF               	movlw	255
 20945  000B84  0102               	movlb	2	; () banked
 20946  000B86  2199               	addwfc	(_loRa+153)& (0+255),w,b
 20947  000B88  0100               	movlb	0	; () banked
 20948  000B8A  6FA2               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 20949  000B8C  6BA3               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 20950  000B8E  6BA4               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 20951  000B90  0E0C               	movlw	12
 20952  000B92                     u16955:
 20953  000B92  90D8               	bcf	status,0,c
 20954  000B94  37A1               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 20955  000B96  37A2               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 20956  000B98  37A3               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 20957  000B9A  37A4               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 20958  000B9C  2EE8               	decfsz	wreg,f,c
 20959  000B9E  D7F9               	goto	u16955
 20960  000BA0  C0A1  F064         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 20961  000BA4  C0A2  F065         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 20962  000BA8  C0A3  F066         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 20963  000BAC  C0A4  F067         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 20964  000BB0  0E7D               	movlw	125
 20965  000BB2  6F68               	movwf	___lldiv@divisor& (0+255),b
 20966  000BB4  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 20967  000BB6  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 20968  000BB8  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 20969  000BBA  ECB3  F030         	call	___lldiv	;wreg free
 20970  000BBE  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 20971  000BC2  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 20972  000BC6  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 20973  000BCA  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 20974  000BCE  0102               	movlb	2	; () banked
 20975  000BD0  51E2               	movf	(_loRa+226)& (0+255),w,b
 20976  000BD2  ECCA  F036         	call	_SwTimerSetTimeout
 20977                           
 20978                           ;lorawan_eu.c: 384: SwTimerSetTimeout(loRa.joinAccept2TimerId, ( (((uint32_t)(loRa.proto
      +                          colParameters.joinAcceptDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 20979  000BD6  0E7D               	movlw	low _rxWindowOffset
 20980  000BD8  0102               	movlb	2	; () banked
 20981  000BDA  251C               	addwf	(_loRa+28)& (0+255),w,b
 20982  000BDC  6EF6               	movwf	tblptrl,c
 20983  000BDE  6AF7               	clrf	tblptrh,c
 20984  000BE0  0E7F               	movlw	high _rxWindowOffset
 20985  000BE2  22F7               	addwfc	tblptrh,f,c
 20986  000BE4                     	if	0	;There are less than 3 active tblptr bytes
 20987  000BE4                     	endif
 20988  000BE4  0008               	tblrd		*
 20989  000BE6  CFF5 F0A0          	movff	tablat,??_LORAWAN_TxDone
 20990  000BEA  519A               	movf	(_loRa+154)& (0+255),w,b
 20991  000BEC  0100               	movlb	0	; () banked
 20992  000BEE  25A0               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 20993  000BF0  6FA1               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 20994  000BF2  0E00               	movlw	0
 20995  000BF4  BFA0               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 20996  000BF6  0EFF               	movlw	255
 20997  000BF8  0102               	movlb	2	; () banked
 20998  000BFA  219B               	addwfc	(_loRa+155)& (0+255),w,b
 20999  000BFC  0100               	movlb	0	; () banked
 21000  000BFE  6FA2               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21001  000C00  6BA3               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 21002  000C02  6BA4               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21003  000C04  0E0C               	movlw	12
 21004  000C06                     u16965:
 21005  000C06  90D8               	bcf	status,0,c
 21006  000C08  37A1               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21007  000C0A  37A2               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21008  000C0C  37A3               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21009  000C0E  37A4               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 21010  000C10  2EE8               	decfsz	wreg,f,c
 21011  000C12  D7F9               	goto	u16965
 21012  000C14  C0A1  F064         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 21013  000C18  C0A2  F065         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 21014  000C1C  C0A3  F066         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 21015  000C20  C0A4  F067         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 21016  000C24  0E7D               	movlw	125
 21017  000C26  6F68               	movwf	___lldiv@divisor& (0+255),b
 21018  000C28  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 21019  000C2A  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 21020  000C2C  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 21021  000C2E  ECB3  F030         	call	___lldiv	;wreg free
 21022  000C32  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 21023  000C36  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 21024  000C3A  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 21025  000C3E  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 21026  000C42  0102               	movlb	2	; () banked
 21027  000C44  51E3               	movf	(_loRa+227)& (0+255),w,b
 21028  000C46  ECCA  F036         	call	_SwTimerSetTimeout
 21029                           
 21030                           ; BSR set to: 0
 21031                           ;lorawan_eu.c: 385: SwTimerStart(loRa.joinAccept1TimerId);
 21032  000C4A  0102               	movlb	2	; () banked
 21033  000C4C  51E2               	movf	(_loRa+226)& (0+255),w,b
 21034  000C4E  ECB3  F02E         	call	_SwTimerStart
 21035                           
 21036                           ; BSR set to: 0
 21037                           ;lorawan_eu.c: 386: SwTimerStart(loRa.joinAccept2TimerId);
 21038  000C52  0102               	movlb	2	; () banked
 21039  000C54  51E3               	movf	(_loRa+227)& (0+255),w,b
 21040  000C56  ECB3  F02E         	call	_SwTimerStart
 21041                           
 21042                           ; BSR set to: 0
 21043                           ;lorawan_eu.c: 388: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)3029 
      +                          + 1) * ((uint32_t)loRa.prescaler) - 1);
 21044  000C5A  C09E  F0A0         	movff	LORAWAN_TxDone@timeOnAir,??_LORAWAN_TxDone
 21045  000C5E  C09F  F0A1         	movff	LORAWAN_TxDone@timeOnAir+1,??_LORAWAN_TxDone+1
 21046  000C62  0102               	movlb	2	; () banked
 21047  000C64  51DB               	movf	(_loRa+219)& (0+255),w,b
 21048  000C66  0100               	movlb	0	; () banked
 21049  000C68  6FA2               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21050  000C6A  0102               	movlb	2	; () banked
 21051  000C6C  51DC               	movf	(_loRa+220)& (0+255),w,b
 21052  000C6E  0100               	movlb	0	; () banked
 21053  000C70  6FA3               	movwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21054  000C72  6BA4               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21055  000C74  6BA5               	clrf	(??_LORAWAN_TxDone+5)& (0+255),b
 21056  000C76  0ED6               	movlw	214
 21057  000C78  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21058  000C7A  CFF3 F0A6          	movff	prodl,??_LORAWAN_TxDone+6
 21059  000C7E  CFF4 F0A7          	movff	prodh,??_LORAWAN_TxDone+7
 21060  000C82  6BA8               	clrf	(??_LORAWAN_TxDone+8)& (0+255),b
 21061  000C84  6BA9               	clrf	(??_LORAWAN_TxDone+9)& (0+255),b
 21062  000C86  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21063  000C88  50F3               	movf	prodl,w,c
 21064  000C8A  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21065  000C8C  50F4               	movf	prodh,w,c
 21066  000C8E  23A8               	addwfc	(??_LORAWAN_TxDone+8)& (0+255),f,b
 21067  000C90  0E00               	movlw	0
 21068  000C92  23A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),f,b
 21069  000C94  0E0B               	movlw	11
 21070  000C96  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21071  000C98  50F3               	movf	prodl,w,c
 21072  000C9A  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21073  000C9C  50F4               	movf	prodh,w,c
 21074  000C9E  23A8               	addwfc	(??_LORAWAN_TxDone+8)& (0+255),f,b
 21075  000CA0  0E00               	movlw	0
 21076  000CA2  23A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),f,b
 21077  000CA4  0ED6               	movlw	214
 21078  000CA6  03A4               	mulwf	(??_LORAWAN_TxDone+4)& (0+255),b
 21079  000CA8  50F3               	movf	prodl,w,c
 21080  000CAA  27A8               	addwf	(??_LORAWAN_TxDone+8)& (0+255),f,b
 21081  000CAC  50F4               	movf	prodh,w,c
 21082  000CAE  23A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),f,b
 21083  000CB0  0E0B               	movlw	11
 21084  000CB2  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21085  000CB4  50F3               	movf	prodl,w,c
 21086  000CB6  27A8               	addwf	(??_LORAWAN_TxDone+8)& (0+255),f,b
 21087  000CB8  50F4               	movf	prodh,w,c
 21088  000CBA  23A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),f,b
 21089  000CBC  0E00               	movlw	0
 21090  000CBE  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21091  000CC0  50F3               	movf	prodl,w,c
 21092  000CC2  27A8               	addwf	(??_LORAWAN_TxDone+8)& (0+255),f,b
 21093  000CC4  50F4               	movf	prodh,w,c
 21094  000CC6  23A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),f,b
 21095  000CC8  0ED6               	movlw	214
 21096  000CCA  03A5               	mulwf	(??_LORAWAN_TxDone+5)& (0+255),b
 21097  000CCC  50F3               	movf	prodl,w,c
 21098  000CCE  27A9               	addwf	(??_LORAWAN_TxDone+9)& (0+255),f,b
 21099  000CD0  0E0B               	movlw	11
 21100  000CD2  03A4               	mulwf	(??_LORAWAN_TxDone+4)& (0+255),b
 21101  000CD4  50F3               	movf	prodl,w,c
 21102  000CD6  27A9               	addwf	(??_LORAWAN_TxDone+9)& (0+255),f,b
 21103  000CD8  0E00               	movlw	0
 21104  000CDA  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21105  000CDC  50F3               	movf	prodl,w,c
 21106  000CDE  27A9               	addwf	(??_LORAWAN_TxDone+9)& (0+255),f,b
 21107  000CE0  0E00               	movlw	0
 21108  000CE2  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21109  000CE4  50F3               	movf	prodl,w,c
 21110  000CE6  27A9               	addwf	(??_LORAWAN_TxDone+9)& (0+255),f,b
 21111  000CE8  0EFF               	movlw	255
 21112  000CEA  25A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),w,b
 21113  000CEC  6FAA               	movwf	(??_LORAWAN_TxDone+10)& (0+255),b
 21114  000CEE  0EFF               	movlw	255
 21115  000CF0  21A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),w,b
 21116  000CF2  6FAB               	movwf	(??_LORAWAN_TxDone+11)& (0+255),b
 21117  000CF4  0EFF               	movlw	255
 21118  000CF6  21A8               	addwfc	(??_LORAWAN_TxDone+8)& (0+255),w,b
 21119  000CF8  6FAC               	movwf	(??_LORAWAN_TxDone+12)& (0+255),b
 21120  000CFA  0EFF               	movlw	255
 21121  000CFC  21A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),w,b
 21122  000CFE  6FAD               	movwf	(??_LORAWAN_TxDone+13)& (0+255),b
 21123  000D00  51AA               	movf	(??_LORAWAN_TxDone+10)& (0+255),w,b
 21124  000D02  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21125  000D04  CFF3 F0AE          	movff	prodl,??_LORAWAN_TxDone+14
 21126  000D08  CFF4 F0AF          	movff	prodh,??_LORAWAN_TxDone+15
 21127  000D0C  6BB0               	clrf	(??_LORAWAN_TxDone+16)& (0+255),b
 21128  000D0E  6BB1               	clrf	(??_LORAWAN_TxDone+17)& (0+255),b
 21129  000D10  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21130  000D12  50F3               	movf	prodl,w,c
 21131  000D14  27AF               	addwf	(??_LORAWAN_TxDone+15)& (0+255),f,b
 21132  000D16  50F4               	movf	prodh,w,c
 21133  000D18  23B0               	addwfc	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21134  000D1A  0E00               	movlw	0
 21135  000D1C  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21136  000D1E  51AB               	movf	(??_LORAWAN_TxDone+11)& (0+255),w,b
 21137  000D20  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21138  000D22  50F3               	movf	prodl,w,c
 21139  000D24  27AF               	addwf	(??_LORAWAN_TxDone+15)& (0+255),f,b
 21140  000D26  50F4               	movf	prodh,w,c
 21141  000D28  23B0               	addwfc	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21142  000D2A  0E00               	movlw	0
 21143  000D2C  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21144  000D2E  51AB               	movf	(??_LORAWAN_TxDone+11)& (0+255),w,b
 21145  000D30  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21146  000D32  50F3               	movf	prodl,w,c
 21147  000D34  27B0               	addwf	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21148  000D36  50F4               	movf	prodh,w,c
 21149  000D38  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21150  000D3A  51AC               	movf	(??_LORAWAN_TxDone+12)& (0+255),w,b
 21151  000D3C  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21152  000D3E  50F3               	movf	prodl,w,c
 21153  000D40  27B0               	addwf	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21154  000D42  50F4               	movf	prodh,w,c
 21155  000D44  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21156  000D46  51AC               	movf	(??_LORAWAN_TxDone+12)& (0+255),w,b
 21157  000D48  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21158  000D4A  50F3               	movf	prodl,w,c
 21159  000D4C  27B1               	addwf	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21160  000D4E  51AD               	movf	(??_LORAWAN_TxDone+13)& (0+255),w,b
 21161  000D50  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21162  000D52  50F3               	movf	prodl,w,c
 21163  000D54  27B1               	addwf	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21164  000D56  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21165  000D58  0D0E               	mullw	14
 21166  000D5A  0E08               	movlw	low (_Channels+8)
 21167  000D5C  24F3               	addwf	prodl,w,c
 21168  000D5E  6ED9               	movwf	fsr2l,c
 21169  000D60  0E04               	movlw	high (_Channels+8)
 21170  000D62  20F4               	addwfc	prodh,w,c
 21171  000D64  6EDA               	movwf	fsr2h,c
 21172  000D66  C0AE  FFDE         	movff	??_LORAWAN_TxDone+14,postinc2
 21173  000D6A  C0AF  FFDE         	movff	??_LORAWAN_TxDone+15,postinc2
 21174  000D6E  C0B0  FFDE         	movff	??_LORAWAN_TxDone+16,postinc2
 21175  000D72  C0B1  FFDE         	movff	??_LORAWAN_TxDone+17,postinc2
 21176                           
 21177                           ;lorawan_eu.c: 389: }
 21178  000D76  D117               	goto	l14644
 21179  000D78                     l14634:
 21180                           
 21181                           ; BSR set to: 2
 21182                           ;lorawan_eu.c: 390: else
 21183                           ;lorawan_eu.c: 391: {
 21184                           ;lorawan_eu.c: 392: SwTimerSetTimeout(loRa.receiveWindow1TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay1 + rxWindowOffset[loRa.receiveWindow1Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21185  000D78  0E7D               	movlw	low _rxWindowOffset
 21186  000D7A  2517               	addwf	(_loRa+23)& (0+255),w,b
 21187  000D7C  6EF6               	movwf	tblptrl,c
 21188  000D7E  6AF7               	clrf	tblptrh,c
 21189  000D80  0E7F               	movlw	high _rxWindowOffset
 21190  000D82  22F7               	addwfc	tblptrh,f,c
 21191  000D84                     	if	0	;There are less than 3 active tblptr bytes
 21192  000D84                     	endif
 21193  000D84  0008               	tblrd		*
 21194  000D86  CFF5 F0A0          	movff	tablat,??_LORAWAN_TxDone
 21195  000D8A  5194               	movf	(_loRa+148)& (0+255),w,b
 21196  000D8C  0100               	movlb	0	; () banked
 21197  000D8E  25A0               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 21198  000D90  6FA1               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21199  000D92  0E00               	movlw	0
 21200  000D94  BFA0               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 21201  000D96  0EFF               	movlw	255
 21202  000D98  0102               	movlb	2	; () banked
 21203  000D9A  2195               	addwfc	(_loRa+149)& (0+255),w,b
 21204  000D9C  0100               	movlb	0	; () banked
 21205  000D9E  6FA2               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21206  000DA0  6BA3               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 21207  000DA2  6BA4               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21208  000DA4  0E0C               	movlw	12
 21209  000DA6                     u16975:
 21210  000DA6  90D8               	bcf	status,0,c
 21211  000DA8  37A1               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21212  000DAA  37A2               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21213  000DAC  37A3               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21214  000DAE  37A4               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 21215  000DB0  2EE8               	decfsz	wreg,f,c
 21216  000DB2  D7F9               	goto	u16975
 21217  000DB4  C0A1  F064         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 21218  000DB8  C0A2  F065         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 21219  000DBC  C0A3  F066         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 21220  000DC0  C0A4  F067         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 21221  000DC4  0E7D               	movlw	125
 21222  000DC6  6F68               	movwf	___lldiv@divisor& (0+255),b
 21223  000DC8  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 21224  000DCA  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 21225  000DCC  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 21226  000DCE  ECB3  F030         	call	___lldiv	;wreg free
 21227  000DD2  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 21228  000DD6  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 21229  000DDA  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 21230  000DDE  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 21231  000DE2  0102               	movlb	2	; () banked
 21232  000DE4  51E4               	movf	(_loRa+228)& (0+255),w,b
 21233  000DE6  ECCA  F036         	call	_SwTimerSetTimeout
 21234                           
 21235                           ;lorawan_eu.c: 393: SwTimerSetTimeout(loRa.receiveWindow2TimerId, ( (((uint32_t)(loRa.pr
      +                          otocolParameters.receiveDelay2 + rxWindowOffset[loRa.receiveWindow2Parameters.dataRate])
      +                          ) << (12)) / 125UL ));
 21236  000DEA  0E7D               	movlw	low _rxWindowOffset
 21237  000DEC  0102               	movlb	2	; () banked
 21238  000DEE  251C               	addwf	(_loRa+28)& (0+255),w,b
 21239  000DF0  6EF6               	movwf	tblptrl,c
 21240  000DF2  6AF7               	clrf	tblptrh,c
 21241  000DF4  0E7F               	movlw	high _rxWindowOffset
 21242  000DF6  22F7               	addwfc	tblptrh,f,c
 21243  000DF8                     	if	0	;There are less than 3 active tblptr bytes
 21244  000DF8                     	endif
 21245  000DF8  0008               	tblrd		*
 21246  000DFA  CFF5 F0A0          	movff	tablat,??_LORAWAN_TxDone
 21247  000DFE  5196               	movf	(_loRa+150)& (0+255),w,b
 21248  000E00  0100               	movlb	0	; () banked
 21249  000E02  25A0               	addwf	??_LORAWAN_TxDone& (0+255),w,b
 21250  000E04  6FA1               	movwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21251  000E06  0E00               	movlw	0
 21252  000E08  BFA0               	btfsc	??_LORAWAN_TxDone& (0+255),7,b
 21253  000E0A  0EFF               	movlw	255
 21254  000E0C  0102               	movlb	2	; () banked
 21255  000E0E  2197               	addwfc	(_loRa+151)& (0+255),w,b
 21256  000E10  0100               	movlb	0	; () banked
 21257  000E12  6FA2               	movwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21258  000E14  6BA3               	clrf	(??_LORAWAN_TxDone+3)& (0+255),b
 21259  000E16  6BA4               	clrf	(??_LORAWAN_TxDone+4)& (0+255),b
 21260  000E18  0E0C               	movlw	12
 21261  000E1A                     u16985:
 21262  000E1A  90D8               	bcf	status,0,c
 21263  000E1C  37A1               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21264  000E1E  37A2               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21265  000E20  37A3               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21266  000E22  37A4               	rlcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 21267  000E24  2EE8               	decfsz	wreg,f,c
 21268  000E26  D7F9               	goto	u16985
 21269  000E28  C0A1  F064         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend
 21270  000E2C  C0A2  F065         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+1
 21271  000E30  C0A3  F066         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+2
 21272  000E34  C0A4  F067         	movff	??_LORAWAN_TxDone+4,___lldiv@dividend+3
 21273  000E38  0E7D               	movlw	125
 21274  000E3A  6F68               	movwf	___lldiv@divisor& (0+255),b
 21275  000E3C  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 21276  000E3E  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 21277  000E40  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 21278  000E42  ECB3  F030         	call	___lldiv	;wreg free
 21279  000E46  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 21280  000E4A  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 21281  000E4E  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 21282  000E52  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 21283  000E56  0102               	movlb	2	; () banked
 21284  000E58  51E5               	movf	(_loRa+229)& (0+255),w,b
 21285  000E5A  ECCA  F036         	call	_SwTimerSetTimeout
 21286                           
 21287                           ; BSR set to: 0
 21288                           ;lorawan_eu.c: 394: SwTimerStart(loRa.receiveWindow1TimerId);
 21289  000E5E  0102               	movlb	2	; () banked
 21290  000E60  51E4               	movf	(_loRa+228)& (0+255),w,b
 21291  000E62  ECB3  F02E         	call	_SwTimerStart
 21292                           
 21293                           ; BSR set to: 0
 21294                           ;lorawan_eu.c: 395: if (CLASS_A == loRa.deviceClass)
 21295  000E66  0102               	movlb	2	; () banked
 21296  000E68  5112               	movf	(_loRa+18)& (0+255),w,b
 21297  000E6A  E103               	bnz	l14642
 21298                           
 21299                           ; BSR set to: 2
 21300                           ;lorawan_eu.c: 396: {
 21301                           ;lorawan_eu.c: 397: SwTimerStart(loRa.receiveWindow2TimerId);
 21302  000E6C  51E5               	movf	(_loRa+229)& (0+255),w,b
 21303  000E6E  ECB3  F02E         	call	_SwTimerStart
 21304  000E72                     l14642:
 21305                           
 21306                           ;lorawan_eu.c: 398: }
 21307                           ;lorawan_eu.c: 400: Channels[i].channelTimer = ((uint32_t)timeOnAir) * (((uint32_t)Chann
      +                          els[i].dutyCycle + 1) * ((uint32_t)loRa.prescaler) - 1);
 21308  000E72  C09E  F0A0         	movff	LORAWAN_TxDone@timeOnAir,??_LORAWAN_TxDone
 21309  000E76  C09F  F0A1         	movff	LORAWAN_TxDone@timeOnAir+1,??_LORAWAN_TxDone+1
 21310  000E7A  EE22  F0DB         	lfsr	2,_loRa+219
 21311  000E7E  CFDE F0A2          	movff	postinc2,??_LORAWAN_TxDone+2
 21312  000E82  CFDD F0A3          	movff	postdec2,??_LORAWAN_TxDone+3
 21313  000E86  0100               	movlb	0	; () banked
 21314  000E88  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21315  000E8A  0D0E               	mullw	14
 21316  000E8C  0E06               	movlw	low (_Channels+6)
 21317  000E8E  24F3               	addwf	prodl,w,c
 21318  000E90  6ED9               	movwf	fsr2l,c
 21319  000E92  0E04               	movlw	high (_Channels+6)
 21320  000E94  20F4               	addwfc	prodh,w,c
 21321  000E96  6EDA               	movwf	fsr2h,c
 21322  000E98  CFDE F0A4          	movff	postinc2,??_LORAWAN_TxDone+4
 21323  000E9C  CFDD F0A5          	movff	postdec2,??_LORAWAN_TxDone+5
 21324  000EA0  51A4               	movf	(??_LORAWAN_TxDone+4)& (0+255),w,b
 21325  000EA2  6FA6               	movwf	(??_LORAWAN_TxDone+6)& (0+255),b
 21326  000EA4  51A5               	movf	(??_LORAWAN_TxDone+5)& (0+255),w,b
 21327  000EA6  6FA7               	movwf	(??_LORAWAN_TxDone+7)& (0+255),b
 21328  000EA8  6BA8               	clrf	(??_LORAWAN_TxDone+8)& (0+255),b
 21329  000EAA  6BA9               	clrf	(??_LORAWAN_TxDone+9)& (0+255),b
 21330  000EAC  29A6               	incf	(??_LORAWAN_TxDone+6)& (0+255),w,b
 21331  000EAE  6FAA               	movwf	(??_LORAWAN_TxDone+10)& (0+255),b
 21332  000EB0  0E00               	movlw	0
 21333  000EB2  21A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),w,b
 21334  000EB4  6FAB               	movwf	(??_LORAWAN_TxDone+11)& (0+255),b
 21335  000EB6  0E00               	movlw	0
 21336  000EB8  21A8               	addwfc	(??_LORAWAN_TxDone+8)& (0+255),w,b
 21337  000EBA  6FAC               	movwf	(??_LORAWAN_TxDone+12)& (0+255),b
 21338  000EBC  0E00               	movlw	0
 21339  000EBE  21A9               	addwfc	(??_LORAWAN_TxDone+9)& (0+255),w,b
 21340  000EC0  6FAD               	movwf	(??_LORAWAN_TxDone+13)& (0+255),b
 21341  000EC2  51AA               	movf	(??_LORAWAN_TxDone+10)& (0+255),w,b
 21342  000EC4  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21343  000EC6  CFF3 F0AE          	movff	prodl,??_LORAWAN_TxDone+14
 21344  000ECA  CFF4 F0AF          	movff	prodh,??_LORAWAN_TxDone+15
 21345  000ECE  6BB0               	clrf	(??_LORAWAN_TxDone+16)& (0+255),b
 21346  000ED0  6BB1               	clrf	(??_LORAWAN_TxDone+17)& (0+255),b
 21347  000ED2  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21348  000ED4  50F3               	movf	prodl,w,c
 21349  000ED6  27AF               	addwf	(??_LORAWAN_TxDone+15)& (0+255),f,b
 21350  000ED8  50F4               	movf	prodh,w,c
 21351  000EDA  23B0               	addwfc	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21352  000EDC  0E00               	movlw	0
 21353  000EDE  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21354  000EE0  51AB               	movf	(??_LORAWAN_TxDone+11)& (0+255),w,b
 21355  000EE2  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21356  000EE4  50F3               	movf	prodl,w,c
 21357  000EE6  27AF               	addwf	(??_LORAWAN_TxDone+15)& (0+255),f,b
 21358  000EE8  50F4               	movf	prodh,w,c
 21359  000EEA  23B0               	addwfc	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21360  000EEC  0E00               	movlw	0
 21361  000EEE  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21362  000EF0  51AB               	movf	(??_LORAWAN_TxDone+11)& (0+255),w,b
 21363  000EF2  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21364  000EF4  50F3               	movf	prodl,w,c
 21365  000EF6  27B0               	addwf	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21366  000EF8  50F4               	movf	prodh,w,c
 21367  000EFA  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21368  000EFC  51AC               	movf	(??_LORAWAN_TxDone+12)& (0+255),w,b
 21369  000EFE  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21370  000F00  50F3               	movf	prodl,w,c
 21371  000F02  27B0               	addwf	(??_LORAWAN_TxDone+16)& (0+255),f,b
 21372  000F04  50F4               	movf	prodh,w,c
 21373  000F06  23B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21374  000F08  51AC               	movf	(??_LORAWAN_TxDone+12)& (0+255),w,b
 21375  000F0A  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21376  000F0C  50F3               	movf	prodl,w,c
 21377  000F0E  27B1               	addwf	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21378  000F10  51AD               	movf	(??_LORAWAN_TxDone+13)& (0+255),w,b
 21379  000F12  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21380  000F14  50F3               	movf	prodl,w,c
 21381  000F16  27B1               	addwf	(??_LORAWAN_TxDone+17)& (0+255),f,b
 21382  000F18  0EFF               	movlw	255
 21383  000F1A  25AE               	addwf	(??_LORAWAN_TxDone+14)& (0+255),w,b
 21384  000F1C  6FB2               	movwf	(??_LORAWAN_TxDone+18)& (0+255),b
 21385  000F1E  0EFF               	movlw	255
 21386  000F20  21AF               	addwfc	(??_LORAWAN_TxDone+15)& (0+255),w,b
 21387  000F22  6FB3               	movwf	(??_LORAWAN_TxDone+19)& (0+255),b
 21388  000F24  0EFF               	movlw	255
 21389  000F26  21B0               	addwfc	(??_LORAWAN_TxDone+16)& (0+255),w,b
 21390  000F28  6FB4               	movwf	(??_LORAWAN_TxDone+20)& (0+255),b
 21391  000F2A  0EFF               	movlw	255
 21392  000F2C  21B1               	addwfc	(??_LORAWAN_TxDone+17)& (0+255),w,b
 21393  000F2E  6FB5               	movwf	(??_LORAWAN_TxDone+21)& (0+255),b
 21394  000F30  51B2               	movf	(??_LORAWAN_TxDone+18)& (0+255),w,b
 21395  000F32  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21396  000F34  CFF3 F0B6          	movff	prodl,??_LORAWAN_TxDone+22
 21397  000F38  CFF4 F0B7          	movff	prodh,??_LORAWAN_TxDone+23
 21398  000F3C  6BB8               	clrf	(??_LORAWAN_TxDone+24)& (0+255),b
 21399  000F3E  6BB9               	clrf	(??_LORAWAN_TxDone+25)& (0+255),b
 21400  000F40  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21401  000F42  50F3               	movf	prodl,w,c
 21402  000F44  27B7               	addwf	(??_LORAWAN_TxDone+23)& (0+255),f,b
 21403  000F46  50F4               	movf	prodh,w,c
 21404  000F48  23B8               	addwfc	(??_LORAWAN_TxDone+24)& (0+255),f,b
 21405  000F4A  0E00               	movlw	0
 21406  000F4C  23B9               	addwfc	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21407  000F4E  51B3               	movf	(??_LORAWAN_TxDone+19)& (0+255),w,b
 21408  000F50  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21409  000F52  50F3               	movf	prodl,w,c
 21410  000F54  27B7               	addwf	(??_LORAWAN_TxDone+23)& (0+255),f,b
 21411  000F56  50F4               	movf	prodh,w,c
 21412  000F58  23B8               	addwfc	(??_LORAWAN_TxDone+24)& (0+255),f,b
 21413  000F5A  0E00               	movlw	0
 21414  000F5C  23B9               	addwfc	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21415  000F5E  51B3               	movf	(??_LORAWAN_TxDone+19)& (0+255),w,b
 21416  000F60  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21417  000F62  50F3               	movf	prodl,w,c
 21418  000F64  27B8               	addwf	(??_LORAWAN_TxDone+24)& (0+255),f,b
 21419  000F66  50F4               	movf	prodh,w,c
 21420  000F68  23B9               	addwfc	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21421  000F6A  51B4               	movf	(??_LORAWAN_TxDone+20)& (0+255),w,b
 21422  000F6C  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21423  000F6E  50F3               	movf	prodl,w,c
 21424  000F70  27B8               	addwf	(??_LORAWAN_TxDone+24)& (0+255),f,b
 21425  000F72  50F4               	movf	prodh,w,c
 21426  000F74  23B9               	addwfc	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21427  000F76  51B4               	movf	(??_LORAWAN_TxDone+20)& (0+255),w,b
 21428  000F78  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21429  000F7A  50F3               	movf	prodl,w,c
 21430  000F7C  27B9               	addwf	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21431  000F7E  51B5               	movf	(??_LORAWAN_TxDone+21)& (0+255),w,b
 21432  000F80  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21433  000F82  50F3               	movf	prodl,w,c
 21434  000F84  27B9               	addwf	(??_LORAWAN_TxDone+25)& (0+255),f,b
 21435  000F86  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21436  000F88  0D0E               	mullw	14
 21437  000F8A  0E08               	movlw	low (_Channels+8)
 21438  000F8C  24F3               	addwf	prodl,w,c
 21439  000F8E  6ED9               	movwf	fsr2l,c
 21440  000F90  0E04               	movlw	high (_Channels+8)
 21441  000F92  20F4               	addwfc	prodh,w,c
 21442  000F94  6EDA               	movwf	fsr2h,c
 21443  000F96  C0B6  FFDE         	movff	??_LORAWAN_TxDone+22,postinc2
 21444  000F9A  C0B7  FFDE         	movff	??_LORAWAN_TxDone+23,postinc2
 21445  000F9E  C0B8  FFDE         	movff	??_LORAWAN_TxDone+24,postinc2
 21446  000FA2  C0B9  FFDE         	movff	??_LORAWAN_TxDone+25,postinc2
 21447  000FA6                     l14644:
 21448                           
 21449                           ; BSR set to: 0
 21450                           ;lorawan_eu.c: 401: }
 21451                           ;lorawan_eu.c: 403: if(SwTimerIsRunning(loRa.dutyCycleTimerId))
 21452  000FA6  0102               	movlb	2	; () banked
 21453  000FA8  51E9               	movf	(_loRa+233)& (0+255),w,b
 21454  000FAA  EC3D  F03A         	call	_SwTimerIsRunning
 21455  000FAE  0900               	iorlw	0
 21456  000FB0  E101 D0C8          	bz	l14656
 21457                           
 21458                           ; BSR set to: 0
 21459                           ;lorawan_eu.c: 404: {
 21460                           ;lorawan_eu.c: 405: SwTimerStop(loRa.dutyCycleTimerId);
 21461  000FB4  0102               	movlb	2	; () banked
 21462  000FB6  51E9               	movf	(_loRa+233)& (0+255),w,b
 21463  000FB8  ECF3  F03A         	call	_SwTimerStop
 21464                           
 21465                           ;lorawan_eu.c: 407: ticks = SwTimerReadValue (loRa.dutyCycleTimerId);
 21466  000FBC  0102               	movlb	2	; () banked
 21467  000FBE  51E9               	movf	(_loRa+233)& (0+255),w,b
 21468  000FC0  EC0B  F037         	call	_SwTimerReadValue
 21469  000FC4  C08B  F0C7         	movff	?_SwTimerReadValue,LORAWAN_TxDone@ticks
 21470  000FC8  C08C  F0C8         	movff	?_SwTimerReadValue+1,LORAWAN_TxDone@ticks+1
 21471  000FCC  C08D  F0C9         	movff	?_SwTimerReadValue+2,LORAWAN_TxDone@ticks+2
 21472  000FD0  C08E  F0CA         	movff	?_SwTimerReadValue+3,LORAWAN_TxDone@ticks+3
 21473                           
 21474                           ; BSR set to: 0
 21475                           ;lorawan_eu.c: 408: delta = loRa.lastTimerValue - ((ticks) < 0x00DFAC1FUL ? ( (((uint32_
      +                          t)(ticks)) * 125UL) >> (12) ) : ( (((uint32_t)(ticks)) >> (12)) * 125UL ) );
 21476  000FD4  51CA               	movf	(LORAWAN_TxDone@ticks+3)& (0+255),w,b
 21477  000FD6  E107               	bnz	u17010
 21478  000FD8  0E1F               	movlw	31
 21479  000FDA  5DC7               	subwf	LORAWAN_TxDone@ticks& (0+255),w,b
 21480  000FDC  0EAC               	movlw	172
 21481  000FDE  59C8               	subwfb	(LORAWAN_TxDone@ticks+1)& (0+255),w,b
 21482  000FE0  0EDF               	movlw	223
 21483  000FE2  59C9               	subwfb	(LORAWAN_TxDone@ticks+2)& (0+255),w,b
 21484  000FE4  E34A               	bnc	l14652
 21485  000FE6                     u17010:
 21486                           
 21487                           ; BSR set to: 0
 21488  000FE6  C0C7  F0A0         	movff	LORAWAN_TxDone@ticks,??_LORAWAN_TxDone
 21489  000FEA  C0C8  F0A1         	movff	LORAWAN_TxDone@ticks+1,??_LORAWAN_TxDone+1
 21490  000FEE  C0C9  F0A2         	movff	LORAWAN_TxDone@ticks+2,??_LORAWAN_TxDone+2
 21491  000FF2  C0CA  F0A3         	movff	LORAWAN_TxDone@ticks+3,??_LORAWAN_TxDone+3
 21492  000FF6  0E0D               	movlw	13
 21493  000FF8  D005               	goto	u17020
 21494  000FFA                     u17025:
 21495  000FFA  90D8               	bcf	status,0,c
 21496  000FFC  33A3               	rrcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21497  000FFE  33A2               	rrcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21498  001000  33A1               	rrcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21499  001002  33A0               	rrcf	??_LORAWAN_TxDone& (0+255),f,b
 21500  001004                     u17020:
 21501  001004  2EE8               	decfsz	wreg,f,c
 21502  001006  D7F9               	goto	u17025
 21503  001008  0E7D               	movlw	125
 21504  00100A  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21505  00100C  CFF3 F0A4          	movff	prodl,??_LORAWAN_TxDone+4
 21506  001010  CFF4 F0A5          	movff	prodh,??_LORAWAN_TxDone+5
 21507  001014  6BA6               	clrf	(??_LORAWAN_TxDone+6)& (0+255),b
 21508  001016  6BA7               	clrf	(??_LORAWAN_TxDone+7)& (0+255),b
 21509  001018  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21510  00101A  50F3               	movf	prodl,w,c
 21511  00101C  27A5               	addwf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 21512  00101E  50F4               	movf	prodh,w,c
 21513  001020  23A6               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21514  001022  0E00               	movlw	0
 21515  001024  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21516  001026  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21517  001028  50F3               	movf	prodl,w,c
 21518  00102A  27A5               	addwf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 21519  00102C  50F4               	movf	prodh,w,c
 21520  00102E  23A6               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21521  001030  0E00               	movlw	0
 21522  001032  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21523  001034  0E7D               	movlw	125
 21524  001036  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21525  001038  50F3               	movf	prodl,w,c
 21526  00103A  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21527  00103C  50F4               	movf	prodh,w,c
 21528  00103E  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21529  001040  0E00               	movlw	0
 21530  001042  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21531  001044  50F3               	movf	prodl,w,c
 21532  001046  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21533  001048  50F4               	movf	prodh,w,c
 21534  00104A  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21535  00104C  0E00               	movlw	0
 21536  00104E  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21537  001050  50F3               	movf	prodl,w,c
 21538  001052  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21539  001054  50F4               	movf	prodh,w,c
 21540  001056  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21541  001058  0E7D               	movlw	125
 21542  00105A  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21543  00105C  50F3               	movf	prodl,w,c
 21544  00105E  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21545  001060  0E00               	movlw	0
 21546  001062  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21547  001064  50F3               	movf	prodl,w,c
 21548  001066  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21549  001068  0E00               	movlw	0
 21550  00106A  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21551  00106C  50F3               	movf	prodl,w,c
 21552  00106E  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21553  001070  0E00               	movlw	0
 21554  001072  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21555  001074  50F3               	movf	prodl,w,c
 21556  001076  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21557  001078  D049               	goto	L12
 21558  00107A                     l14652:
 21559                           
 21560                           ; BSR set to: 0
 21561  00107A  C0C7  F0A0         	movff	LORAWAN_TxDone@ticks,??_LORAWAN_TxDone
 21562  00107E  C0C8  F0A1         	movff	LORAWAN_TxDone@ticks+1,??_LORAWAN_TxDone+1
 21563  001082  C0C9  F0A2         	movff	LORAWAN_TxDone@ticks+2,??_LORAWAN_TxDone+2
 21564  001086  C0CA  F0A3         	movff	LORAWAN_TxDone@ticks+3,??_LORAWAN_TxDone+3
 21565  00108A  0E7D               	movlw	125
 21566  00108C  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21567  00108E  CFF3 F0A4          	movff	prodl,??_LORAWAN_TxDone+4
 21568  001092  CFF4 F0A5          	movff	prodh,??_LORAWAN_TxDone+5
 21569  001096  6BA6               	clrf	(??_LORAWAN_TxDone+6)& (0+255),b
 21570  001098  6BA7               	clrf	(??_LORAWAN_TxDone+7)& (0+255),b
 21571  00109A  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21572  00109C  50F3               	movf	prodl,w,c
 21573  00109E  27A5               	addwf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 21574  0010A0  50F4               	movf	prodh,w,c
 21575  0010A2  23A6               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21576  0010A4  0E00               	movlw	0
 21577  0010A6  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21578  0010A8  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21579  0010AA  50F3               	movf	prodl,w,c
 21580  0010AC  27A5               	addwf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 21581  0010AE  50F4               	movf	prodh,w,c
 21582  0010B0  23A6               	addwfc	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21583  0010B2  0E00               	movlw	0
 21584  0010B4  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21585  0010B6  0E7D               	movlw	125
 21586  0010B8  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21587  0010BA  50F3               	movf	prodl,w,c
 21588  0010BC  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21589  0010BE  50F4               	movf	prodh,w,c
 21590  0010C0  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21591  0010C2  0E00               	movlw	0
 21592  0010C4  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21593  0010C6  50F3               	movf	prodl,w,c
 21594  0010C8  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21595  0010CA  50F4               	movf	prodh,w,c
 21596  0010CC  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21597  0010CE  0E00               	movlw	0
 21598  0010D0  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21599  0010D2  50F3               	movf	prodl,w,c
 21600  0010D4  27A6               	addwf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21601  0010D6  50F4               	movf	prodh,w,c
 21602  0010D8  23A7               	addwfc	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21603  0010DA  0E7D               	movlw	125
 21604  0010DC  03A3               	mulwf	(??_LORAWAN_TxDone+3)& (0+255),b
 21605  0010DE  50F3               	movf	prodl,w,c
 21606  0010E0  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21607  0010E2  0E00               	movlw	0
 21608  0010E4  03A2               	mulwf	(??_LORAWAN_TxDone+2)& (0+255),b
 21609  0010E6  50F3               	movf	prodl,w,c
 21610  0010E8  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21611  0010EA  0E00               	movlw	0
 21612  0010EC  03A1               	mulwf	(??_LORAWAN_TxDone+1)& (0+255),b
 21613  0010EE  50F3               	movf	prodl,w,c
 21614  0010F0  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21615  0010F2  0E00               	movlw	0
 21616  0010F4  03A0               	mulwf	??_LORAWAN_TxDone& (0+255),b
 21617  0010F6  50F3               	movf	prodl,w,c
 21618  0010F8  27A7               	addwf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21619  0010FA  0E0D               	movlw	13
 21620  0010FC  D005               	goto	u17030
 21621  0010FE                     u17035:
 21622  0010FE  90D8               	bcf	status,0,c
 21623  001100  33A7               	rrcf	(??_LORAWAN_TxDone+7)& (0+255),f,b
 21624  001102  33A6               	rrcf	(??_LORAWAN_TxDone+6)& (0+255),f,b
 21625  001104  33A5               	rrcf	(??_LORAWAN_TxDone+5)& (0+255),f,b
 21626  001106  33A4               	rrcf	(??_LORAWAN_TxDone+4)& (0+255),f,b
 21627  001108                     u17030:
 21628  001108  2EE8               	decfsz	wreg,f,c
 21629  00110A  D7F9               	goto	u17035
 21630  00110C                     L12:
 21631  00110C  C0A4  F0BA         	movff	??_LORAWAN_TxDone+4,_LORAWAN_TxDone$1948
 21632  001110  C0A5  F0BB         	movff	??_LORAWAN_TxDone+5,_LORAWAN_TxDone$1948+1
 21633  001114  C0A6  F0BC         	movff	??_LORAWAN_TxDone+6,_LORAWAN_TxDone$1948+2
 21634  001118  C0A7  F0BD         	movff	??_LORAWAN_TxDone+7,_LORAWAN_TxDone$1948+3
 21635                           
 21636                           ; BSR set to: 0
 21637  00111C  51BA               	movf	_LORAWAN_TxDone$1948& (0+255),w,b
 21638  00111E  0102               	movlb	2	; () banked
 21639  001120  5DC8               	subwf	(_loRa+200)& (0+255),w,b
 21640  001122  0100               	movlb	0	; () banked
 21641  001124  6FC3               	movwf	LORAWAN_TxDone@delta& (0+255),b
 21642  001126  51BB               	movf	(_LORAWAN_TxDone$1948+1)& (0+255),w,b
 21643  001128  0102               	movlb	2	; () banked
 21644  00112A  59C9               	subwfb	(_loRa+201)& (0+255),w,b
 21645  00112C  0100               	movlb	0	; () banked
 21646  00112E  6FC4               	movwf	(LORAWAN_TxDone@delta+1)& (0+255),b
 21647  001130  51BC               	movf	(_LORAWAN_TxDone$1948+2)& (0+255),w,b
 21648  001132  0102               	movlb	2	; () banked
 21649  001134  59CA               	subwfb	(_loRa+202)& (0+255),w,b
 21650  001136  0100               	movlb	0	; () banked
 21651  001138  6FC5               	movwf	(LORAWAN_TxDone@delta+2)& (0+255),b
 21652  00113A  51BD               	movf	(_LORAWAN_TxDone$1948+3)& (0+255),w,b
 21653  00113C  0102               	movlb	2	; () banked
 21654  00113E  59CB               	subwfb	(_loRa+203)& (0+255),w,b
 21655  001140  0100               	movlb	0	; () banked
 21656  001142  6FC6               	movwf	(LORAWAN_TxDone@delta+3)& (0+255),b
 21657  001144                     l14656:
 21658                           
 21659                           ; BSR set to: 0
 21660                           ;lorawan_eu.c: 409: }
 21661                           ;lorawan_eu.c: 411: for (i=0; i < 16; i++)
 21662  001144  6BCF               	clrf	LORAWAN_TxDone@i& (0+255),b
 21663  001146                     l14662:
 21664                           
 21665                           ; BSR set to: 0
 21666                           ;lorawan_eu.c: 412: {
 21667                           ;lorawan_eu.c: 413: if ((Channels[i].status == 1) && ( Channels[i].channelTimer != 0 ))
 21668  001146  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21669  001148  0D0E               	mullw	14
 21670  00114A  0E04               	movlw	low (_Channels+4)
 21671  00114C  24F3               	addwf	prodl,w,c
 21672  00114E  6ED9               	movwf	fsr2l,c
 21673  001150  0E04               	movlw	high (_Channels+4)
 21674  001152  20F4               	addwfc	prodh,w,c
 21675  001154  6EDA               	movwf	fsr2h,c
 21676  001156  04DE               	decf	postinc2,w,c
 21677  001158  E001 D08E          	bnz	l14680
 21678                           
 21679                           ; BSR set to: 0
 21680  00115C  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21681  00115E  0D0E               	mullw	14
 21682  001160  0E08               	movlw	low (_Channels+8)
 21683  001162  24F3               	addwf	prodl,w,c
 21684  001164  6ED9               	movwf	fsr2l,c
 21685  001166  0E04               	movlw	high (_Channels+8)
 21686  001168  20F4               	addwfc	prodh,w,c
 21687  00116A  6EDA               	movwf	fsr2h,c
 21688  00116C  50DE               	movf	postinc2,w,c
 21689  00116E  10DE               	iorwf	postinc2,w,c
 21690  001170  10DE               	iorwf	postinc2,w,c
 21691  001172  10DE               	iorwf	postinc2,w,c
 21692  001174  E101 D080          	bz	l14680
 21693                           
 21694                           ; BSR set to: 0
 21695                           ;lorawan_eu.c: 414: {
 21696                           ;lorawan_eu.c: 415: if( i != loRa.lastUsedChannelIndex )
 21697  001178  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21698  00117A  0102               	movlb	2	; () banked
 21699  00117C  19DA               	xorwf	(_loRa+218)& (0+255),w,b
 21700  00117E  E04B               	bz	l1050
 21701                           
 21702                           ; BSR set to: 2
 21703                           ;lorawan_eu.c: 416: {
 21704                           ;lorawan_eu.c: 417: if (Channels[i].channelTimer > delta)
 21705  001180  0100               	movlb	0	; () banked
 21706  001182  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21707  001184  0D0E               	mullw	14
 21708  001186  0E08               	movlw	low (_Channels+8)
 21709  001188  24F3               	addwf	prodl,w,c
 21710  00118A  6ED9               	movwf	fsr2l,c
 21711  00118C  0E04               	movlw	high (_Channels+8)
 21712  00118E  20F4               	addwfc	prodh,w,c
 21713  001190  6EDA               	movwf	fsr2h,c
 21714  001192  50DE               	movf	postinc2,w,c
 21715  001194  5DC3               	subwf	LORAWAN_TxDone@delta& (0+255),w,b
 21716  001196  50DE               	movf	postinc2,w,c
 21717  001198  59C4               	subwfb	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 21718  00119A  50DE               	movf	postinc2,w,c
 21719  00119C  59C5               	subwfb	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 21720  00119E  50DE               	movf	postinc2,w,c
 21721  0011A0  59C6               	subwfb	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 21722  0011A2  E22D               	bc	l14672
 21723                           
 21724                           ; BSR set to: 0
 21725                           ;lorawan_eu.c: 418: {
 21726                           ;lorawan_eu.c: 419: Channels[i].channelTimer = Channels[i].channelTimer - delta;
 21727  0011A4  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21728  0011A6  0D0E               	mullw	14
 21729  0011A8  0E08               	movlw	low (_Channels+8)
 21730  0011AA  24F3               	addwf	prodl,w,c
 21731  0011AC  6ED9               	movwf	fsr2l,c
 21732  0011AE  0E04               	movlw	high (_Channels+8)
 21733  0011B0  20F4               	addwfc	prodh,w,c
 21734  0011B2  6EDA               	movwf	fsr2h,c
 21735  0011B4  CFDE F0A0          	movff	postinc2,??_LORAWAN_TxDone
 21736  0011B8  CFDE F0A1          	movff	postinc2,??_LORAWAN_TxDone+1
 21737  0011BC  CFDE F0A2          	movff	postinc2,??_LORAWAN_TxDone+2
 21738  0011C0  CFDE F0A3          	movff	postinc2,??_LORAWAN_TxDone+3
 21739  0011C4  51C3               	movf	LORAWAN_TxDone@delta& (0+255),w,b
 21740  0011C6  5DA0               	subwf	??_LORAWAN_TxDone& (0+255),w,b
 21741  0011C8  6FA4               	movwf	(??_LORAWAN_TxDone+4)& (0+255),b
 21742  0011CA  51C4               	movf	(LORAWAN_TxDone@delta+1)& (0+255),w,b
 21743  0011CC  59A1               	subwfb	(??_LORAWAN_TxDone+1)& (0+255),w,b
 21744  0011CE  6FA5               	movwf	(??_LORAWAN_TxDone+5)& (0+255),b
 21745  0011D0  51C5               	movf	(LORAWAN_TxDone@delta+2)& (0+255),w,b
 21746  0011D2  59A2               	subwfb	(??_LORAWAN_TxDone+2)& (0+255),w,b
 21747  0011D4  6FA6               	movwf	(??_LORAWAN_TxDone+6)& (0+255),b
 21748  0011D6  51C6               	movf	(LORAWAN_TxDone@delta+3)& (0+255),w,b
 21749  0011D8  59A3               	subwfb	(??_LORAWAN_TxDone+3)& (0+255),w,b
 21750  0011DA  6FA7               	movwf	(??_LORAWAN_TxDone+7)& (0+255),b
 21751  0011DC  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21752  0011DE  0D0E               	mullw	14
 21753  0011E0  0E08               	movlw	low (_Channels+8)
 21754  0011E2  24F3               	addwf	prodl,w,c
 21755  0011E4  6ED9               	movwf	fsr2l,c
 21756  0011E6  0E04               	movlw	high (_Channels+8)
 21757  0011E8  20F4               	addwfc	prodh,w,c
 21758  0011EA  6EDA               	movwf	fsr2h,c
 21759  0011EC  C0A4  FFDE         	movff	??_LORAWAN_TxDone+4,postinc2
 21760  0011F0  C0A5  FFDE         	movff	??_LORAWAN_TxDone+5,postinc2
 21761  0011F4  C0A6  FFDE         	movff	??_LORAWAN_TxDone+6,postinc2
 21762  0011F8  C0A7  FFDE         	movff	??_LORAWAN_TxDone+7,postinc2
 21763                           
 21764                           ;lorawan_eu.c: 420: }
 21765  0011FC  D00C               	goto	l1050
 21766  0011FE                     l14672:
 21767                           
 21768                           ; BSR set to: 0
 21769                           ;lorawan_eu.c: 421: else
 21770                           ;lorawan_eu.c: 422: {
 21771                           ;lorawan_eu.c: 423: Channels[i].channelTimer = 0;
 21772  0011FE  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21773  001200  0D0E               	mullw	14
 21774  001202  0E08               	movlw	low (_Channels+8)
 21775  001204  24F3               	addwf	prodl,w,c
 21776  001206  6ED9               	movwf	fsr2l,c
 21777  001208  0E04               	movlw	high (_Channels+8)
 21778  00120A  20F4               	addwfc	prodh,w,c
 21779  00120C  6EDA               	movwf	fsr2h,c
 21780  00120E  6ADE               	clrf	postinc2,c
 21781  001210  6ADE               	clrf	postinc2,c
 21782  001212  6ADE               	clrf	postinc2,c
 21783  001214  6ADD               	clrf	postdec2,c
 21784  001216                     l1050:
 21785                           
 21786                           ;lorawan_eu.c: 424: }
 21787                           ;lorawan_eu.c: 425: }
 21788                           ;lorawan_eu.c: 426: if ( (Channels[i].channelTimer <= minim) && (Channels[i].channelTime
      +                          r !=0) )
 21789  001216  0100               	movlb	0	; () banked
 21790  001218  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21791  00121A  0D0E               	mullw	14
 21792  00121C  0E08               	movlw	low (_Channels+8)
 21793  00121E  24F3               	addwf	prodl,w,c
 21794  001220  6ED9               	movwf	fsr2l,c
 21795  001222  0E04               	movlw	high (_Channels+8)
 21796  001224  20F4               	addwfc	prodh,w,c
 21797  001226  6EDA               	movwf	fsr2h,c
 21798  001228  50DE               	movf	postinc2,w,c
 21799  00122A  5DCB               	subwf	LORAWAN_TxDone@minim& (0+255),w,b
 21800  00122C  50DE               	movf	postinc2,w,c
 21801  00122E  59CC               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 21802  001230  50DE               	movf	postinc2,w,c
 21803  001232  59CD               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 21804  001234  50DE               	movf	postinc2,w,c
 21805  001236  59CE               	subwfb	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 21806  001238  E31F               	bnc	l14680
 21807                           
 21808                           ; BSR set to: 0
 21809  00123A  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21810  00123C  0D0E               	mullw	14
 21811  00123E  0E08               	movlw	low (_Channels+8)
 21812  001240  24F3               	addwf	prodl,w,c
 21813  001242  6ED9               	movwf	fsr2l,c
 21814  001244  0E04               	movlw	high (_Channels+8)
 21815  001246  20F4               	addwfc	prodh,w,c
 21816  001248  6EDA               	movwf	fsr2h,c
 21817  00124A  50DE               	movf	postinc2,w,c
 21818  00124C  10DE               	iorwf	postinc2,w,c
 21819  00124E  10DE               	iorwf	postinc2,w,c
 21820  001250  10DE               	iorwf	postinc2,w,c
 21821  001252  E012               	bz	l14680
 21822                           
 21823                           ; BSR set to: 0
 21824                           ;lorawan_eu.c: 427: {
 21825                           ;lorawan_eu.c: 428: minim = Channels[i].channelTimer;
 21826  001254  51CF               	movf	LORAWAN_TxDone@i& (0+255),w,b
 21827  001256  0D0E               	mullw	14
 21828  001258  0E08               	movlw	low (_Channels+8)
 21829  00125A  24F3               	addwf	prodl,w,c
 21830  00125C  6ED9               	movwf	fsr2l,c
 21831  00125E  0E04               	movlw	high (_Channels+8)
 21832  001260  20F4               	addwfc	prodh,w,c
 21833  001262  6EDA               	movwf	fsr2h,c
 21834  001264  CFDE F0CB          	movff	postinc2,LORAWAN_TxDone@minim
 21835  001268  CFDE F0CC          	movff	postinc2,LORAWAN_TxDone@minim+1
 21836  00126C  CFDE F0CD          	movff	postinc2,LORAWAN_TxDone@minim+2
 21837  001270  CFDE F0CE          	movff	postinc2,LORAWAN_TxDone@minim+3
 21838                           
 21839                           ; BSR set to: 0
 21840                           ;lorawan_eu.c: 429: found = 1;
 21841  001274  0E01               	movlw	1
 21842  001276  6FC2               	movwf	LORAWAN_TxDone@found& (0+255),b
 21843  001278                     l14680:
 21844                           
 21845                           ; BSR set to: 0
 21846  001278  2BCF               	incf	LORAWAN_TxDone@i& (0+255),f,b
 21847                           
 21848                           ; BSR set to: 0
 21849  00127A  0E0F               	movlw	15
 21850  00127C  65CF               	cpfsgt	LORAWAN_TxDone@i& (0+255),b
 21851  00127E  D763               	goto	l14662
 21852                           
 21853                           ; BSR set to: 0
 21854                           ;lorawan_eu.c: 430: }
 21855                           ;lorawan_eu.c: 431: }
 21856                           ;lorawan_eu.c: 432: }
 21857                           ;lorawan_eu.c: 433: if (found == 1)
 21858  001280  05C2               	decf	LORAWAN_TxDone@found& (0+255),w,b
 21859  001282  E15F               	bnz	l14698
 21860                           
 21861                           ; BSR set to: 0
 21862                           ;lorawan_eu.c: 434: {
 21863                           ;lorawan_eu.c: 435: loRa.lastTimerValue = minim;
 21864  001284  C0CB  F2C8         	movff	LORAWAN_TxDone@minim,_loRa+200
 21865  001288  C0CC  F2C9         	movff	LORAWAN_TxDone@minim+1,_loRa+201
 21866  00128C  C0CD  F2CA         	movff	LORAWAN_TxDone@minim+2,_loRa+202
 21867  001290  C0CE  F2CB         	movff	LORAWAN_TxDone@minim+3,_loRa+203
 21868                           
 21869                           ; BSR set to: 0
 21870                           ;lorawan_eu.c: 436: SwTimerSetTimeout (loRa.dutyCycleTimerId, ((minim) < 0x000FFFFFUL ? 
      +                          ( (((uint32_t)(minim)) << (12)) / 125UL ) : ( (((uint32_t)(minim)) / 125UL) << (12) ) ))
      +                          ;
 21871  001294  51CE               	movf	(LORAWAN_TxDone@minim+3)& (0+255),w,b
 21872  001296  E106               	bnz	u17120
 21873  001298  29CB               	incf	LORAWAN_TxDone@minim& (0+255),w,b
 21874  00129A  0EFF               	movlw	255
 21875  00129C  59CC               	subwfb	(LORAWAN_TxDone@minim+1)& (0+255),w,b
 21876  00129E  0E0F               	movlw	15
 21877  0012A0  59CD               	subwfb	(LORAWAN_TxDone@minim+2)& (0+255),w,b
 21878  0012A2  E318               	bnc	l14692
 21879  0012A4                     u17120:
 21880                           
 21881                           ; BSR set to: 0
 21882  0012A4  C0CB  F064         	movff	LORAWAN_TxDone@minim,___lldiv@dividend
 21883  0012A8  C0CC  F065         	movff	LORAWAN_TxDone@minim+1,___lldiv@dividend+1
 21884  0012AC  C0CD  F066         	movff	LORAWAN_TxDone@minim+2,___lldiv@dividend+2
 21885  0012B0  C0CE  F067         	movff	LORAWAN_TxDone@minim+3,___lldiv@dividend+3
 21886  0012B4  0E7D               	movlw	125
 21887  0012B6  6F68               	movwf	___lldiv@divisor& (0+255),b
 21888  0012B8  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 21889  0012BA  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 21890  0012BC  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 21891  0012BE  ECB3  F030         	call	___lldiv	;wreg free
 21892  0012C2  0E0C               	movlw	12
 21893  0012C4                     u17135:
 21894  0012C4  90D8               	bcf	status,0,c
 21895  0012C6  3764               	rlcf	?___lldiv& (0+255),f,b
 21896  0012C8  3765               	rlcf	(?___lldiv+1)& (0+255),f,b
 21897  0012CA  3766               	rlcf	(?___lldiv+2)& (0+255),f,b
 21898  0012CC  3767               	rlcf	(?___lldiv+3)& (0+255),f,b
 21899  0012CE  2EE8               	decfsz	wreg,f,c
 21900  0012D0  D7F9               	goto	u17135
 21901  0012D2  D01F               	goto	L13
 21902  0012D4                     l14692:
 21903                           
 21904                           ; BSR set to: 0
 21905  0012D4  C0CB  F0A0         	movff	LORAWAN_TxDone@minim,??_LORAWAN_TxDone
 21906  0012D8  C0CC  F0A1         	movff	LORAWAN_TxDone@minim+1,??_LORAWAN_TxDone+1
 21907  0012DC  C0CD  F0A2         	movff	LORAWAN_TxDone@minim+2,??_LORAWAN_TxDone+2
 21908  0012E0  C0CE  F0A3         	movff	LORAWAN_TxDone@minim+3,??_LORAWAN_TxDone+3
 21909  0012E4  0E0C               	movlw	12
 21910  0012E6                     u17145:
 21911  0012E6  90D8               	bcf	status,0,c
 21912  0012E8  37A0               	rlcf	??_LORAWAN_TxDone& (0+255),f,b
 21913  0012EA  37A1               	rlcf	(??_LORAWAN_TxDone+1)& (0+255),f,b
 21914  0012EC  37A2               	rlcf	(??_LORAWAN_TxDone+2)& (0+255),f,b
 21915  0012EE  37A3               	rlcf	(??_LORAWAN_TxDone+3)& (0+255),f,b
 21916  0012F0  2EE8               	decfsz	wreg,f,c
 21917  0012F2  D7F9               	goto	u17145
 21918  0012F4  C0A0  F064         	movff	??_LORAWAN_TxDone,___lldiv@dividend
 21919  0012F8  C0A1  F065         	movff	??_LORAWAN_TxDone+1,___lldiv@dividend+1
 21920  0012FC  C0A2  F066         	movff	??_LORAWAN_TxDone+2,___lldiv@dividend+2
 21921  001300  C0A3  F067         	movff	??_LORAWAN_TxDone+3,___lldiv@dividend+3
 21922  001304  0E7D               	movlw	125
 21923  001306  6F68               	movwf	___lldiv@divisor& (0+255),b
 21924  001308  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 21925  00130A  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 21926  00130C  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 21927  00130E  ECB3  F030         	call	___lldiv	;wreg free
 21928  001312                     L13:
 21929  001312  C064  F0BE         	movff	?___lldiv,_LORAWAN_TxDone$1949
 21930  001316  C065  F0BF         	movff	?___lldiv+1,_LORAWAN_TxDone$1949+1
 21931  00131A  C066  F0C0         	movff	?___lldiv+2,_LORAWAN_TxDone$1949+2
 21932  00131E  C067  F0C1         	movff	?___lldiv+3,_LORAWAN_TxDone$1949+3
 21933                           
 21934                           ; BSR set to: 0
 21935  001322  C0BE  F071         	movff	_LORAWAN_TxDone$1949,SwTimerSetTimeout@timeout
 21936  001326  C0BF  F072         	movff	_LORAWAN_TxDone$1949+1,SwTimerSetTimeout@timeout+1
 21937  00132A  C0C0  F073         	movff	_LORAWAN_TxDone$1949+2,SwTimerSetTimeout@timeout+2
 21938  00132E  C0C1  F074         	movff	_LORAWAN_TxDone$1949+3,SwTimerSetTimeout@timeout+3
 21939  001332  0102               	movlb	2	; () banked
 21940  001334  51E9               	movf	(_loRa+233)& (0+255),w,b
 21941  001336  ECCA  F036         	call	_SwTimerSetTimeout
 21942                           
 21943                           ; BSR set to: 0
 21944                           ;lorawan_eu.c: 437: SwTimerStart (loRa.dutyCycleTimerId);
 21945  00133A  0102               	movlb	2	; () banked
 21946  00133C  51E9               	movf	(_loRa+233)& (0+255),w,b
 21947  00133E  ECB3  F02E         	call	_SwTimerStart
 21948  001342                     l14698:
 21949                           
 21950                           ; BSR set to: 0
 21951                           ;lorawan_eu.c: 438: }
 21952                           ;lorawan_eu.c: 439: if (CLASS_C == loRa.deviceClass)
 21953  001342  0E02               	movlw	2
 21954  001344  0102               	movlb	2	; () banked
 21955  001346  1912               	xorwf	(_loRa+18)& (0+255),w,b
 21956  001348  A4D8               	btfss	status,2,c
 21957  00134A  0012               	return	
 21958                           
 21959                           ; BSR set to: 2
 21960                           ;lorawan_eu.c: 440: {
 21961                           ;lorawan_eu.c: 441: loRa.macStatus.macState = CLASS_C_RX2_1_OPEN;
 21962  00134C  5102               	movf	(_loRa+2)& (0+255),w,b
 21963  00134E  0BF0               	andlw	-16
 21964  001350  0908               	iorlw	8
 21965  001352  6F02               	movwf	(_loRa+2)& (0+255),b
 21966                           
 21967                           ; BSR set to: 2
 21968                           ;lorawan_eu.c: 442: LORAWAN_EnterContinuousReceive();
 21969  001354  EFFF  F031         	goto	_LORAWAN_EnterContinuousReceive	;wreg free
 21970  001358                     l14704:
 21971                           
 21972                           ; BSR set to: 2
 21973                           ;lorawan_eu.c: 445: else
 21974                           ;lorawan_eu.c: 446: {
 21975                           ;lorawan_eu.c: 447: if ((RADIO_GetStatus() & (1 << (4))) != 0)
 21976  001358  EC5A  F03C         	call	_RADIO_GetStatus	;wreg free
 21977  00135C  0100               	movlb	0	; () banked
 21978  00135E  6FA0               	movwf	??_LORAWAN_TxDone& (0+255),b
 21979  001360  A9A0               	btfss	??_LORAWAN_TxDone& (0+255),4,b
 21980  001362  D011               	goto	l14708
 21981                           
 21982                           ; BSR set to: 0
 21983                           ;lorawan_eu.c: 448: {
 21984                           ;lorawan_eu.c: 450: rxPayload.RxAppData( (0), 0, RADIO_NOT_OK );
 21985  001364  0E00               	movlw	0
 21986  001366  6F64               	movwf	RxDataDone@pData& (0+255),b
 21987  001368  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 21988  00136A  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 21989  00136C  0E02               	movlw	2
 21990  00136E  6F67               	movwf	RxDataDone@status& (0+255),b
 21991  001370  0005               	push	
 21992  001372  0101               	movlb	1	; () banked
 21993  001374  6EFA               	movwf	pclath,c
 21994  001376  516E               	movf	_rxPayload& (0+255),w,b
 21995  001378  6EFD               	movwf	tosl,c
 21996  00137A  516F               	movf	(_rxPayload+1)& (0+255),w,b
 21997  00137C  6EFE               	movwf	tosh,c
 21998  00137E  50F8               	movf	tblptru,w,c
 21999  001380  6EFF               	movwf	tosu,c
 22000  001382  50FA               	movf	pclath,w,c
 22001  001384  0012               	return		;indir
 22002  001386                     l14708:
 22003                           
 22004                           ; BSR set to: 0
 22005                           ;lorawan_eu.c: 452: else
 22006                           ;lorawan_eu.c: 453: {
 22007                           ;lorawan_eu.c: 455: if ( rxPayload.RxAppData != (0) )
 22008  001386  0101               	movlb	1	; () banked
 22009  001388  516E               	movf	_rxPayload& (0+255),w,b
 22010  00138A  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 22011  00138C  B4D8               	btfsc	status,2,c
 22012  00138E  0012               	return	
 22013                           
 22014                           ; BSR set to: 1
 22015                           ;lorawan_eu.c: 456: {
 22016                           ;lorawan_eu.c: 457: rxPayload.RxAppData( (0), 0, RADIO_OK );
 22017  001390  0E00               	movlw	0
 22018  001392  0100               	movlb	0	; () banked
 22019  001394  6F64               	movwf	RxDataDone@pData& (0+255),b
 22020  001396  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 22021  001398  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 22022  00139A  0E03               	movlw	3
 22023  00139C  6F67               	movwf	RxDataDone@status& (0+255),b
 22024  00139E  0005               	push	
 22025  0013A0  0101               	movlb	1	; () banked
 22026  0013A2  6EFA               	movwf	pclath,c
 22027  0013A4  516E               	movf	_rxPayload& (0+255),w,b
 22028  0013A6  6EFD               	movwf	tosl,c
 22029  0013A8  516F               	movf	(_rxPayload+1)& (0+255),w,b
 22030  0013AA  6EFE               	movwf	tosh,c
 22031  0013AC  50F8               	movf	tblptru,w,c
 22032  0013AE  6EFF               	movwf	tosu,c
 22033  0013B0  50FA               	movf	pclath,w,c
 22034  0013B2  0012               	return		;indir
 22035  0013B4                     __end_of_LORAWAN_TxDone:
 22036                           	opt stack 0
 22037                           tosu	equ	0xFFF
 22038                           tosh	equ	0xFFE
 22039                           tosl	equ	0xFFD
 22040                           pclath	equ	0xFFA
 22041                           tblptru	equ	0xFF8
 22042                           tblptrh	equ	0xFF7
 22043                           tblptrl	equ	0xFF6
 22044                           tablat	equ	0xFF5
 22045                           prodh	equ	0xFF4
 22046                           prodl	equ	0xFF3
 22047                           intcon	equ	0xFF2
 22048                           indf0	equ	0xFEF
 22049                           postinc0	equ	0xFEE
 22050                           fsr0h	equ	0xFEA
 22051                           fsr0l	equ	0xFE9
 22052                           wreg	equ	0xFE8
 22053                           postinc1	equ	0xFE6
 22054                           postdec1	equ	0xFE5
 22055                           plusw1	equ	0xFE3
 22056                           fsr1h	equ	0xFE2
 22057                           fsr1l	equ	0xFE1
 22058                           indf2	equ	0xFDF
 22059                           postinc2	equ	0xFDE
 22060                           postdec2	equ	0xFDD
 22061                           plusw2	equ	0xFDB
 22062                           fsr2h	equ	0xFDA
 22063                           fsr2l	equ	0xFD9
 22064                           status	equ	0xFD8
 22065                           
 22066 ;; *************** function _SwTimerReadValue *****************
 22067 ;; Defined at:
 22068 ;;		line 193 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 22069 ;; Parameters:    Size  Location     Type
 22070 ;;  timerId         1    wreg     unsigned char 
 22071 ;; Auto vars:     Size  Location     Type
 22072 ;;  timerId         1   51[BANK0 ] unsigned char 
 22073 ;;  ticksCount      4   47[BANK0 ] unsigned long 
 22074 ;; Return value:  Size  Location     Type
 22075 ;;                  4   43[BANK0 ] unsigned long 
 22076 ;; Registers used:
 22077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22078 ;; Tracked objects:
 22079 ;;		On entry : C/1
 22080 ;;		On exit  : F/0
 22081 ;;		Unchanged: 0/0
 22082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22083 ;;      Params:         0       4       0       0       0       0       0       0       0
 22084 ;;      Locals:         0       5       0       0       0       0       0       0       0
 22085 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22086 ;;      Totals:         0       9       0       0       0       0       0       0       0
 22087 ;;Total ram usage:        9 bytes
 22088 ;; Hardware stack levels used:    1
 22089 ;; Hardware stack levels required when called:   10
 22090 ;; This function calls:
 22091 ;;		_SwTimersInterrupt
 22092 ;; This function is called by:
 22093 ;;		_RADIO_TxDone
 22094 ;;		_RADIO_FSKPacketSent
 22095 ;;		_LORAWAN_TxDone
 22096 ;; This function uses a non-reentrant model
 22097 ;;
 22098                           
 22099                           	psect	text107
 22100  006E16                     __ptext107:
 22101                           	opt stack 0
 22102  006E16                     _SwTimerReadValue:
 22103                           	opt stack 16
 22104                           
 22105                           ;incstack = 0
 22106                           ;SwTimerReadValue@timerId stored from wreg
 22107  006E16  0100               	movlb	0	; () banked
 22108  006E18  6F93               	movwf	SwTimerReadValue@timerId& (0+255),b
 22109                           
 22110                           ;sw_timer.c: 195: uint32_t ticksCount;
 22111                           ;sw_timer.c: 197: (INTCONbits.GIE = 0);
 22112  006E1A  9EF2               	bcf	intcon,7,c	;volatile
 22113                           
 22114                           ;sw_timer.c: 200: SwTimersInterrupt();
 22115  006E1C  ECD6  F025         	call	_SwTimersInterrupt	;wreg free
 22116                           
 22117                           ; BSR set to: 0
 22118                           ;sw_timer.c: 201: ticksCount = swTimers[timerId].ticksRemaining;
 22119  006E20  5193               	movf	SwTimerReadValue@timerId& (0+255),w,b
 22120  006E22  0D08               	mullw	8
 22121  006E24  0E00               	movlw	low _swTimers
 22122  006E26  24F3               	addwf	prodl,w,c
 22123  006E28  6ED9               	movwf	fsr2l,c
 22124  006E2A  0E03               	movlw	high _swTimers
 22125  006E2C  20F4               	addwfc	prodh,w,c
 22126  006E2E  6EDA               	movwf	fsr2h,c
 22127  006E30  CFDE F08F          	movff	postinc2,SwTimerReadValue@ticksCount
 22128  006E34  CFDE F090          	movff	postinc2,SwTimerReadValue@ticksCount+1
 22129  006E38  CFDE F091          	movff	postinc2,SwTimerReadValue@ticksCount+2
 22130  006E3C  CFDE F092          	movff	postinc2,SwTimerReadValue@ticksCount+3
 22131                           
 22132                           ; BSR set to: 0
 22133                           ;sw_timer.c: 202: (INTCONbits.GIE = 1);
 22134  006E40  8EF2               	bsf	intcon,7,c	;volatile
 22135                           
 22136                           ; BSR set to: 0
 22137                           ;sw_timer.c: 204: return ticksCount;
 22138  006E42  C08F  F08B         	movff	SwTimerReadValue@ticksCount,?_SwTimerReadValue
 22139  006E46  C090  F08C         	movff	SwTimerReadValue@ticksCount+1,?_SwTimerReadValue+1
 22140  006E4A  C091  F08D         	movff	SwTimerReadValue@ticksCount+2,?_SwTimerReadValue+2
 22141  006E4E  C092  F08E         	movff	SwTimerReadValue@ticksCount+3,?_SwTimerReadValue+3
 22142                           
 22143                           ; BSR set to: 0
 22144  006E52  0012               	return		;funcret
 22145  006E54                     __end_of_SwTimerReadValue:
 22146                           	opt stack 0
 22147                           tosu	equ	0xFFF
 22148                           tosh	equ	0xFFE
 22149                           tosl	equ	0xFFD
 22150                           pclath	equ	0xFFA
 22151                           tblptru	equ	0xFF8
 22152                           tblptrh	equ	0xFF7
 22153                           tblptrl	equ	0xFF6
 22154                           tablat	equ	0xFF5
 22155                           prodh	equ	0xFF4
 22156                           prodl	equ	0xFF3
 22157                           intcon	equ	0xFF2
 22158                           indf0	equ	0xFEF
 22159                           postinc0	equ	0xFEE
 22160                           fsr0h	equ	0xFEA
 22161                           fsr0l	equ	0xFE9
 22162                           wreg	equ	0xFE8
 22163                           postinc1	equ	0xFE6
 22164                           postdec1	equ	0xFE5
 22165                           plusw1	equ	0xFE3
 22166                           fsr1h	equ	0xFE2
 22167                           fsr1l	equ	0xFE1
 22168                           indf2	equ	0xFDF
 22169                           postinc2	equ	0xFDE
 22170                           postdec2	equ	0xFDD
 22171                           plusw2	equ	0xFDB
 22172                           fsr2h	equ	0xFDA
 22173                           fsr2l	equ	0xFD9
 22174                           status	equ	0xFD8
 22175                           
 22176 ;; *************** function _SwTimerIsRunning *****************
 22177 ;; Defined at:
 22178 ;;		line 207 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 22179 ;; Parameters:    Size  Location     Type
 22180 ;;  timerId         1    wreg     unsigned char 
 22181 ;; Auto vars:     Size  Location     Type
 22182 ;;  timerId         1    4[BANK0 ] unsigned char 
 22183 ;;  isRunning       1    5[BANK0 ] unsigned char 
 22184 ;; Return value:  Size  Location     Type
 22185 ;;                  1    wreg      unsigned char 
 22186 ;; Registers used:
 22187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22188 ;; Tracked objects:
 22189 ;;		On entry : F/2
 22190 ;;		On exit  : F/0
 22191 ;;		Unchanged: 0/0
 22192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22193 ;;      Params:         0       0       0       0       0       0       0       0       0
 22194 ;;      Locals:         0       2       0       0       0       0       0       0       0
 22195 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22196 ;;      Totals:         0       2       0       0       0       0       0       0       0
 22197 ;;Total ram usage:        2 bytes
 22198 ;; Hardware stack levels used:    1
 22199 ;; Hardware stack levels required when called:    7
 22200 ;; This function calls:
 22201 ;;		Nothing
 22202 ;; This function is called by:
 22203 ;;		_LORAWAN_TxDone
 22204 ;; This function uses a non-reentrant model
 22205 ;;
 22206                           
 22207                           	psect	text108
 22208  00747A                     __ptext108:
 22209                           	opt stack 0
 22210  00747A                     _SwTimerIsRunning:
 22211                           	opt stack 19
 22212                           
 22213                           ; BSR set to: 0
 22214                           ;incstack = 0
 22215                           ;SwTimerIsRunning@timerId stored from wreg
 22216  00747A  0100               	movlb	0	; () banked
 22217  00747C  6F64               	movwf	SwTimerIsRunning@timerId& (0+255),b
 22218                           
 22219                           ;sw_timer.c: 209: uint8_t isRunning;
 22220                           ;sw_timer.c: 211: (INTCONbits.GIE = 0);
 22221  00747E  9EF2               	bcf	intcon,7,c	;volatile
 22222                           
 22223                           ;sw_timer.c: 212: isRunning = swTimers[timerId].running;
 22224  007480  5164               	movf	SwTimerIsRunning@timerId& (0+255),w,b
 22225  007482  0D08               	mullw	8
 22226  007484  0E04               	movlw	low (_swTimers+4)
 22227  007486  24F3               	addwf	prodl,w,c
 22228  007488  6ED9               	movwf	fsr2l,c
 22229  00748A  0E03               	movlw	high (_swTimers+4)
 22230  00748C  20F4               	addwfc	prodh,w,c
 22231  00748E  6EDA               	movwf	fsr2h,c
 22232  007490  50DF               	movf	indf2,w,c
 22233  007492  6F65               	movwf	SwTimerIsRunning@isRunning& (0+255),b
 22234                           
 22235                           ; BSR set to: 0
 22236                           ;sw_timer.c: 213: (INTCONbits.GIE = 1);
 22237  007494  8EF2               	bsf	intcon,7,c	;volatile
 22238                           
 22239                           ; BSR set to: 0
 22240                           ;sw_timer.c: 215: return isRunning;
 22241  007496  5165               	movf	SwTimerIsRunning@isRunning& (0+255),w,b
 22242                           
 22243                           ; BSR set to: 0
 22244  007498  0012               	return		;funcret
 22245  00749A                     __end_of_SwTimerIsRunning:
 22246                           	opt stack 0
 22247                           tosu	equ	0xFFF
 22248                           tosh	equ	0xFFE
 22249                           tosl	equ	0xFFD
 22250                           pclath	equ	0xFFA
 22251                           tblptru	equ	0xFF8
 22252                           tblptrh	equ	0xFF7
 22253                           tblptrl	equ	0xFF6
 22254                           tablat	equ	0xFF5
 22255                           prodh	equ	0xFF4
 22256                           prodl	equ	0xFF3
 22257                           intcon	equ	0xFF2
 22258                           indf0	equ	0xFEF
 22259                           postinc0	equ	0xFEE
 22260                           fsr0h	equ	0xFEA
 22261                           fsr0l	equ	0xFE9
 22262                           wreg	equ	0xFE8
 22263                           postinc1	equ	0xFE6
 22264                           postdec1	equ	0xFE5
 22265                           plusw1	equ	0xFE3
 22266                           fsr1h	equ	0xFE2
 22267                           fsr1l	equ	0xFE1
 22268                           indf2	equ	0xFDF
 22269                           postinc2	equ	0xFDE
 22270                           postdec2	equ	0xFDD
 22271                           plusw2	equ	0xFDB
 22272                           fsr2h	equ	0xFDA
 22273                           fsr2l	equ	0xFD9
 22274                           status	equ	0xFD8
 22275                           
 22276 ;; *************** function _RADIO_GetStatus *****************
 22277 ;; Defined at:
 22278 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22279 ;; Parameters:    Size  Location     Type
 22280 ;;		None
 22281 ;; Auto vars:     Size  Location     Type
 22282 ;;		None
 22283 ;; Return value:  Size  Location     Type
 22284 ;;                  1    wreg      unsigned char 
 22285 ;; Registers used:
 22286 ;;		wreg, status,2
 22287 ;; Tracked objects:
 22288 ;;		On entry : C/2
 22289 ;;		On exit  : F/1
 22290 ;;		Unchanged: 0/0
 22291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22292 ;;      Params:         0       0       0       0       0       0       0       0       0
 22293 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22294 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22295 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22296 ;;Total ram usage:        0 bytes
 22297 ;; Hardware stack levels used:    1
 22298 ;; Hardware stack levels required when called:    7
 22299 ;; This function calls:
 22300 ;;		Nothing
 22301 ;; This function is called by:
 22302 ;;		_LORAWAN_TxDone
 22303 ;;		_LORAWAN_ReceiveWindow2Callback
 22304 ;;		_LORAWAN_RxDone
 22305 ;; This function uses a non-reentrant model
 22306 ;;
 22307                           
 22308                           	psect	text109
 22309  0078B4                     __ptext109:
 22310                           	opt stack 0
 22311  0078B4                     _RADIO_GetStatus:
 22312                           	opt stack 19
 22313                           
 22314                           ;radio_driver_SX1276.c: 1118: return RadioConfiguration.flags;
 22315                           
 22316                           ; BSR set to: 0
 22317                           ;incstack = 0
 22318  0078B4  0101               	movlb	1	; () banked
 22319  0078B6  5198               	movf	(_RadioConfiguration+35)& (0+255),w,b
 22320                           
 22321                           ; BSR set to: 1
 22322  0078B8  0012               	return		;funcret
 22323  0078BA                     __end_of_RADIO_GetStatus:
 22324                           	opt stack 0
 22325                           tosu	equ	0xFFF
 22326                           tosh	equ	0xFFE
 22327                           tosl	equ	0xFFD
 22328                           pclath	equ	0xFFA
 22329                           tblptru	equ	0xFF8
 22330                           tblptrh	equ	0xFF7
 22331                           tblptrl	equ	0xFF6
 22332                           tablat	equ	0xFF5
 22333                           prodh	equ	0xFF4
 22334                           prodl	equ	0xFF3
 22335                           intcon	equ	0xFF2
 22336                           indf0	equ	0xFEF
 22337                           postinc0	equ	0xFEE
 22338                           fsr0h	equ	0xFEA
 22339                           fsr0l	equ	0xFE9
 22340                           wreg	equ	0xFE8
 22341                           postinc1	equ	0xFE6
 22342                           postdec1	equ	0xFE5
 22343                           plusw1	equ	0xFE3
 22344                           fsr1h	equ	0xFE2
 22345                           fsr1l	equ	0xFE1
 22346                           indf2	equ	0xFDF
 22347                           postinc2	equ	0xFDE
 22348                           postdec2	equ	0xFDD
 22349                           plusw2	equ	0xFDB
 22350                           fsr2h	equ	0xFDA
 22351                           fsr2l	equ	0xFD9
 22352                           status	equ	0xFD8
 22353                           
 22354 ;; *************** function _LORAWAN_EnterContinuousReceive *****************
 22355 ;; Defined at:
 22356 ;;		line 915 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22357 ;; Parameters:    Size  Location     Type
 22358 ;;		None
 22359 ;; Auto vars:     Size  Location     Type
 22360 ;;		None
 22361 ;; Return value:  Size  Location     Type
 22362 ;;                  1    wreg      void 
 22363 ;; Registers used:
 22364 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22365 ;; Tracked objects:
 22366 ;;		On entry : F/2
 22367 ;;		On exit  : E/0
 22368 ;;		Unchanged: 0/0
 22369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22370 ;;      Params:         0       0       0       0       0       0       0       0       0
 22371 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22372 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22373 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22374 ;;Total ram usage:        0 bytes
 22375 ;; Hardware stack levels used:    1
 22376 ;; Hardware stack levels required when called:   13
 22377 ;; This function calls:
 22378 ;;		_ConfigureRadioRx
 22379 ;;		_RADIO_ReceiveStart
 22380 ;;		_RADIO_ReceiveStop
 22381 ;;		_RADIO_ReleaseData
 22382 ;;		_ResetParametersForConfirmedTransmission
 22383 ;;		_ResetParametersForUnconfirmedTransmission
 22384 ;;		_RxDataDone
 22385 ;; This function is called by:
 22386 ;;		_LORAWAN_TxDone
 22387 ;;		_LORAWAN_ReceiveWindow2Callback
 22388 ;;		_LORAWAN_RxDone
 22389 ;;		_SetReceptionNotOkState
 22390 ;; This function uses a non-reentrant model
 22391 ;;
 22392                           
 22393                           	psect	text110
 22394  0063FE                     __ptext110:
 22395                           	opt stack 0
 22396  0063FE                     _LORAWAN_EnterContinuousReceive:
 22397                           	opt stack 13
 22398                           
 22399                           ; BSR set to: 2
 22400                           ;lorawan.c: 917: RADIO_ReceiveStop();
 22401                           
 22402                           ; BSR set to: 1
 22403                           ;incstack = 0
 22404  0063FE  EC8B  F03A         	call	_RADIO_ReceiveStop	;wreg free
 22405                           
 22406                           ; BSR set to: 1
 22407                           ;lorawan.c: 918: RADIO_ReleaseData();
 22408  006402  EC5D  F03C         	call	_RADIO_ReleaseData	;wreg free
 22409                           
 22410                           ; BSR set to: 1
 22411                           ;lorawan.c: 920: ConfigureRadioRx(loRa.receiveWindow2Parameters.dataRate, loRa.receiveWi
      +                          ndow2Parameters.frequency);
 22412  006406  C218  F076         	movff	_loRa+24,ConfigureRadioRx@freq
 22413  00640A  C219  F077         	movff	_loRa+25,ConfigureRadioRx@freq+1
 22414  00640E  C21A  F078         	movff	_loRa+26,ConfigureRadioRx@freq+2
 22415  006412  C21B  F079         	movff	_loRa+27,ConfigureRadioRx@freq+3
 22416  006416  0102               	movlb	2	; () banked
 22417  006418  511C               	movf	(_loRa+28)& (0+255),w,b
 22418  00641A  EC9D  F039         	call	_ConfigureRadioRx
 22419                           
 22420                           ;lorawan.c: 922: if (RADIO_ReceiveStart(0) != OK)
 22421  00641E  0100               	movlb	0	; () banked
 22422  006420  6B95               	clrf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),b
 22423  006422  6B94               	clrf	RADIO_ReceiveStart@rxWindowSize& (0+255),b
 22424  006424  EC02  F016         	call	_RADIO_ReceiveStart	;wreg free
 22425  006428  5194               	movf	?_RADIO_ReceiveStart& (0+255),w,b
 22426  00642A  1195               	iorwf	(?_RADIO_ReceiveStart+1)& (0+255),w,b
 22427  00642C  B4D8               	btfsc	status,2,c
 22428  00642E  0012               	return	
 22429                           
 22430                           ; BSR set to: 0
 22431                           ;lorawan.c: 923: {
 22432                           ;lorawan.c: 924: ResetParametersForConfirmedTransmission ();
 22433  006430  ECC9  F03B         	call	_ResetParametersForConfirmedTransmission	;wreg free
 22434                           
 22435                           ;lorawan.c: 925: ResetParametersForUnconfirmedTransmission ();
 22436  006434  ECC2  F03B         	call	_ResetParametersForUnconfirmedTransmission	;wreg free
 22437                           
 22438                           ; BSR set to: 2
 22439                           ;lorawan.c: 926: loRa.macStatus.macState = IDLE;
 22440  006438  0EF0               	movlw	-16
 22441  00643A  1702               	andwf	(_loRa+2)& (0+255),f,b
 22442                           
 22443                           ; BSR set to: 2
 22444                           ;lorawan.c: 927: if (rxPayload.RxAppData != (0))
 22445  00643C  0101               	movlb	1	; () banked
 22446  00643E  516E               	movf	_rxPayload& (0+255),w,b
 22447  006440  116F               	iorwf	(_rxPayload+1)& (0+255),w,b
 22448  006442  B4D8               	btfsc	status,2,c
 22449  006444  0012               	return	
 22450                           
 22451                           ; BSR set to: 1
 22452                           ;lorawan.c: 928: {
 22453                           ;lorawan.c: 929: rxPayload.RxAppData ((0), 0, MAC_NOT_OK);
 22454  006446  0E00               	movlw	0
 22455  006448  0100               	movlb	0	; () banked
 22456  00644A  6F64               	movwf	RxDataDone@pData& (0+255),b
 22457  00644C  6F65               	movwf	(RxDataDone@pData+1)& (0+255),b
 22458  00644E  6F66               	movwf	RxDataDone@dataLength& (0+255),b
 22459  006450  6F67               	movwf	RxDataDone@status& (0+255),b
 22460  006452  0005               	push	
 22461  006454  0101               	movlb	1	; () banked
 22462  006456  6EFA               	movwf	pclath,c
 22463  006458  516E               	movf	_rxPayload& (0+255),w,b
 22464  00645A  6EFD               	movwf	tosl,c
 22465  00645C  516F               	movf	(_rxPayload+1)& (0+255),w,b
 22466  00645E  6EFE               	movwf	tosh,c
 22467  006460  50F8               	movf	tblptru,w,c
 22468  006462  6EFF               	movwf	tosu,c
 22469  006464  50FA               	movf	pclath,w,c
 22470  006466  0012               	return		;indir
 22471  006468                     __end_of_LORAWAN_EnterContinuousReceive:
 22472                           	opt stack 0
 22473                           tosu	equ	0xFFF
 22474                           tosh	equ	0xFFE
 22475                           tosl	equ	0xFFD
 22476                           pclath	equ	0xFFA
 22477                           tblptru	equ	0xFF8
 22478                           tblptrh	equ	0xFF7
 22479                           tblptrl	equ	0xFF6
 22480                           tablat	equ	0xFF5
 22481                           prodh	equ	0xFF4
 22482                           prodl	equ	0xFF3
 22483                           intcon	equ	0xFF2
 22484                           indf0	equ	0xFEF
 22485                           postinc0	equ	0xFEE
 22486                           fsr0h	equ	0xFEA
 22487                           fsr0l	equ	0xFE9
 22488                           wreg	equ	0xFE8
 22489                           postinc1	equ	0xFE6
 22490                           postdec1	equ	0xFE5
 22491                           plusw1	equ	0xFE3
 22492                           fsr1h	equ	0xFE2
 22493                           fsr1l	equ	0xFE1
 22494                           indf2	equ	0xFDF
 22495                           postinc2	equ	0xFDE
 22496                           postdec2	equ	0xFDD
 22497                           plusw2	equ	0xFDB
 22498                           fsr2h	equ	0xFDA
 22499                           fsr2l	equ	0xFD9
 22500                           status	equ	0xFD8
 22501                           
 22502 ;; *************** function _RxDataDone *****************
 22503 ;; Defined at:
 22504 ;;		line 125 in file "main.c"
 22505 ;; Parameters:    Size  Location     Type
 22506 ;;  pData           2    4[BANK0 ] PTR unsigned char 
 22507 ;;		 -> LORAWAN_RxDone@hdr(2), radioBuffer(271), NULL(0), 
 22508 ;;  dataLength      1    6[BANK0 ] unsigned char 
 22509 ;;  status          1    7[BANK0 ] enum E17261
 22510 ;; Auto vars:     Size  Location     Type
 22511 ;;		None
 22512 ;; Return value:  Size  Location     Type
 22513 ;;                  1    wreg      void 
 22514 ;; Registers used:
 22515 ;;		None
 22516 ;; Tracked objects:
 22517 ;;		On entry : F/1
 22518 ;;		On exit  : F/1
 22519 ;;		Unchanged: F/0
 22520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22521 ;;      Params:         0       4       0       0       0       0       0       0       0
 22522 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22523 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22524 ;;      Totals:         0       4       0       0       0       0       0       0       0
 22525 ;;Total ram usage:        4 bytes
 22526 ;; Hardware stack levels used:    1
 22527 ;; Hardware stack levels required when called:    7
 22528 ;; This function calls:
 22529 ;;		Nothing
 22530 ;; This function is called by:
 22531 ;;		_main
 22532 ;;		_LORAWAN_EnterContinuousReceive
 22533 ;;		_LORAWAN_ReceiveWindow2Callback
 22534 ;;		_SetReceptionNotOkState
 22535 ;;		_LORAWAN_RxDone
 22536 ;;		_LORAWAN_RxTimeout
 22537 ;;		_LORAWAN_TxDone
 22538 ;;		_AckRetransmissionCallback
 22539 ;;		_UnconfirmedTransmissionCallback
 22540 ;; This function uses a non-reentrant model
 22541 ;;
 22542                           
 22543                           	psect	text111
 22544  0078F6                     __ptext111:
 22545                           	opt stack 0
 22546  0078F6                     _RxDataDone:
 22547                           	opt stack 20
 22548                           
 22549                           ; BSR set to: 1
 22550                           
 22551                           ;incstack = 0
 22552  0078F6  0012               	return		;funcret
 22553  0078F8                     __end_of_RxDataDone:
 22554                           	opt stack 0
 22555                           tosu	equ	0xFFF
 22556                           tosh	equ	0xFFE
 22557                           tosl	equ	0xFFD
 22558                           pclath	equ	0xFFA
 22559                           tblptru	equ	0xFF8
 22560                           tblptrh	equ	0xFF7
 22561                           tblptrl	equ	0xFF6
 22562                           tablat	equ	0xFF5
 22563                           prodh	equ	0xFF4
 22564                           prodl	equ	0xFF3
 22565                           intcon	equ	0xFF2
 22566                           indf0	equ	0xFEF
 22567                           postinc0	equ	0xFEE
 22568                           fsr0h	equ	0xFEA
 22569                           fsr0l	equ	0xFE9
 22570                           wreg	equ	0xFE8
 22571                           postinc1	equ	0xFE6
 22572                           postdec1	equ	0xFE5
 22573                           plusw1	equ	0xFE3
 22574                           fsr1h	equ	0xFE2
 22575                           fsr1l	equ	0xFE1
 22576                           indf2	equ	0xFDF
 22577                           postinc2	equ	0xFDE
 22578                           postdec2	equ	0xFDD
 22579                           plusw2	equ	0xFDB
 22580                           fsr2h	equ	0xFDA
 22581                           fsr2l	equ	0xFD9
 22582                           status	equ	0xFD8
 22583                           
 22584 ;; *************** function _ResetParametersForUnconfirmedTransmission *****************
 22585 ;; Defined at:
 22586 ;;		line 1097 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22587 ;; Parameters:    Size  Location     Type
 22588 ;;		None
 22589 ;; Auto vars:     Size  Location     Type
 22590 ;;		None
 22591 ;; Return value:  Size  Location     Type
 22592 ;;                  1    wreg      void 
 22593 ;; Registers used:
 22594 ;;		wreg, status,2
 22595 ;; Tracked objects:
 22596 ;;		On entry : D/0
 22597 ;;		On exit  : F/2
 22598 ;;		Unchanged: 0/0
 22599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22600 ;;      Params:         0       0       0       0       0       0       0       0       0
 22601 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22602 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22603 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22604 ;;Total ram usage:        0 bytes
 22605 ;; Hardware stack levels used:    1
 22606 ;; Hardware stack levels required when called:    7
 22607 ;; This function calls:
 22608 ;;		Nothing
 22609 ;; This function is called by:
 22610 ;;		_LORAWAN_RxTimeout
 22611 ;;		_LORAWAN_ReceiveWindow2Callback
 22612 ;;		_LORAWAN_EnterContinuousReceive
 22613 ;;		_UnconfirmedTransmissionCallback
 22614 ;; This function uses a non-reentrant model
 22615 ;;
 22616                           
 22617                           	psect	text112
 22618  007784                     __ptext112:
 22619                           	opt stack 0
 22620  007784                     _ResetParametersForUnconfirmedTransmission:
 22621                           	opt stack 20
 22622                           
 22623                           ;lorawan.c: 1099: loRa.macStatus.macState = IDLE;
 22624                           
 22625                           ; BSR set to: 1
 22626                           ;incstack = 0
 22627  007784  0EF0               	movlw	-16
 22628  007786  0102               	movlb	2	; () banked
 22629  007788  1702               	andwf	(_loRa+2)& (0+255),f,b
 22630                           
 22631                           ;lorawan.c: 1100: loRa.counterRepetitionsUnconfirmedUplink = 1;
 22632  00778A  0E01               	movlw	1
 22633  00778C  6FD8               	movwf	(_loRa+216)& (0+255),b
 22634                           
 22635                           ; BSR set to: 2
 22636                           ;lorawan.c: 1101: loRa.crtMacCmdIndex = 0;
 22637  00778E  6BA7               	clrf	(_loRa+167)& (0+255),b
 22638                           
 22639                           ; BSR set to: 2
 22640  007790  0012               	return		;funcret
 22641  007792                     __end_of_ResetParametersForUnconfirmedTransmission:
 22642                           	opt stack 0
 22643                           tosu	equ	0xFFF
 22644                           tosh	equ	0xFFE
 22645                           tosl	equ	0xFFD
 22646                           pclath	equ	0xFFA
 22647                           tblptru	equ	0xFF8
 22648                           tblptrh	equ	0xFF7
 22649                           tblptrl	equ	0xFF6
 22650                           tablat	equ	0xFF5
 22651                           prodh	equ	0xFF4
 22652                           prodl	equ	0xFF3
 22653                           intcon	equ	0xFF2
 22654                           indf0	equ	0xFEF
 22655                           postinc0	equ	0xFEE
 22656                           fsr0h	equ	0xFEA
 22657                           fsr0l	equ	0xFE9
 22658                           wreg	equ	0xFE8
 22659                           postinc1	equ	0xFE6
 22660                           postdec1	equ	0xFE5
 22661                           plusw1	equ	0xFE3
 22662                           fsr1h	equ	0xFE2
 22663                           fsr1l	equ	0xFE1
 22664                           indf2	equ	0xFDF
 22665                           postinc2	equ	0xFDE
 22666                           postdec2	equ	0xFDD
 22667                           plusw2	equ	0xFDB
 22668                           fsr2h	equ	0xFDA
 22669                           fsr2l	equ	0xFD9
 22670                           status	equ	0xFD8
 22671                           
 22672 ;; *************** function _ResetParametersForConfirmedTransmission *****************
 22673 ;; Defined at:
 22674 ;;		line 1090 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 22675 ;; Parameters:    Size  Location     Type
 22676 ;;		None
 22677 ;; Auto vars:     Size  Location     Type
 22678 ;;		None
 22679 ;; Return value:  Size  Location     Type
 22680 ;;                  1    wreg      void 
 22681 ;; Registers used:
 22682 ;;		wreg, status,2
 22683 ;; Tracked objects:
 22684 ;;		On entry : D/2
 22685 ;;		On exit  : F/2
 22686 ;;		Unchanged: 0/0
 22687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22688 ;;      Params:         0       0       0       0       0       0       0       0       0
 22689 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22690 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22691 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22692 ;;Total ram usage:        0 bytes
 22693 ;; Hardware stack levels used:    1
 22694 ;; Hardware stack levels required when called:    7
 22695 ;; This function calls:
 22696 ;;		Nothing
 22697 ;; This function is called by:
 22698 ;;		_LORAWAN_RxTimeout
 22699 ;;		_LORAWAN_ReceiveWindow2Callback
 22700 ;;		_LORAWAN_EnterContinuousReceive
 22701 ;;		_AckRetransmissionCallback
 22702 ;; This function uses a non-reentrant model
 22703 ;;
 22704                           
 22705                           	psect	text113
 22706  007792                     __ptext113:
 22707                           	opt stack 0
 22708  007792                     _ResetParametersForConfirmedTransmission:
 22709                           	opt stack 18
 22710                           
 22711                           ;lorawan.c: 1092: loRa.macStatus.macState = IDLE;
 22712                           
 22713                           ; BSR set to: 2
 22714                           ;incstack = 0
 22715  007792  0EF0               	movlw	-16
 22716  007794  0102               	movlb	2	; () banked
 22717  007796  1702               	andwf	(_loRa+2)& (0+255),f,b
 22718                           
 22719                           ;lorawan.c: 1093: loRa.counterRepetitionsConfirmedUplink = 1;
 22720  007798  0E01               	movlw	1
 22721  00779A  6FD9               	movwf	(_loRa+217)& (0+255),b
 22722                           
 22723                           ; BSR set to: 2
 22724                           ;lorawan.c: 1094: loRa.lorawanMacStatus.ackRequiredFromNextDownlinkMessage = 0;
 22725  00779C  9100               	bcf	_loRa& (0+255),0,b
 22726                           
 22727                           ; BSR set to: 2
 22728  00779E  0C01               	retlw	1	;funcret
 22729  0077A0                     __end_of_ResetParametersForConfirmedTransmission:
 22730                           	opt stack 0
 22731                           tosu	equ	0xFFF
 22732                           tosh	equ	0xFFE
 22733                           tosl	equ	0xFFD
 22734                           pclath	equ	0xFFA
 22735                           tblptru	equ	0xFF8
 22736                           tblptrh	equ	0xFF7
 22737                           tblptrl	equ	0xFF6
 22738                           tablat	equ	0xFF5
 22739                           prodh	equ	0xFF4
 22740                           prodl	equ	0xFF3
 22741                           intcon	equ	0xFF2
 22742                           indf0	equ	0xFEF
 22743                           postinc0	equ	0xFEE
 22744                           fsr0h	equ	0xFEA
 22745                           fsr0l	equ	0xFE9
 22746                           wreg	equ	0xFE8
 22747                           postinc1	equ	0xFE6
 22748                           postdec1	equ	0xFE5
 22749                           plusw1	equ	0xFE3
 22750                           fsr1h	equ	0xFE2
 22751                           fsr1l	equ	0xFE1
 22752                           indf2	equ	0xFDF
 22753                           postinc2	equ	0xFDE
 22754                           postdec2	equ	0xFDD
 22755                           plusw2	equ	0xFDB
 22756                           fsr2h	equ	0xFDA
 22757                           fsr2l	equ	0xFD9
 22758                           status	equ	0xFD8
 22759                           
 22760 ;; *************** function _RADIO_ReleaseData *****************
 22761 ;; Defined at:
 22762 ;;		line 1134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22763 ;; Parameters:    Size  Location     Type
 22764 ;;		None
 22765 ;; Auto vars:     Size  Location     Type
 22766 ;;		None
 22767 ;; Return value:  Size  Location     Type
 22768 ;;                  1    wreg      void 
 22769 ;; Registers used:
 22770 ;;		status,2, status,0
 22771 ;; Tracked objects:
 22772 ;;		On entry : C/2
 22773 ;;		On exit  : F/1
 22774 ;;		Unchanged: 0/0
 22775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22776 ;;      Params:         0       0       0       0       0       0       0       0       0
 22777 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22778 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22779 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22780 ;;Total ram usage:        0 bytes
 22781 ;; Hardware stack levels used:    1
 22782 ;; Hardware stack levels required when called:    7
 22783 ;; This function calls:
 22784 ;;		Nothing
 22785 ;; This function is called by:
 22786 ;;		_LORAWAN_ReceiveWindow1Callback
 22787 ;;		_LORAWAN_ReceiveWindow2Callback
 22788 ;;		_LORAWAN_EnterContinuousReceive
 22789 ;;		_LORAWAN_RxDone
 22790 ;; This function uses a non-reentrant model
 22791 ;;
 22792                           
 22793                           	psect	text114
 22794  0078BA                     __ptext114:
 22795                           	opt stack 0
 22796  0078BA                     _RADIO_ReleaseData:
 22797                           	opt stack 18
 22798                           
 22799                           ;radio_driver_SX1276.c: 1136: RadioConfiguration.flags &= ~(1 << (2));
 22800                           
 22801                           ; BSR set to: 2
 22802                           ;incstack = 0
 22803  0078BA  0101               	movlb	1	; () banked
 22804  0078BC  9598               	bcf	(_RadioConfiguration+35)& (0+255),2,b
 22805                           
 22806                           ; BSR set to: 1
 22807  0078BE  0012               	return		;funcret
 22808  0078C0                     __end_of_RADIO_ReleaseData:
 22809                           	opt stack 0
 22810                           tosu	equ	0xFFF
 22811                           tosh	equ	0xFFE
 22812                           tosl	equ	0xFFD
 22813                           pclath	equ	0xFFA
 22814                           tblptru	equ	0xFF8
 22815                           tblptrh	equ	0xFF7
 22816                           tblptrl	equ	0xFF6
 22817                           tablat	equ	0xFF5
 22818                           prodh	equ	0xFF4
 22819                           prodl	equ	0xFF3
 22820                           intcon	equ	0xFF2
 22821                           indf0	equ	0xFEF
 22822                           postinc0	equ	0xFEE
 22823                           fsr0h	equ	0xFEA
 22824                           fsr0l	equ	0xFE9
 22825                           wreg	equ	0xFE8
 22826                           postinc1	equ	0xFE6
 22827                           postdec1	equ	0xFE5
 22828                           plusw1	equ	0xFE3
 22829                           fsr1h	equ	0xFE2
 22830                           fsr1l	equ	0xFE1
 22831                           indf2	equ	0xFDF
 22832                           postinc2	equ	0xFDE
 22833                           postdec2	equ	0xFDD
 22834                           plusw2	equ	0xFDB
 22835                           fsr2h	equ	0xFDA
 22836                           fsr2l	equ	0xFD9
 22837                           status	equ	0xFD8
 22838                           
 22839 ;; *************** function _RADIO_ReceiveStop *****************
 22840 ;; Defined at:
 22841 ;;		line 951 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22842 ;; Parameters:    Size  Location     Type
 22843 ;;		None
 22844 ;; Auto vars:     Size  Location     Type
 22845 ;;		None
 22846 ;; Return value:  Size  Location     Type
 22847 ;;                  1    wreg      void 
 22848 ;; Registers used:
 22849 ;;		wreg, status,2, status,0, cstack
 22850 ;; Tracked objects:
 22851 ;;		On entry : F/2
 22852 ;;		On exit  : F/1
 22853 ;;		Unchanged: 0/0
 22854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22855 ;;      Params:         0       0       0       0       0       0       0       0       0
 22856 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22857 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22858 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22859 ;;Total ram usage:        0 bytes
 22860 ;; Hardware stack levels used:    1
 22861 ;; Hardware stack levels required when called:   11
 22862 ;; This function calls:
 22863 ;;		_RADIO_WriteMode
 22864 ;; This function is called by:
 22865 ;;		_LORAWAN_Send
 22866 ;;		_LORAWAN_ReceiveWindow1Callback
 22867 ;;		_LORAWAN_ReceiveWindow2Callback
 22868 ;;		_LORAWAN_EnterContinuousReceive
 22869 ;; This function uses a non-reentrant model
 22870 ;;
 22871                           
 22872                           	psect	text115
 22873  007516                     __ptext115:
 22874                           	opt stack 0
 22875  007516                     _RADIO_ReceiveStop:
 22876                           	opt stack 17
 22877                           
 22878                           ; BSR set to: 2
 22879                           ;radio_driver_SX1276.c: 953: if ((1 << (1)) == RadioConfiguration.flags)
 22880                           
 22881                           ; BSR set to: 1
 22882                           ;incstack = 0
 22883  007516  0E02               	movlw	2
 22884  007518  0101               	movlb	1	; () banked
 22885  00751A  1998               	xorwf	(_RadioConfiguration+35)& (0+255),w,b
 22886  00751C  A4D8               	btfss	status,2,c
 22887  00751E  0012               	return	
 22888                           
 22889                           ; BSR set to: 1
 22890                           ;radio_driver_SX1276.c: 954: {
 22891                           ;radio_driver_SX1276.c: 955: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 22892  007520  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 22893  007524  0E00               	movlw	0
 22894  007526  0100               	movlb	0	; () banked
 22895  007528  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 22896  00752A  EC6B  F029         	call	_RADIO_WriteMode
 22897                           
 22898                           ;radio_driver_SX1276.c: 956: RadioConfiguration.flags &= ~(1 << (1));
 22899  00752E  0101               	movlb	1	; () banked
 22900  007530  9398               	bcf	(_RadioConfiguration+35)& (0+255),1,b
 22901                           
 22902                           ; BSR set to: 1
 22903  007532  0012               	return		;funcret
 22904  007534                     __end_of_RADIO_ReceiveStop:
 22905                           	opt stack 0
 22906                           tosu	equ	0xFFF
 22907                           tosh	equ	0xFFE
 22908                           tosl	equ	0xFFD
 22909                           pclath	equ	0xFFA
 22910                           tblptru	equ	0xFF8
 22911                           tblptrh	equ	0xFF7
 22912                           tblptrl	equ	0xFF6
 22913                           tablat	equ	0xFF5
 22914                           prodh	equ	0xFF4
 22915                           prodl	equ	0xFF3
 22916                           intcon	equ	0xFF2
 22917                           indf0	equ	0xFEF
 22918                           postinc0	equ	0xFEE
 22919                           fsr0h	equ	0xFEA
 22920                           fsr0l	equ	0xFE9
 22921                           wreg	equ	0xFE8
 22922                           postinc1	equ	0xFE6
 22923                           postdec1	equ	0xFE5
 22924                           plusw1	equ	0xFE3
 22925                           fsr1h	equ	0xFE2
 22926                           fsr1l	equ	0xFE1
 22927                           indf2	equ	0xFDF
 22928                           postinc2	equ	0xFDE
 22929                           postdec2	equ	0xFDD
 22930                           plusw2	equ	0xFDB
 22931                           fsr2h	equ	0xFDA
 22932                           fsr2l	equ	0xFD9
 22933                           status	equ	0xFD8
 22934                           
 22935 ;; *************** function _RADIO_ReceiveStart *****************
 22936 ;; Defined at:
 22937 ;;		line 875 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 22938 ;; Parameters:    Size  Location     Type
 22939 ;;  rxWindowSize    2   52[BANK0 ] unsigned int 
 22940 ;; Auto vars:     Size  Location     Type
 22941 ;;		None
 22942 ;; Return value:  Size  Location     Type
 22943 ;;                  2   52[BANK0 ] enum E16979
 22944 ;; Registers used:
 22945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22946 ;; Tracked objects:
 22947 ;;		On entry : F/0
 22948 ;;		On exit  : F/0
 22949 ;;		Unchanged: 0/0
 22950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22951 ;;      Params:         0       2       0       0       0       0       0       0       0
 22952 ;;      Locals:         0       4       0       0       0       0       0       0       0
 22953 ;;      Temps:          0       4       0       0       0       0       0       0       0
 22954 ;;      Totals:         0      10       0       0       0       0       0       0       0
 22955 ;;Total ram usage:       10 bytes
 22956 ;; Hardware stack levels used:    1
 22957 ;; Hardware stack levels required when called:   12
 22958 ;; This function calls:
 22959 ;;		_RADIO_RegisterWrite
 22960 ;;		_RADIO_WriteConfiguration
 22961 ;;		_RADIO_WriteMode
 22962 ;;		_SwTimerSetTimeout
 22963 ;;		_SwTimerStart
 22964 ;;		___lldiv
 22965 ;; This function is called by:
 22966 ;;		_LORAWAN_ReceiveWindow1Callback
 22967 ;;		_LORAWAN_ReceiveWindow2Callback
 22968 ;;		_LORAWAN_EnterContinuousReceive
 22969 ;; This function uses a non-reentrant model
 22970 ;;
 22971                           
 22972                           	psect	text116
 22973  002C04                     __ptext116:
 22974                           	opt stack 0
 22975  002C04                     _RADIO_ReceiveStart:
 22976                           	opt stack 13
 22977                           
 22978                           ; BSR set to: 0
 22979                           ;radio_driver_SX1276.c: 877: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 22980                           
 22981                           ; BSR set to: 1
 22982                           ;incstack = 0
 22983  002C04  0101               	movlb	1	; () banked
 22984  002C06  A598               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 22985  002C08  D006               	goto	l12730
 22986                           
 22987                           ; BSR set to: 1
 22988                           ;radio_driver_SX1276.c: 878: {
 22989                           ;radio_driver_SX1276.c: 879: return ERR_BUFFER_LOCKED;
 22990  002C0A  0E80               	movlw	128
 22991  002C0C  0100               	movlb	0	; () banked
 22992  002C0E  6F95               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 22993  002C10  0E03               	movlw	3
 22994  002C12  6F94               	movwf	?_RADIO_ReceiveStart& (0+255),b
 22995  002C14  0C03               	retlw	3
 22996  002C16                     l12730:
 22997                           
 22998                           ; BSR set to: 1
 22999                           ;radio_driver_SX1276.c: 880: }
 23000                           ;radio_driver_SX1276.c: 882: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 23001  002C16  C198  F096         	movff	_RadioConfiguration+35,??_RADIO_ReceiveStart
 23002  002C1A  0E03               	movlw	3
 23003  002C1C  0100               	movlb	0	; () banked
 23004  002C1E  1796               	andwf	??_RADIO_ReceiveStart& (0+255),f,b
 23005  002C20  E005               	bz	l12736
 23006                           
 23007                           ; BSR set to: 0
 23008                           ;radio_driver_SX1276.c: 883: {
 23009                           ;radio_driver_SX1276.c: 884: return ERR_RADIO_BUSY;
 23010  002C22  0E80               	movlw	128
 23011  002C24  6F95               	movwf	(?_RADIO_ReceiveStart+1)& (0+255),b
 23012  002C26  0E04               	movlw	4
 23013  002C28  6F94               	movwf	?_RADIO_ReceiveStart& (0+255),b
 23014  002C2A  0C04               	retlw	4
 23015  002C2C                     l12736:
 23016                           
 23017                           ; BSR set to: 0
 23018                           ;radio_driver_SX1276.c: 885: }
 23019                           ;radio_driver_SX1276.c: 887: if (0 == rxWindowSize)
 23020  002C2C  5194               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 23021  002C2E  1195               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 23022  002C30  E107               	bnz	l12740
 23023                           
 23024                           ; BSR set to: 0
 23025                           ;radio_driver_SX1276.c: 888: {
 23026                           ;radio_driver_SX1276.c: 889: RADIO_WriteConfiguration(4);
 23027  002C32  0E00               	movlw	0
 23028  002C34  6F7E               	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 23029  002C36  0E04               	movlw	4
 23030  002C38  6F7D               	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 23031  002C3A  ECDA  F009         	call	_RADIO_WriteConfiguration	;wreg free
 23032                           
 23033                           ;radio_driver_SX1276.c: 890: }
 23034  002C3E  D006               	goto	l12742
 23035  002C40                     l12740:
 23036                           
 23037                           ; BSR set to: 0
 23038                           ;radio_driver_SX1276.c: 891: else
 23039                           ;radio_driver_SX1276.c: 892: {
 23040                           ;radio_driver_SX1276.c: 893: RADIO_WriteConfiguration(rxWindowSize);
 23041  002C40  C094  F07D         	movff	RADIO_ReceiveStart@rxWindowSize,RADIO_WriteConfiguration@symbolTimeout
 23042  002C44  C095  F07E         	movff	RADIO_ReceiveStart@rxWindowSize+1,RADIO_WriteConfiguration@symbolTimeout+1
 23043  002C48  ECDA  F009         	call	_RADIO_WriteConfiguration	;wreg free
 23044  002C4C                     l12742:
 23045                           
 23046                           ;radio_driver_SX1276.c: 894: }
 23047                           ;radio_driver_SX1276.c: 896: if (MODULATION_LORA == RadioConfiguration.modulation)
 23048  002C4C  0101               	movlb	1	; () banked
 23049  002C4E  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 23050  002C50  E111               	bnz	l12746
 23051                           
 23052                           ; BSR set to: 1
 23053                           ;radio_driver_SX1276.c: 897: {
 23054                           ;radio_driver_SX1276.c: 900: RADIO_RegisterWrite(0x22, 0x01);
 23055  002C52  0E01               	movlw	1
 23056  002C54  0100               	movlb	0	; () banked
 23057  002C56  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 23058  002C58  0E22               	movlw	34
 23059  002C5A  EC9A  F03A         	call	_RADIO_RegisterWrite
 23060                           
 23061                           ;radio_driver_SX1276.c: 906: RADIO_RegisterWrite(0x40, 0x00);
 23062  002C5E  0100               	movlb	0	; () banked
 23063  002C60  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 23064  002C62  0E40               	movlw	64
 23065  002C64  EC9A  F03A         	call	_RADIO_RegisterWrite
 23066                           
 23067                           ;radio_driver_SX1276.c: 907: RADIO_RegisterWrite(0x41, 0x00);
 23068  002C68  0100               	movlb	0	; () banked
 23069  002C6A  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 23070  002C6C  0E41               	movlw	65
 23071  002C6E  EC9A  F03A         	call	_RADIO_RegisterWrite
 23072                           
 23073                           ;radio_driver_SX1276.c: 908: }
 23074  002C72  D014               	goto	l12748
 23075  002C74                     l12746:
 23076                           
 23077                           ; BSR set to: 1
 23078                           ;radio_driver_SX1276.c: 909: else
 23079                           ;radio_driver_SX1276.c: 910: {
 23080                           ;radio_driver_SX1276.c: 911: RADIO_RegisterWrite(0x12, RadioConfiguration.rxBw);
 23081  002C74  C1A9  F066         	movff	_RadioConfiguration+52,RADIO_RegisterWrite@value
 23082  002C78  0E12               	movlw	18
 23083  002C7A  EC9A  F03A         	call	_RADIO_RegisterWrite
 23084                           
 23085                           ;radio_driver_SX1276.c: 912: RADIO_RegisterWrite(0x13, RadioConfiguration.afcBw);
 23086  002C7E  C1AA  F066         	movff	_RadioConfiguration+53,RADIO_RegisterWrite@value
 23087  002C82  0E13               	movlw	19
 23088  002C84  EC9A  F03A         	call	_RADIO_RegisterWrite
 23089                           
 23090                           ;radio_driver_SX1276.c: 915: RADIO_RegisterWrite(0x40, 0x00);
 23091  002C88  0100               	movlb	0	; () banked
 23092  002C8A  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 23093  002C8C  0E40               	movlw	64
 23094  002C8E  EC9A  F03A         	call	_RADIO_RegisterWrite
 23095                           
 23096                           ;radio_driver_SX1276.c: 916: RADIO_RegisterWrite(0x41, 0x00);
 23097  002C92  0100               	movlb	0	; () banked
 23098  002C94  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 23099  002C96  0E41               	movlw	65
 23100  002C98  EC9A  F03A         	call	_RADIO_RegisterWrite
 23101  002C9C                     l12748:
 23102                           
 23103                           ;radio_driver_SX1276.c: 917: }
 23104                           ;radio_driver_SX1276.c: 919: RadioConfiguration.flags |= (1 << (1));
 23105  002C9C  0101               	movlb	1	; () banked
 23106  002C9E  8398               	bsf	(_RadioConfiguration+35)& (0+255),1,b
 23107                           
 23108                           ; BSR set to: 1
 23109                           ;radio_driver_SX1276.c: 920: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 23110  002CA0  0EE7               	movlw	231
 23111  002CA2  1798               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 23112                           
 23113                           ; BSR set to: 1
 23114                           ;radio_driver_SX1276.c: 924: if (0 == rxWindowSize)
 23115  002CA4  0100               	movlb	0	; () banked
 23116  002CA6  5194               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 23117  002CA8  1195               	iorwf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 23118  002CAA  E108               	bnz	l12756
 23119                           
 23120                           ; BSR set to: 0
 23121                           ;radio_driver_SX1276.c: 925: {
 23122                           ;radio_driver_SX1276.c: 926: RADIO_WriteMode(MODE_RXCONT, RadioConfiguration.modulation,
      +                           0);
 23123  002CAC  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 23124  002CB0  0E00               	movlw	0
 23125  002CB2  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 23126  002CB4  0E05               	movlw	5
 23127  002CB6  EC6B  F029         	call	_RADIO_WriteMode
 23128                           
 23129                           ;radio_driver_SX1276.c: 927: }
 23130  002CBA  D041               	goto	l12766
 23131  002CBC                     l12756:
 23132                           
 23133                           ; BSR set to: 0
 23134                           ;radio_driver_SX1276.c: 928: else
 23135                           ;radio_driver_SX1276.c: 929: {
 23136                           ;radio_driver_SX1276.c: 930: if (MODULATION_LORA == RadioConfiguration.modulation)
 23137  002CBC  0101               	movlb	1	; () banked
 23138  002CBE  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 23139  002CC0  E109               	bnz	l12760
 23140                           
 23141                           ; BSR set to: 1
 23142                           ;radio_driver_SX1276.c: 931: {
 23143                           ;radio_driver_SX1276.c: 932: RADIO_WriteMode(MODE_RXSINGLE, MODULATION_LORA, 0);
 23144  002CC2  0E01               	movlw	1
 23145  002CC4  0100               	movlb	0	; () banked
 23146  002CC6  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 23147  002CC8  0E00               	movlw	0
 23148  002CCA  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 23149  002CCC  0E06               	movlw	6
 23150  002CCE  EC6B  F029         	call	_RADIO_WriteMode
 23151                           
 23152                           ;radio_driver_SX1276.c: 933: }
 23153  002CD2  D035               	goto	l12766
 23154  002CD4                     l12760:
 23155                           
 23156                           ; BSR set to: 1
 23157                           ;radio_driver_SX1276.c: 934: else
 23158                           ;radio_driver_SX1276.c: 935: {
 23159                           ;radio_driver_SX1276.c: 936: RADIO_WriteMode(MODE_RXCONT, MODULATION_FSK, 0);
 23160  002CD4  0E00               	movlw	0
 23161  002CD6  0100               	movlb	0	; () banked
 23162  002CD8  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 23163  002CDA  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 23164  002CDC  0E05               	movlw	5
 23165  002CDE  EC6B  F029         	call	_RADIO_WriteMode
 23166                           
 23167                           ;radio_driver_SX1276.c: 937: SwTimerSetTimeout(RadioConfiguration.fskRxWindowTimerId, ( 
      +                          (((uint32_t)(rxWindowSize)) << (12)) / 125UL ));
 23168  002CE2  0100               	movlb	0	; () banked
 23169  002CE4  5194               	movf	RADIO_ReceiveStart@rxWindowSize& (0+255),w,b
 23170  002CE6  6F96               	movwf	??_RADIO_ReceiveStart& (0+255),b
 23171  002CE8  5195               	movf	(RADIO_ReceiveStart@rxWindowSize+1)& (0+255),w,b
 23172  002CEA  6F97               	movwf	(??_RADIO_ReceiveStart+1)& (0+255),b
 23173  002CEC  6B98               	clrf	(??_RADIO_ReceiveStart+2)& (0+255),b
 23174  002CEE  6B99               	clrf	(??_RADIO_ReceiveStart+3)& (0+255),b
 23175  002CF0  0E0C               	movlw	12
 23176  002CF2                     u13825:
 23177  002CF2  90D8               	bcf	status,0,c
 23178  002CF4  3796               	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 23179  002CF6  3797               	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 23180  002CF8  3798               	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 23181  002CFA  3799               	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 23182  002CFC  2EE8               	decfsz	wreg,f,c
 23183  002CFE  D7F9               	goto	u13825
 23184  002D00  C096  F064         	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 23185  002D04  C097  F065         	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 23186  002D08  C098  F066         	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 23187  002D0C  C099  F067         	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 23188  002D10  0E7D               	movlw	125
 23189  002D12  6F68               	movwf	___lldiv@divisor& (0+255),b
 23190  002D14  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 23191  002D16  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 23192  002D18  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 23193  002D1A  ECB3  F030         	call	___lldiv	;wreg free
 23194  002D1E  C064  F071         	movff	?___lldiv,SwTimerSetTimeout@timeout
 23195  002D22  C065  F072         	movff	?___lldiv+1,SwTimerSetTimeout@timeout+1
 23196  002D26  C066  F073         	movff	?___lldiv+2,SwTimerSetTimeout@timeout+2
 23197  002D2A  C067  F074         	movff	?___lldiv+3,SwTimerSetTimeout@timeout+3
 23198  002D2E  0101               	movlb	1	; () banked
 23199  002D30  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 23200  002D32  ECCA  F036         	call	_SwTimerSetTimeout
 23201                           
 23202                           ; BSR set to: 0
 23203                           ;radio_driver_SX1276.c: 938: SwTimerStart(RadioConfiguration.fskRxWindowTimerId);
 23204  002D36  0101               	movlb	1	; () banked
 23205  002D38  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 23206  002D3A  ECB3  F02E         	call	_SwTimerStart
 23207  002D3E                     l12766:
 23208                           
 23209                           ;radio_driver_SX1276.c: 939: }
 23210                           ;radio_driver_SX1276.c: 940: }
 23211                           ;radio_driver_SX1276.c: 942: if (0 != RadioConfiguration.watchdogTimerTimeout)
 23212  002D3E  0101               	movlb	1	; () banked
 23213  002D40  519F               	movf	(_RadioConfiguration+42)& (0+255),w,b
 23214  002D42  11A0               	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 23215  002D44  11A1               	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 23216  002D46  11A2               	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 23217  002D48  E059               	bz	l12778
 23218                           
 23219                           ; BSR set to: 1
 23220                           ;radio_driver_SX1276.c: 943: {
 23221                           ;radio_driver_SX1276.c: 944: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 23222  002D4A  51A2               	movf	(_RadioConfiguration+45)& (0+255),w,b
 23223  002D4C  E106               	bnz	u13840
 23224  002D4E  299F               	incf	(_RadioConfiguration+42)& (0+255),w,b
 23225  002D50  0EFF               	movlw	255
 23226  002D52  59A0               	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 23227  002D54  0E0F               	movlw	15
 23228  002D56  59A1               	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 23229  002D58  E319               	bnc	l12772
 23230  002D5A                     u13840:
 23231                           
 23232                           ; BSR set to: 1
 23233  002D5A  C19F  F064         	movff	_RadioConfiguration+42,___lldiv@dividend
 23234  002D5E  C1A0  F065         	movff	_RadioConfiguration+43,___lldiv@dividend+1
 23235  002D62  C1A1  F066         	movff	_RadioConfiguration+44,___lldiv@dividend+2
 23236  002D66  C1A2  F067         	movff	_RadioConfiguration+45,___lldiv@dividend+3
 23237  002D6A  0E7D               	movlw	125
 23238  002D6C  0100               	movlb	0	; () banked
 23239  002D6E  6F68               	movwf	___lldiv@divisor& (0+255),b
 23240  002D70  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 23241  002D72  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 23242  002D74  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 23243  002D76  ECB3  F030         	call	___lldiv	;wreg free
 23244  002D7A  0E0C               	movlw	12
 23245  002D7C                     u13855:
 23246  002D7C  90D8               	bcf	status,0,c
 23247  002D7E  3764               	rlcf	?___lldiv& (0+255),f,b
 23248  002D80  3765               	rlcf	(?___lldiv+1)& (0+255),f,b
 23249  002D82  3766               	rlcf	(?___lldiv+2)& (0+255),f,b
 23250  002D84  3767               	rlcf	(?___lldiv+3)& (0+255),f,b
 23251  002D86  2EE8               	decfsz	wreg,f,c
 23252  002D88  D7F9               	goto	u13855
 23253  002D8A  D020               	goto	L14
 23254  002D8C                     l12772:
 23255                           
 23256                           ; BSR set to: 1
 23257  002D8C  C19F  F096         	movff	_RadioConfiguration+42,??_RADIO_ReceiveStart
 23258  002D90  C1A0  F097         	movff	_RadioConfiguration+43,??_RADIO_ReceiveStart+1
 23259  002D94  C1A1  F098         	movff	_RadioConfiguration+44,??_RADIO_ReceiveStart+2
 23260  002D98  C1A2  F099         	movff	_RadioConfiguration+45,??_RADIO_ReceiveStart+3
 23261  002D9C  0E0C               	movlw	12
 23262  002D9E                     u13865:
 23263  002D9E  90D8               	bcf	status,0,c
 23264  002DA0  0100               	movlb	0	; () banked
 23265  002DA2  3796               	rlcf	??_RADIO_ReceiveStart& (0+255),f,b
 23266  002DA4  3797               	rlcf	(??_RADIO_ReceiveStart+1)& (0+255),f,b
 23267  002DA6  3798               	rlcf	(??_RADIO_ReceiveStart+2)& (0+255),f,b
 23268  002DA8  3799               	rlcf	(??_RADIO_ReceiveStart+3)& (0+255),f,b
 23269  002DAA  2EE8               	decfsz	wreg,f,c
 23270  002DAC  D7F8               	goto	u13865
 23271  002DAE  C096  F064         	movff	??_RADIO_ReceiveStart,___lldiv@dividend
 23272  002DB2  C097  F065         	movff	??_RADIO_ReceiveStart+1,___lldiv@dividend+1
 23273  002DB6  C098  F066         	movff	??_RADIO_ReceiveStart+2,___lldiv@dividend+2
 23274  002DBA  C099  F067         	movff	??_RADIO_ReceiveStart+3,___lldiv@dividend+3
 23275  002DBE  0E7D               	movlw	125
 23276  002DC0  6F68               	movwf	___lldiv@divisor& (0+255),b
 23277  002DC2  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 23278  002DC4  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 23279  002DC6  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 23280  002DC8  ECB3  F030         	call	___lldiv	;wreg free
 23281  002DCC                     L14:
 23282  002DCC  C064  F09A         	movff	?___lldiv,_RADIO_ReceiveStart$1055
 23283  002DD0  C065  F09B         	movff	?___lldiv+1,_RADIO_ReceiveStart$1055+1
 23284  002DD4  C066  F09C         	movff	?___lldiv+2,_RADIO_ReceiveStart$1055+2
 23285  002DD8  C067  F09D         	movff	?___lldiv+3,_RADIO_ReceiveStart$1055+3
 23286                           
 23287                           ; BSR set to: 0
 23288  002DDC  C09A  F071         	movff	_RADIO_ReceiveStart$1055,SwTimerSetTimeout@timeout
 23289  002DE0  C09B  F072         	movff	_RADIO_ReceiveStart$1055+1,SwTimerSetTimeout@timeout+1
 23290  002DE4  C09C  F073         	movff	_RADIO_ReceiveStart$1055+2,SwTimerSetTimeout@timeout+2
 23291  002DE8  C09D  F074         	movff	_RADIO_ReceiveStart$1055+3,SwTimerSetTimeout@timeout+3
 23292  002DEC  0101               	movlb	1	; () banked
 23293  002DEE  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 23294  002DF0  ECCA  F036         	call	_SwTimerSetTimeout
 23295                           
 23296                           ; BSR set to: 0
 23297                           ;radio_driver_SX1276.c: 945: SwTimerStart(RadioConfiguration.watchdogTimerId);
 23298  002DF4  0101               	movlb	1	; () banked
 23299  002DF6  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 23300  002DF8  ECB3  F02E         	call	_SwTimerStart
 23301  002DFC                     l12778:
 23302                           
 23303                           ;radio_driver_SX1276.c: 946: }
 23304                           ;radio_driver_SX1276.c: 947: return ERR_NONE;
 23305  002DFC  0100               	movlb	0	; () banked
 23306  002DFE  6B94               	clrf	?_RADIO_ReceiveStart& (0+255),b
 23307  002E00  6B95               	clrf	(?_RADIO_ReceiveStart+1)& (0+255),b
 23308                           
 23309                           ; BSR set to: 0
 23310  002E02  0012               	return		;funcret
 23311  002E04                     __end_of_RADIO_ReceiveStart:
 23312                           	opt stack 0
 23313                           tosu	equ	0xFFF
 23314                           tosh	equ	0xFFE
 23315                           tosl	equ	0xFFD
 23316                           pclath	equ	0xFFA
 23317                           tblptru	equ	0xFF8
 23318                           tblptrh	equ	0xFF7
 23319                           tblptrl	equ	0xFF6
 23320                           tablat	equ	0xFF5
 23321                           prodh	equ	0xFF4
 23322                           prodl	equ	0xFF3
 23323                           intcon	equ	0xFF2
 23324                           indf0	equ	0xFEF
 23325                           postinc0	equ	0xFEE
 23326                           fsr0h	equ	0xFEA
 23327                           fsr0l	equ	0xFE9
 23328                           wreg	equ	0xFE8
 23329                           postinc1	equ	0xFE6
 23330                           postdec1	equ	0xFE5
 23331                           plusw1	equ	0xFE3
 23332                           fsr1h	equ	0xFE2
 23333                           fsr1l	equ	0xFE1
 23334                           indf2	equ	0xFDF
 23335                           postinc2	equ	0xFDE
 23336                           postdec2	equ	0xFDD
 23337                           plusw2	equ	0xFDB
 23338                           fsr2h	equ	0xFDA
 23339                           fsr2l	equ	0xFD9
 23340                           status	equ	0xFD8
 23341                           
 23342 ;; *************** function _ConfigureRadioRx *****************
 23343 ;; Defined at:
 23344 ;;		line 2019 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23345 ;; Parameters:    Size  Location     Type
 23346 ;;  dataRate        1    wreg     unsigned char 
 23347 ;;  freq            4   22[BANK0 ] unsigned long 
 23348 ;; Auto vars:     Size  Location     Type
 23349 ;;  dataRate        1   26[BANK0 ] unsigned char 
 23350 ;; Return value:  Size  Location     Type
 23351 ;;                  1    wreg      void 
 23352 ;; Registers used:
 23353 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23354 ;; Tracked objects:
 23355 ;;		On entry : F/2
 23356 ;;		On exit  : 0/0
 23357 ;;		Unchanged: 0/0
 23358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23359 ;;      Params:         0       4       0       0       0       0       0       0       0
 23360 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23361 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23362 ;;      Totals:         0       5       0       0       0       0       0       0       0
 23363 ;;Total ram usage:        5 bytes
 23364 ;; Hardware stack levels used:    1
 23365 ;; Hardware stack levels required when called:   10
 23366 ;; This function calls:
 23367 ;;		_ConfigureRadio
 23368 ;;		_RADIO_SetCRC
 23369 ;;		_RADIO_SetIQInverted
 23370 ;; This function is called by:
 23371 ;;		_LORAWAN_ReceiveWindow1Callback
 23372 ;;		_LORAWAN_ReceiveWindow2Callback
 23373 ;;		_LORAWAN_EnterContinuousReceive
 23374 ;; This function uses a non-reentrant model
 23375 ;;
 23376                           
 23377                           	psect	text117
 23378  00733A                     __ptext117:
 23379                           	opt stack 0
 23380  00733A                     _ConfigureRadioRx:
 23381                           	opt stack 15
 23382                           
 23383                           ; BSR set to: 0
 23384                           ;incstack = 0
 23385                           ;ConfigureRadioRx@dataRate stored from wreg
 23386  00733A  0100               	movlb	0	; () banked
 23387  00733C  6F7A               	movwf	ConfigureRadioRx@dataRate& (0+255),b
 23388                           
 23389                           ;lorawan.c: 2021: ConfigureRadio(dataRate, freq);
 23390  00733E  C076  F071         	movff	ConfigureRadioRx@freq,ConfigureRadio@freq
 23391  007342  C077  F072         	movff	ConfigureRadioRx@freq+1,ConfigureRadio@freq+1
 23392  007346  C078  F073         	movff	ConfigureRadioRx@freq+2,ConfigureRadio@freq+2
 23393  00734A  C079  F074         	movff	ConfigureRadioRx@freq+3,ConfigureRadio@freq+3
 23394  00734E  517A               	movf	ConfigureRadioRx@dataRate& (0+255),w,b
 23395  007350  EC37  F030         	call	_ConfigureRadio
 23396                           
 23397                           ;lorawan.c: 2022: RADIO_SetCRC(0);
 23398  007354  0E00               	movlw	0
 23399  007356  EC0D  F03C         	call	_RADIO_SetCRC
 23400                           
 23401                           ;lorawan.c: 2023: RADIO_SetIQInverted(1);
 23402  00735A  0E01               	movlw	1
 23403  00735C  EF08  F03C         	goto	_RADIO_SetIQInverted
 23404  007360                     __end_of_ConfigureRadioRx:
 23405                           	opt stack 0
 23406                           tosu	equ	0xFFF
 23407                           tosh	equ	0xFFE
 23408                           tosl	equ	0xFFD
 23409                           pclath	equ	0xFFA
 23410                           tblptru	equ	0xFF8
 23411                           tblptrh	equ	0xFF7
 23412                           tblptrl	equ	0xFF6
 23413                           tablat	equ	0xFF5
 23414                           prodh	equ	0xFF4
 23415                           prodl	equ	0xFF3
 23416                           intcon	equ	0xFF2
 23417                           indf0	equ	0xFEF
 23418                           postinc0	equ	0xFEE
 23419                           fsr0h	equ	0xFEA
 23420                           fsr0l	equ	0xFE9
 23421                           wreg	equ	0xFE8
 23422                           postinc1	equ	0xFE6
 23423                           postdec1	equ	0xFE5
 23424                           plusw1	equ	0xFE3
 23425                           fsr1h	equ	0xFE2
 23426                           fsr1l	equ	0xFE1
 23427                           indf2	equ	0xFDF
 23428                           postinc2	equ	0xFDE
 23429                           postdec2	equ	0xFDD
 23430                           plusw2	equ	0xFDB
 23431                           fsr2h	equ	0xFDA
 23432                           fsr2l	equ	0xFD9
 23433                           status	equ	0xFD8
 23434                           
 23435 ;; *************** function _INTERRUPT_GetDioStatus *****************
 23436 ;; Defined at:
 23437 ;;		line 48 in file "mcc_generated_files/LoRaWAN/interrupt_manager_lora_addons.c"
 23438 ;; Parameters:    Size  Location     Type
 23439 ;;		None
 23440 ;; Auto vars:     Size  Location     Type
 23441 ;;  a               1    4[BANK0 ] unsigned char 
 23442 ;; Return value:  Size  Location     Type
 23443 ;;                  1    wreg      unsigned char 
 23444 ;; Registers used:
 23445 ;;		wreg, status,2
 23446 ;; Tracked objects:
 23447 ;;		On entry : F/0
 23448 ;;		On exit  : F/0
 23449 ;;		Unchanged: 0/0
 23450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23451 ;;      Params:         0       0       0       0       0       0       0       0       0
 23452 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23453 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23454 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23455 ;;Total ram usage:        1 bytes
 23456 ;; Hardware stack levels used:    1
 23457 ;; Hardware stack levels required when called:    7
 23458 ;; This function calls:
 23459 ;;		Nothing
 23460 ;; This function is called by:
 23461 ;;		_LORAWAN_Mainloop
 23462 ;; This function uses a non-reentrant model
 23463 ;;
 23464                           
 23465                           	psect	text118
 23466  0077A0                     __ptext118:
 23467                           	opt stack 0
 23468  0077A0                     _INTERRUPT_GetDioStatus:
 23469                           	opt stack 22
 23470                           
 23471                           ; BSR set to: 0
 23472                           ;interrupt_manager_lora_addons.c: 50: uint8_t a;
 23473                           ;interrupt_manager_lora_addons.c: 51: (INTCONbits.GIE = 0);
 23474                           
 23475                           ;incstack = 0
 23476  0077A0  9EF2               	bcf	intcon,7,c	;volatile
 23477                           
 23478                           ;interrupt_manager_lora_addons.c: 52: a = dioStatus;
 23479  0077A2  C048  F064         	movff	_dioStatus,INTERRUPT_GetDioStatus@a	;volatile
 23480                           
 23481                           ;interrupt_manager_lora_addons.c: 53: dioStatus = 0;
 23482  0077A6  6A48               	clrf	_dioStatus,c	;volatile
 23483                           
 23484                           ;interrupt_manager_lora_addons.c: 54: (INTCONbits.GIE = 1);
 23485  0077A8  8EF2               	bsf	intcon,7,c	;volatile
 23486                           
 23487                           ; BSR set to: 0
 23488                           ;interrupt_manager_lora_addons.c: 55: return a;
 23489  0077AA  5164               	movf	INTERRUPT_GetDioStatus@a& (0+255),w,b
 23490                           
 23491                           ; BSR set to: 0
 23492  0077AC  0012               	return		;funcret
 23493  0077AE                     __end_of_INTERRUPT_GetDioStatus:
 23494                           	opt stack 0
 23495                           tosu	equ	0xFFF
 23496                           tosh	equ	0xFFE
 23497                           tosl	equ	0xFFD
 23498                           pclath	equ	0xFFA
 23499                           tblptru	equ	0xFF8
 23500                           tblptrh	equ	0xFF7
 23501                           tblptrl	equ	0xFF6
 23502                           tablat	equ	0xFF5
 23503                           prodh	equ	0xFF4
 23504                           prodl	equ	0xFF3
 23505                           intcon	equ	0xFF2
 23506                           indf0	equ	0xFEF
 23507                           postinc0	equ	0xFEE
 23508                           fsr0h	equ	0xFEA
 23509                           fsr0l	equ	0xFE9
 23510                           wreg	equ	0xFE8
 23511                           postinc1	equ	0xFE6
 23512                           postdec1	equ	0xFE5
 23513                           plusw1	equ	0xFE3
 23514                           fsr1h	equ	0xFE2
 23515                           fsr1l	equ	0xFE1
 23516                           indf2	equ	0xFDF
 23517                           postinc2	equ	0xFDE
 23518                           postdec2	equ	0xFDD
 23519                           plusw2	equ	0xFDB
 23520                           fsr2h	equ	0xFDA
 23521                           fsr2l	equ	0xFD9
 23522                           status	equ	0xFD8
 23523                           
 23524 ;; *************** function _LORAWAN_Join *****************
 23525 ;; Defined at:
 23526 ;;		line 115 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23527 ;; Parameters:    Size  Location     Type
 23528 ;;  activationTy    1    wreg     enum E17154
 23529 ;; Auto vars:     Size  Location     Type
 23530 ;;  activationTy    1  142[BANK0 ] enum E17154
 23531 ;;  result          1  141[BANK0 ] enum E17131
 23532 ;;  bufferIndex     1  140[BANK0 ] unsigned char 
 23533 ;; Return value:  Size  Location     Type
 23534 ;;                  1    wreg      enum E17131
 23535 ;; Registers used:
 23536 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23537 ;; Tracked objects:
 23538 ;;		On entry : F/2
 23539 ;;		On exit  : D/0
 23540 ;;		Unchanged: 0/0
 23541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23542 ;;      Params:         0       0       0       0       0       0       0       0       0
 23543 ;;      Locals:         0       3       0       0       0       0       0       0       0
 23544 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23545 ;;      Totals:         0       3       0       0       0       0       0       0       0
 23546 ;;Total ram usage:        3 bytes
 23547 ;; Hardware stack levels used:    1
 23548 ;; Hardware stack levels required when called:   14
 23549 ;; This function calls:
 23550 ;;		_PrepareJoinRequestFrame
 23551 ;;		_RADIO_Transmit
 23552 ;;		_SelectChannelForTransmission
 23553 ;;		_SwTimerSetTimeout
 23554 ;;		_SwTimerStart
 23555 ;;		_UpdateJoinInProgress
 23556 ;; This function is called by:
 23557 ;;		_main
 23558 ;; This function uses a non-reentrant model
 23559 ;;
 23560                           
 23561                           	psect	text119
 23562  005CDA                     __ptext119:
 23563                           	opt stack 0
 23564  005CDA                     _LORAWAN_Join:
 23565                           	opt stack 16
 23566                           
 23567                           ; BSR set to: 0
 23568                           ;incstack = 0
 23569                           ;LORAWAN_Join@activationTypeNew stored from wreg
 23570  005CDA  0100               	movlb	0	; () banked
 23571  005CDC  6FEE               	movwf	LORAWAN_Join@activationTypeNew& (0+255),b
 23572                           
 23573                           ;lorawan.c: 117: uint8_t bufferIndex;
 23574                           ;lorawan.c: 118: LorawanError_t result;
 23575                           ;lorawan.c: 120: if (loRa.macStatus.macPause == 1)
 23576  005CDE  0102               	movlb	2	; () banked
 23577  005CE0  A103               	btfss	(_loRa+3)& (0+255),0,b
 23578                           
 23579                           ; BSR set to: 2
 23580                           ;lorawan.c: 123: }
 23581                           ;lorawan.c: 125: if (loRa.macStatus.silentImmediately == 1)
 23582  005CE2  BF02               	btfsc	(_loRa+2)& (0+255),7,b
 23583  005CE4  0012               	return	
 23584                           
 23585                           ; BSR set to: 2
 23586                           ;lorawan.c: 128: }
 23587                           ;lorawan.c: 130: if (loRa.macStatus.macState != IDLE)
 23588  005CE6  5102               	movf	(_loRa+2)& (0+255),w,b
 23589  005CE8  0B0F               	andlw	15
 23590  005CEA  E001               	bz	l1738
 23591  005CEC  0012               	return	
 23592  005CEE                     l1738:
 23593                           
 23594                           ; BSR set to: 2
 23595                           ;lorawan.c: 133: }
 23596                           ;lorawan.c: 135: loRa.activationParameters.activationType = activationTypeNew;
 23597  005CEE  C0EE  F21D         	movff	LORAWAN_Join@activationTypeNew,_loRa+29
 23598                           
 23599                           ; BSR set to: 2
 23600                           ;lorawan.c: 137: if (OTAA == activationTypeNew)
 23601  005CF2  0100               	movlb	0	; () banked
 23602  005CF4  51EE               	movf	LORAWAN_Join@activationTypeNew& (0+255),w,b
 23603  005CF6  E11F               	bnz	l1739
 23604                           
 23605                           ; BSR set to: 0
 23606                           ;lorawan.c: 138: {
 23607                           ;lorawan.c: 140: if ( (loRa.macKeys.deviceEui == 0) || (loRa.macKeys.applicationEui == 0
      +                          ) || (loRa.macKeys.applicationKey == 0) )
 23608  005CF8  0102               	movlb	2	; () banked
 23609  005CFA  B1A5               	btfsc	(_loRa+165)& (0+255),0,b
 23610                           
 23611                           ; BSR set to: 2
 23612  005CFC  A3A5               	btfss	(_loRa+165)& (0+255),1,b
 23613  005CFE  0012               	return	
 23614                           
 23615                           ; BSR set to: 2
 23616  005D00  A7A5               	btfss	(_loRa+165)& (0+255),3,b
 23617  005D02  0012               	return	
 23618                           
 23619                           ; BSR set to: 2
 23620                           ;lorawan.c: 144: else
 23621                           ;lorawan.c: 145: {
 23622                           ;lorawan.c: 146: bufferIndex = PrepareJoinRequestFrame ();
 23623  005D04  EC43  F023         	call	_PrepareJoinRequestFrame	;wreg free
 23624  005D08  6FEC               	movwf	LORAWAN_Join@bufferIndex& (0+255),b
 23625                           
 23626                           ;lorawan.c: 147: result = SelectChannelForTransmission (0);
 23627  005D0A  0E00               	movlw	0
 23628  005D0C  EC60  F033         	call	_SelectChannelForTransmission
 23629  005D10  6FED               	movwf	LORAWAN_Join@result& (0+255),b
 23630                           
 23631                           ; BSR set to: 0
 23632                           ;lorawan.c: 149: if (result == OK)
 23633  005D12  51ED               	movf	LORAWAN_Join@result& (0+255),w,b
 23634  005D14  A4D8               	btfss	status,2,c
 23635  005D16  0012               	return	
 23636                           
 23637                           ; BSR set to: 0
 23638                           ;lorawan.c: 150: {
 23639                           ;lorawan.c: 151: if (RADIO_Transmit(macBuffer, bufferIndex) == OK)
 23640  005D18  0EE0               	movlw	low _macBuffer
 23641  005D1A  6F94               	movwf	RADIO_Transmit@buffer& (0+255),b
 23642  005D1C  0E04               	movlw	high _macBuffer
 23643  005D1E  6F95               	movwf	(RADIO_Transmit@buffer+1)& (0+255),b
 23644  005D20  C0EC  F096         	movff	LORAWAN_Join@bufferIndex,RADIO_Transmit@bufferLen
 23645  005D24  ECFA  F017         	call	_RADIO_Transmit	;wreg free
 23646  005D28  5194               	movf	?_RADIO_Transmit& (0+255),w,b
 23647  005D2A  1195               	iorwf	(?_RADIO_Transmit+1)& (0+255),w,b
 23648  005D2C  A4D8               	btfss	status,2,c
 23649  005D2E  0012               	return	
 23650                           
 23651                           ; BSR set to: 0
 23652                           ;lorawan.c: 152: {
 23653                           ;lorawan.c: 153: UpdateJoinInProgress(TRANSMISSION_OCCURRING);
 23654  005D30  0E01               	movlw	1
 23655  005D32  EF2A  F03B         	goto	_UpdateJoinInProgress
 23656  005D36                     l1739:
 23657                           
 23658                           ; BSR set to: 0
 23659                           ;lorawan.c: 167: else
 23660                           ;lorawan.c: 168: {
 23661                           ;lorawan.c: 170: if ( (loRa.macKeys.applicationSessionKey == 0) || (loRa.macKeys.network
      +                          SessionKey == 0) || (loRa.macKeys.deviceAddress == 0) )
 23662  005D36  0102               	movlb	2	; () banked
 23663  005D38  BBA5               	btfsc	(_loRa+165)& (0+255),5,b
 23664                           
 23665                           ; BSR set to: 2
 23666  005D3A  A9A5               	btfss	(_loRa+165)& (0+255),4,b
 23667  005D3C  0012               	return	
 23668                           
 23669                           ; BSR set to: 2
 23670  005D3E  A5A5               	btfss	(_loRa+165)& (0+255),2,b
 23671  005D40  0012               	return	
 23672                           
 23673                           ; BSR set to: 2
 23674                           ;lorawan.c: 174: else
 23675                           ;lorawan.c: 175: {
 23676                           ;lorawan.c: 176: UpdateJoinInProgress(ABP_DELAY);
 23677  005D42  0E07               	movlw	7
 23678  005D44  EC2A  F03B         	call	_UpdateJoinInProgress
 23679                           
 23680                           ; BSR set to: 2
 23681                           ;lorawan.c: 177: SwTimerSetTimeout(loRa.abpJoinTimerId, ( (((uint32_t)(20)) << (12)) / 1
      +                          25UL ));
 23682  005D48  0E8F               	movlw	143
 23683  005D4A  0100               	movlb	0	; () banked
 23684  005D4C  6F71               	movwf	SwTimerSetTimeout@timeout& (0+255),b
 23685  005D4E  0E02               	movlw	2
 23686  005D50  6F72               	movwf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 23687  005D52  6B73               	clrf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 23688  005D54  6B74               	clrf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 23689  005D56  0102               	movlb	2	; () banked
 23690  005D58  51F3               	movf	(_loRa+243)& (0+255),w,b
 23691  005D5A  ECCA  F036         	call	_SwTimerSetTimeout
 23692                           
 23693                           ; BSR set to: 0
 23694                           ;lorawan.c: 178: SwTimerStart(loRa.abpJoinTimerId);
 23695  005D5E  0102               	movlb	2	; () banked
 23696  005D60  51F3               	movf	(_loRa+243)& (0+255),w,b
 23697  005D62  EFB3  F02E         	goto	_SwTimerStart
 23698  005D66                     __end_of_LORAWAN_Join:
 23699                           	opt stack 0
 23700                           tosu	equ	0xFFF
 23701                           tosh	equ	0xFFE
 23702                           tosl	equ	0xFFD
 23703                           pclath	equ	0xFFA
 23704                           tblptru	equ	0xFF8
 23705                           tblptrh	equ	0xFF7
 23706                           tblptrl	equ	0xFF6
 23707                           tablat	equ	0xFF5
 23708                           prodh	equ	0xFF4
 23709                           prodl	equ	0xFF3
 23710                           intcon	equ	0xFF2
 23711                           indf0	equ	0xFEF
 23712                           postinc0	equ	0xFEE
 23713                           fsr0h	equ	0xFEA
 23714                           fsr0l	equ	0xFE9
 23715                           wreg	equ	0xFE8
 23716                           postinc1	equ	0xFE6
 23717                           postdec1	equ	0xFE5
 23718                           plusw1	equ	0xFE3
 23719                           fsr1h	equ	0xFE2
 23720                           fsr1l	equ	0xFE1
 23721                           indf2	equ	0xFDF
 23722                           postinc2	equ	0xFDE
 23723                           postdec2	equ	0xFDD
 23724                           plusw2	equ	0xFDB
 23725                           fsr2h	equ	0xFDA
 23726                           fsr2l	equ	0xFD9
 23727                           status	equ	0xFD8
 23728                           
 23729 ;; *************** function _UpdateJoinInProgress *****************
 23730 ;; Defined at:
 23731 ;;		line 2037 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 23732 ;; Parameters:    Size  Location     Type
 23733 ;;  state           1    wreg     unsigned char 
 23734 ;; Auto vars:     Size  Location     Type
 23735 ;;  state           1    4[BANK0 ] unsigned char 
 23736 ;; Return value:  Size  Location     Type
 23737 ;;                  1    wreg      void 
 23738 ;; Registers used:
 23739 ;;		wreg, status,2, status,0
 23740 ;; Tracked objects:
 23741 ;;		On entry : D/0
 23742 ;;		On exit  : F/2
 23743 ;;		Unchanged: 0/0
 23744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23745 ;;      Params:         0       0       0       0       0       0       0       0       0
 23746 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23747 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23748 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23749 ;;Total ram usage:        1 bytes
 23750 ;; Hardware stack levels used:    1
 23751 ;; Hardware stack levels required when called:    7
 23752 ;; This function calls:
 23753 ;;		Nothing
 23754 ;; This function is called by:
 23755 ;;		_LORAWAN_Join
 23756 ;; This function uses a non-reentrant model
 23757 ;;
 23758                           
 23759                           	psect	text120
 23760  007654                     __ptext120:
 23761                           	opt stack 0
 23762  007654                     _UpdateJoinInProgress:
 23763                           	opt stack 22
 23764                           
 23765                           ;incstack = 0
 23766                           ;UpdateJoinInProgress@state stored from wreg
 23767  007654  0100               	movlb	0	; () banked
 23768  007656  6F64               	movwf	UpdateJoinInProgress@state& (0+255),b
 23769                           
 23770                           ;lorawan.c: 2040: loRa.macStatus.networkJoined = 0;
 23771  007658  0102               	movlb	2	; () banked
 23772  00765A  9902               	bcf	(_loRa+2)& (0+255),4,b
 23773                           
 23774                           ;lorawan.c: 2041: loRa.lorawanMacStatus.joining = 1;
 23775  00765C  8500               	bsf	_loRa& (0+255),2,b
 23776                           
 23777                           ; BSR set to: 2
 23778                           ;lorawan.c: 2042: loRa.macStatus.macState = state;
 23779  00765E  5102               	movf	(_loRa+2)& (0+255),w,b
 23780  007660  0100               	movlb	0	; () banked
 23781  007662  1964               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 23782  007664  0BF0               	andlw	-16
 23783  007666  1964               	xorwf	UpdateJoinInProgress@state& (0+255),w,b
 23784  007668  0102               	movlb	2	; () banked
 23785  00766A  6F02               	movwf	(_loRa+2)& (0+255),b
 23786                           
 23787                           ; BSR set to: 2
 23788  00766C  0012               	return		;funcret
 23789  00766E                     __end_of_UpdateJoinInProgress:
 23790                           	opt stack 0
 23791                           tosu	equ	0xFFF
 23792                           tosh	equ	0xFFE
 23793                           tosl	equ	0xFFD
 23794                           pclath	equ	0xFFA
 23795                           tblptru	equ	0xFF8
 23796                           tblptrh	equ	0xFF7
 23797                           tblptrl	equ	0xFF6
 23798                           tablat	equ	0xFF5
 23799                           prodh	equ	0xFF4
 23800                           prodl	equ	0xFF3
 23801                           intcon	equ	0xFF2
 23802                           indf0	equ	0xFEF
 23803                           postinc0	equ	0xFEE
 23804                           fsr0h	equ	0xFEA
 23805                           fsr0l	equ	0xFE9
 23806                           wreg	equ	0xFE8
 23807                           postinc1	equ	0xFE6
 23808                           postdec1	equ	0xFE5
 23809                           plusw1	equ	0xFE3
 23810                           fsr1h	equ	0xFE2
 23811                           fsr1l	equ	0xFE1
 23812                           indf2	equ	0xFDF
 23813                           postinc2	equ	0xFDE
 23814                           postdec2	equ	0xFDD
 23815                           plusw2	equ	0xFDB
 23816                           fsr2h	equ	0xFDA
 23817                           fsr2l	equ	0xFD9
 23818                           status	equ	0xFD8
 23819                           
 23820 ;; *************** function _SelectChannelForTransmission *****************
 23821 ;; Defined at:
 23822 ;;		line 919 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 23823 ;; Parameters:    Size  Location     Type
 23824 ;;  transmission    1    wreg     unsigned char 
 23825 ;; Auto vars:     Size  Location     Type
 23826 ;;  transmission    1   37[BANK0 ] unsigned char 
 23827 ;;  channelIndex    1   39[BANK0 ] unsigned char 
 23828 ;;  result          1   38[BANK0 ] enum E17190
 23829 ;; Return value:  Size  Location     Type
 23830 ;;                  1    wreg      enum E17190
 23831 ;; Registers used:
 23832 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23833 ;; Tracked objects:
 23834 ;;		On entry : 0/0
 23835 ;;		On exit  : F/0
 23836 ;;		Unchanged: 0/0
 23837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23838 ;;      Params:         0       0       0       0       0       0       0       0       0
 23839 ;;      Locals:         0       3       0       0       0       0       0       0       0
 23840 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23841 ;;      Totals:         0       3       0       0       0       0       0       0       0
 23842 ;;Total ram usage:        3 bytes
 23843 ;; Hardware stack levels used:    1
 23844 ;; Hardware stack levels required when called:   11
 23845 ;; This function calls:
 23846 ;;		_ConfigureRadioTx
 23847 ;;		_SearchAvailableChannel
 23848 ;; This function is called by:
 23849 ;;		_LORAWAN_RxTimeout
 23850 ;;		_LORAWAN_Join
 23851 ;;		_LORAWAN_Send
 23852 ;;		_AckRetransmissionCallback
 23853 ;;		_UnconfirmedTransmissionCallback
 23854 ;; This function uses a non-reentrant model
 23855 ;;
 23856                           
 23857                           	psect	text121
 23858  0066C0                     __ptext121:
 23859                           	opt stack 0
 23860  0066C0                     _SelectChannelForTransmission:
 23861                           	opt stack 17
 23862                           
 23863                           ; BSR set to: 2
 23864                           ;incstack = 0
 23865                           ;SelectChannelForTransmission@transmissionType stored from wreg
 23866  0066C0  0100               	movlb	0	; () banked
 23867  0066C2  6F85               	movwf	SelectChannelForTransmission@transmissionType& (0+255),b
 23868                           
 23869                           ;lorawan_eu.c: 922: uint8_t channelIndex;
 23870                           ;lorawan_eu.c: 924: result = SearchAvailableChannel (16, transmissionType, &channelIndex
      +                          );
 23871  0066C4  C085  F079         	movff	SelectChannelForTransmission@transmissionType,SearchAvailableChannel@transmission
      +                          Type
 23872  0066C8  0E87               	movlw	low SelectChannelForTransmission@channelIndex
 23873  0066CA  6F7A               	movwf	SearchAvailableChannel@channelIndex& (0+255),b
 23874  0066CC  6B7B               	clrf	(SearchAvailableChannel@channelIndex+1)& (0+255),b
 23875  0066CE  0E10               	movlw	16
 23876  0066D0  ECB2  F027         	call	_SearchAvailableChannel
 23877  0066D4  6F86               	movwf	SelectChannelForTransmission@result& (0+255),b
 23878                           
 23879                           ; BSR set to: 0
 23880                           ;lorawan_eu.c: 926: if (result == OK)
 23881  0066D6  5186               	movf	SelectChannelForTransmission@result& (0+255),w,b
 23882  0066D8  E120               	bnz	l13426
 23883                           
 23884                           ; BSR set to: 0
 23885                           ;lorawan_eu.c: 927: {
 23886                           ;lorawan_eu.c: 928: loRa.lastUsedChannelIndex = channelIndex;
 23887  0066DA  C087  F2DA         	movff	SelectChannelForTransmission@channelIndex,_loRa+218
 23888                           
 23889                           ; BSR set to: 0
 23890                           ;lorawan_eu.c: 929: loRa.receiveWindow1Parameters.frequency = Channels[channelIndex].fre
      +                          quency;
 23891  0066DE  5187               	movf	SelectChannelForTransmission@channelIndex& (0+255),w,b
 23892  0066E0  0D0E               	mullw	14
 23893  0066E2  0E00               	movlw	low _Channels
 23894  0066E4  24F3               	addwf	prodl,w,c
 23895  0066E6  6ED9               	movwf	fsr2l,c
 23896  0066E8  0E04               	movlw	high _Channels
 23897  0066EA  20F4               	addwfc	prodh,w,c
 23898  0066EC  6EDA               	movwf	fsr2h,c
 23899  0066EE  CFDE F213          	movff	postinc2,_loRa+19
 23900  0066F2  CFDE F214          	movff	postinc2,_loRa+20
 23901  0066F6  CFDE F215          	movff	postinc2,_loRa+21
 23902  0066FA  CFDE F216          	movff	postinc2,_loRa+22
 23903                           
 23904                           ; BSR set to: 0
 23905                           ;lorawan_eu.c: 930: loRa.receiveWindow1Parameters.dataRate = loRa.currentDataRate;
 23906  0066FE  C2DF  F217         	movff	_loRa+223,_loRa+23
 23907                           
 23908                           ; BSR set to: 0
 23909                           ;lorawan_eu.c: 932: ConfigureRadioTx(loRa.receiveWindow1Parameters.dataRate, loRa.receiv
      +                          eWindow1Parameters.frequency);
 23910  006702  C213  F076         	movff	_loRa+19,ConfigureRadioTx@freq
 23911  006706  C214  F077         	movff	_loRa+20,ConfigureRadioTx@freq+1
 23912  00670A  C215  F078         	movff	_loRa+21,ConfigureRadioTx@freq+2
 23913  00670E  C216  F079         	movff	_loRa+22,ConfigureRadioTx@freq+3
 23914  006712  0102               	movlb	2	; () banked
 23915  006714  5117               	movf	(_loRa+23)& (0+255),w,b
 23916  006716  ECA9  F036         	call	_ConfigureRadioTx
 23917  00671A                     l13426:
 23918                           
 23919                           ;lorawan_eu.c: 933: }
 23920                           ;lorawan_eu.c: 934: return result;
 23921  00671A  0100               	movlb	0	; () banked
 23922  00671C  5186               	movf	SelectChannelForTransmission@result& (0+255),w,b
 23923                           
 23924                           ; BSR set to: 0
 23925  00671E  0012               	return		;funcret
 23926  006720                     __end_of_SelectChannelForTransmission:
 23927                           	opt stack 0
 23928                           tosu	equ	0xFFF
 23929                           tosh	equ	0xFFE
 23930                           tosl	equ	0xFFD
 23931                           pclath	equ	0xFFA
 23932                           tblptru	equ	0xFF8
 23933                           tblptrh	equ	0xFF7
 23934                           tblptrl	equ	0xFF6
 23935                           tablat	equ	0xFF5
 23936                           prodh	equ	0xFF4
 23937                           prodl	equ	0xFF3
 23938                           intcon	equ	0xFF2
 23939                           indf0	equ	0xFEF
 23940                           postinc0	equ	0xFEE
 23941                           fsr0h	equ	0xFEA
 23942                           fsr0l	equ	0xFE9
 23943                           wreg	equ	0xFE8
 23944                           postinc1	equ	0xFE6
 23945                           postdec1	equ	0xFE5
 23946                           plusw1	equ	0xFE3
 23947                           fsr1h	equ	0xFE2
 23948                           fsr1l	equ	0xFE1
 23949                           indf2	equ	0xFDF
 23950                           postinc2	equ	0xFDE
 23951                           postdec2	equ	0xFDD
 23952                           plusw2	equ	0xFDB
 23953                           fsr2h	equ	0xFDA
 23954                           fsr2l	equ	0xFD9
 23955                           status	equ	0xFD8
 23956                           
 23957 ;; *************** function _SearchAvailableChannel *****************
 23958 ;; Defined at:
 23959 ;;		line 778 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 23960 ;; Parameters:    Size  Location     Type
 23961 ;;  maxChannels     1    wreg     unsigned char 
 23962 ;;  transmission    1   25[BANK0 ] unsigned char 
 23963 ;;  channelIndex    2   26[BANK0 ] PTR unsigned char 
 23964 ;;		 -> LORAWAN_RxDone@channelIndex(1), SelectChannelForTransmission@channelIndex(1), 
 23965 ;; Auto vars:     Size  Location     Type
 23966 ;;  maxChannels     1   34[BANK0 ] unsigned char 
 23967 ;;  i               1   36[BANK0 ] unsigned char 
 23968 ;;  randomNumber    1   35[BANK0 ] unsigned char 
 23969 ;;  result          1   33[BANK0 ] enum E17190
 23970 ;;  randomNumber    1   32[BANK0 ] unsigned char 
 23971 ;; Return value:  Size  Location     Type
 23972 ;;                  1    wreg      enum E17190
 23973 ;; Registers used:
 23974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23975 ;; Tracked objects:
 23976 ;;		On entry : D/2
 23977 ;;		On exit  : F/0
 23978 ;;		Unchanged: 0/0
 23979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23980 ;;      Params:         0       3       0       0       0       0       0       0       0
 23981 ;;      Locals:         0       5       0       0       0       0       0       0       0
 23982 ;;      Temps:          0       4       0       0       0       0       0       0       0
 23983 ;;      Totals:         0      12       0       0       0       0       0       0       0
 23984 ;;Total ram usage:       12 bytes
 23985 ;; Hardware stack levels used:    1
 23986 ;; Hardware stack levels required when called:   10
 23987 ;; This function calls:
 23988 ;;		_Random
 23989 ;; This function is called by:
 23990 ;;		_SelectChannelForTransmission
 23991 ;;		_LORAWAN_RxDone
 23992 ;; This function uses a non-reentrant model
 23993 ;;
 23994                           
 23995                           	psect	text122
 23996  004F64                     __ptext122:
 23997                           	opt stack 0
 23998  004F64                     _SearchAvailableChannel:
 23999                           	opt stack 17
 24000                           
 24001                           ; BSR set to: 0
 24002                           ;incstack = 0
 24003                           ;SearchAvailableChannel@maxChannels stored from wreg
 24004  004F64  0100               	movlb	0	; () banked
 24005  004F66  6F82               	movwf	SearchAvailableChannel@maxChannels& (0+255),b
 24006                           
 24007                           ;lorawan_eu.c: 780: uint8_t randomNumberCopy, randomNumber, i;
 24008                           ;lorawan_eu.c: 781: LorawanError_t result = OK;
 24009  004F68  6B81               	clrf	SearchAvailableChannel@result& (0+255),b
 24010                           
 24011                           ; BSR set to: 0
 24012                           ;lorawan_eu.c: 783: randomNumber = Random (maxChannels) + 1;
 24013  004F6A  C082  F077         	movff	SearchAvailableChannel@maxChannels,Random@max
 24014  004F6E  6B78               	clrf	(Random@max+1)& (0+255),b
 24015  004F70  EC1C  F03A         	call	_Random	;wreg free
 24016  004F74  2977               	incf	?_Random& (0+255),w,b
 24017  004F76  6F83               	movwf	SearchAvailableChannel@randomNumber& (0+255),b
 24018                           
 24019                           ; BSR set to: 0
 24020                           ;lorawan_eu.c: 784: randomNumberCopy = randomNumber;
 24021  004F78  C083  F080         	movff	SearchAvailableChannel@randomNumber,SearchAvailableChannel@randomNumberCopy
 24022                           
 24023                           ;lorawan_eu.c: 786: while (randomNumber)
 24024  004F7C  D054               	goto	l12980
 24025  004F7E                     l1152:
 24026                           
 24027                           ; BSR set to: 0
 24028                           ;lorawan_eu.c: 787: {
 24029                           ;lorawan_eu.c: 788: for (i=0; (i < maxChannels) && (randomNumber != 0) ; i++)
 24030  004F7E  6B84               	clrf	SearchAvailableChannel@i& (0+255),b
 24031  004F80  D047               	goto	l12972
 24032  004F82                     l12956:
 24033                           
 24034                           ; BSR set to: 0
 24035                           ;lorawan_eu.c: 789: {
 24036                           ;lorawan_eu.c: 790: if ( ( Channels[i].status == 1 ) && ( Channels[i].channelTimer == 0 
      +                          ) && ( loRa.currentDataRate >= Channels[i].dataRange.min ) && ( loRa.currentDataRate <= 
      +                          Channels[i].dataRange.max ) )
 24037  004F82  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 24038  004F84  0D0E               	mullw	14
 24039  004F86  0E04               	movlw	low (_Channels+4)
 24040  004F88  24F3               	addwf	prodl,w,c
 24041  004F8A  6ED9               	movwf	fsr2l,c
 24042  004F8C  0E04               	movlw	high (_Channels+4)
 24043  004F8E  20F4               	addwfc	prodh,w,c
 24044  004F90  6EDA               	movwf	fsr2h,c
 24045  004F92  04DE               	decf	postinc2,w,c
 24046  004F94  E13B               	bnz	l1155
 24047                           
 24048                           ; BSR set to: 0
 24049  004F96  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 24050  004F98  0D0E               	mullw	14
 24051  004F9A  0E08               	movlw	low (_Channels+8)
 24052  004F9C  24F3               	addwf	prodl,w,c
 24053  004F9E  6ED9               	movwf	fsr2l,c
 24054  004FA0  0E04               	movlw	high (_Channels+8)
 24055  004FA2  20F4               	addwfc	prodh,w,c
 24056  004FA4  6EDA               	movwf	fsr2h,c
 24057  004FA6  50DE               	movf	postinc2,w,c
 24058  004FA8  10DE               	iorwf	postinc2,w,c
 24059  004FAA  10DE               	iorwf	postinc2,w,c
 24060  004FAC  10DE               	iorwf	postinc2,w,c
 24061  004FAE  E12E               	bnz	l1155
 24062                           
 24063                           ; BSR set to: 0
 24064  004FB0  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 24065  004FB2  0D0E               	mullw	14
 24066  004FB4  0E05               	movlw	low (_Channels+5)
 24067  004FB6  24F3               	addwf	prodl,w,c
 24068  004FB8  6ED9               	movwf	fsr2l,c
 24069  004FBA  0E04               	movlw	high (_Channels+5)
 24070  004FBC  20F4               	addwfc	prodh,w,c
 24071  004FBE  6EDA               	movwf	fsr2h,c
 24072  004FC0  50DF               	movf	223,w,c
 24073  004FC2  0B0F               	andlw	15
 24074  004FC4  0100               	movlb	0	; () banked
 24075  004FC6  6F7C               	movwf	??_SearchAvailableChannel& (0+255),b
 24076  004FC8  517C               	movf	??_SearchAvailableChannel& (0+255),w,b
 24077  004FCA  0102               	movlb	2	; () banked
 24078  004FCC  5DDF               	subwf	(_loRa+223)& (0+255),w,b
 24079  004FCE  E31E               	bnc	l1155
 24080                           
 24081                           ; BSR set to: 2
 24082  004FD0  0100               	movlb	0	; () banked
 24083  004FD2  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 24084  004FD4  0D0E               	mullw	14
 24085  004FD6  0E05               	movlw	low (_Channels+5)
 24086  004FD8  24F3               	addwf	prodl,w,c
 24087  004FDA  6ED9               	movwf	fsr2l,c
 24088  004FDC  0E04               	movlw	high (_Channels+5)
 24089  004FDE  20F4               	addwfc	prodh,w,c
 24090  004FE0  6EDA               	movwf	fsr2h,c
 24091  004FE2  38DF               	swapf	223,w,c
 24092  004FE4  0B0F               	andlw	15
 24093  004FE6  6F7C               	movwf	??_SearchAvailableChannel& (0+255),b
 24094  004FE8  0102               	movlb	2	; () banked
 24095  004FEA  51DF               	movf	(_loRa+223)& (0+255),w,b
 24096  004FEC  0100               	movlb	0	; () banked
 24097  004FEE  5D7C               	subwf	??_SearchAvailableChannel& (0+255),w,b
 24098  004FF0  E30D               	bnc	l1155
 24099                           
 24100                           ; BSR set to: 0
 24101                           ;lorawan_eu.c: 791: {
 24102                           ;lorawan_eu.c: 792: if (transmissionType == 0)
 24103  004FF2  5179               	movf	SearchAvailableChannel@transmissionType& (0+255),w,b
 24104  004FF4  E10A               	bnz	l12968
 24105                           
 24106                           ; BSR set to: 0
 24107                           ;lorawan_eu.c: 793: {
 24108                           ;lorawan_eu.c: 794: if ( Channels[i].joinRequestChannel == 1 )
 24109  004FF6  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 24110  004FF8  0D0E               	mullw	14
 24111  004FFA  0E0C               	movlw	low (_Channels+12)
 24112  004FFC  24F3               	addwf	prodl,w,c
 24113  004FFE  6ED9               	movwf	fsr2l,c
 24114  005000  0E04               	movlw	high (_Channels+12)
 24115  005002  20F4               	addwfc	prodh,w,c
 24116  005004  6EDA               	movwf	fsr2h,c
 24117  005006  04DE               	decf	postinc2,w,c
 24118  005008  E101               	bnz	l1155
 24119  00500A                     l12968:
 24120                           
 24121                           ; BSR set to: 0
 24122                           ;lorawan_eu.c: 795: {
 24123                           ;lorawan_eu.c: 796: randomNumber --;
 24124  00500A  0783               	decf	SearchAvailableChannel@randomNumber& (0+255),f,b
 24125  00500C                     l1155:
 24126  00500C  0100               	movlb	0	; () banked
 24127  00500E  2B84               	incf	SearchAvailableChannel@i& (0+255),f,b
 24128  005010                     l12972:
 24129                           
 24130                           ; BSR set to: 0
 24131  005010  5182               	movf	SearchAvailableChannel@maxChannels& (0+255),w,b
 24132  005012  5D84               	subwf	SearchAvailableChannel@i& (0+255),w,b
 24133  005014  E202               	bc	l12976
 24134                           
 24135                           ; BSR set to: 0
 24136  005016  5183               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 24137  005018  E1B4               	bnz	l12956
 24138  00501A                     l12976:
 24139                           
 24140                           ; BSR set to: 0
 24141                           ;lorawan_eu.c: 802: }
 24142                           ;lorawan_eu.c: 803: }
 24143                           ;lorawan_eu.c: 804: }
 24144                           ;lorawan_eu.c: 806: if ( randomNumber == randomNumberCopy )
 24145  00501A  5180               	movf	SearchAvailableChannel@randomNumberCopy& (0+255),w,b
 24146  00501C  1983               	xorwf	SearchAvailableChannel@randomNumber& (0+255),w,b
 24147  00501E  E103               	bnz	l12980
 24148                           
 24149                           ; BSR set to: 0
 24150                           ;lorawan_eu.c: 807: {
 24151                           ;lorawan_eu.c: 808: result = NO_CHANNELS_FOUND;
 24152  005020  0E09               	movlw	9
 24153  005022  6F81               	movwf	SearchAvailableChannel@result& (0+255),b
 24154                           
 24155                           ;lorawan_eu.c: 809: break;
 24156  005024  D002               	goto	l12982
 24157  005026                     l12980:
 24158                           
 24159                           ; BSR set to: 0
 24160  005026  5183               	movf	SearchAvailableChannel@randomNumber& (0+255),w,b
 24161  005028  E1AA               	bnz	l1152
 24162  00502A                     l12982:
 24163                           
 24164                           ; BSR set to: 0
 24165                           ;lorawan_eu.c: 810: }
 24166                           ;lorawan_eu.c: 811: }
 24167                           ;lorawan_eu.c: 813: if ( i != 0)
 24168  00502A  5184               	movf	SearchAvailableChannel@i& (0+255),w,b
 24169  00502C  E007               	bz	l12986
 24170                           
 24171                           ; BSR set to: 0
 24172                           ;lorawan_eu.c: 814: {
 24173                           ;lorawan_eu.c: 815: *channelIndex = i - 1;
 24174  00502E  0584               	decf	SearchAvailableChannel@i& (0+255),w,b
 24175  005030  C07A  FFD9         	movff	SearchAvailableChannel@channelIndex,fsr2l
 24176  005034  C07B  FFDA         	movff	SearchAvailableChannel@channelIndex+1,fsr2h
 24177  005038  6EDF               	movwf	indf2,c
 24178                           
 24179                           ;lorawan_eu.c: 816: }
 24180  00503A  D002               	goto	l1165
 24181  00503C                     l12986:
 24182                           
 24183                           ; BSR set to: 0
 24184                           ;lorawan_eu.c: 817: else
 24185                           ;lorawan_eu.c: 818: {
 24186                           ;lorawan_eu.c: 819: result = NO_CHANNELS_FOUND;
 24187  00503C  0E09               	movlw	9
 24188  00503E  6F81               	movwf	SearchAvailableChannel@result& (0+255),b
 24189  005040                     l1165:
 24190                           
 24191                           ; BSR set to: 0
 24192                           ;lorawan_eu.c: 820: }
 24193                           ;lorawan_eu.c: 821: return result;
 24194  005040  5181               	movf	SearchAvailableChannel@result& (0+255),w,b
 24195                           
 24196                           ; BSR set to: 0
 24197  005042  0012               	return		;funcret
 24198  005044                     __end_of_SearchAvailableChannel:
 24199                           	opt stack 0
 24200                           tosu	equ	0xFFF
 24201                           tosh	equ	0xFFE
 24202                           tosl	equ	0xFFD
 24203                           pclath	equ	0xFFA
 24204                           tblptru	equ	0xFF8
 24205                           tblptrh	equ	0xFF7
 24206                           tblptrl	equ	0xFF6
 24207                           tablat	equ	0xFF5
 24208                           prodh	equ	0xFF4
 24209                           prodl	equ	0xFF3
 24210                           intcon	equ	0xFF2
 24211                           indf0	equ	0xFEF
 24212                           postinc0	equ	0xFEE
 24213                           fsr0h	equ	0xFEA
 24214                           fsr0l	equ	0xFE9
 24215                           wreg	equ	0xFE8
 24216                           postinc1	equ	0xFE6
 24217                           postdec1	equ	0xFE5
 24218                           plusw1	equ	0xFE3
 24219                           fsr1h	equ	0xFE2
 24220                           fsr1l	equ	0xFE1
 24221                           indf2	equ	0xFDF
 24222                           postinc2	equ	0xFDE
 24223                           postdec2	equ	0xFDD
 24224                           plusw2	equ	0xFDB
 24225                           fsr2h	equ	0xFDA
 24226                           fsr2l	equ	0xFD9
 24227                           status	equ	0xFD8
 24228                           
 24229 ;; *************** function _ConfigureRadioTx *****************
 24230 ;; Defined at:
 24231 ;;		line 1255 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24232 ;; Parameters:    Size  Location     Type
 24233 ;;  dataRate        1    wreg     unsigned char 
 24234 ;;  freq            4   22[BANK0 ] unsigned long 
 24235 ;; Auto vars:     Size  Location     Type
 24236 ;;  dataRate        1   26[BANK0 ] unsigned char 
 24237 ;;  txPower         1   27[BANK0 ] char 
 24238 ;; Return value:  Size  Location     Type
 24239 ;;                  1    wreg      void 
 24240 ;; Registers used:
 24241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24242 ;; Tracked objects:
 24243 ;;		On entry : F/2
 24244 ;;		On exit  : 0/0
 24245 ;;		Unchanged: 0/0
 24246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24247 ;;      Params:         0       4       0       0       0       0       0       0       0
 24248 ;;      Locals:         0       2       0       0       0       0       0       0       0
 24249 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24250 ;;      Totals:         0       6       0       0       0       0       0       0       0
 24251 ;;Total ram usage:        6 bytes
 24252 ;; Hardware stack levels used:    1
 24253 ;; Hardware stack levels required when called:   10
 24254 ;; This function calls:
 24255 ;;		_ConfigureRadio
 24256 ;;		_RADIO_SetCRC
 24257 ;;		_RADIO_SetIQInverted
 24258 ;;		_RADIO_SetOutputPower
 24259 ;; This function is called by:
 24260 ;;		_SelectChannelForTransmission
 24261 ;; This function uses a non-reentrant model
 24262 ;;
 24263                           
 24264                           	psect	text123
 24265  006D52                     __ptext123:
 24266                           	opt stack 0
 24267  006D52                     _ConfigureRadioTx:
 24268                           	opt stack 17
 24269                           
 24270                           ; BSR set to: 0
 24271                           ;incstack = 0
 24272                           ;ConfigureRadioTx@dataRate stored from wreg
 24273  006D52  0100               	movlb	0	; () banked
 24274  006D54  6F7A               	movwf	ConfigureRadioTx@dataRate& (0+255),b
 24275                           
 24276                           ;lorawan_eu.c: 1257: int8_t txPower;
 24277                           ;lorawan_eu.c: 1259: ConfigureRadio(dataRate, freq);
 24278  006D56  C076  F071         	movff	ConfigureRadioTx@freq,ConfigureRadio@freq
 24279  006D5A  C077  F072         	movff	ConfigureRadioTx@freq+1,ConfigureRadio@freq+1
 24280  006D5E  C078  F073         	movff	ConfigureRadioTx@freq+2,ConfigureRadio@freq+2
 24281  006D62  C079  F074         	movff	ConfigureRadioTx@freq+3,ConfigureRadio@freq+3
 24282  006D66  517A               	movf	ConfigureRadioTx@dataRate& (0+255),w,b
 24283  006D68  EC37  F030         	call	_ConfigureRadio
 24284                           
 24285                           ;lorawan_eu.c: 1262: {
 24286                           ;lorawan_eu.c: 1263: txPower = txPower868[loRa.txPower];
 24287  006D6C  0EA2               	movlw	low _txPower868
 24288  006D6E  0102               	movlb	2	; () banked
 24289  006D70  25E1               	addwf	(_loRa+225)& (0+255),w,b
 24290  006D72  6EF6               	movwf	tblptrl,c
 24291  006D74  6AF7               	clrf	tblptrh,c
 24292  006D76  0E7F               	movlw	high _txPower868
 24293  006D78  22F7               	addwfc	tblptrh,f,c
 24294  006D7A                     	if	0	;There are less than 3 active tblptr bytes
 24295  006D7A                     	endif
 24296  006D7A  0008               	tblrd		*
 24297  006D7C  CFF5 F07B          	movff	tablat,ConfigureRadioTx@txPower
 24298                           
 24299                           ; BSR set to: 2
 24300                           ;lorawan_eu.c: 1268: }
 24301                           ;lorawan_eu.c: 1270: RADIO_SetOutputPower (txPower);
 24302                           
 24303                           ;lorawan_eu.c: 1264: }
 24304  006D80  0100               	movlb	0	; () banked
 24305  006D82  517B               	movf	ConfigureRadioTx@txPower& (0+255),w,b
 24306  006D84  EC2D  F03C         	call	_RADIO_SetOutputPower
 24307                           
 24308                           ;lorawan_eu.c: 1272: RADIO_SetCRC(1);
 24309  006D88  0E01               	movlw	1
 24310  006D8A  EC0D  F03C         	call	_RADIO_SetCRC
 24311                           
 24312                           ;lorawan_eu.c: 1273: RADIO_SetIQInverted(0);
 24313  006D8E  0E00               	movlw	0
 24314  006D90  EF08  F03C         	goto	_RADIO_SetIQInverted
 24315  006D94                     __end_of_ConfigureRadioTx:
 24316                           	opt stack 0
 24317                           tosu	equ	0xFFF
 24318                           tosh	equ	0xFFE
 24319                           tosl	equ	0xFFD
 24320                           pclath	equ	0xFFA
 24321                           tblptru	equ	0xFF8
 24322                           tblptrh	equ	0xFF7
 24323                           tblptrl	equ	0xFF6
 24324                           tablat	equ	0xFF5
 24325                           prodh	equ	0xFF4
 24326                           prodl	equ	0xFF3
 24327                           intcon	equ	0xFF2
 24328                           indf0	equ	0xFEF
 24329                           postinc0	equ	0xFEE
 24330                           fsr0h	equ	0xFEA
 24331                           fsr0l	equ	0xFE9
 24332                           wreg	equ	0xFE8
 24333                           postinc1	equ	0xFE6
 24334                           postdec1	equ	0xFE5
 24335                           plusw1	equ	0xFE3
 24336                           fsr1h	equ	0xFE2
 24337                           fsr1l	equ	0xFE1
 24338                           indf2	equ	0xFDF
 24339                           postinc2	equ	0xFDE
 24340                           postdec2	equ	0xFDD
 24341                           plusw2	equ	0xFDB
 24342                           fsr2h	equ	0xFDA
 24343                           fsr2l	equ	0xFD9
 24344                           status	equ	0xFD8
 24345                           
 24346 ;; *************** function _RADIO_SetOutputPower *****************
 24347 ;; Defined at:
 24348 ;;		line 1464 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24349 ;; Parameters:    Size  Location     Type
 24350 ;;  power           1    wreg     char 
 24351 ;; Auto vars:     Size  Location     Type
 24352 ;;  power           1    4[BANK0 ] char 
 24353 ;; Return value:  Size  Location     Type
 24354 ;;                  1    wreg      void 
 24355 ;; Registers used:
 24356 ;;		wreg
 24357 ;; Tracked objects:
 24358 ;;		On entry : F/0
 24359 ;;		On exit  : 0/0
 24360 ;;		Unchanged: 0/0
 24361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24362 ;;      Params:         0       0       0       0       0       0       0       0       0
 24363 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24364 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24365 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24366 ;;Total ram usage:        1 bytes
 24367 ;; Hardware stack levels used:    1
 24368 ;; Hardware stack levels required when called:    7
 24369 ;; This function calls:
 24370 ;;		Nothing
 24371 ;; This function is called by:
 24372 ;;		_ConfigureRadioTx
 24373 ;; This function uses a non-reentrant model
 24374 ;;
 24375                           
 24376                           	psect	text124
 24377  00785A                     __ptext124:
 24378                           	opt stack 0
 24379  00785A                     _RADIO_SetOutputPower:
 24380                           	opt stack 19
 24381                           
 24382                           ;incstack = 0
 24383                           ;RADIO_SetOutputPower@power stored from wreg
 24384  00785A  6F64               	movwf	RADIO_SetOutputPower@power& (0+255),b
 24385                           
 24386                           ;radio_driver_SX1276.c: 1466: RadioConfiguration.outputPower = power;
 24387  00785C  C064  F190         	movff	RADIO_SetOutputPower@power,_RadioConfiguration+27
 24388  007860  0012               	return		;funcret
 24389  007862                     __end_of_RADIO_SetOutputPower:
 24390                           	opt stack 0
 24391                           tosu	equ	0xFFF
 24392                           tosh	equ	0xFFE
 24393                           tosl	equ	0xFFD
 24394                           pclath	equ	0xFFA
 24395                           tblptru	equ	0xFF8
 24396                           tblptrh	equ	0xFF7
 24397                           tblptrl	equ	0xFF6
 24398                           tablat	equ	0xFF5
 24399                           prodh	equ	0xFF4
 24400                           prodl	equ	0xFF3
 24401                           intcon	equ	0xFF2
 24402                           indf0	equ	0xFEF
 24403                           postinc0	equ	0xFEE
 24404                           fsr0h	equ	0xFEA
 24405                           fsr0l	equ	0xFE9
 24406                           wreg	equ	0xFE8
 24407                           postinc1	equ	0xFE6
 24408                           postdec1	equ	0xFE5
 24409                           plusw1	equ	0xFE3
 24410                           fsr1h	equ	0xFE2
 24411                           fsr1l	equ	0xFE1
 24412                           indf2	equ	0xFDF
 24413                           postinc2	equ	0xFDE
 24414                           postdec2	equ	0xFDD
 24415                           plusw2	equ	0xFDB
 24416                           fsr2h	equ	0xFDA
 24417                           fsr2l	equ	0xFD9
 24418                           status	equ	0xFD8
 24419                           
 24420 ;; *************** function _RADIO_SetIQInverted *****************
 24421 ;; Defined at:
 24422 ;;		line 1484 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24423 ;; Parameters:    Size  Location     Type
 24424 ;;  iqInverted      1    wreg     unsigned char 
 24425 ;; Auto vars:     Size  Location     Type
 24426 ;;  iqInverted      1    4[BANK0 ] unsigned char 
 24427 ;; Return value:  Size  Location     Type
 24428 ;;                  1    wreg      void 
 24429 ;; Registers used:
 24430 ;;		wreg
 24431 ;; Tracked objects:
 24432 ;;		On entry : 0/0
 24433 ;;		On exit  : 0/0
 24434 ;;		Unchanged: 0/0
 24435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24436 ;;      Params:         0       0       0       0       0       0       0       0       0
 24437 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24438 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24439 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24440 ;;Total ram usage:        1 bytes
 24441 ;; Hardware stack levels used:    1
 24442 ;; Hardware stack levels required when called:    7
 24443 ;; This function calls:
 24444 ;;		Nothing
 24445 ;; This function is called by:
 24446 ;;		_ConfigureRadioTx
 24447 ;;		_ConfigureRadioRx
 24448 ;; This function uses a non-reentrant model
 24449 ;;
 24450                           
 24451                           	psect	text125
 24452  007810                     __ptext125:
 24453                           	opt stack 0
 24454  007810                     _RADIO_SetIQInverted:
 24455                           	opt stack 19
 24456                           
 24457                           ;incstack = 0
 24458                           ;RADIO_SetIQInverted@iqInverted stored from wreg
 24459  007810  0100               	movlb	0	; () banked
 24460  007812  6F64               	movwf	RADIO_SetIQInverted@iqInverted& (0+255),b
 24461                           
 24462                           ;radio_driver_SX1276.c: 1486: RadioConfiguration.iqInverted = iqInverted;
 24463  007814  C064  F195         	movff	RADIO_SetIQInverted@iqInverted,_RadioConfiguration+32
 24464  007818  0012               	return		;funcret
 24465  00781A                     __end_of_RADIO_SetIQInverted:
 24466                           	opt stack 0
 24467                           tosu	equ	0xFFF
 24468                           tosh	equ	0xFFE
 24469                           tosl	equ	0xFFD
 24470                           pclath	equ	0xFFA
 24471                           tblptru	equ	0xFF8
 24472                           tblptrh	equ	0xFF7
 24473                           tblptrl	equ	0xFF6
 24474                           tablat	equ	0xFF5
 24475                           prodh	equ	0xFF4
 24476                           prodl	equ	0xFF3
 24477                           intcon	equ	0xFF2
 24478                           indf0	equ	0xFEF
 24479                           postinc0	equ	0xFEE
 24480                           fsr0h	equ	0xFEA
 24481                           fsr0l	equ	0xFE9
 24482                           wreg	equ	0xFE8
 24483                           postinc1	equ	0xFE6
 24484                           postdec1	equ	0xFE5
 24485                           plusw1	equ	0xFE3
 24486                           fsr1h	equ	0xFE2
 24487                           fsr1l	equ	0xFE1
 24488                           indf2	equ	0xFDF
 24489                           postinc2	equ	0xFDE
 24490                           postdec2	equ	0xFDD
 24491                           plusw2	equ	0xFDB
 24492                           fsr2h	equ	0xFDA
 24493                           fsr2l	equ	0xFD9
 24494                           status	equ	0xFD8
 24495                           
 24496 ;; *************** function _RADIO_SetCRC *****************
 24497 ;; Defined at:
 24498 ;;		line 1474 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24499 ;; Parameters:    Size  Location     Type
 24500 ;;  crc             1    wreg     unsigned char 
 24501 ;; Auto vars:     Size  Location     Type
 24502 ;;  crc             1    4[BANK0 ] unsigned char 
 24503 ;; Return value:  Size  Location     Type
 24504 ;;                  1    wreg      void 
 24505 ;; Registers used:
 24506 ;;		wreg
 24507 ;; Tracked objects:
 24508 ;;		On entry : 0/0
 24509 ;;		On exit  : 0/0
 24510 ;;		Unchanged: 0/0
 24511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24512 ;;      Params:         0       0       0       0       0       0       0       0       0
 24513 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24514 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24515 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24516 ;;Total ram usage:        1 bytes
 24517 ;; Hardware stack levels used:    1
 24518 ;; Hardware stack levels required when called:    7
 24519 ;; This function calls:
 24520 ;;		Nothing
 24521 ;; This function is called by:
 24522 ;;		_ConfigureRadioTx
 24523 ;;		_ConfigureRadioRx
 24524 ;; This function uses a non-reentrant model
 24525 ;;
 24526                           
 24527                           	psect	text126
 24528  00781A                     __ptext126:
 24529                           	opt stack 0
 24530  00781A                     _RADIO_SetCRC:
 24531                           	opt stack 19
 24532                           
 24533                           ;incstack = 0
 24534                           ;RADIO_SetCRC@crc stored from wreg
 24535  00781A  0100               	movlb	0	; () banked
 24536  00781C  6F64               	movwf	RADIO_SetCRC@crc& (0+255),b
 24537                           
 24538                           ;radio_driver_SX1276.c: 1476: RadioConfiguration.crcOn = crc;
 24539  00781E  C064  F191         	movff	RADIO_SetCRC@crc,_RadioConfiguration+28
 24540  007822  0012               	return		;funcret
 24541  007824                     __end_of_RADIO_SetCRC:
 24542                           	opt stack 0
 24543                           tosu	equ	0xFFF
 24544                           tosh	equ	0xFFE
 24545                           tosl	equ	0xFFD
 24546                           pclath	equ	0xFFA
 24547                           tblptru	equ	0xFF8
 24548                           tblptrh	equ	0xFF7
 24549                           tblptrl	equ	0xFF6
 24550                           tablat	equ	0xFF5
 24551                           prodh	equ	0xFF4
 24552                           prodl	equ	0xFF3
 24553                           intcon	equ	0xFF2
 24554                           indf0	equ	0xFEF
 24555                           postinc0	equ	0xFEE
 24556                           fsr0h	equ	0xFEA
 24557                           fsr0l	equ	0xFE9
 24558                           wreg	equ	0xFE8
 24559                           postinc1	equ	0xFE6
 24560                           postdec1	equ	0xFE5
 24561                           plusw1	equ	0xFE3
 24562                           fsr1h	equ	0xFE2
 24563                           fsr1l	equ	0xFE1
 24564                           indf2	equ	0xFDF
 24565                           postinc2	equ	0xFDE
 24566                           postdec2	equ	0xFDD
 24567                           plusw2	equ	0xFDB
 24568                           fsr2h	equ	0xFDA
 24569                           fsr2l	equ	0xFD9
 24570                           status	equ	0xFD8
 24571                           
 24572 ;; *************** function _ConfigureRadio *****************
 24573 ;; Defined at:
 24574 ;;		line 863 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 24575 ;; Parameters:    Size  Location     Type
 24576 ;;  dataRate        1    wreg     unsigned char 
 24577 ;;  freq            4   17[BANK0 ] unsigned long 
 24578 ;; Auto vars:     Size  Location     Type
 24579 ;;  dataRate        1   21[BANK0 ] unsigned char 
 24580 ;; Return value:  Size  Location     Type
 24581 ;;                  1    wreg      void 
 24582 ;; Registers used:
 24583 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24584 ;; Tracked objects:
 24585 ;;		On entry : F/0
 24586 ;;		On exit  : 0/0
 24587 ;;		Unchanged: 0/0
 24588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24589 ;;      Params:         0       4       0       0       0       0       0       0       0
 24590 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24591 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24592 ;;      Totals:         0       5       0       0       0       0       0       0       0
 24593 ;;Total ram usage:        5 bytes
 24594 ;; Hardware stack levels used:    1
 24595 ;; Hardware stack levels required when called:    9
 24596 ;; This function calls:
 24597 ;;		_RADIO_SetBandwidth
 24598 ;;		_RADIO_SetChannelFrequency
 24599 ;;		_RADIO_SetFSKSyncWord
 24600 ;;		_RADIO_SetFrequencyHopPeriod
 24601 ;;		_RADIO_SetLoRaSyncWord
 24602 ;;		_RADIO_SetModulation
 24603 ;;		_RADIO_SetSpreadingFactor
 24604 ;; This function is called by:
 24605 ;;		_ConfigureRadioTx
 24606 ;;		_ConfigureRadioRx
 24607 ;; This function uses a non-reentrant model
 24608 ;;
 24609                           
 24610                           	psect	text127
 24611  00606E                     __ptext127:
 24612                           	opt stack 0
 24613  00606E                     _ConfigureRadio:
 24614                           	opt stack 17
 24615                           
 24616                           ;incstack = 0
 24617                           ;ConfigureRadio@dataRate stored from wreg
 24618  00606E  6F75               	movwf	ConfigureRadio@dataRate& (0+255),b
 24619                           
 24620                           ;lorawan_eu.c: 865: RADIO_SetModulation (modulation[dataRate]);
 24621  006070  0E75               	movlw	low _modulation
 24622  006072  0100               	movlb	0	; () banked
 24623  006074  2575               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24624  006076  6EF6               	movwf	tblptrl,c
 24625  006078  6AF7               	clrf	tblptrh,c
 24626  00607A  0E7F               	movlw	high _modulation
 24627  00607C  22F7               	addwfc	tblptrh,f,c
 24628  00607E                     	if	0	;There are less than 3 active tblptr bytes
 24629  00607E                     	endif
 24630  00607E  0008               	tblrd		*
 24631  006080  50F5               	movf	tablat,w,c
 24632  006082  EC35  F03C         	call	_RADIO_SetModulation
 24633                           
 24634                           ;lorawan_eu.c: 866: RADIO_SetChannelFrequency (freq);
 24635  006086  C071  F064         	movff	ConfigureRadio@freq,RADIO_SetChannelFrequency@frequency
 24636  00608A  C072  F065         	movff	ConfigureRadio@freq+1,RADIO_SetChannelFrequency@frequency+1
 24637  00608E  C073  F066         	movff	ConfigureRadio@freq+2,RADIO_SetChannelFrequency@frequency+2
 24638  006092  C074  F067         	movff	ConfigureRadio@freq+3,RADIO_SetChannelFrequency@frequency+3
 24639  006096  EC3A  F02F         	call	_RADIO_SetChannelFrequency	;wreg free
 24640                           
 24641                           ; BSR set to: 0
 24642                           ;lorawan_eu.c: 867: RADIO_SetFrequencyHopPeriod (0);
 24643  00609A  0E00               	movlw	0
 24644  00609C  6B65               	clrf	(RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1)& (0+255),b
 24645  00609E  6B64               	clrf	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod& (0+255),b
 24646  0060A0  EC12  F03C         	call	_RADIO_SetFrequencyHopPeriod	;wreg free
 24647                           
 24648                           ; BSR set to: 0
 24649                           ;lorawan_eu.c: 869: if (dataRate <= 6)
 24650  0060A4  0E07               	movlw	7
 24651  0060A6  6175               	cpfslt	ConfigureRadio@dataRate& (0+255),b
 24652  0060A8  D019               	goto	l12620
 24653                           
 24654                           ; BSR set to: 0
 24655                           ;lorawan_eu.c: 870: {
 24656                           ;lorawan_eu.c: 872: RADIO_SetSpreadingFactor (spreadingFactor[dataRate]);
 24657  0060AA  0E9B               	movlw	low _spreadingFactor
 24658  0060AC  2575               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24659  0060AE  6EF6               	movwf	tblptrl,c
 24660  0060B0  6AF7               	clrf	tblptrh,c
 24661  0060B2  0E7F               	movlw	high _spreadingFactor
 24662  0060B4  22F7               	addwfc	tblptrh,f,c
 24663  0060B6                     	if	0	;There are less than 3 active tblptr bytes
 24664  0060B6                     	endif
 24665  0060B6  0008               	tblrd		*
 24666  0060B8  50F5               	movf	tablat,w,c
 24667  0060BA  EC31  F03C         	call	_RADIO_SetSpreadingFactor
 24668                           
 24669                           ;lorawan_eu.c: 873: RADIO_SetBandwidth (bandwidth[dataRate]);
 24670  0060BE  0E8D               	movlw	low _bandwidth
 24671  0060C0  0100               	movlb	0	; () banked
 24672  0060C2  2575               	addwf	ConfigureRadio@dataRate& (0+255),w,b
 24673  0060C4  6EF6               	movwf	tblptrl,c
 24674  0060C6  6AF7               	clrf	tblptrh,c
 24675  0060C8  0E7F               	movlw	high _bandwidth
 24676  0060CA  22F7               	addwfc	tblptrh,f,c
 24677  0060CC                     	if	0	;There are less than 3 active tblptr bytes
 24678  0060CC                     	endif
 24679  0060CC  0008               	tblrd		*
 24680  0060CE  50F5               	movf	tablat,w,c
 24681  0060D0  EC39  F03C         	call	_RADIO_SetBandwidth
 24682                           
 24683                           ;lorawan_eu.c: 874: RADIO_SetLoRaSyncWord(loRa.syncWord);
 24684  0060D4  0102               	movlb	2	; () banked
 24685  0060D6  51F4               	movf	(_loRa+244)& (0+255),w,b
 24686  0060D8  EF17  F03C         	goto	_RADIO_SetLoRaSyncWord
 24687  0060DC                     l12620:
 24688                           
 24689                           ; BSR set to: 0
 24690                           ;lorawan_eu.c: 876: else
 24691                           ;lorawan_eu.c: 877: {
 24692                           ;lorawan_eu.c: 879: RADIO_SetFSKSyncWord(sizeof(FskSyncWordBuff) / sizeof(FskSyncWordBuf
      +                          f[0]), (uint8_t*)FskSyncWordBuff);
 24693  0060DC  0EFC               	movlw	low _FskSyncWordBuff
 24694  0060DE  6F6E               	movwf	RADIO_SetFSKSyncWord@syncWord& (0+255),b
 24695  0060E0  0E7F               	movlw	high _FskSyncWordBuff
 24696  0060E2  6F6F               	movwf	(RADIO_SetFSKSyncWord@syncWord+1)& (0+255),b
 24697  0060E4  0E03               	movlw	3
 24698  0060E6  EFE1  F038         	goto	_RADIO_SetFSKSyncWord
 24699  0060EA                     __end_of_ConfigureRadio:
 24700                           	opt stack 0
 24701                           tosu	equ	0xFFF
 24702                           tosh	equ	0xFFE
 24703                           tosl	equ	0xFFD
 24704                           pclath	equ	0xFFA
 24705                           tblptru	equ	0xFF8
 24706                           tblptrh	equ	0xFF7
 24707                           tblptrl	equ	0xFF6
 24708                           tablat	equ	0xFF5
 24709                           prodh	equ	0xFF4
 24710                           prodl	equ	0xFF3
 24711                           intcon	equ	0xFF2
 24712                           indf0	equ	0xFEF
 24713                           postinc0	equ	0xFEE
 24714                           fsr0h	equ	0xFEA
 24715                           fsr0l	equ	0xFE9
 24716                           wreg	equ	0xFE8
 24717                           postinc1	equ	0xFE6
 24718                           postdec1	equ	0xFE5
 24719                           plusw1	equ	0xFE3
 24720                           fsr1h	equ	0xFE2
 24721                           fsr1l	equ	0xFE1
 24722                           indf2	equ	0xFDF
 24723                           postinc2	equ	0xFDE
 24724                           postdec2	equ	0xFDD
 24725                           plusw2	equ	0xFDB
 24726                           fsr2h	equ	0xFDA
 24727                           fsr2l	equ	0xFD9
 24728                           status	equ	0xFD8
 24729                           
 24730 ;; *************** function _RADIO_SetSpreadingFactor *****************
 24731 ;; Defined at:
 24732 ;;		line 1434 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24733 ;; Parameters:    Size  Location     Type
 24734 ;;  spreadingFac    1    wreg     enum E16935
 24735 ;; Auto vars:     Size  Location     Type
 24736 ;;  spreadingFac    1    4[BANK0 ] enum E16935
 24737 ;; Return value:  Size  Location     Type
 24738 ;;                  1    wreg      void 
 24739 ;; Registers used:
 24740 ;;		wreg
 24741 ;; Tracked objects:
 24742 ;;		On entry : F/0
 24743 ;;		On exit  : 0/0
 24744 ;;		Unchanged: 0/0
 24745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24746 ;;      Params:         0       0       0       0       0       0       0       0       0
 24747 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24748 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24749 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24750 ;;Total ram usage:        1 bytes
 24751 ;; Hardware stack levels used:    1
 24752 ;; Hardware stack levels required when called:    7
 24753 ;; This function calls:
 24754 ;;		Nothing
 24755 ;; This function is called by:
 24756 ;;		_ConfigureRadio
 24757 ;; This function uses a non-reentrant model
 24758 ;;
 24759                           
 24760                           	psect	text128
 24761  007862                     __ptext128:
 24762                           	opt stack 0
 24763  007862                     _RADIO_SetSpreadingFactor:
 24764                           	opt stack 18
 24765                           
 24766                           ;incstack = 0
 24767                           ;RADIO_SetSpreadingFactor@spreadingFactor stored from wreg
 24768  007862  6F64               	movwf	RADIO_SetSpreadingFactor@spreadingFactor& (0+255),b
 24769                           
 24770                           ;radio_driver_SX1276.c: 1436: RadioConfiguration.dataRate = spreadingFactor;
 24771  007864  C064  F18E         	movff	RADIO_SetSpreadingFactor@spreadingFactor,_RadioConfiguration+25
 24772  007868  0012               	return		;funcret
 24773  00786A                     __end_of_RADIO_SetSpreadingFactor:
 24774                           	opt stack 0
 24775                           tosu	equ	0xFFF
 24776                           tosh	equ	0xFFE
 24777                           tosl	equ	0xFFD
 24778                           pclath	equ	0xFFA
 24779                           tblptru	equ	0xFF8
 24780                           tblptrh	equ	0xFF7
 24781                           tblptrl	equ	0xFF6
 24782                           tablat	equ	0xFF5
 24783                           prodh	equ	0xFF4
 24784                           prodl	equ	0xFF3
 24785                           intcon	equ	0xFF2
 24786                           indf0	equ	0xFEF
 24787                           postinc0	equ	0xFEE
 24788                           fsr0h	equ	0xFEA
 24789                           fsr0l	equ	0xFE9
 24790                           wreg	equ	0xFE8
 24791                           postinc1	equ	0xFE6
 24792                           postdec1	equ	0xFE5
 24793                           plusw1	equ	0xFE3
 24794                           fsr1h	equ	0xFE2
 24795                           fsr1l	equ	0xFE1
 24796                           indf2	equ	0xFDF
 24797                           postinc2	equ	0xFDE
 24798                           postdec2	equ	0xFDD
 24799                           plusw2	equ	0xFDB
 24800                           fsr2h	equ	0xFDA
 24801                           fsr2l	equ	0xFD9
 24802                           status	equ	0xFD8
 24803                           
 24804 ;; *************** function _RADIO_SetModulation *****************
 24805 ;; Defined at:
 24806 ;;		line 1515 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24807 ;; Parameters:    Size  Location     Type
 24808 ;;  modulation      1    wreg     enum E16925
 24809 ;; Auto vars:     Size  Location     Type
 24810 ;;  modulation      1    4[BANK0 ] enum E16925
 24811 ;; Return value:  Size  Location     Type
 24812 ;;                  1    wreg      void 
 24813 ;; Registers used:
 24814 ;;		wreg
 24815 ;; Tracked objects:
 24816 ;;		On entry : F/0
 24817 ;;		On exit  : 0/0
 24818 ;;		Unchanged: 0/0
 24819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24820 ;;      Params:         0       0       0       0       0       0       0       0       0
 24821 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24822 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24823 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24824 ;;Total ram usage:        1 bytes
 24825 ;; Hardware stack levels used:    1
 24826 ;; Hardware stack levels required when called:    7
 24827 ;; This function calls:
 24828 ;;		Nothing
 24829 ;; This function is called by:
 24830 ;;		_ConfigureRadio
 24831 ;; This function uses a non-reentrant model
 24832 ;;
 24833                           
 24834                           	psect	text129
 24835  00786A                     __ptext129:
 24836                           	opt stack 0
 24837  00786A                     _RADIO_SetModulation:
 24838                           	opt stack 18
 24839                           
 24840                           ;incstack = 0
 24841                           ;RADIO_SetModulation@modulation stored from wreg
 24842  00786A  6F64               	movwf	RADIO_SetModulation@modulation& (0+255),b
 24843                           
 24844                           ;radio_driver_SX1276.c: 1517: RadioConfiguration.modulation = modulation;
 24845  00786C  C064  F18D         	movff	RADIO_SetModulation@modulation,_RadioConfiguration+24
 24846  007870  0012               	return		;funcret
 24847  007872                     __end_of_RADIO_SetModulation:
 24848                           	opt stack 0
 24849                           tosu	equ	0xFFF
 24850                           tosh	equ	0xFFE
 24851                           tosl	equ	0xFFD
 24852                           pclath	equ	0xFFA
 24853                           tblptru	equ	0xFF8
 24854                           tblptrh	equ	0xFF7
 24855                           tblptrl	equ	0xFF6
 24856                           tablat	equ	0xFF5
 24857                           prodh	equ	0xFF4
 24858                           prodl	equ	0xFF3
 24859                           intcon	equ	0xFF2
 24860                           indf0	equ	0xFEF
 24861                           postinc0	equ	0xFEE
 24862                           fsr0h	equ	0xFEA
 24863                           fsr0l	equ	0xFE9
 24864                           wreg	equ	0xFE8
 24865                           postinc1	equ	0xFE6
 24866                           postdec1	equ	0xFE5
 24867                           plusw1	equ	0xFE3
 24868                           fsr1h	equ	0xFE2
 24869                           fsr1l	equ	0xFE1
 24870                           indf2	equ	0xFDF
 24871                           postinc2	equ	0xFDE
 24872                           postdec2	equ	0xFDD
 24873                           plusw2	equ	0xFDB
 24874                           fsr2h	equ	0xFDA
 24875                           fsr2l	equ	0xFD9
 24876                           status	equ	0xFD8
 24877                           
 24878 ;; *************** function _RADIO_SetFrequencyHopPeriod *****************
 24879 ;; Defined at:
 24880 ;;		line 1550 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24881 ;; Parameters:    Size  Location     Type
 24882 ;;  frequencyHop    2    4[BANK0 ] unsigned int 
 24883 ;; Auto vars:     Size  Location     Type
 24884 ;;		None
 24885 ;; Return value:  Size  Location     Type
 24886 ;;                  1    wreg      void 
 24887 ;; Registers used:
 24888 ;;		None
 24889 ;; Tracked objects:
 24890 ;;		On entry : F/0
 24891 ;;		On exit  : F/0
 24892 ;;		Unchanged: F/0
 24893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24894 ;;      Params:         0       2       0       0       0       0       0       0       0
 24895 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24896 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24897 ;;      Totals:         0       2       0       0       0       0       0       0       0
 24898 ;;Total ram usage:        2 bytes
 24899 ;; Hardware stack levels used:    1
 24900 ;; Hardware stack levels required when called:    7
 24901 ;; This function calls:
 24902 ;;		Nothing
 24903 ;; This function is called by:
 24904 ;;		_ConfigureRadio
 24905 ;; This function uses a non-reentrant model
 24906 ;;
 24907                           
 24908                           	psect	text130
 24909  007824                     __ptext130:
 24910                           	opt stack 0
 24911  007824                     _RADIO_SetFrequencyHopPeriod:
 24912                           	opt stack 18
 24913                           
 24914                           ; BSR set to: 0
 24915                           ;radio_driver_SX1276.c: 1552: RadioConfiguration.frequencyHopPeriod = frequencyHopPeriod
      +                          ;
 24916                           
 24917                           ;incstack = 0
 24918  007824  C064  F193         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod,_RadioConfiguration+30
 24919  007828  C065  F194         	movff	RADIO_SetFrequencyHopPeriod@frequencyHopPeriod+1,_RadioConfiguration+31
 24920                           
 24921                           ; BSR set to: 0
 24922  00782C  0012               	return		;funcret
 24923  00782E                     __end_of_RADIO_SetFrequencyHopPeriod:
 24924                           	opt stack 0
 24925                           tosu	equ	0xFFF
 24926                           tosh	equ	0xFFE
 24927                           tosl	equ	0xFFD
 24928                           pclath	equ	0xFFA
 24929                           tblptru	equ	0xFF8
 24930                           tblptrh	equ	0xFF7
 24931                           tblptrl	equ	0xFF6
 24932                           tablat	equ	0xFF5
 24933                           prodh	equ	0xFF4
 24934                           prodl	equ	0xFF3
 24935                           intcon	equ	0xFF2
 24936                           indf0	equ	0xFEF
 24937                           postinc0	equ	0xFEE
 24938                           fsr0h	equ	0xFEA
 24939                           fsr0l	equ	0xFE9
 24940                           wreg	equ	0xFE8
 24941                           postinc1	equ	0xFE6
 24942                           postdec1	equ	0xFE5
 24943                           plusw1	equ	0xFE3
 24944                           fsr1h	equ	0xFE2
 24945                           fsr1l	equ	0xFE1
 24946                           indf2	equ	0xFDF
 24947                           postinc2	equ	0xFDE
 24948                           postdec2	equ	0xFDD
 24949                           plusw2	equ	0xFDB
 24950                           fsr2h	equ	0xFDA
 24951                           fsr2l	equ	0xFD9
 24952                           status	equ	0xFD8
 24953                           
 24954 ;; *************** function _RADIO_SetFSKSyncWord *****************
 24955 ;; Defined at:
 24956 ;;		line 1624 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 24957 ;; Parameters:    Size  Location     Type
 24958 ;;  syncWordLen     1    wreg     unsigned char 
 24959 ;;  syncWord        2   14[BANK0 ] PTR unsigned char 
 24960 ;;		 -> FskSyncWordBuff(3), 
 24961 ;; Auto vars:     Size  Location     Type
 24962 ;;  syncWordLen     1   16[BANK0 ] unsigned char 
 24963 ;; Return value:  Size  Location     Type
 24964 ;;                  1    wreg      void 
 24965 ;; Registers used:
 24966 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24967 ;; Tracked objects:
 24968 ;;		On entry : F/0
 24969 ;;		On exit  : F/0
 24970 ;;		Unchanged: 0/0
 24971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24972 ;;      Params:         0       2       0       0       0       0       0       0       0
 24973 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24974 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24975 ;;      Totals:         0       3       0       0       0       0       0       0       0
 24976 ;;Total ram usage:        3 bytes
 24977 ;; Hardware stack levels used:    1
 24978 ;; Hardware stack levels required when called:    8
 24979 ;; This function calls:
 24980 ;;		_memcpy
 24981 ;; This function is called by:
 24982 ;;		_ConfigureRadio
 24983 ;; This function uses a non-reentrant model
 24984 ;;
 24985                           
 24986                           	psect	text131
 24987  0071C2                     __ptext131:
 24988                           	opt stack 0
 24989  0071C2                     _RADIO_SetFSKSyncWord:
 24990                           	opt stack 17
 24991                           
 24992                           ; BSR set to: 0
 24993                           ;incstack = 0
 24994                           ;RADIO_SetFSKSyncWord@syncWordLen stored from wreg
 24995  0071C2  6F70               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 24996                           
 24997                           ;radio_driver_SX1276.c: 1626: if (syncWordLen > 8)
 24998  0071C4  0E08               	movlw	8
 24999  0071C6  0100               	movlb	0	; () banked
 25000  0071C8  6570               	cpfsgt	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 25001  0071CA  D001               	goto	l12326
 25002                           
 25003                           ; BSR set to: 0
 25004                           ;radio_driver_SX1276.c: 1627: {
 25005                           ;radio_driver_SX1276.c: 1628: syncWordLen = 8;
 25006  0071CC  6F70               	movwf	RADIO_SetFSKSyncWord@syncWordLen& (0+255),b
 25007  0071CE                     l12326:
 25008                           
 25009                           ; BSR set to: 0
 25010                           ;radio_driver_SX1276.c: 1629: }
 25011                           ;radio_driver_SX1276.c: 1630: memcpy(RadioConfiguration.syncWord, syncWord, syncWordLen)
      +                          ;
 25012  0071CE  0E84               	movlw	low (_RadioConfiguration+15)
 25013  0071D0  6F64               	movwf	memcpy@d1& (0+255),b
 25014  0071D2  0E01               	movlw	high (_RadioConfiguration+15)
 25015  0071D4  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 25016  0071D6  C06E  F066         	movff	RADIO_SetFSKSyncWord@syncWord,memcpy@s1
 25017  0071DA  C06F  F067         	movff	RADIO_SetFSKSyncWord@syncWord+1,memcpy@s1+1
 25018  0071DE  C070  F068         	movff	RADIO_SetFSKSyncWord@syncWordLen,memcpy@n
 25019  0071E2  6B69               	clrf	(memcpy@n+1)& (0+255),b
 25020  0071E4  EC73  F034         	call	_memcpy	;wreg free
 25021                           
 25022                           ; BSR set to: 0
 25023                           ;radio_driver_SX1276.c: 1631: RadioConfiguration.syncWordLen = syncWordLen;
 25024  0071E8  C070  F18C         	movff	RADIO_SetFSKSyncWord@syncWordLen,_RadioConfiguration+23
 25025                           
 25026                           ; BSR set to: 0
 25027  0071EC  0012               	return		;funcret
 25028  0071EE                     __end_of_RADIO_SetFSKSyncWord:
 25029                           	opt stack 0
 25030                           tosu	equ	0xFFF
 25031                           tosh	equ	0xFFE
 25032                           tosl	equ	0xFFD
 25033                           pclath	equ	0xFFA
 25034                           tblptru	equ	0xFF8
 25035                           tblptrh	equ	0xFF7
 25036                           tblptrl	equ	0xFF6
 25037                           tablat	equ	0xFF5
 25038                           prodh	equ	0xFF4
 25039                           prodl	equ	0xFF3
 25040                           intcon	equ	0xFF2
 25041                           indf0	equ	0xFEF
 25042                           postinc0	equ	0xFEE
 25043                           fsr0h	equ	0xFEA
 25044                           fsr0l	equ	0xFE9
 25045                           wreg	equ	0xFE8
 25046                           postinc1	equ	0xFE6
 25047                           postdec1	equ	0xFE5
 25048                           plusw1	equ	0xFE3
 25049                           fsr1h	equ	0xFE2
 25050                           fsr1l	equ	0xFE1
 25051                           indf2	equ	0xFDF
 25052                           postinc2	equ	0xFDE
 25053                           postdec2	equ	0xFDD
 25054                           plusw2	equ	0xFDB
 25055                           fsr2h	equ	0xFDA
 25056                           fsr2l	equ	0xFD9
 25057                           status	equ	0xFD8
 25058                           
 25059 ;; *************** function _RADIO_SetChannelFrequency *****************
 25060 ;; Defined at:
 25061 ;;		line 1444 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25062 ;; Parameters:    Size  Location     Type
 25063 ;;  frequency       4    4[BANK0 ] unsigned long 
 25064 ;; Auto vars:     Size  Location     Type
 25065 ;;		None
 25066 ;; Return value:  Size  Location     Type
 25067 ;;                  2    4[BANK0 ] enum E16979
 25068 ;; Registers used:
 25069 ;;		wreg, status,2, status,0
 25070 ;; Tracked objects:
 25071 ;;		On entry : 0/0
 25072 ;;		On exit  : F/0
 25073 ;;		Unchanged: 0/0
 25074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25075 ;;      Params:         0       4       0       0       0       0       0       0       0
 25076 ;;      Locals:         0       0       0       0       0       0       0       0       0
 25077 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25078 ;;      Totals:         0       4       0       0       0       0       0       0       0
 25079 ;;Total ram usage:        4 bytes
 25080 ;; Hardware stack levels used:    1
 25081 ;; Hardware stack levels required when called:    7
 25082 ;; This function calls:
 25083 ;;		Nothing
 25084 ;; This function is called by:
 25085 ;;		_ConfigureRadio
 25086 ;; This function uses a non-reentrant model
 25087 ;;
 25088                           
 25089                           	psect	text132
 25090  005E74                     __ptext132:
 25091                           	opt stack 0
 25092  005E74                     _RADIO_SetChannelFrequency:
 25093                           	opt stack 18
 25094                           
 25095                           ;radio_driver_SX1276.c: 1446: if ( (frequency >= 137000000) && (frequency <= 175000000) 
      +                          ||
 25096                           ;radio_driver_SX1276.c: 1447: (frequency >= 410000000) && (frequency <= 525000000) ||
 25097                           ;radio_driver_SX1276.c: 1448: (frequency >= 862000000) && (frequency <= 1020000000) )
 25098                           
 25099                           ; BSR set to: 0
 25100                           ;incstack = 0
 25101  005E74  0E40               	movlw	64
 25102  005E76  0100               	movlb	0	; () banked
 25103  005E78  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25104  005E7A  0E74               	movlw	116
 25105  005E7C  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25106  005E7E  0E2A               	movlw	42
 25107  005E80  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25108  005E82  0E08               	movlw	8
 25109  005E84  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25110  005E86  E309               	bnc	l12306
 25111                           
 25112                           ; BSR set to: 0
 25113  005E88  0EC1               	movlw	193
 25114  005E8A  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25115  005E8C  0E49               	movlw	73
 25116  005E8E  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25117  005E90  0E6E               	movlw	110
 25118  005E92  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25119  005E94  0E0A               	movlw	10
 25120  005E96  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25121  005E98  E325               	bnc	l709
 25122  005E9A                     l12306:
 25123                           
 25124                           ; BSR set to: 0
 25125  005E9A  0E80               	movlw	128
 25126  005E9C  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25127  005E9E  0E1A               	movlw	26
 25128  005EA0  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25129  005EA2  0E70               	movlw	112
 25130  005EA4  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25131  005EA6  0E18               	movlw	24
 25132  005EA8  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25133  005EAA  E309               	bnc	l12310
 25134                           
 25135                           ; BSR set to: 0
 25136  005EAC  0E41               	movlw	65
 25137  005EAE  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25138  005EB0  0EDD               	movlw	221
 25139  005EB2  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25140  005EB4  0E4A               	movlw	74
 25141  005EB6  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25142  005EB8  0E1F               	movlw	31
 25143  005EBA  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25144  005EBC  E313               	bnc	l709
 25145  005EBE                     l12310:
 25146                           
 25147                           ; BSR set to: 0
 25148  005EBE  0E80               	movlw	128
 25149  005EC0  5D64               	subwf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25150  005EC2  0E13               	movlw	19
 25151  005EC4  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25152  005EC6  0E61               	movlw	97
 25153  005EC8  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25154  005ECA  0E33               	movlw	51
 25155  005ECC  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25156  005ECE  A0D8               	btfss	status,0,c
 25157  005ED0  0012               	return	
 25158                           
 25159                           ; BSR set to: 0
 25160  005ED2  0564               	decf	RADIO_SetChannelFrequency@frequency& (0+255),w,b
 25161  005ED4  0EF7               	movlw	247
 25162  005ED6  5965               	subwfb	(RADIO_SetChannelFrequency@frequency+1)& (0+255),w,b
 25163  005ED8  0ECB               	movlw	203
 25164  005EDA  5966               	subwfb	(RADIO_SetChannelFrequency@frequency+2)& (0+255),w,b
 25165  005EDC  0E3C               	movlw	60
 25166  005EDE  5967               	subwfb	(RADIO_SetChannelFrequency@frequency+3)& (0+255),w,b
 25167  005EE0  B0D8               	btfsc	status,0,c
 25168  005EE2  0012               	return	
 25169  005EE4                     l709:
 25170                           
 25171                           ; BSR set to: 0
 25172                           ;radio_driver_SX1276.c: 1449: {
 25173                           ;radio_driver_SX1276.c: 1450: RadioConfiguration.frequency = frequency;
 25174  005EE4  C064  F175         	movff	RADIO_SetChannelFrequency@frequency,_RadioConfiguration
 25175  005EE8  C065  F176         	movff	RADIO_SetChannelFrequency@frequency+1,_RadioConfiguration+1
 25176  005EEC  C066  F177         	movff	RADIO_SetChannelFrequency@frequency+2,_RadioConfiguration+2
 25177  005EF0  C067  F178         	movff	RADIO_SetChannelFrequency@frequency+3,_RadioConfiguration+3
 25178                           
 25179                           ; BSR set to: 0
 25180                           
 25181                           ;radio_driver_SX1276.c: 1451: return ERR_NONE;
 25182                           ;	Return value of _RADIO_SetChannelFrequency is never used
 25183  005EF4  0012               	return		;funcret
 25184  005EF6                     __end_of_RADIO_SetChannelFrequency:
 25185                           	opt stack 0
 25186                           tosu	equ	0xFFF
 25187                           tosh	equ	0xFFE
 25188                           tosl	equ	0xFFD
 25189                           pclath	equ	0xFFA
 25190                           tblptru	equ	0xFF8
 25191                           tblptrh	equ	0xFF7
 25192                           tblptrl	equ	0xFF6
 25193                           tablat	equ	0xFF5
 25194                           prodh	equ	0xFF4
 25195                           prodl	equ	0xFF3
 25196                           intcon	equ	0xFF2
 25197                           indf0	equ	0xFEF
 25198                           postinc0	equ	0xFEE
 25199                           fsr0h	equ	0xFEA
 25200                           fsr0l	equ	0xFE9
 25201                           wreg	equ	0xFE8
 25202                           postinc1	equ	0xFE6
 25203                           postdec1	equ	0xFE5
 25204                           plusw1	equ	0xFE3
 25205                           fsr1h	equ	0xFE2
 25206                           fsr1l	equ	0xFE1
 25207                           indf2	equ	0xFDF
 25208                           postinc2	equ	0xFDE
 25209                           postdec2	equ	0xFDD
 25210                           plusw2	equ	0xFDB
 25211                           fsr2h	equ	0xFDA
 25212                           fsr2l	equ	0xFD9
 25213                           status	equ	0xFD8
 25214                           
 25215 ;; *************** function _RADIO_SetBandwidth *****************
 25216 ;; Defined at:
 25217 ;;		line 1495 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25218 ;; Parameters:    Size  Location     Type
 25219 ;;  bandwidth       1    wreg     enum E16943
 25220 ;; Auto vars:     Size  Location     Type
 25221 ;;  bandwidth       1    4[BANK0 ] enum E16943
 25222 ;; Return value:  Size  Location     Type
 25223 ;;                  1    wreg      void 
 25224 ;; Registers used:
 25225 ;;		wreg
 25226 ;; Tracked objects:
 25227 ;;		On entry : F/0
 25228 ;;		On exit  : 0/0
 25229 ;;		Unchanged: 0/0
 25230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25231 ;;      Params:         0       0       0       0       0       0       0       0       0
 25232 ;;      Locals:         0       1       0       0       0       0       0       0       0
 25233 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25234 ;;      Totals:         0       1       0       0       0       0       0       0       0
 25235 ;;Total ram usage:        1 bytes
 25236 ;; Hardware stack levels used:    1
 25237 ;; Hardware stack levels required when called:    7
 25238 ;; This function calls:
 25239 ;;		Nothing
 25240 ;; This function is called by:
 25241 ;;		_ConfigureRadio
 25242 ;; This function uses a non-reentrant model
 25243 ;;
 25244                           
 25245                           	psect	text133
 25246  007872                     __ptext133:
 25247                           	opt stack 0
 25248  007872                     _RADIO_SetBandwidth:
 25249                           	opt stack 18
 25250                           
 25251                           ; BSR set to: 0
 25252                           ;incstack = 0
 25253                           ;RADIO_SetBandwidth@bandwidth stored from wreg
 25254  007872  6F64               	movwf	RADIO_SetBandwidth@bandwidth& (0+255),b
 25255                           
 25256                           ;radio_driver_SX1276.c: 1497: RadioConfiguration.bandWidth = bandwidth;
 25257  007874  C064  F18F         	movff	RADIO_SetBandwidth@bandwidth,_RadioConfiguration+26
 25258  007878  0012               	return		;funcret
 25259  00787A                     __end_of_RADIO_SetBandwidth:
 25260                           	opt stack 0
 25261                           tosu	equ	0xFFF
 25262                           tosh	equ	0xFFE
 25263                           tosl	equ	0xFFD
 25264                           pclath	equ	0xFFA
 25265                           tblptru	equ	0xFF8
 25266                           tblptrh	equ	0xFF7
 25267                           tblptrl	equ	0xFF6
 25268                           tablat	equ	0xFF5
 25269                           prodh	equ	0xFF4
 25270                           prodl	equ	0xFF3
 25271                           intcon	equ	0xFF2
 25272                           indf0	equ	0xFEF
 25273                           postinc0	equ	0xFEE
 25274                           fsr0h	equ	0xFEA
 25275                           fsr0l	equ	0xFE9
 25276                           wreg	equ	0xFE8
 25277                           postinc1	equ	0xFE6
 25278                           postdec1	equ	0xFE5
 25279                           plusw1	equ	0xFE3
 25280                           fsr1h	equ	0xFE2
 25281                           fsr1l	equ	0xFE1
 25282                           indf2	equ	0xFDF
 25283                           postinc2	equ	0xFDE
 25284                           postdec2	equ	0xFDD
 25285                           plusw2	equ	0xFDB
 25286                           fsr2h	equ	0xFDA
 25287                           fsr2l	equ	0xFD9
 25288                           status	equ	0xFD8
 25289                           
 25290 ;; *************** function _RADIO_Transmit *****************
 25291 ;; Defined at:
 25292 ;;		line 786 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25293 ;; Parameters:    Size  Location     Type
 25294 ;;  buffer          2   52[BANK0 ] PTR unsigned char 
 25295 ;;		 -> macBuffer(271), 
 25296 ;;  bufferLen       1   54[BANK0 ] unsigned char 
 25297 ;; Auto vars:     Size  Location     Type
 25298 ;;  i               1   68[BANK0 ] unsigned char 
 25299 ;;  regValue        1   67[BANK0 ] unsigned char 
 25300 ;; Return value:  Size  Location     Type
 25301 ;;                  2   52[BANK0 ] enum E16979
 25302 ;; Registers used:
 25303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25304 ;; Tracked objects:
 25305 ;;		On entry : F/0
 25306 ;;		On exit  : F/0
 25307 ;;		Unchanged: 0/0
 25308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25309 ;;      Params:         0       3       0       0       0       0       0       0       0
 25310 ;;      Locals:         0      10       0       0       0       0       0       0       0
 25311 ;;      Temps:          0       4       0       0       0       0       0       0       0
 25312 ;;      Totals:         0      17       0       0       0       0       0       0       0
 25313 ;;Total ram usage:       17 bytes
 25314 ;; Hardware stack levels used:    1
 25315 ;; Hardware stack levels required when called:   12
 25316 ;; This function calls:
 25317 ;;		_HALSPICSAssert
 25318 ;;		_HALSPICSDeassert
 25319 ;;		_HALSPISend
 25320 ;;		_RADIO_RegisterRead
 25321 ;;		_RADIO_RegisterWrite
 25322 ;;		_RADIO_WriteConfiguration
 25323 ;;		_RADIO_WriteMode
 25324 ;;		_SwTimerSetTimeout
 25325 ;;		_SwTimerStart
 25326 ;;		_SwTimerStop
 25327 ;;		___lldiv
 25328 ;; This function is called by:
 25329 ;;		_LORAWAN_RxTimeout
 25330 ;;		_LORAWAN_Join
 25331 ;;		_LORAWAN_Send
 25332 ;;		_AckRetransmissionCallback
 25333 ;;		_UnconfirmedTransmissionCallback
 25334 ;; This function uses a non-reentrant model
 25335 ;;
 25336                           
 25337                           	psect	text134
 25338  002FF4                     __ptext134:
 25339                           	opt stack 0
 25340  002FF4                     _RADIO_Transmit:
 25341                           	opt stack 16
 25342                           
 25343                           ; BSR set to: 0
 25344                           ;radio_driver_SX1276.c: 788: uint8_t regValue;
 25345                           ;radio_driver_SX1276.c: 789: uint8_t i;
 25346                           ;radio_driver_SX1276.c: 791: if ((RadioConfiguration.flags & (1 << (2))) != 0)
 25347                           
 25348                           ;incstack = 0
 25349  002FF4  0101               	movlb	1	; () banked
 25350  002FF6  A598               	btfss	(_RadioConfiguration+35)& (0+255),2,b
 25351  002FF8  D006               	goto	l13310
 25352                           
 25353                           ; BSR set to: 1
 25354                           ;radio_driver_SX1276.c: 792: {
 25355                           ;radio_driver_SX1276.c: 793: return ERR_BUFFER_LOCKED;
 25356  002FFA  0E80               	movlw	128
 25357  002FFC  0100               	movlb	0	; () banked
 25358  002FFE  6F95               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25359  003000  0E03               	movlw	3
 25360  003002  6F94               	movwf	?_RADIO_Transmit& (0+255),b
 25361  003004  0C03               	retlw	3
 25362  003006                     l13310:
 25363                           
 25364                           ; BSR set to: 1
 25365                           ;radio_driver_SX1276.c: 794: }
 25366                           ;radio_driver_SX1276.c: 796: if ((RadioConfiguration.flags & ((1 << (0)) | (1 << (1)))) 
      +                          != 0)
 25367  003006  C198  F097         	movff	_RadioConfiguration+35,??_RADIO_Transmit
 25368  00300A  0E03               	movlw	3
 25369  00300C  0100               	movlb	0	; () banked
 25370  00300E  1797               	andwf	??_RADIO_Transmit& (0+255),f,b
 25371  003010  E005               	bz	l13316
 25372                           
 25373                           ; BSR set to: 0
 25374                           ;radio_driver_SX1276.c: 797: {
 25375                           ;radio_driver_SX1276.c: 798: return ERR_RADIO_BUSY;
 25376  003012  0E80               	movlw	128
 25377  003014  6F95               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25378  003016  0E04               	movlw	4
 25379  003018  6F94               	movwf	?_RADIO_Transmit& (0+255),b
 25380  00301A  0C04               	retlw	4
 25381  00301C                     l13316:
 25382                           
 25383                           ; BSR set to: 0
 25384                           ;radio_driver_SX1276.c: 799: }
 25385                           ;radio_driver_SX1276.c: 801: if ((MODULATION_FSK == RadioConfiguration.modulation) && (b
      +                          ufferLen > 64))
 25386  00301C  0101               	movlb	1	; () banked
 25387  00301E  518D               	movf	(_RadioConfiguration+24)& (0+255),w,b
 25388  003020  E109               	bnz	l13324
 25389                           
 25390                           ; BSR set to: 1
 25391  003022  0E40               	movlw	64
 25392  003024  0100               	movlb	0	; () banked
 25393  003026  6596               	cpfsgt	RADIO_Transmit@bufferLen& (0+255),b
 25394  003028  D005               	goto	l13324
 25395                           
 25396                           ; BSR set to: 0
 25397                           ;radio_driver_SX1276.c: 802: {
 25398                           ;radio_driver_SX1276.c: 803: return ERR_DATA_SIZE;
 25399  00302A  0E80               	movlw	128
 25400  00302C  6F95               	movwf	(?_RADIO_Transmit+1)& (0+255),b
 25401  00302E  0E02               	movlw	2
 25402  003030  6F94               	movwf	?_RADIO_Transmit& (0+255),b
 25403  003032  0C02               	retlw	2
 25404  003034                     l13324:
 25405                           
 25406                           ;radio_driver_SX1276.c: 804: }
 25407                           ;radio_driver_SX1276.c: 806: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 25408  003034  0101               	movlb	1	; () banked
 25409  003036  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25410  003038  ECF3  F03A         	call	_SwTimerStop
 25411                           
 25412                           ;radio_driver_SX1276.c: 810: RADIO_WriteConfiguration(4);
 25413  00303C  0E00               	movlw	0
 25414  00303E  6F7E               	movwf	(RADIO_WriteConfiguration@symbolTimeout+1)& (0+255),b
 25415  003040  0E04               	movlw	4
 25416  003042  6F7D               	movwf	RADIO_WriteConfiguration@symbolTimeout& (0+255),b
 25417  003044  ECDA  F009         	call	_RADIO_WriteConfiguration	;wreg free
 25418                           
 25419                           ;radio_driver_SX1276.c: 812: if (MODULATION_LORA == RadioConfiguration.modulation)
 25420  003048  0101               	movlb	1	; () banked
 25421  00304A  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 25422  00304C  E123               	bnz	l13342
 25423                           
 25424                           ; BSR set to: 1
 25425                           ;radio_driver_SX1276.c: 813: {
 25426                           ;radio_driver_SX1276.c: 814: RADIO_RegisterWrite(0x22, bufferLen);
 25427  00304E  C096  F066         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 25428  003052  0E22               	movlw	34
 25429  003054  EC9A  F03A         	call	_RADIO_RegisterWrite
 25430                           
 25431                           ;radio_driver_SX1276.c: 817: regValue = RADIO_RegisterRead(0x0A);
 25432  003058  0E0A               	movlw	10
 25433  00305A  ECB0  F039         	call	_RADIO_RegisterRead
 25434  00305E  6FA3               	movwf	RADIO_Transmit@regValue& (0+255),b
 25435                           
 25436                           ; BSR set to: 0
 25437                           ;radio_driver_SX1276.c: 818: regValue &= ~0x0F;
 25438  003060  0EF0               	movlw	240
 25439  003062  17A3               	andwf	RADIO_Transmit@regValue& (0+255),f,b
 25440                           
 25441                           ; BSR set to: 0
 25442                           ;radio_driver_SX1276.c: 819: regValue |= 0x08;
 25443  003064  87A3               	bsf	RADIO_Transmit@regValue& (0+255),3,b
 25444                           
 25445                           ; BSR set to: 0
 25446                           ;radio_driver_SX1276.c: 820: RADIO_RegisterWrite(0x0A, regValue);
 25447  003066  C0A3  F066         	movff	RADIO_Transmit@regValue,RADIO_RegisterWrite@value
 25448  00306A  0E0A               	movlw	10
 25449  00306C  EC9A  F03A         	call	_RADIO_RegisterWrite
 25450                           
 25451                           ;radio_driver_SX1276.c: 824: RADIO_RegisterWrite(0x40, 0x40);
 25452  003070  0E40               	movlw	64
 25453  003072  0100               	movlb	0	; () banked
 25454  003074  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25455  003076  EC9A  F03A         	call	_RADIO_RegisterWrite
 25456                           
 25457                           ;radio_driver_SX1276.c: 825: RADIO_RegisterWrite(0x41, 0x00);
 25458  00307A  0100               	movlb	0	; () banked
 25459  00307C  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 25460  00307E  0E41               	movlw	65
 25461  003080  EC9A  F03A         	call	_RADIO_RegisterWrite
 25462                           
 25463                           ;radio_driver_SX1276.c: 827: RADIO_WriteMode(MODE_STANDBY, RadioConfiguration.modulation
      +                          , 1);
 25464  003084  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 25465  003088  0E01               	movlw	1
 25466  00308A  0100               	movlb	0	; () banked
 25467  00308C  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 25468  00308E  EC6B  F029         	call	_RADIO_WriteMode
 25469                           
 25470                           ;radio_driver_SX1276.c: 828: }
 25471  003092  D00A               	goto	l13344
 25472  003094                     l13342:
 25473                           
 25474                           ; BSR set to: 1
 25475                           ;radio_driver_SX1276.c: 829: else
 25476                           ;radio_driver_SX1276.c: 830: {
 25477                           ;radio_driver_SX1276.c: 832: RADIO_RegisterWrite(0x40, 0x00);
 25478  003094  0100               	movlb	0	; () banked
 25479  003096  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 25480  003098  0E40               	movlw	64
 25481  00309A  EC9A  F03A         	call	_RADIO_RegisterWrite
 25482                           
 25483                           ;radio_driver_SX1276.c: 833: RADIO_RegisterWrite(0x41, 0x00);
 25484  00309E  0100               	movlb	0	; () banked
 25485  0030A0  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 25486  0030A2  0E41               	movlw	65
 25487  0030A4  EC9A  F03A         	call	_RADIO_RegisterWrite
 25488  0030A8                     l13344:
 25489                           
 25490                           ;radio_driver_SX1276.c: 834: }
 25491                           ;radio_driver_SX1276.c: 836: if (MODULATION_FSK == RadioConfiguration.modulation)
 25492  0030A8  0101               	movlb	1	; () banked
 25493  0030AA  518D               	movf	(_RadioConfiguration+24)& (0+255),w,b
 25494  0030AC  E105               	bnz	l13348
 25495                           
 25496                           ; BSR set to: 1
 25497                           ;radio_driver_SX1276.c: 837: {
 25498                           ;radio_driver_SX1276.c: 839: RADIO_RegisterWrite(0x00, bufferLen);
 25499  0030AE  C096  F066         	movff	RADIO_Transmit@bufferLen,RADIO_RegisterWrite@value
 25500  0030B2  0E00               	movlw	0
 25501  0030B4  EC9A  F03A         	call	_RADIO_RegisterWrite
 25502  0030B8                     l13348:
 25503                           
 25504                           ;radio_driver_SX1276.c: 840: }
 25505                           ;radio_driver_SX1276.c: 842: HALSPICSAssert();
 25506  0030B8  EC72  F03C         	call	_HALSPICSAssert	;wreg free
 25507                           
 25508                           ;radio_driver_SX1276.c: 843: HALSPISend(0x80 | 0x00);
 25509  0030BC  0E80               	movlw	128
 25510  0030BE  EC1C  F03C         	call	_HALSPISend
 25511                           
 25512                           ; BSR set to: 14
 25513                           ;radio_driver_SX1276.c: 845: for (i = 0; i < bufferLen; i++)
 25514  0030C2  0100               	movlb	0	; () banked
 25515  0030C4  6BA4               	clrf	RADIO_Transmit@i& (0+255),b
 25516  0030C6  D00B               	goto	l13358
 25517  0030C8                     l13354:
 25518                           
 25519                           ; BSR set to: 0
 25520                           ;radio_driver_SX1276.c: 846: {
 25521                           ;radio_driver_SX1276.c: 847: HALSPISend(buffer[i]);
 25522  0030C8  51A4               	movf	RADIO_Transmit@i& (0+255),w,b
 25523  0030CA  2594               	addwf	RADIO_Transmit@buffer& (0+255),w,b
 25524  0030CC  6ED9               	movwf	fsr2l,c
 25525  0030CE  0E00               	movlw	0
 25526  0030D0  2195               	addwfc	(RADIO_Transmit@buffer+1)& (0+255),w,b
 25527  0030D2  6EDA               	movwf	fsr2h,c
 25528  0030D4  50DF               	movf	indf2,w,c
 25529  0030D6  EC1C  F03C         	call	_HALSPISend
 25530                           
 25531                           ; BSR set to: 14
 25532  0030DA  0100               	movlb	0	; () banked
 25533  0030DC  2BA4               	incf	RADIO_Transmit@i& (0+255),f,b
 25534  0030DE                     l13358:
 25535                           
 25536                           ; BSR set to: 0
 25537  0030DE  5196               	movf	RADIO_Transmit@bufferLen& (0+255),w,b
 25538  0030E0  5DA4               	subwf	RADIO_Transmit@i& (0+255),w,b
 25539  0030E2  E3F2               	bnc	l13354
 25540                           
 25541                           ; BSR set to: 0
 25542                           ;radio_driver_SX1276.c: 848: }
 25543                           ;radio_driver_SX1276.c: 849: HALSPICSDeassert();
 25544  0030E4  EC70  F03C         	call	_HALSPICSDeassert	;wreg free
 25545                           
 25546                           ;radio_driver_SX1276.c: 851: RadioConfiguration.flags |= (1 << (0));
 25547  0030E8  0101               	movlb	1	; () banked
 25548  0030EA  8198               	bsf	(_RadioConfiguration+35)& (0+255),0,b
 25549                           
 25550                           ; BSR set to: 1
 25551                           ;radio_driver_SX1276.c: 852: RadioConfiguration.flags &= ~((1 << (4)) | (1 << (3)));
 25552  0030EC  0EE7               	movlw	231
 25553  0030EE  1798               	andwf	(_RadioConfiguration+35)& (0+255),f,b
 25554                           
 25555                           ; BSR set to: 1
 25556                           ;radio_driver_SX1276.c: 857: RADIO_WriteMode(MODE_TX, RadioConfiguration.modulation, 0);
 25557  0030F0  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 25558  0030F4  0E00               	movlw	0
 25559  0030F6  0100               	movlb	0	; () banked
 25560  0030F8  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 25561  0030FA  0E03               	movlw	3
 25562  0030FC  EC6B  F029         	call	_RADIO_WriteMode
 25563                           
 25564                           ;radio_driver_SX1276.c: 862: SwTimerSetTimeout(RadioConfiguration.timeOnAirTimerId, ((((
      +                          uint32_t)20000)) < 0x000FFFFFUL ? ( (((uint32_t)(((uint32_t)20000))) << (12)) / 125UL ) 
      +                          : ( (((uint32_t)(((uint32_t)20000))) / 125UL) << (12) ) ));
 25565  003100  0100               	movlb	0	; () banked
 25566  003102  6B71               	clrf	SwTimerSetTimeout@timeout& (0+255),b
 25567  003104  6B72               	clrf	(SwTimerSetTimeout@timeout+1)& (0+255),b
 25568  003106  0E0A               	movlw	10
 25569  003108  6F73               	movwf	(SwTimerSetTimeout@timeout+2)& (0+255),b
 25570  00310A  6B74               	clrf	(SwTimerSetTimeout@timeout+3)& (0+255),b
 25571  00310C  0101               	movlb	1	; () banked
 25572  00310E  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25573  003110  ECCA  F036         	call	_SwTimerSetTimeout
 25574                           
 25575                           ; BSR set to: 0
 25576                           ;radio_driver_SX1276.c: 863: SwTimerStart(RadioConfiguration.timeOnAirTimerId);
 25577  003114  0101               	movlb	1	; () banked
 25578  003116  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 25579  003118  ECB3  F02E         	call	_SwTimerStart
 25580                           
 25581                           ; BSR set to: 0
 25582                           ;radio_driver_SX1276.c: 865: if (0 != RadioConfiguration.watchdogTimerTimeout)
 25583  00311C  0101               	movlb	1	; () banked
 25584  00311E  519F               	movf	(_RadioConfiguration+42)& (0+255),w,b
 25585  003120  11A0               	iorwf	(_RadioConfiguration+43)& (0+255),w,b
 25586  003122  11A1               	iorwf	(_RadioConfiguration+44)& (0+255),w,b
 25587  003124  11A2               	iorwf	(_RadioConfiguration+45)& (0+255),w,b
 25588  003126  E059               	bz	l13388
 25589                           
 25590                           ; BSR set to: 1
 25591                           ;radio_driver_SX1276.c: 866: {
 25592                           ;radio_driver_SX1276.c: 867: SwTimerSetTimeout(RadioConfiguration.watchdogTimerId, ((Rad
      +                          ioConfiguration.watchdogTimerTimeout) < 0x000FFFFFUL ? ( (((uint32_t)(RadioConfiguration
      +                          .watchdogTimerTimeout)) << (12)) / 125UL ) : ( (((uint32_t)(RadioConfiguration.watchdogT
      +                          imerTimeout)) /
 25593  003128  51A2               	movf	(_RadioConfiguration+45)& (0+255),w,b
 25594  00312A  E106               	bnz	u14790
 25595  00312C  299F               	incf	(_RadioConfiguration+42)& (0+255),w,b
 25596  00312E  0EFF               	movlw	255
 25597  003130  59A0               	subwfb	(_RadioConfiguration+43)& (0+255),w,b
 25598  003132  0E0F               	movlw	15
 25599  003134  59A1               	subwfb	(_RadioConfiguration+44)& (0+255),w,b
 25600  003136  E319               	bnc	l13382
 25601  003138                     u14790:
 25602                           
 25603                           ; BSR set to: 1
 25604  003138  C19F  F064         	movff	_RadioConfiguration+42,___lldiv@dividend
 25605  00313C  C1A0  F065         	movff	_RadioConfiguration+43,___lldiv@dividend+1
 25606  003140  C1A1  F066         	movff	_RadioConfiguration+44,___lldiv@dividend+2
 25607  003144  C1A2  F067         	movff	_RadioConfiguration+45,___lldiv@dividend+3
 25608  003148  0E7D               	movlw	125
 25609  00314A  0100               	movlb	0	; () banked
 25610  00314C  6F68               	movwf	___lldiv@divisor& (0+255),b
 25611  00314E  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 25612  003150  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 25613  003152  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 25614  003154  ECB3  F030         	call	___lldiv	;wreg free
 25615  003158  0E0C               	movlw	12
 25616  00315A                     u14805:
 25617  00315A  90D8               	bcf	status,0,c
 25618  00315C  3764               	rlcf	?___lldiv& (0+255),f,b
 25619  00315E  3765               	rlcf	(?___lldiv+1)& (0+255),f,b
 25620  003160  3766               	rlcf	(?___lldiv+2)& (0+255),f,b
 25621  003162  3767               	rlcf	(?___lldiv+3)& (0+255),f,b
 25622  003164  2EE8               	decfsz	wreg,f,c
 25623  003166  D7F9               	goto	u14805
 25624  003168  D020               	goto	L15
 25625  00316A                     l13382:
 25626                           
 25627                           ; BSR set to: 1
 25628  00316A  C19F  F097         	movff	_RadioConfiguration+42,??_RADIO_Transmit
 25629  00316E  C1A0  F098         	movff	_RadioConfiguration+43,??_RADIO_Transmit+1
 25630  003172  C1A1  F099         	movff	_RadioConfiguration+44,??_RADIO_Transmit+2
 25631  003176  C1A2  F09A         	movff	_RadioConfiguration+45,??_RADIO_Transmit+3
 25632  00317A  0E0C               	movlw	12
 25633  00317C                     u14815:
 25634  00317C  90D8               	bcf	status,0,c
 25635  00317E  0100               	movlb	0	; () banked
 25636  003180  3797               	rlcf	??_RADIO_Transmit& (0+255),f,b
 25637  003182  3798               	rlcf	(??_RADIO_Transmit+1)& (0+255),f,b
 25638  003184  3799               	rlcf	(??_RADIO_Transmit+2)& (0+255),f,b
 25639  003186  379A               	rlcf	(??_RADIO_Transmit+3)& (0+255),f,b
 25640  003188  2EE8               	decfsz	wreg,f,c
 25641  00318A  D7F8               	goto	u14815
 25642  00318C  C097  F064         	movff	??_RADIO_Transmit,___lldiv@dividend
 25643  003190  C098  F065         	movff	??_RADIO_Transmit+1,___lldiv@dividend+1
 25644  003194  C099  F066         	movff	??_RADIO_Transmit+2,___lldiv@dividend+2
 25645  003198  C09A  F067         	movff	??_RADIO_Transmit+3,___lldiv@dividend+3
 25646  00319C  0E7D               	movlw	125
 25647  00319E  6F68               	movwf	___lldiv@divisor& (0+255),b
 25648  0031A0  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 25649  0031A2  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 25650  0031A4  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 25651  0031A6  ECB3  F030         	call	___lldiv	;wreg free
 25652  0031AA                     L15:
 25653  0031AA  C064  F09F         	movff	?___lldiv,_RADIO_Transmit$1052
 25654  0031AE  C065  F0A0         	movff	?___lldiv+1,_RADIO_Transmit$1052+1
 25655  0031B2  C066  F0A1         	movff	?___lldiv+2,_RADIO_Transmit$1052+2
 25656  0031B6  C067  F0A2         	movff	?___lldiv+3,_RADIO_Transmit$1052+3
 25657                           
 25658                           ; BSR set to: 0
 25659  0031BA  C09F  F071         	movff	_RADIO_Transmit$1052,SwTimerSetTimeout@timeout
 25660  0031BE  C0A0  F072         	movff	_RADIO_Transmit$1052+1,SwTimerSetTimeout@timeout+1
 25661  0031C2  C0A1  F073         	movff	_RADIO_Transmit$1052+2,SwTimerSetTimeout@timeout+2
 25662  0031C6  C0A2  F074         	movff	_RADIO_Transmit$1052+3,SwTimerSetTimeout@timeout+3
 25663  0031CA  0101               	movlb	1	; () banked
 25664  0031CC  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 25665  0031CE  ECCA  F036         	call	_SwTimerSetTimeout
 25666                           
 25667                           ; BSR set to: 0
 25668                           ;radio_driver_SX1276.c: 868: SwTimerStart(RadioConfiguration.watchdogTimerId);
 25669  0031D2  0101               	movlb	1	; () banked
 25670  0031D4  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 25671  0031D6  ECB3  F02E         	call	_SwTimerStart
 25672  0031DA                     l13388:
 25673                           
 25674                           ;radio_driver_SX1276.c: 869: }
 25675                           ;radio_driver_SX1276.c: 871: return ERR_NONE;
 25676  0031DA  0100               	movlb	0	; () banked
 25677  0031DC  6B94               	clrf	?_RADIO_Transmit& (0+255),b
 25678  0031DE  6B95               	clrf	(?_RADIO_Transmit+1)& (0+255),b
 25679                           
 25680                           ; BSR set to: 0
 25681  0031E0  0012               	return		;funcret
 25682  0031E2                     __end_of_RADIO_Transmit:
 25683                           	opt stack 0
 25684                           tosu	equ	0xFFF
 25685                           tosh	equ	0xFFE
 25686                           tosl	equ	0xFFD
 25687                           pclath	equ	0xFFA
 25688                           tblptru	equ	0xFF8
 25689                           tblptrh	equ	0xFF7
 25690                           tblptrl	equ	0xFF6
 25691                           tablat	equ	0xFF5
 25692                           prodh	equ	0xFF4
 25693                           prodl	equ	0xFF3
 25694                           intcon	equ	0xFF2
 25695                           indf0	equ	0xFEF
 25696                           postinc0	equ	0xFEE
 25697                           fsr0h	equ	0xFEA
 25698                           fsr0l	equ	0xFE9
 25699                           wreg	equ	0xFE8
 25700                           postinc1	equ	0xFE6
 25701                           postdec1	equ	0xFE5
 25702                           plusw1	equ	0xFE3
 25703                           fsr1h	equ	0xFE2
 25704                           fsr1l	equ	0xFE1
 25705                           indf2	equ	0xFDF
 25706                           postinc2	equ	0xFDE
 25707                           postdec2	equ	0xFDD
 25708                           plusw2	equ	0xFDB
 25709                           fsr2h	equ	0xFDA
 25710                           fsr2l	equ	0xFD9
 25711                           status	equ	0xFD8
 25712                           
 25713 ;; *************** function _RADIO_WriteConfiguration *****************
 25714 ;; Defined at:
 25715 ;;		line 533 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 25716 ;; Parameters:    Size  Location     Type
 25717 ;;  symbolTimeou    2   29[BANK0 ] unsigned int 
 25718 ;; Auto vars:     Size  Location     Type
 25719 ;;  tempValue       4   34[BANK0 ] unsigned long 
 25720 ;;  regValue        1   38[BANK0 ] unsigned char 
 25721 ;;  i               1   33[BANK0 ] unsigned char 
 25722 ;; Return value:  Size  Location     Type
 25723 ;;                  1    wreg      void 
 25724 ;; Registers used:
 25725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25726 ;; Tracked objects:
 25727 ;;		On entry : F/0
 25728 ;;		On exit  : 1/0
 25729 ;;		Unchanged: 0/0
 25730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25731 ;;      Params:         0       2       0       0       0       0       0       0       0
 25732 ;;      Locals:         0       6       0       0       0       0       0       0       0
 25733 ;;      Temps:          0       2       0       0       0       0       0       0       0
 25734 ;;      Totals:         0      10       0       0       0       0       0       0       0
 25735 ;;Total ram usage:       10 bytes
 25736 ;; Hardware stack levels used:    1
 25737 ;; Hardware stack levels required when called:   11
 25738 ;; This function calls:
 25739 ;;		_RADIO_RegisterRead
 25740 ;;		_RADIO_RegisterWrite
 25741 ;;		_RADIO_WriteFSKBitRate
 25742 ;;		_RADIO_WriteFSKFrequencyDeviation
 25743 ;;		_RADIO_WriteFrequency
 25744 ;;		_RADIO_WriteMode
 25745 ;;		_RADIO_WritePower
 25746 ;;		___lmul
 25747 ;; This function is called by:
 25748 ;;		_RADIO_Transmit
 25749 ;;		_RADIO_ReceiveStart
 25750 ;; This function uses a non-reentrant model
 25751 ;;
 25752                           
 25753                           	psect	text135
 25754  0013B4                     __ptext135:
 25755                           	opt stack 0
 25756  0013B4                     _RADIO_WriteConfiguration:
 25757                           	opt stack 16
 25758                           
 25759                           ; BSR set to: 0
 25760                           ;radio_driver_SX1276.c: 535: uint32_t tempValue;
 25761                           ;radio_driver_SX1276.c: 536: uint8_t regValue;
 25762                           ;radio_driver_SX1276.c: 537: uint8_t i;
 25763                           ;radio_driver_SX1276.c: 540: RADIO_WriteMode(MODE_SLEEP, RadioConfiguration.modulation, 
      +                          0);
 25764                           
 25765                           ; BSR set to: 0
 25766                           ;incstack = 0
 25767  0013B4  C18D  F069         	movff	_RadioConfiguration+24,RADIO_WriteMode@newModulation
 25768  0013B8  0E00               	movlw	0
 25769  0013BA  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 25770  0013BC  EC6B  F029         	call	_RADIO_WriteMode
 25771                           
 25772                           ;radio_driver_SX1276.c: 541: RADIO_WriteFrequency(RadioConfiguration.frequency);
 25773  0013C0  C175  F071         	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 25774  0013C4  C176  F072         	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 25775  0013C8  C177  F073         	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 25776  0013CC  C178  F074         	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 25777  0013D0  EC90  F028         	call	_RADIO_WriteFrequency	;wreg free
 25778                           
 25779                           ;radio_driver_SX1276.c: 542: RADIO_WritePower(RadioConfiguration.outputPower);
 25780  0013D4  0101               	movlb	1	; () banked
 25781  0013D6  5190               	movf	(_RadioConfiguration+27)& (0+255),w,b
 25782  0013D8  EC3F  F02A         	call	_RADIO_WritePower
 25783                           
 25784                           ;radio_driver_SX1276.c: 544: if (MODULATION_LORA == RadioConfiguration.modulation)
 25785  0013DC  0101               	movlb	1	; () banked
 25786  0013DE  058D               	decf	(_RadioConfiguration+24)& (0+255),w,b
 25787  0013E0  E001 D1B6          	bnz	l12546
 25788                           
 25789                           ; BSR set to: 1
 25790                           ;radio_driver_SX1276.c: 545: {
 25791                           ;radio_driver_SX1276.c: 546: RADIO_RegisterWrite(0x39, RadioConfiguration.syncWordLoRa);
 25792  0013E4  C183  F066         	movff	_RadioConfiguration+14,RADIO_RegisterWrite@value
 25793  0013E8  0E39               	movlw	57
 25794  0013EA  EC9A  F03A         	call	_RADIO_RegisterWrite
 25795                           
 25796                           ;radio_driver_SX1276.c: 548: RADIO_RegisterWrite(0x1D,
 25797                           ;radio_driver_SX1276.c: 549: (RadioConfiguration.bandWidth << (4)) |
 25798                           ;radio_driver_SX1276.c: 550: (RadioConfiguration.errorCodingRate << (1)) |
 25799                           ;radio_driver_SX1276.c: 551: (RadioConfiguration.implicitHeaderMode & 0x01));
 25800  0013EE  C197  F07F         	movff	_RadioConfiguration+34,??_RADIO_WriteConfiguration
 25801  0013F2  0E01               	movlw	1
 25802  0013F4  0100               	movlb	0	; () banked
 25803  0013F6  177F               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25804  0013F8  0101               	movlb	1	; () banked
 25805  0013FA  90D8               	bcf	status,0,c
 25806  0013FC  3596               	rlcf	(_RadioConfiguration+33)& (0+255),w,b
 25807  0013FE  0100               	movlb	0	; () banked
 25808  001400  6F80               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 25809  001402  0101               	movlb	1	; () banked
 25810  001404  398F               	swapf	(_RadioConfiguration+26)& (0+255),w,b
 25811  001406  0BF0               	andlw	240
 25812  001408  0100               	movlb	0	; () banked
 25813  00140A  1180               	iorwf	(??_RADIO_WriteConfiguration+1)& (0+255),w,b
 25814  00140C  117F               	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 25815  00140E  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25816  001410  0E1D               	movlw	29
 25817  001412  EC9A  F03A         	call	_RADIO_RegisterWrite
 25818                           
 25819                           ;radio_driver_SX1276.c: 553: RADIO_RegisterWrite(0x1E,
 25820                           ;radio_driver_SX1276.c: 554: (RadioConfiguration.dataRate << (4)) |
 25821                           ;radio_driver_SX1276.c: 555: ((RadioConfiguration.crcOn & 0x01) << (2)) |
 25822                           ;radio_driver_SX1276.c: 556: ((symbolTimeout & 0x0300) >> (8)));
 25823  001416  C07E  F07F         	movff	RADIO_WriteConfiguration@symbolTimeout+1,??_RADIO_WriteConfiguration
 25824  00141A  0E03               	movlw	3
 25825  00141C  0100               	movlb	0	; () banked
 25826  00141E  177F               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 25827  001420  C191  F080         	movff	_RadioConfiguration+28,??_RADIO_WriteConfiguration+1
 25828  001424  0E01               	movlw	1
 25829  001426  1780               	andwf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25830  001428  90D8               	bcf	status,0,c
 25831  00142A  3780               	rlcf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25832  00142C  90D8               	bcf	status,0,c
 25833  00142E  3780               	rlcf	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 25834  001430  0101               	movlb	1	; () banked
 25835  001432  398E               	swapf	(_RadioConfiguration+25)& (0+255),w,b
 25836  001434  0BF0               	andlw	240
 25837  001436  0100               	movlb	0	; () banked
 25838  001438  1180               	iorwf	(??_RADIO_WriteConfiguration+1)& (0+255),w,b
 25839  00143A  117F               	iorwf	??_RADIO_WriteConfiguration& (0+255),w,b
 25840  00143C  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 25841  00143E  0E1E               	movlw	30
 25842  001440  EC9A  F03A         	call	_RADIO_RegisterWrite
 25843                           
 25844                           ;radio_driver_SX1276.c: 560: if (0 != RadioConfiguration.frequencyHopPeriod)
 25845  001444  0101               	movlb	1	; () banked
 25846  001446  5193               	movf	(_RadioConfiguration+30)& (0+255),w,b
 25847  001448  1194               	iorwf	(_RadioConfiguration+31)& (0+255),w,b
 25848  00144A  E060               	bz	l466
 25849                           
 25850                           ; BSR set to: 1
 25851                           ;radio_driver_SX1276.c: 561: {
 25852                           ;radio_driver_SX1276.c: 562: tempValue = RadioConfiguration.frequencyHopPeriod;
 25853  00144C  C193  F082         	movff	_RadioConfiguration+30,RADIO_WriteConfiguration@tempValue
 25854  001450  C194  F083         	movff	_RadioConfiguration+31,RADIO_WriteConfiguration@tempValue+1
 25855  001454  0100               	movlb	0	; () banked
 25856  001456  6B84               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 25857  001458  6B85               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 25858                           
 25859                           ;radio_driver_SX1276.c: 564: switch (RadioConfiguration.bandWidth)
 25860  00145A  D042               	goto	l12438
 25861  00145C                     l12430:
 25862                           
 25863                           ; BSR set to: 1
 25864                           ;radio_driver_SX1276.c: 567: tempValue *= 125;
 25865  00145C  C082  F064         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 25866  001460  C083  F065         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 25867  001464  C084  F066         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 25868  001468  C085  F067         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 25869  00146C  0E7D               	movlw	125
 25870  00146E  0100               	movlb	0	; () banked
 25871  001470  6F68               	movwf	___lmul@multiplicand& (0+255),b
 25872  001472  6B69               	clrf	(___lmul@multiplicand+1)& (0+255),b
 25873  001474  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 25874  001476  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 25875  001478  ECF7  F02E         	call	___lmul	;wreg free
 25876  00147C  D022               	goto	L17
 25877  00147E                     l12432:
 25878                           
 25879                           ; BSR set to: 1
 25880                           ;radio_driver_SX1276.c: 570: tempValue *= 250;
 25881  00147E  C082  F064         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 25882  001482  C083  F065         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 25883  001486  C084  F066         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 25884  00148A  C085  F067         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 25885  00148E  0EFA               	movlw	250
 25886  001490  0100               	movlb	0	; () banked
 25887  001492  6F68               	movwf	___lmul@multiplicand& (0+255),b
 25888  001494  6B69               	clrf	(___lmul@multiplicand+1)& (0+255),b
 25889  001496  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 25890  001498  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 25891  00149A  ECF7  F02E         	call	___lmul	;wreg free
 25892  00149E  D011               	goto	L17
 25893  0014A0                     l12434:
 25894                           
 25895                           ; BSR set to: 1
 25896                           ;radio_driver_SX1276.c: 573: tempValue *= 500;
 25897  0014A0  C082  F064         	movff	RADIO_WriteConfiguration@tempValue,___lmul@multiplier
 25898  0014A4  C083  F065         	movff	RADIO_WriteConfiguration@tempValue+1,___lmul@multiplier+1
 25899  0014A8  C084  F066         	movff	RADIO_WriteConfiguration@tempValue+2,___lmul@multiplier+2
 25900  0014AC  C085  F067         	movff	RADIO_WriteConfiguration@tempValue+3,___lmul@multiplier+3
 25901  0014B0  0EF4               	movlw	244
 25902  0014B2  0100               	movlb	0	; () banked
 25903  0014B4  6F68               	movwf	___lmul@multiplicand& (0+255),b
 25904  0014B6  0E01               	movlw	1
 25905  0014B8  6F69               	movwf	(___lmul@multiplicand+1)& (0+255),b
 25906  0014BA  6B6A               	clrf	(___lmul@multiplicand+2)& (0+255),b
 25907  0014BC  6B6B               	clrf	(___lmul@multiplicand+3)& (0+255),b
 25908  0014BE  ECF7  F02E         	call	___lmul	;wreg free
 25909  0014C2                     L17:
 25910  0014C2  C064  F082         	movff	?___lmul,RADIO_WriteConfiguration@tempValue
 25911  0014C6  C065  F083         	movff	?___lmul+1,RADIO_WriteConfiguration@tempValue+1
 25912  0014CA  C066  F084         	movff	?___lmul+2,RADIO_WriteConfiguration@tempValue+2
 25913  0014CE  C067  F085         	movff	?___lmul+3,RADIO_WriteConfiguration@tempValue+3
 25914                           
 25915                           ;radio_driver_SX1276.c: 574: break;
 25916  0014D2  D00F               	goto	l12440
 25917  0014D4                     l472:
 25918                           
 25919                           ; BSR set to: 1
 25920                           ;radio_driver_SX1276.c: 577: tempValue = 0;
 25921  0014D4  0100               	movlb	0	; () banked
 25922  0014D6  6B82               	clrf	RADIO_WriteConfiguration@tempValue& (0+255),b
 25923  0014D8  6B83               	clrf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 25924  0014DA  6B84               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 25925  0014DC  6B85               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 25926                           
 25927                           ;radio_driver_SX1276.c: 578: break;
 25928  0014DE  D009               	goto	l12440
 25929  0014E0                     l12438:
 25930                           
 25931                           ; BSR set to: 0
 25932  0014E0  0101               	movlb	1	; () banked
 25933  0014E2  518F               	movf	(_RadioConfiguration+26)& (0+255),w,b
 25934                           
 25935                           ; Switch size 1, requested type "speed"
 25936                           ; Number of cases is 3, Range of values is 7 to 9
 25937                           ; switch strategies available:
 25938                           ; Name         Instructions Cycles
 25939                           ; simple_byte           10     6 (average)
 25940                           ;	Chosen strategy is simple_byte
 25941  0014E4  0A07               	xorlw	7	; case 7
 25942  0014E6  E0BA               	bz	l12430
 25943  0014E8  0A0F               	xorlw	15	; case 8
 25944  0014EA  E0C9               	bz	l12432
 25945  0014EC  0A01               	xorlw	1	; case 9
 25946  0014EE  E0D8               	bz	l12434
 25947  0014F0  D7F1               	goto	l472
 25948  0014F2                     l12440:
 25949                           
 25950                           ; BSR set to: 0
 25951                           ;radio_driver_SX1276.c: 581: tempValue >>= RadioConfiguration.dataRate;
 25952  0014F2  0101               	movlb	1	; () banked
 25953  0014F4  298E               	incf	(_RadioConfiguration+25)& (0+255),w,b
 25954  0014F6  0100               	movlb	0	; () banked
 25955  0014F8  6F7F               	movwf	??_RADIO_WriteConfiguration& (0+255),b
 25956  0014FA  D005               	goto	u13370
 25957  0014FC                     u13375:
 25958  0014FC  90D8               	bcf	status,0,c
 25959  0014FE  3385               	rrcf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),f,b
 25960  001500  3384               	rrcf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),f,b
 25961  001502  3383               	rrcf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),f,b
 25962  001504  3382               	rrcf	RADIO_WriteConfiguration@tempValue& (0+255),f,b
 25963  001506                     u13370:
 25964  001506  2F7F               	decfsz	??_RADIO_WriteConfiguration& (0+255),f,b
 25965  001508  D7F9               	goto	u13375
 25966                           
 25967                           ;radio_driver_SX1276.c: 582: }
 25968  00150A  D005               	goto	l12442
 25969  00150C                     l466:
 25970                           
 25971                           ; BSR set to: 1
 25972                           ;radio_driver_SX1276.c: 583: else
 25973                           ;radio_driver_SX1276.c: 584: {
 25974                           ;radio_driver_SX1276.c: 585: tempValue = 0;
 25975  00150C  0100               	movlb	0	; () banked
 25976  00150E  6B82               	clrf	RADIO_WriteConfiguration@tempValue& (0+255),b
 25977  001510  6B83               	clrf	(RADIO_WriteConfiguration@tempValue+1)& (0+255),b
 25978  001512  6B84               	clrf	(RADIO_WriteConfiguration@tempValue+2)& (0+255),b
 25979  001514  6B85               	clrf	(RADIO_WriteConfiguration@tempValue+3)& (0+255),b
 25980  001516                     l12442:
 25981                           
 25982                           ;radio_driver_SX1276.c: 586: }
 25983                           ;radio_driver_SX1276.c: 587: RADIO_RegisterWrite(0x24, (uint8_t)tempValue);
 25984  001516  C082  F066         	movff	RADIO_WriteConfiguration@tempValue,RADIO_RegisterWrite@value
 25985  00151A  0E24               	movlw	36
 25986  00151C  EC9A  F03A         	call	_RADIO_RegisterWrite
 25987                           
 25988                           ;radio_driver_SX1276.c: 589: RADIO_RegisterWrite(0x1F, (symbolTimeout & 0xFF));
 25989  001520  C07D  F066         	movff	RADIO_WriteConfiguration@symbolTimeout,RADIO_RegisterWrite@value
 25990  001524  0E1F               	movlw	31
 25991  001526  EC9A  F03A         	call	_RADIO_RegisterWrite
 25992                           
 25993                           ;radio_driver_SX1276.c: 595: regValue = RADIO_RegisterRead(0x26);
 25994  00152A  0E26               	movlw	38
 25995  00152C  ECB0  F039         	call	_RADIO_RegisterRead
 25996  001530  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 25997                           
 25998                           ; BSR set to: 0
 25999                           ;radio_driver_SX1276.c: 596: if (
 26000                           ;radio_driver_SX1276.c: 597: (
 26001                           ;radio_driver_SX1276.c: 598: (SF_12 == RadioConfiguration.dataRate) &&
 26002                           ;radio_driver_SX1276.c: 599: ((BW_125KHZ == RadioConfiguration.bandWidth) || (BW_250KHZ 
      +                          == RadioConfiguration.bandWidth))
 26003                           ;radio_driver_SX1276.c: 600: ) ||
 26004                           ;radio_driver_SX1276.c: 601: (
 26005                           ;radio_driver_SX1276.c: 602: (SF_11 == RadioConfiguration.dataRate) &&
 26006                           ;radio_driver_SX1276.c: 603: (BW_125KHZ == RadioConfiguration.bandWidth)
 26007                           ;radio_driver_SX1276.c: 604: )
 26008                           ;radio_driver_SX1276.c: 605: )
 26009  001532  0E0C               	movlw	12
 26010  001534  0101               	movlb	1	; () banked
 26011  001536  198E               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 26012  001538  E106               	bnz	l12450
 26013                           
 26014                           ; BSR set to: 1
 26015  00153A  0E07               	movlw	7
 26016  00153C  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26017  00153E  E009               	bz	l12454
 26018                           
 26019                           ; BSR set to: 1
 26020  001540  0E08               	movlw	8
 26021  001542  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26022  001544  E006               	bz	l12454
 26023  001546                     l12450:
 26024                           
 26025                           ; BSR set to: 1
 26026  001546  0E0B               	movlw	11
 26027  001548  198E               	xorwf	(_RadioConfiguration+25)& (0+255),w,b
 26028  00154A  E106               	bnz	l12456
 26029                           
 26030                           ; BSR set to: 1
 26031  00154C  0E07               	movlw	7
 26032  00154E  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26033  001550  E103               	bnz	l12456
 26034  001552                     l12454:
 26035                           
 26036                           ; BSR set to: 1
 26037                           ;radio_driver_SX1276.c: 606: {
 26038                           ;radio_driver_SX1276.c: 607: regValue |= 1 << (3);
 26039  001552  0100               	movlb	0	; () banked
 26040  001554  8786               	bsf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 26041                           
 26042                           ;radio_driver_SX1276.c: 608: }
 26043  001556  D002               	goto	l479
 26044  001558                     l12456:
 26045                           
 26046                           ; BSR set to: 1
 26047                           ;radio_driver_SX1276.c: 609: else
 26048                           ;radio_driver_SX1276.c: 610: {
 26049                           ;radio_driver_SX1276.c: 611: regValue &= ~(1 << (3));
 26050  001558  0100               	movlb	0	; () banked
 26051  00155A  9786               	bcf	RADIO_WriteConfiguration@regValue& (0+255),3,b
 26052  00155C                     l479:
 26053                           
 26054                           ; BSR set to: 0
 26055                           ;radio_driver_SX1276.c: 612: }
 26056                           ;radio_driver_SX1276.c: 613: regValue |= 1 << (2);
 26057  00155C  8586               	bsf	RADIO_WriteConfiguration@regValue& (0+255),2,b
 26058                           
 26059                           ; BSR set to: 0
 26060                           ;radio_driver_SX1276.c: 614: RADIO_RegisterWrite(0x26, regValue);
 26061  00155E  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26062  001562  0E26               	movlw	38
 26063  001564  EC9A  F03A         	call	_RADIO_RegisterWrite
 26064                           
 26065                           ;radio_driver_SX1276.c: 616: regValue = RADIO_RegisterRead(0x31);
 26066  001568  0E31               	movlw	49
 26067  00156A  ECB0  F039         	call	_RADIO_RegisterRead
 26068  00156E  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26069                           
 26070                           ; BSR set to: 0
 26071                           ;radio_driver_SX1276.c: 617: regValue &= ~(0x07);
 26072  001570  0EF8               	movlw	248
 26073  001572  1786               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26074                           
 26075                           ; BSR set to: 0
 26076                           ;radio_driver_SX1276.c: 618: regValue |= 0x03;
 26077  001574  0E03               	movlw	3
 26078  001576  1386               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26079                           
 26080                           ; BSR set to: 0
 26081                           ;radio_driver_SX1276.c: 619: RADIO_RegisterWrite(0x31, regValue);
 26082  001578  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26083  00157C  0E31               	movlw	49
 26084  00157E  EC9A  F03A         	call	_RADIO_RegisterWrite
 26085                           
 26086                           ;radio_driver_SX1276.c: 622: RADIO_RegisterWrite(0x37, 0x0A);
 26087  001582  0E0A               	movlw	10
 26088  001584  0100               	movlb	0	; () banked
 26089  001586  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26090  001588  0E37               	movlw	55
 26091  00158A  EC9A  F03A         	call	_RADIO_RegisterWrite
 26092                           
 26093                           ;radio_driver_SX1276.c: 625: if (0x12 == RadioConfiguration.regVersion)
 26094  00158E  0E12               	movlw	18
 26095  001590  0101               	movlb	1	; () banked
 26096  001592  19A6               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 26097  001594  E129               	bnz	l12494
 26098                           
 26099                           ; BSR set to: 1
 26100                           ;radio_driver_SX1276.c: 626: {
 26101                           ;radio_driver_SX1276.c: 629: if ( (BW_125KHZ == RadioConfiguration.bandWidth) ||
 26102                           ;radio_driver_SX1276.c: 630: (BW_250KHZ == RadioConfiguration.bandWidth) )
 26103  001596  0E07               	movlw	7
 26104  001598  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26105  00159A  E003               	bz	l12476
 26106                           
 26107                           ; BSR set to: 1
 26108  00159C  0E08               	movlw	8
 26109  00159E  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26110  0015A0  E115               	bnz	l12486
 26111  0015A2                     l12476:
 26112                           
 26113                           ; BSR set to: 1
 26114                           ;radio_driver_SX1276.c: 631: {
 26115                           ;radio_driver_SX1276.c: 632: regValue = RADIO_RegisterRead(0x31);
 26116  0015A2  0E31               	movlw	49
 26117  0015A4  ECB0  F039         	call	_RADIO_RegisterRead
 26118  0015A8  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26119                           
 26120                           ; BSR set to: 0
 26121                           ;radio_driver_SX1276.c: 633: regValue &= ~0x80;
 26122  0015AA  9F86               	bcf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 26123                           
 26124                           ; BSR set to: 0
 26125                           ;radio_driver_SX1276.c: 634: RADIO_RegisterWrite(0x31, regValue);
 26126  0015AC  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26127  0015B0  0E31               	movlw	49
 26128  0015B2  EC9A  F03A         	call	_RADIO_RegisterWrite
 26129                           
 26130                           ;radio_driver_SX1276.c: 635: RADIO_RegisterWrite(0x2F, 0x40);
 26131  0015B6  0E40               	movlw	64
 26132  0015B8  0100               	movlb	0	; () banked
 26133  0015BA  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26134  0015BC  0E2F               	movlw	47
 26135  0015BE  EC9A  F03A         	call	_RADIO_RegisterWrite
 26136                           
 26137                           ;radio_driver_SX1276.c: 636: RADIO_RegisterWrite(0x30, 0x00);
 26138  0015C2  0100               	movlb	0	; () banked
 26139  0015C4  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26140  0015C6  0E30               	movlw	48
 26141  0015C8  EC9A  F03A         	call	_RADIO_RegisterWrite
 26142  0015CC                     l12486:
 26143                           
 26144                           ;radio_driver_SX1276.c: 637: }
 26145                           ;radio_driver_SX1276.c: 639: if (BW_500KHZ == RadioConfiguration.bandWidth)
 26146  0015CC  0E09               	movlw	9
 26147  0015CE  0101               	movlb	1	; () banked
 26148  0015D0  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26149  0015D2  E10A               	bnz	l12494
 26150                           
 26151                           ; BSR set to: 1
 26152                           ;radio_driver_SX1276.c: 640: {
 26153                           ;radio_driver_SX1276.c: 641: regValue = RADIO_RegisterRead(0x31);
 26154  0015D4  0E31               	movlw	49
 26155  0015D6  ECB0  F039         	call	_RADIO_RegisterRead
 26156  0015DA  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26157                           
 26158                           ; BSR set to: 0
 26159                           ;radio_driver_SX1276.c: 642: regValue |= 0x80;
 26160  0015DC  8F86               	bsf	RADIO_WriteConfiguration@regValue& (0+255),7,b
 26161                           
 26162                           ; BSR set to: 0
 26163                           ;radio_driver_SX1276.c: 643: RADIO_RegisterWrite(0x31, regValue);
 26164  0015DE  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26165  0015E2  0E31               	movlw	49
 26166  0015E4  EC9A  F03A         	call	_RADIO_RegisterWrite
 26167  0015E8                     l12494:
 26168                           
 26169                           ;radio_driver_SX1276.c: 644: }
 26170                           ;radio_driver_SX1276.c: 645: }
 26171                           ;radio_driver_SX1276.c: 647: regValue = RADIO_RegisterRead(0x33);
 26172  0015E8  0E33               	movlw	51
 26173  0015EA  ECB0  F039         	call	_RADIO_RegisterRead
 26174  0015EE  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26175                           
 26176                           ; BSR set to: 0
 26177                           ;radio_driver_SX1276.c: 648: regValue &= ~(1 << (6));
 26178  0015F0  9D86               	bcf	RADIO_WriteConfiguration@regValue& (0+255),6,b
 26179                           
 26180                           ; BSR set to: 0
 26181                           ;radio_driver_SX1276.c: 649: regValue |= (1 << (0));
 26182  0015F2  8186               	bsf	RADIO_WriteConfiguration@regValue& (0+255),0,b
 26183                           
 26184                           ; BSR set to: 0
 26185                           ;radio_driver_SX1276.c: 650: regValue |= (RadioConfiguration.iqInverted & 0x01) << (6);
 26186  0015F4  C195  F07F         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 26187  0015F8  0E01               	movlw	1
 26188  0015FA  177F               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 26189  0015FC  0E06               	movlw	6
 26190  0015FE  6F80               	movwf	(??_RADIO_WriteConfiguration+1)& (0+255),b
 26191  001600                     u13475:
 26192  001600  90D8               	bcf	status,0,c
 26193  001602  377F               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 26194  001604  2F80               	decfsz	(??_RADIO_WriteConfiguration+1)& (0+255),f,b
 26195  001606  D7FC               	goto	u13475
 26196  001608  517F               	movf	??_RADIO_WriteConfiguration& (0+255),w,b
 26197  00160A  1386               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26198                           
 26199                           ; BSR set to: 0
 26200                           ;radio_driver_SX1276.c: 651: RADIO_RegisterWrite(0x33, regValue);
 26201  00160C  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26202  001610  0E33               	movlw	51
 26203  001612  EC9A  F03A         	call	_RADIO_RegisterWrite
 26204                           
 26205                           ;radio_driver_SX1276.c: 653: regValue = 0x1D & (~((RadioConfiguration.iqInverted & 0x01)
      +                           << (2)));
 26206  001616  C195  F07F         	movff	_RadioConfiguration+32,??_RADIO_WriteConfiguration
 26207  00161A  0E01               	movlw	1
 26208  00161C  0100               	movlb	0	; () banked
 26209  00161E  177F               	andwf	??_RADIO_WriteConfiguration& (0+255),f,b
 26210  001620  90D8               	bcf	status,0,c
 26211  001622  377F               	rlcf	??_RADIO_WriteConfiguration& (0+255),f,b
 26212  001624  90D8               	bcf	status,0,c
 26213  001626  357F               	rlcf	??_RADIO_WriteConfiguration& (0+255),w,b
 26214  001628  0AFF               	xorlw	255
 26215  00162A  0B1D               	andlw	29
 26216  00162C  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26217                           
 26218                           ; BSR set to: 0
 26219                           ;radio_driver_SX1276.c: 654: RADIO_RegisterWrite(0x3B, regValue);
 26220  00162E  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26221  001632  0E3B               	movlw	59
 26222  001634  EC9A  F03A         	call	_RADIO_RegisterWrite
 26223                           
 26224                           ;radio_driver_SX1276.c: 656: RADIO_RegisterWrite(0x20, RadioConfiguration.preambleLen >>
      +                           (8));
 26225  001638  0101               	movlb	1	; () banked
 26226  00163A  5182               	movf	(_RadioConfiguration+13)& (0+255),w,b
 26227  00163C  0100               	movlb	0	; () banked
 26228  00163E  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26229  001640  0E20               	movlw	32
 26230  001642  EC9A  F03A         	call	_RADIO_RegisterWrite
 26231                           
 26232                           ;radio_driver_SX1276.c: 657: RADIO_RegisterWrite(0x21, RadioConfiguration.preambleLen & 
      +                          0xFF);
 26233  001646  C181  F066         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 26234  00164A  0E21               	movlw	33
 26235  00164C  EC9A  F03A         	call	_RADIO_RegisterWrite
 26236                           
 26237                           ;radio_driver_SX1276.c: 659: RADIO_RegisterWrite(0x0D, 0x00);
 26238  001650  0100               	movlb	0	; () banked
 26239  001652  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26240  001654  0E0D               	movlw	13
 26241  001656  EC9A  F03A         	call	_RADIO_RegisterWrite
 26242                           
 26243                           ;radio_driver_SX1276.c: 660: RADIO_RegisterWrite(0x0E, 0x00);
 26244  00165A  0100               	movlb	0	; () banked
 26245  00165C  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26246  00165E  0E0E               	movlw	14
 26247  001660  EC9A  F03A         	call	_RADIO_RegisterWrite
 26248                           
 26249                           ;radio_driver_SX1276.c: 661: RADIO_RegisterWrite(0x0F, 0x00);
 26250  001664  0100               	movlb	0	; () banked
 26251  001666  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26252  001668  0E0F               	movlw	15
 26253  00166A  EC9A  F03A         	call	_RADIO_RegisterWrite
 26254                           
 26255                           ;radio_driver_SX1276.c: 664: if (0x12 == RadioConfiguration.regVersion)
 26256  00166E  0E12               	movlw	18
 26257  001670  0101               	movlb	1	; () banked
 26258  001672  19A6               	xorwf	(_RadioConfiguration+49)& (0+255),w,b
 26259  001674  E168               	bnz	l485
 26260                           
 26261                           ; BSR set to: 1
 26262                           ;radio_driver_SX1276.c: 665: {
 26263                           ;radio_driver_SX1276.c: 666: if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 26264                           ;radio_driver_SX1276.c: 667: (RadioConfiguration.frequency >= 862000000) &&
 26265                           ;radio_driver_SX1276.c: 668: (RadioConfiguration.frequency <= 1020000000)
 26266                           ;radio_driver_SX1276.c: 669: )
 26267  001676  0E09               	movlw	9
 26268  001678  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26269  00167A  E11E               	bnz	l12528
 26270                           
 26271                           ; BSR set to: 1
 26272  00167C  0E80               	movlw	128
 26273  00167E  5D75               	subwf	_RadioConfiguration& (0+255),w,b
 26274  001680  0E13               	movlw	19
 26275  001682  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26276  001684  0E61               	movlw	97
 26277  001686  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26278  001688  0E33               	movlw	51
 26279  00168A  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26280  00168C  E315               	bnc	l12528
 26281                           
 26282                           ; BSR set to: 1
 26283  00168E  0575               	decf	_RadioConfiguration& (0+255),w,b
 26284  001690  0EF7               	movlw	247
 26285  001692  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26286  001694  0ECB               	movlw	203
 26287  001696  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26288  001698  0E3C               	movlw	60
 26289  00169A  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26290  00169C  E20D               	bc	l12528
 26291                           
 26292                           ; BSR set to: 1
 26293                           ;radio_driver_SX1276.c: 670: {
 26294                           ;radio_driver_SX1276.c: 671: RADIO_RegisterWrite(0x36, 0x02);
 26295  00169E  0E02               	movlw	2
 26296  0016A0  0100               	movlb	0	; () banked
 26297  0016A2  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26298  0016A4  0E36               	movlw	54
 26299  0016A6  EC9A  F03A         	call	_RADIO_RegisterWrite
 26300                           
 26301                           ;radio_driver_SX1276.c: 672: RADIO_RegisterWrite(0x3a, 0x64);
 26302  0016AA  0E64               	movlw	100
 26303  0016AC  0100               	movlb	0	; () banked
 26304  0016AE  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26305  0016B0  0E3A               	movlw	58
 26306  0016B2  EC9A  F03A         	call	_RADIO_RegisterWrite
 26307                           
 26308                           ;radio_driver_SX1276.c: 673: }
 26309  0016B6  D028               	goto	l12538
 26310  0016B8                     l12528:
 26311                           
 26312                           ; BSR set to: 1
 26313                           ;radio_driver_SX1276.c: 674: else if ( (BW_500KHZ == RadioConfiguration.bandWidth) &&
 26314                           ;radio_driver_SX1276.c: 675: (RadioConfiguration.frequency >= 410000000) &&
 26315                           ;radio_driver_SX1276.c: 676: (RadioConfiguration.frequency <= 525000000)
 26316                           ;radio_driver_SX1276.c: 677: )
 26317  0016B8  0E09               	movlw	9
 26318  0016BA  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26319  0016BC  E11F               	bnz	l12536
 26320                           
 26321                           ; BSR set to: 1
 26322  0016BE  0E80               	movlw	128
 26323  0016C0  5D75               	subwf	_RadioConfiguration& (0+255),w,b
 26324  0016C2  0E1A               	movlw	26
 26325  0016C4  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26326  0016C6  0E70               	movlw	112
 26327  0016C8  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26328  0016CA  0E18               	movlw	24
 26329  0016CC  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26330  0016CE  E316               	bnc	l12536
 26331                           
 26332                           ; BSR set to: 1
 26333  0016D0  0E41               	movlw	65
 26334  0016D2  5D75               	subwf	_RadioConfiguration& (0+255),w,b
 26335  0016D4  0EDD               	movlw	221
 26336  0016D6  5976               	subwfb	(_RadioConfiguration+1)& (0+255),w,b
 26337  0016D8  0E4A               	movlw	74
 26338  0016DA  5977               	subwfb	(_RadioConfiguration+2)& (0+255),w,b
 26339  0016DC  0E1F               	movlw	31
 26340  0016DE  5978               	subwfb	(_RadioConfiguration+3)& (0+255),w,b
 26341  0016E0  E20D               	bc	l12536
 26342                           
 26343                           ; BSR set to: 1
 26344                           ;radio_driver_SX1276.c: 678: {
 26345                           ;radio_driver_SX1276.c: 679: RADIO_RegisterWrite(0x36, 0x02);
 26346  0016E2  0E02               	movlw	2
 26347  0016E4  0100               	movlb	0	; () banked
 26348  0016E6  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26349  0016E8  0E36               	movlw	54
 26350  0016EA  EC9A  F03A         	call	_RADIO_RegisterWrite
 26351                           
 26352                           ;radio_driver_SX1276.c: 680: RADIO_RegisterWrite(0x3a, 0x7F);
 26353  0016EE  0E7F               	movlw	127
 26354  0016F0  0100               	movlb	0	; () banked
 26355  0016F2  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26356  0016F4  0E3A               	movlw	58
 26357  0016F6  EC9A  F03A         	call	_RADIO_RegisterWrite
 26358                           
 26359                           ;radio_driver_SX1276.c: 681: }
 26360  0016FA  D006               	goto	l12538
 26361  0016FC                     l12536:
 26362                           
 26363                           ; BSR set to: 1
 26364                           ;radio_driver_SX1276.c: 682: else
 26365                           ;radio_driver_SX1276.c: 683: {
 26366                           ;radio_driver_SX1276.c: 684: RADIO_RegisterWrite(0x36, 0x03);
 26367  0016FC  0E03               	movlw	3
 26368  0016FE  0100               	movlb	0	; () banked
 26369  001700  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26370  001702  0E36               	movlw	54
 26371  001704  EC9A  F03A         	call	_RADIO_RegisterWrite
 26372  001708                     l12538:
 26373                           
 26374                           ;radio_driver_SX1276.c: 685: }
 26375                           ;radio_driver_SX1276.c: 688: if ((BW_500KHZ == RadioConfiguration.bandWidth) && (1 == Ra
      +                          dioConfiguration.iqInverted))
 26376  001708  0E09               	movlw	9
 26377  00170A  0101               	movlb	1	; () banked
 26378  00170C  198F               	xorwf	(_RadioConfiguration+26)& (0+255),w,b
 26379  00170E  E10F               	bnz	l12544
 26380                           
 26381                           ; BSR set to: 1
 26382  001710  0595               	decf	(_RadioConfiguration+32)& (0+255),w,b
 26383  001712  E10D               	bnz	l12544
 26384                           
 26385                           ; BSR set to: 1
 26386                           ;radio_driver_SX1276.c: 689: {
 26387                           ;radio_driver_SX1276.c: 690: RADIO_RegisterWrite(0x3A, 0x65);
 26388  001714  0E65               	movlw	101
 26389  001716  0100               	movlb	0	; () banked
 26390  001718  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26391  00171A  0E3A               	movlw	58
 26392  00171C  EC9A  F03A         	call	_RADIO_RegisterWrite
 26393                           
 26394                           ;radio_driver_SX1276.c: 691: RADIO_RegisterWrite(0x3B, 25);
 26395  001720  0E19               	movlw	25
 26396  001722  0100               	movlb	0	; () banked
 26397  001724  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26398  001726  0E3B               	movlw	59
 26399  001728  EC9A  F03A         	call	_RADIO_RegisterWrite
 26400                           
 26401                           ;radio_driver_SX1276.c: 692: }
 26402  00172C  D00C               	goto	l485
 26403  00172E                     l12544:
 26404                           
 26405                           ; BSR set to: 1
 26406                           ;radio_driver_SX1276.c: 693: else
 26407                           ;radio_driver_SX1276.c: 694: {
 26408                           ;radio_driver_SX1276.c: 695: RADIO_RegisterWrite(0x3A, 0x65);
 26409  00172E  0E65               	movlw	101
 26410  001730  0100               	movlb	0	; () banked
 26411  001732  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26412  001734  0E3A               	movlw	58
 26413  001736  EC9A  F03A         	call	_RADIO_RegisterWrite
 26414                           
 26415                           ;radio_driver_SX1276.c: 696: RADIO_RegisterWrite(0x3B, 29);
 26416  00173A  0E1D               	movlw	29
 26417  00173C  0100               	movlb	0	; () banked
 26418  00173E  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26419  001740  0E3B               	movlw	59
 26420  001742  EC9A  F03A         	call	_RADIO_RegisterWrite
 26421  001746                     l485:
 26422                           
 26423                           ;radio_driver_SX1276.c: 697: }
 26424                           ;radio_driver_SX1276.c: 698: }
 26425                           ;radio_driver_SX1276.c: 701: RADIO_RegisterWrite(0x12, 0xFF);
 26426  001746  0100               	movlb	0	; () banked
 26427  001748  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 26428  00174A  0E12               	movlw	18
 26429  00174C  EF9A  F03A         	goto	_RADIO_RegisterWrite
 26430  001750                     l12546:
 26431                           
 26432                           ; BSR set to: 1
 26433                           ;radio_driver_SX1276.c: 703: else
 26434                           ;radio_driver_SX1276.c: 704: {
 26435                           ;radio_driver_SX1276.c: 706: RADIO_WriteFSKFrequencyDeviation(RadioConfiguration.frequen
      +                          cyDeviation);
 26436  001750  C179  F071         	movff	_RadioConfiguration+4,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation
 26437  001754  C17A  F072         	movff	_RadioConfiguration+5,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1
 26438  001758  C17B  F073         	movff	_RadioConfiguration+6,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2
 26439  00175C  C17C  F074         	movff	_RadioConfiguration+7,RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3
 26440  001760  ECCC  F032         	call	_RADIO_WriteFSKFrequencyDeviation	;wreg free
 26441                           
 26442                           ;radio_driver_SX1276.c: 707: RADIO_WriteFSKBitRate(RadioConfiguration.bitRate);
 26443  001764  C17D  F071         	movff	_RadioConfiguration+8,RADIO_WriteFSKBitRate@bitRate
 26444  001768  C17E  F072         	movff	_RadioConfiguration+9,RADIO_WriteFSKBitRate@bitRate+1
 26445  00176C  C17F  F073         	movff	_RadioConfiguration+10,RADIO_WriteFSKBitRate@bitRate+2
 26446  001770  C180  F074         	movff	_RadioConfiguration+11,RADIO_WriteFSKBitRate@bitRate+3
 26447  001774  ECFE  F032         	call	_RADIO_WriteFSKBitRate	;wreg free
 26448                           
 26449                           ;radio_driver_SX1276.c: 709: RADIO_RegisterWrite(0x25, RadioConfiguration.preambleLen >>
      +                           (8));
 26450  001778  0101               	movlb	1	; () banked
 26451  00177A  5182               	movf	(_RadioConfiguration+13)& (0+255),w,b
 26452  00177C  0100               	movlb	0	; () banked
 26453  00177E  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26454  001780  0E25               	movlw	37
 26455  001782  EC9A  F03A         	call	_RADIO_RegisterWrite
 26456                           
 26457                           ;radio_driver_SX1276.c: 710: RADIO_RegisterWrite(0x26, RadioConfiguration.preambleLen & 
      +                          0xFF);
 26458  001786  C181  F066         	movff	_RadioConfiguration+12,RADIO_RegisterWrite@value
 26459  00178A  0E26               	movlw	38
 26460  00178C  EC9A  F03A         	call	_RADIO_RegisterWrite
 26461                           
 26462                           ;radio_driver_SX1276.c: 713: regValue = RADIO_RegisterRead(0x0A);
 26463  001790  0E0A               	movlw	10
 26464  001792  ECB0  F039         	call	_RADIO_RegisterRead
 26465  001796  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26466                           
 26467                           ; BSR set to: 0
 26468                           ;radio_driver_SX1276.c: 714: regValue &= ~0x60;
 26469  001798  0E9F               	movlw	159
 26470  00179A  1786               	andwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26471                           
 26472                           ; BSR set to: 0
 26473                           ;radio_driver_SX1276.c: 715: regValue |= RadioConfiguration.fskDataShaping << (5);
 26474  00179C  0101               	movlb	1	; () banked
 26475  00179E  39A8               	swapf	(_RadioConfiguration+51)& (0+255),w,b
 26476  0017A0  46E8               	rlncf	wreg,f,c
 26477  0017A2  0BE0               	andlw	224
 26478  0017A4  0100               	movlb	0	; () banked
 26479  0017A6  1386               	iorwf	RADIO_WriteConfiguration@regValue& (0+255),f,b
 26480                           
 26481                           ;radio_driver_SX1276.c: 716: RADIO_RegisterWrite(0x0A, regValue);
 26482  0017A8  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26483  0017AC  0E0A               	movlw	10
 26484  0017AE  EC9A  F03A         	call	_RADIO_RegisterWrite
 26485                           
 26486                           ;radio_driver_SX1276.c: 720: regValue = 0xC8;
 26487  0017B2  0EC8               	movlw	200
 26488  0017B4  0100               	movlb	0	; () banked
 26489  0017B6  6F86               	movwf	RADIO_WriteConfiguration@regValue& (0+255),b
 26490                           
 26491                           ; BSR set to: 0
 26492                           ;radio_driver_SX1276.c: 721: if (RadioConfiguration.crcOn)
 26493  0017B8  0101               	movlb	1	; () banked
 26494  0017BA  5191               	movf	(_RadioConfiguration+28)& (0+255),w,b
 26495  0017BC  E002               	bz	l12558
 26496                           
 26497                           ; BSR set to: 1
 26498                           ;radio_driver_SX1276.c: 722: {
 26499                           ;radio_driver_SX1276.c: 723: regValue |= 0x10;
 26500  0017BE  0100               	movlb	0	; () banked
 26501  0017C0  8986               	bsf	RADIO_WriteConfiguration@regValue& (0+255),4,b
 26502  0017C2                     l12558:
 26503                           
 26504                           ;radio_driver_SX1276.c: 724: }
 26505                           ;radio_driver_SX1276.c: 725: RADIO_RegisterWrite(0x30, regValue);
 26506  0017C2  C086  F066         	movff	RADIO_WriteConfiguration@regValue,RADIO_RegisterWrite@value
 26507  0017C6  0E30               	movlw	48
 26508  0017C8  EC9A  F03A         	call	_RADIO_RegisterWrite
 26509                           
 26510                           ;radio_driver_SX1276.c: 728: for (i = 0; i < RadioConfiguration.syncWordLen; i++)
 26511  0017CC  0100               	movlb	0	; () banked
 26512  0017CE  6B81               	clrf	RADIO_WriteConfiguration@i& (0+255),b
 26513  0017D0  D00E               	goto	l12566
 26514  0017D2                     l12562:
 26515                           
 26516                           ; BSR set to: 0
 26517                           ;radio_driver_SX1276.c: 729: {
 26518                           ;radio_driver_SX1276.c: 732: RADIO_RegisterWrite(0x28 + i, RadioConfiguration.syncWord[i
      +                          ]);
 26519  0017D2  0E84               	movlw	low (_RadioConfiguration+15)
 26520  0017D4  2581               	addwf	RADIO_WriteConfiguration@i& (0+255),w,b
 26521  0017D6  6ED9               	movwf	fsr2l,c
 26522  0017D8  6ADA               	clrf	fsr2h,c
 26523  0017DA  0E01               	movlw	high (_RadioConfiguration+15)
 26524  0017DC  22DA               	addwfc	fsr2h,f,c
 26525  0017DE  50DF               	movf	indf2,w,c
 26526  0017E0  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26527  0017E2  5181               	movf	RADIO_WriteConfiguration@i& (0+255),w,b
 26528  0017E4  0F28               	addlw	40
 26529  0017E6  EC9A  F03A         	call	_RADIO_RegisterWrite
 26530  0017EA  0100               	movlb	0	; () banked
 26531  0017EC  2B81               	incf	RADIO_WriteConfiguration@i& (0+255),f,b
 26532  0017EE                     l12566:
 26533                           
 26534                           ; BSR set to: 0
 26535  0017EE  0101               	movlb	1	; () banked
 26536  0017F0  518C               	movf	(_RadioConfiguration+23)& (0+255),w,b
 26537  0017F2  0100               	movlb	0	; () banked
 26538  0017F4  5D81               	subwf	RADIO_WriteConfiguration@i& (0+255),w,b
 26539  0017F6  E3ED               	bnc	l12562
 26540                           
 26541                           ; BSR set to: 0
 26542                           ;radio_driver_SX1276.c: 733: }
 26543                           ;radio_driver_SX1276.c: 736: if (RadioConfiguration.syncWordLen != 0)
 26544  0017F8  0101               	movlb	1	; () banked
 26545  0017FA  518C               	movf	(_RadioConfiguration+23)& (0+255),w,b
 26546  0017FC  E008               	bz	l12572
 26547                           
 26548                           ; BSR set to: 1
 26549                           ;radio_driver_SX1276.c: 737: {
 26550                           ;radio_driver_SX1276.c: 738: RADIO_RegisterWrite(0x27, 0x10 | (RadioConfiguration.syncWo
      +                          rdLen - 1));
 26551  0017FE  058C               	decf	(_RadioConfiguration+23)& (0+255),w,b
 26552  001800  0910               	iorlw	16
 26553  001802  0100               	movlb	0	; () banked
 26554  001804  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26555  001806  0E27               	movlw	39
 26556  001808  EC9A  F03A         	call	_RADIO_RegisterWrite
 26557                           
 26558                           ;radio_driver_SX1276.c: 739: }
 26559  00180C  D005               	goto	l498
 26560  00180E                     l12572:
 26561                           
 26562                           ; BSR set to: 1
 26563                           ;radio_driver_SX1276.c: 740: else
 26564                           ;radio_driver_SX1276.c: 741: {
 26565                           ;radio_driver_SX1276.c: 742: RADIO_RegisterWrite(0x27, 0x00);
 26566  00180E  0100               	movlb	0	; () banked
 26567  001810  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 26568  001812  0E27               	movlw	39
 26569  001814  EC9A  F03A         	call	_RADIO_RegisterWrite
 26570  001818                     l498:
 26571                           
 26572                           ;radio_driver_SX1276.c: 743: }
 26573                           ;radio_driver_SX1276.c: 746: RADIO_RegisterWrite(0x3E, 0xFF);
 26574  001818  0100               	movlb	0	; () banked
 26575  00181A  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 26576  00181C  0E3E               	movlw	62
 26577  00181E  EC9A  F03A         	call	_RADIO_RegisterWrite
 26578                           
 26579                           ;radio_driver_SX1276.c: 747: RADIO_RegisterWrite(0x3F, 0xFF);
 26580  001822  0100               	movlb	0	; () banked
 26581  001824  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 26582  001826  0E3F               	movlw	63
 26583  001828  EF9A  F03A         	goto	_RADIO_RegisterWrite
 26584  00182C                     __end_of_RADIO_WriteConfiguration:
 26585                           	opt stack 0
 26586                           tosu	equ	0xFFF
 26587                           tosh	equ	0xFFE
 26588                           tosl	equ	0xFFD
 26589                           pclath	equ	0xFFA
 26590                           tblptru	equ	0xFF8
 26591                           tblptrh	equ	0xFF7
 26592                           tblptrl	equ	0xFF6
 26593                           tablat	equ	0xFF5
 26594                           prodh	equ	0xFF4
 26595                           prodl	equ	0xFF3
 26596                           intcon	equ	0xFF2
 26597                           indf0	equ	0xFEF
 26598                           postinc0	equ	0xFEE
 26599                           fsr0h	equ	0xFEA
 26600                           fsr0l	equ	0xFE9
 26601                           wreg	equ	0xFE8
 26602                           postinc1	equ	0xFE6
 26603                           postdec1	equ	0xFE5
 26604                           plusw1	equ	0xFE3
 26605                           fsr1h	equ	0xFE2
 26606                           fsr1l	equ	0xFE1
 26607                           indf2	equ	0xFDF
 26608                           postinc2	equ	0xFDE
 26609                           postdec2	equ	0xFDD
 26610                           plusw2	equ	0xFDB
 26611                           fsr2h	equ	0xFDA
 26612                           fsr2l	equ	0xFD9
 26613                           status	equ	0xFD8
 26614                           
 26615 ;; *************** function _RADIO_WritePower *****************
 26616 ;; Defined at:
 26617 ;;		line 342 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26618 ;; Parameters:    Size  Location     Type
 26619 ;;  power           1    wreg     char 
 26620 ;; Auto vars:     Size  Location     Type
 26621 ;;  power           1   10[BANK0 ] char 
 26622 ;;  paDac           1    9[BANK0 ] unsigned char 
 26623 ;;  ocp             1    8[BANK0 ] unsigned char 
 26624 ;; Return value:  Size  Location     Type
 26625 ;;                  1    wreg      void 
 26626 ;; Registers used:
 26627 ;;		wreg, status,2, status,0, cstack
 26628 ;; Tracked objects:
 26629 ;;		On entry : F/1
 26630 ;;		On exit  : 1/0
 26631 ;;		Unchanged: 0/0
 26632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26633 ;;      Params:         0       0       0       0       0       0       0       0       0
 26634 ;;      Locals:         0       3       0       0       0       0       0       0       0
 26635 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26636 ;;      Totals:         0       3       0       0       0       0       0       0       0
 26637 ;;Total ram usage:        3 bytes
 26638 ;; Hardware stack levels used:    1
 26639 ;; Hardware stack levels required when called:   10
 26640 ;; This function calls:
 26641 ;;		_RADIO_RegisterRead
 26642 ;;		_RADIO_RegisterWrite
 26643 ;; This function is called by:
 26644 ;;		_RADIO_WriteConfiguration
 26645 ;; This function uses a non-reentrant model
 26646 ;;
 26647                           
 26648                           	psect	text136
 26649  00547E                     __ptext136:
 26650                           	opt stack 0
 26651  00547E                     _RADIO_WritePower:
 26652                           	opt stack 16
 26653                           
 26654                           ;incstack = 0
 26655                           ;RADIO_WritePower@power stored from wreg
 26656  00547E  0100               	movlb	0	; () banked
 26657  005480  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26658                           
 26659                           ;radio_driver_SX1276.c: 344: uint8_t paDac;
 26660                           ;radio_driver_SX1276.c: 345: uint8_t ocp;
 26661                           ;radio_driver_SX1276.c: 347: if (RadioConfiguration.paBoost == 0)
 26662  005482  0101               	movlb	1	; () banked
 26663  005484  5192               	movf	(_RadioConfiguration+29)& (0+255),w,b
 26664  005486  E127               	bnz	l12260
 26665                           
 26666                           ; BSR set to: 1
 26667                           ;radio_driver_SX1276.c: 348: {
 26668                           ;radio_driver_SX1276.c: 350: if (power < -3)
 26669  005488  0100               	movlb	0	; () banked
 26670  00548A  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26671  00548C  0A80               	xorlw	128
 26672  00548E  0F83               	addlw	131
 26673  005490  E202               	bc	l12240
 26674                           
 26675                           ; BSR set to: 0
 26676                           ;radio_driver_SX1276.c: 351: {
 26677                           ;radio_driver_SX1276.c: 352: power = -3;
 26678  005492  0EFD               	movlw	253
 26679  005494  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26680  005496                     l12240:
 26681                           
 26682                           ; BSR set to: 0
 26683                           ;radio_driver_SX1276.c: 353: }
 26684                           ;radio_driver_SX1276.c: 354: if (power > 15)
 26685  005496  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26686  005498  0A80               	xorlw	128
 26687  00549A  0F70               	addlw	-144
 26688  00549C  E302               	bnc	l12244
 26689                           
 26690                           ; BSR set to: 0
 26691                           ;radio_driver_SX1276.c: 355: {
 26692                           ;radio_driver_SX1276.c: 356: power = 15;
 26693  00549E  0E0F               	movlw	15
 26694  0054A0  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26695  0054A2                     l12244:
 26696                           
 26697                           ; BSR set to: 0
 26698                           ;radio_driver_SX1276.c: 357: }
 26699                           ;radio_driver_SX1276.c: 359: paDac = RADIO_RegisterRead(0x4D);
 26700  0054A2  0E4D               	movlw	77
 26701  0054A4  ECB0  F039         	call	_RADIO_RegisterRead
 26702  0054A8  6F69               	movwf	RADIO_WritePower@paDac& (0+255),b
 26703                           
 26704                           ; BSR set to: 0
 26705                           ;radio_driver_SX1276.c: 360: paDac &= ~(0x07);
 26706  0054AA  0EF8               	movlw	248
 26707  0054AC  1769               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 26708                           
 26709                           ; BSR set to: 0
 26710                           ;radio_driver_SX1276.c: 361: paDac |= 0x04;
 26711  0054AE  8569               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 26712                           
 26713                           ; BSR set to: 0
 26714                           ;radio_driver_SX1276.c: 362: RADIO_RegisterWrite(0x4D, paDac);
 26715  0054B0  C069  F066         	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 26716  0054B4  0E4D               	movlw	77
 26717  0054B6  EC9A  F03A         	call	_RADIO_RegisterWrite
 26718                           
 26719                           ;radio_driver_SX1276.c: 364: if (power < 0)
 26720  0054BA  0100               	movlb	0	; () banked
 26721  0054BC  AF6A               	btfss	RADIO_WritePower@power& (0+255),7,b
 26722  0054BE  D005               	goto	l12258
 26723                           
 26724                           ; BSR set to: 0
 26725                           ;radio_driver_SX1276.c: 365: {
 26726                           ;radio_driver_SX1276.c: 369: power += 3;
 26727  0054C0  0E03               	movlw	3
 26728  0054C2  276A               	addwf	RADIO_WritePower@power& (0+255),f,b
 26729                           
 26730                           ; BSR set to: 0
 26731                           ;radio_driver_SX1276.c: 370: RADIO_RegisterWrite(0x09, 0x20 | power);
 26732  0054C4  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26733  0054C6  0920               	iorlw	32
 26734  0054C8  D002               	goto	L19
 26735  0054CA                     l12258:
 26736                           
 26737                           ; BSR set to: 0
 26738                           ;radio_driver_SX1276.c: 372: else
 26739                           ;radio_driver_SX1276.c: 373: {
 26740                           ;radio_driver_SX1276.c: 377: RADIO_RegisterWrite(0x09, 0x70 | power);
 26741  0054CA  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26742  0054CC  0970               	iorlw	112
 26743  0054CE                     L19:
 26744  0054CE  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26745  0054D0  0E09               	movlw	9
 26746  0054D2  EF9A  F03A         	goto	_RADIO_RegisterWrite
 26747  0054D6                     l12260:
 26748                           
 26749                           ; BSR set to: 1
 26750                           ;radio_driver_SX1276.c: 380: else
 26751                           ;radio_driver_SX1276.c: 381: {
 26752                           ;radio_driver_SX1276.c: 385: if (power < 2)
 26753  0054D6  0100               	movlb	0	; () banked
 26754  0054D8  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26755  0054DA  0A80               	xorlw	128
 26756  0054DC  0F7E               	addlw	-130
 26757  0054DE  E202               	bc	l12264
 26758                           
 26759                           ; BSR set to: 0
 26760                           ;radio_driver_SX1276.c: 386: {
 26761                           ;radio_driver_SX1276.c: 387: power = 2;
 26762  0054E0  0E02               	movlw	2
 26763  0054E2  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26764  0054E4                     l12264:
 26765                           
 26766                           ; BSR set to: 0
 26767                           ;radio_driver_SX1276.c: 388: }
 26768                           ;radio_driver_SX1276.c: 391: if (power >= 20)
 26769  0054E4  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26770  0054E6  0A80               	xorlw	128
 26771  0054E8  0F6C               	addlw	-148
 26772  0054EA  E302               	bnc	l12268
 26773                           
 26774                           ; BSR set to: 0
 26775                           ;radio_driver_SX1276.c: 392: {
 26776                           ;radio_driver_SX1276.c: 393: power = 20;
 26777  0054EC  0E14               	movlw	20
 26778  0054EE  D005               	goto	L18
 26779  0054F0                     l12268:
 26780                           
 26781                           ; BSR set to: 0
 26782                           ;radio_driver_SX1276.c: 395: else if (power > 17)
 26783  0054F0  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26784  0054F2  0A80               	xorlw	128
 26785  0054F4  0F6E               	addlw	-146
 26786  0054F6  E302               	bnc	l12272
 26787                           
 26788                           ; BSR set to: 0
 26789                           ;radio_driver_SX1276.c: 396: {
 26790                           ;radio_driver_SX1276.c: 397: power = 17;
 26791  0054F8  0E11               	movlw	17
 26792  0054FA                     L18:
 26793  0054FA  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26794  0054FC                     l12272:
 26795                           
 26796                           ; BSR set to: 0
 26797                           ;radio_driver_SX1276.c: 398: }
 26798                           ;radio_driver_SX1276.c: 400: ocp = RADIO_RegisterRead(0x0B);
 26799  0054FC  0E0B               	movlw	11
 26800  0054FE  ECB0  F039         	call	_RADIO_RegisterRead
 26801  005502  6F68               	movwf	RADIO_WritePower@ocp& (0+255),b
 26802                           
 26803                           ; BSR set to: 0
 26804                           ;radio_driver_SX1276.c: 401: paDac = RADIO_RegisterRead(0x4D);
 26805  005504  0E4D               	movlw	77
 26806  005506  ECB0  F039         	call	_RADIO_RegisterRead
 26807  00550A  6F69               	movwf	RADIO_WritePower@paDac& (0+255),b
 26808                           
 26809                           ; BSR set to: 0
 26810                           ;radio_driver_SX1276.c: 402: paDac &= ~(0x07);
 26811  00550C  0EF8               	movlw	248
 26812  00550E  1769               	andwf	RADIO_WritePower@paDac& (0+255),f,b
 26813                           
 26814                           ; BSR set to: 0
 26815                           ;radio_driver_SX1276.c: 403: if (power == 20)
 26816  005510  0E14               	movlw	20
 26817  005512  196A               	xorwf	RADIO_WritePower@power& (0+255),w,b
 26818  005514  E106               	bnz	l12286
 26819                           
 26820                           ; BSR set to: 0
 26821                           ;radio_driver_SX1276.c: 404: {
 26822                           ;radio_driver_SX1276.c: 405: paDac |= 0x07;
 26823  005516  0E07               	movlw	7
 26824  005518  1369               	iorwf	RADIO_WritePower@paDac& (0+255),f,b
 26825                           
 26826                           ; BSR set to: 0
 26827                           ;radio_driver_SX1276.c: 406: power = 15;
 26828  00551A  0E0F               	movlw	15
 26829  00551C  6F6A               	movwf	RADIO_WritePower@power& (0+255),b
 26830                           
 26831                           ; BSR set to: 0
 26832                           ;radio_driver_SX1276.c: 407: ocp &= ~(0x20);
 26833  00551E  9B68               	bcf	RADIO_WritePower@ocp& (0+255),5,b
 26834                           
 26835                           ;radio_driver_SX1276.c: 408: }
 26836  005520  D004               	goto	l12292
 26837  005522                     l12286:
 26838                           
 26839                           ; BSR set to: 0
 26840                           ;radio_driver_SX1276.c: 409: else
 26841                           ;radio_driver_SX1276.c: 410: {
 26842                           ;radio_driver_SX1276.c: 411: paDac |= 0x04;
 26843  005522  8569               	bsf	RADIO_WritePower@paDac& (0+255),2,b
 26844                           
 26845                           ; BSR set to: 0
 26846                           ;radio_driver_SX1276.c: 412: power -= 2;
 26847  005524  0EFE               	movlw	254
 26848  005526  276A               	addwf	RADIO_WritePower@power& (0+255),f,b
 26849                           
 26850                           ; BSR set to: 0
 26851                           ;radio_driver_SX1276.c: 413: ocp |= 0x20;
 26852  005528  8B68               	bsf	RADIO_WritePower@ocp& (0+255),5,b
 26853  00552A                     l12292:
 26854                           
 26855                           ; BSR set to: 0
 26856                           ;radio_driver_SX1276.c: 414: }
 26857                           ;radio_driver_SX1276.c: 416: RADIO_RegisterWrite(0x4D, paDac);
 26858  00552A  C069  F066         	movff	RADIO_WritePower@paDac,RADIO_RegisterWrite@value
 26859  00552E  0E4D               	movlw	77
 26860  005530  EC9A  F03A         	call	_RADIO_RegisterWrite
 26861                           
 26862                           ;radio_driver_SX1276.c: 417: RADIO_RegisterWrite(0x09, 0x80 | power);
 26863  005534  0100               	movlb	0	; () banked
 26864  005536  516A               	movf	RADIO_WritePower@power& (0+255),w,b
 26865  005538  0980               	iorlw	128
 26866  00553A  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 26867  00553C  0E09               	movlw	9
 26868  00553E  EC9A  F03A         	call	_RADIO_RegisterWrite
 26869                           
 26870                           ;radio_driver_SX1276.c: 418: RADIO_RegisterWrite(0x0B, ocp);
 26871  005542  C068  F066         	movff	RADIO_WritePower@ocp,RADIO_RegisterWrite@value
 26872  005546  0E0B               	movlw	11
 26873  005548  EF9A  F03A         	goto	_RADIO_RegisterWrite
 26874  00554C                     __end_of_RADIO_WritePower:
 26875                           	opt stack 0
 26876                           tosu	equ	0xFFF
 26877                           tosh	equ	0xFFE
 26878                           tosl	equ	0xFFD
 26879                           pclath	equ	0xFFA
 26880                           tblptru	equ	0xFF8
 26881                           tblptrh	equ	0xFF7
 26882                           tblptrl	equ	0xFF6
 26883                           tablat	equ	0xFF5
 26884                           prodh	equ	0xFF4
 26885                           prodl	equ	0xFF3
 26886                           intcon	equ	0xFF2
 26887                           indf0	equ	0xFEF
 26888                           postinc0	equ	0xFEE
 26889                           fsr0h	equ	0xFEA
 26890                           fsr0l	equ	0xFE9
 26891                           wreg	equ	0xFE8
 26892                           postinc1	equ	0xFE6
 26893                           postdec1	equ	0xFE5
 26894                           plusw1	equ	0xFE3
 26895                           fsr1h	equ	0xFE2
 26896                           fsr1l	equ	0xFE1
 26897                           indf2	equ	0xFDF
 26898                           postinc2	equ	0xFDE
 26899                           postdec2	equ	0xFDD
 26900                           plusw2	equ	0xFDB
 26901                           fsr2h	equ	0xFDA
 26902                           fsr2l	equ	0xFD9
 26903                           status	equ	0xFD8
 26904                           
 26905 ;; *************** function _RADIO_WriteFSKFrequencyDeviation *****************
 26906 ;; Defined at:
 26907 ;;		line 294 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 26908 ;; Parameters:    Size  Location     Type
 26909 ;;  frequencyDev    4   17[BANK0 ] unsigned long 
 26910 ;; Auto vars:     Size  Location     Type
 26911 ;;  num             4   21[BANK0 ] unsigned long 
 26912 ;; Return value:  Size  Location     Type
 26913 ;;                  1    wreg      void 
 26914 ;; Registers used:
 26915 ;;		wreg, status,2, status,0, cstack
 26916 ;; Tracked objects:
 26917 ;;		On entry : F/1
 26918 ;;		On exit  : 1/0
 26919 ;;		Unchanged: 0/0
 26920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26921 ;;      Params:         0       4       0       0       0       0       0       0       0
 26922 ;;      Locals:         0       4       0       0       0       0       0       0       0
 26923 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26924 ;;      Totals:         0       8       0       0       0       0       0       0       0
 26925 ;;Total ram usage:        8 bytes
 26926 ;; Hardware stack levels used:    1
 26927 ;; Hardware stack levels required when called:   10
 26928 ;; This function calls:
 26929 ;;		_RADIO_RegisterWrite
 26930 ;;		___lldiv
 26931 ;; This function is called by:
 26932 ;;		_RADIO_WriteConfiguration
 26933 ;; This function uses a non-reentrant model
 26934 ;;
 26935                           
 26936                           	psect	text137
 26937  006598                     __ptext137:
 26938                           	opt stack 0
 26939  006598                     _RADIO_WriteFSKFrequencyDeviation:
 26940                           	opt stack 16
 26941                           
 26942                           ; BSR set to: 1
 26943                           ;radio_driver_SX1276.c: 296: uint32_t num;
 26944                           ;radio_driver_SX1276.c: 303: num = frequencyDeviation;
 26945                           
 26946                           ;incstack = 0
 26947  006598  C071  F075         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation,RADIO_WriteFSKFrequencyDeviat
      +                          ion@num
 26948  00659C  C072  F076         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+1,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+1
 26949  0065A0  C073  F077         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+2,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+2
 26950  0065A4  C074  F078         	movff	RADIO_WriteFSKFrequencyDeviation@frequencyDeviation+3,RADIO_WriteFSKFrequencyDevi
      +                          ation@num+3
 26951                           
 26952                           ; BSR set to: 1
 26953                           ;radio_driver_SX1276.c: 304: num <<= (8);
 26954  0065A8  C077  F078         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,RADIO_WriteFSKFrequencyDeviation@num+3
 26955  0065AC  C076  F077         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_WriteFSKFrequencyDeviation@num+2
 26956  0065B0  C075  F076         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_WriteFSKFrequencyDeviation@num+1
 26957  0065B4  0100               	movlb	0	; () banked
 26958  0065B6  6B75               	clrf	RADIO_WriteFSKFrequencyDeviation@num& (0+255),b
 26959                           
 26960                           ; BSR set to: 0
 26961                           ;radio_driver_SX1276.c: 305: num /= 15625;
 26962  0065B8  C075  F064         	movff	RADIO_WriteFSKFrequencyDeviation@num,___lldiv@dividend
 26963  0065BC  C076  F065         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,___lldiv@dividend+1
 26964  0065C0  C077  F066         	movff	RADIO_WriteFSKFrequencyDeviation@num+2,___lldiv@dividend+2
 26965  0065C4  C078  F067         	movff	RADIO_WriteFSKFrequencyDeviation@num+3,___lldiv@dividend+3
 26966  0065C8  0E09               	movlw	9
 26967  0065CA  6F68               	movwf	___lldiv@divisor& (0+255),b
 26968  0065CC  0E3D               	movlw	61
 26969  0065CE  6F69               	movwf	(___lldiv@divisor+1)& (0+255),b
 26970  0065D0  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 26971  0065D2  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 26972  0065D4  ECB3  F030         	call	___lldiv	;wreg free
 26973  0065D8  C064  F075         	movff	?___lldiv,RADIO_WriteFSKFrequencyDeviation@num
 26974  0065DC  C065  F076         	movff	?___lldiv+1,RADIO_WriteFSKFrequencyDeviation@num+1
 26975  0065E0  C066  F077         	movff	?___lldiv+2,RADIO_WriteFSKFrequencyDeviation@num+2
 26976  0065E4  C067  F078         	movff	?___lldiv+3,RADIO_WriteFSKFrequencyDeviation@num+3
 26977                           
 26978                           ; BSR set to: 0
 26979                           ;radio_driver_SX1276.c: 309: RADIO_RegisterWrite(0x04, (num >> (8)) & 0xFF);
 26980  0065E8  C076  F066         	movff	RADIO_WriteFSKFrequencyDeviation@num+1,RADIO_RegisterWrite@value
 26981  0065EC  0E04               	movlw	4
 26982  0065EE  EC9A  F03A         	call	_RADIO_RegisterWrite
 26983                           
 26984                           ;radio_driver_SX1276.c: 310: RADIO_RegisterWrite(0x05, num & 0xFF);
 26985  0065F2  C075  F066         	movff	RADIO_WriteFSKFrequencyDeviation@num,RADIO_RegisterWrite@value
 26986  0065F6  0E05               	movlw	5
 26987  0065F8  EF9A  F03A         	goto	_RADIO_RegisterWrite
 26988  0065FC                     __end_of_RADIO_WriteFSKFrequencyDeviation:
 26989                           	opt stack 0
 26990                           tosu	equ	0xFFF
 26991                           tosh	equ	0xFFE
 26992                           tosl	equ	0xFFD
 26993                           pclath	equ	0xFFA
 26994                           tblptru	equ	0xFF8
 26995                           tblptrh	equ	0xFF7
 26996                           tblptrl	equ	0xFF6
 26997                           tablat	equ	0xFF5
 26998                           prodh	equ	0xFF4
 26999                           prodl	equ	0xFF3
 27000                           intcon	equ	0xFF2
 27001                           indf0	equ	0xFEF
 27002                           postinc0	equ	0xFEE
 27003                           fsr0h	equ	0xFEA
 27004                           fsr0l	equ	0xFE9
 27005                           wreg	equ	0xFE8
 27006                           postinc1	equ	0xFE6
 27007                           postdec1	equ	0xFE5
 27008                           plusw1	equ	0xFE3
 27009                           fsr1h	equ	0xFE2
 27010                           fsr1l	equ	0xFE1
 27011                           indf2	equ	0xFDF
 27012                           postinc2	equ	0xFDE
 27013                           postdec2	equ	0xFDD
 27014                           plusw2	equ	0xFDB
 27015                           fsr2h	equ	0xFDA
 27016                           fsr2l	equ	0xFD9
 27017                           status	equ	0xFD8
 27018                           
 27019 ;; *************** function _RADIO_WriteFSKBitRate *****************
 27020 ;; Defined at:
 27021 ;;		line 316 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 27022 ;; Parameters:    Size  Location     Type
 27023 ;;  bitRate         4   17[BANK0 ] unsigned long 
 27024 ;; Auto vars:     Size  Location     Type
 27025 ;;  num             4   21[BANK0 ] unsigned long 
 27026 ;; Return value:  Size  Location     Type
 27027 ;;                  1    wreg      void 
 27028 ;; Registers used:
 27029 ;;		wreg, status,2, status,0, cstack
 27030 ;; Tracked objects:
 27031 ;;		On entry : 1/0
 27032 ;;		On exit  : 1/0
 27033 ;;		Unchanged: 0/0
 27034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27035 ;;      Params:         0       4       0       0       0       0       0       0       0
 27036 ;;      Locals:         0       4       0       0       0       0       0       0       0
 27037 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27038 ;;      Totals:         0       8       0       0       0       0       0       0       0
 27039 ;;Total ram usage:        8 bytes
 27040 ;; Hardware stack levels used:    1
 27041 ;; Hardware stack levels required when called:   10
 27042 ;; This function calls:
 27043 ;;		_RADIO_RegisterWrite
 27044 ;;		___lldiv
 27045 ;; This function is called by:
 27046 ;;		_RADIO_WriteConfiguration
 27047 ;; This function uses a non-reentrant model
 27048 ;;
 27049                           
 27050                           	psect	text138
 27051  0065FC                     __ptext138:
 27052                           	opt stack 0
 27053  0065FC                     _RADIO_WriteFSKBitRate:
 27054                           	opt stack 16
 27055                           
 27056                           ;radio_driver_SX1276.c: 318: uint32_t num;
 27057                           ;radio_driver_SX1276.c: 320: num = 32000000;
 27058                           
 27059                           ;incstack = 0
 27060  0065FC  0100               	movlb	0	; () banked
 27061  0065FE  6B75               	clrf	RADIO_WriteFSKBitRate@num& (0+255),b
 27062  006600  0E48               	movlw	72
 27063  006602  6F76               	movwf	(RADIO_WriteFSKBitRate@num+1)& (0+255),b
 27064  006604  0EE8               	movlw	232
 27065  006606  6F77               	movwf	(RADIO_WriteFSKBitRate@num+2)& (0+255),b
 27066  006608  0E01               	movlw	1
 27067  00660A  6F78               	movwf	(RADIO_WriteFSKBitRate@num+3)& (0+255),b
 27068                           
 27069                           ; BSR set to: 0
 27070                           ;radio_driver_SX1276.c: 321: num /= bitRate;
 27071  00660C  C075  F064         	movff	RADIO_WriteFSKBitRate@num,___lldiv@dividend
 27072  006610  C076  F065         	movff	RADIO_WriteFSKBitRate@num+1,___lldiv@dividend+1
 27073  006614  C077  F066         	movff	RADIO_WriteFSKBitRate@num+2,___lldiv@dividend+2
 27074  006618  C078  F067         	movff	RADIO_WriteFSKBitRate@num+3,___lldiv@dividend+3
 27075  00661C  C071  F068         	movff	RADIO_WriteFSKBitRate@bitRate,___lldiv@divisor
 27076  006620  C072  F069         	movff	RADIO_WriteFSKBitRate@bitRate+1,___lldiv@divisor+1
 27077  006624  C073  F06A         	movff	RADIO_WriteFSKBitRate@bitRate+2,___lldiv@divisor+2
 27078  006628  C074  F06B         	movff	RADIO_WriteFSKBitRate@bitRate+3,___lldiv@divisor+3
 27079  00662C  ECB3  F030         	call	___lldiv	;wreg free
 27080  006630  C064  F075         	movff	?___lldiv,RADIO_WriteFSKBitRate@num
 27081  006634  C065  F076         	movff	?___lldiv+1,RADIO_WriteFSKBitRate@num+1
 27082  006638  C066  F077         	movff	?___lldiv+2,RADIO_WriteFSKBitRate@num+2
 27083  00663C  C067  F078         	movff	?___lldiv+3,RADIO_WriteFSKBitRate@num+3
 27084                           
 27085                           ; BSR set to: 0
 27086                           ;radio_driver_SX1276.c: 325: RADIO_RegisterWrite(0x02, (num >> (8)) & 0xFF);
 27087  006640  C076  F066         	movff	RADIO_WriteFSKBitRate@num+1,RADIO_RegisterWrite@value
 27088  006644  0E02               	movlw	2
 27089  006646  EC9A  F03A         	call	_RADIO_RegisterWrite
 27090                           
 27091                           ;radio_driver_SX1276.c: 326: RADIO_RegisterWrite(0x03, num & 0xFF);
 27092  00664A  C075  F066         	movff	RADIO_WriteFSKBitRate@num,RADIO_RegisterWrite@value
 27093  00664E  0E03               	movlw	3
 27094  006650  EC9A  F03A         	call	_RADIO_RegisterWrite
 27095                           
 27096                           ;radio_driver_SX1276.c: 327: RADIO_RegisterWrite(0x5D, 0x00);
 27097  006654  0100               	movlb	0	; () banked
 27098  006656  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 27099  006658  0E5D               	movlw	93
 27100  00665A  EF9A  F03A         	goto	_RADIO_RegisterWrite
 27101  00665E                     __end_of_RADIO_WriteFSKBitRate:
 27102                           	opt stack 0
 27103                           tosu	equ	0xFFF
 27104                           tosh	equ	0xFFE
 27105                           tosl	equ	0xFFD
 27106                           pclath	equ	0xFFA
 27107                           tblptru	equ	0xFF8
 27108                           tblptrh	equ	0xFF7
 27109                           tblptrl	equ	0xFF6
 27110                           tablat	equ	0xFF5
 27111                           prodh	equ	0xFF4
 27112                           prodl	equ	0xFF3
 27113                           intcon	equ	0xFF2
 27114                           indf0	equ	0xFEF
 27115                           postinc0	equ	0xFEE
 27116                           fsr0h	equ	0xFEA
 27117                           fsr0l	equ	0xFE9
 27118                           wreg	equ	0xFE8
 27119                           postinc1	equ	0xFE6
 27120                           postdec1	equ	0xFE5
 27121                           plusw1	equ	0xFE3
 27122                           fsr1h	equ	0xFE2
 27123                           fsr1l	equ	0xFE1
 27124                           indf2	equ	0xFDF
 27125                           postinc2	equ	0xFDE
 27126                           postdec2	equ	0xFDD
 27127                           plusw2	equ	0xFDB
 27128                           fsr2h	equ	0xFDA
 27129                           fsr2l	equ	0xFD9
 27130                           status	equ	0xFD8
 27131                           
 27132 ;; *************** function _PrepareJoinRequestFrame *****************
 27133 ;; Defined at:
 27134 ;;		line 1806 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27135 ;; Parameters:    Size  Location     Type
 27136 ;;		None
 27137 ;; Auto vars:     Size  Location     Type
 27138 ;;  mic             4  133[BANK0 ] unsigned long 
 27139 ;;  iCtr            1  139[BANK0 ] unsigned char 
 27140 ;;  bufferIndex     1  138[BANK0 ] unsigned char 
 27141 ;;  mhdr            1  137[BANK0 ] struct .
 27142 ;; Return value:  Size  Location     Type
 27143 ;;                  1    wreg      unsigned char 
 27144 ;; Registers used:
 27145 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27146 ;; Tracked objects:
 27147 ;;		On entry : F/2
 27148 ;;		On exit  : F/0
 27149 ;;		Unchanged: 0/0
 27150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27151 ;;      Params:         0       0       0       0       0       0       0       0       0
 27152 ;;      Locals:         0       7       0       0       0       0       0       0       0
 27153 ;;      Temps:          0       2       0       0       0       0       0       0       0
 27154 ;;      Totals:         0       9       0       0       0       0       0       0       0
 27155 ;;Total ram usage:        9 bytes
 27156 ;; Hardware stack levels used:    1
 27157 ;; Hardware stack levels required when called:   13
 27158 ;; This function calls:
 27159 ;;		_ComputeMic
 27160 ;;		_Random
 27161 ;;		_memcpy
 27162 ;;		_memset
 27163 ;; This function is called by:
 27164 ;;		_LORAWAN_Join
 27165 ;; This function uses a non-reentrant model
 27166 ;;
 27167                           
 27168                           	psect	text139
 27169  004686                     __ptext139:
 27170                           	opt stack 0
 27171  004686                     _PrepareJoinRequestFrame:
 27172                           	opt stack 16
 27173                           
 27174                           ; BSR set to: 2
 27175                           ;lorawan.c: 1808: uint8_t bufferIndex = 0, iCtr;
 27176                           
 27177                           ;incstack = 0
 27178  004686  0100               	movlb	0	; () banked
 27179  004688  6BEA               	clrf	PrepareJoinRequestFrame@bufferIndex& (0+255),b
 27180                           
 27181                           ; BSR set to: 0
 27182                           ;lorawan.c: 1809: Mhdr_t mhdr;
 27183                           ;lorawan.c: 1810: uint32_t mic;
 27184                           ;lorawan.c: 1812: memset (macBuffer, 0, sizeof(macBuffer) );
 27185  00468A  0EE0               	movlw	low _macBuffer
 27186  00468C  6F64               	movwf	memset@p1& (0+255),b
 27187  00468E  0E04               	movlw	high _macBuffer
 27188  004690  6F65               	movwf	(memset@p1+1)& (0+255),b
 27189  004692  6B67               	clrf	(memset@c+1)& (0+255),b
 27190  004694  6B66               	clrf	memset@c& (0+255),b
 27191  004696  0E01               	movlw	1
 27192  004698  6F69               	movwf	(memset@n+1)& (0+255),b
 27193  00469A  0E0F               	movlw	15
 27194  00469C  6F68               	movwf	memset@n& (0+255),b
 27195  00469E  EC60  F039         	call	_memset	;wreg free
 27196                           
 27197                           ; BSR set to: 0
 27198                           ;lorawan.c: 1814: mhdr.bits.mType = FRAME_TYPE_JOIN_REQ;
 27199  0046A2  0E1F               	movlw	-225
 27200  0046A4  17E9               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27201                           
 27202                           ; BSR set to: 0
 27203                           ;lorawan.c: 1815: mhdr.bits.major = 0;
 27204  0046A6  0EFC               	movlw	-4
 27205  0046A8  17E9               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27206                           
 27207                           ; BSR set to: 0
 27208                           ;lorawan.c: 1816: mhdr.bits.rfu = 0;
 27209  0046AA  0EE3               	movlw	-29
 27210  0046AC  17E9               	andwf	PrepareJoinRequestFrame@mhdr& (0+255),f,b
 27211                           
 27212                           ; BSR set to: 0
 27213                           ;lorawan.c: 1818: macBuffer[bufferIndex++] = mhdr.value;
 27214  0046AE  EE24  F0E0         	lfsr	2,_macBuffer
 27215  0046B2  C0E9  FFDF         	movff	PrepareJoinRequestFrame@mhdr,indf2
 27216                           
 27217                           ; BSR set to: 0
 27218  0046B6  2BEA               	incf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27219                           
 27220                           ; BSR set to: 0
 27221                           ;lorawan.c: 1820: for(iCtr = 0; iCtr < 8; iCtr ++)
 27222  0046B8  6BEB               	clrf	PrepareJoinRequestFrame@iCtr& (0+255),b
 27223  0046BA                     l15690:
 27224                           
 27225                           ; BSR set to: 0
 27226                           ;lorawan.c: 1821: {
 27227                           ;lorawan.c: 1822: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.applicationE
      +                          ui.buffer[7 - iCtr];
 27228  0046BA  51EB               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27229  0046BC  0859               	sublw	low (_loRa+89)
 27230  0046BE  6ED9               	movwf	fsr2l,c
 27231  0046C0  0E00               	movlw	0
 27232  0046C2  A0D8               	btfss	status,0,c
 27233  0046C4  2AE8               	incf	wreg,f,c
 27234  0046C6  0802               	sublw	high (_loRa+89)
 27235  0046C8  6EDA               	movwf	fsr2h,c
 27236  0046CA  0EE0               	movlw	low _macBuffer
 27237  0046CC  6FE3               	movwf	??_PrepareJoinRequestFrame& (0+255),b
 27238  0046CE  0E04               	movlw	high _macBuffer
 27239  0046D0  6FE4               	movwf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 27240  0046D2  51EA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27241  0046D4  27E3               	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 27242  0046D6  0E00               	movlw	0
 27243  0046D8  23E4               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 27244  0046DA  51EB               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27245  0046DC  25E3               	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 27246  0046DE  6EE9               	movwf	fsr0l,c
 27247  0046E0  0E00               	movlw	0
 27248  0046E2  21E4               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 27249  0046E4  6EEA               	movwf	fsr0h,c
 27250  0046E6  CFDF FFEF          	movff	indf2,indf0
 27251                           
 27252                           ; BSR set to: 0
 27253  0046EA  2BEB               	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 27254                           
 27255                           ; BSR set to: 0
 27256  0046EC  0E07               	movlw	7
 27257  0046EE  65EB               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 27258  0046F0  D7E4               	goto	l15690
 27259                           
 27260                           ; BSR set to: 0
 27261                           ;lorawan.c: 1823: }
 27262                           ;lorawan.c: 1824: bufferIndex = bufferIndex + sizeof(loRa.activationParameters.applicati
      +                          onEui);
 27263  0046F2  0E08               	movlw	8
 27264  0046F4  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27265                           
 27266                           ; BSR set to: 0
 27267                           ;lorawan.c: 1827: for (iCtr = 0; iCtr < 8; iCtr ++)
 27268  0046F6  6BEB               	clrf	PrepareJoinRequestFrame@iCtr& (0+255),b
 27269  0046F8                     l15702:
 27270                           
 27271                           ; BSR set to: 0
 27272                           ;lorawan.c: 1828: {
 27273                           ;lorawan.c: 1829: macBuffer[bufferIndex + iCtr] = loRa.activationParameters.deviceEui.bu
      +                          ffer[7 - iCtr];
 27274  0046F8  51EB               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27275  0046FA  0861               	sublw	low (_loRa+97)
 27276  0046FC  6ED9               	movwf	fsr2l,c
 27277  0046FE  0E00               	movlw	0
 27278  004700  A0D8               	btfss	status,0,c
 27279  004702  2AE8               	incf	wreg,f,c
 27280  004704  0802               	sublw	high (_loRa+97)
 27281  004706  6EDA               	movwf	fsr2h,c
 27282  004708  0EE0               	movlw	low _macBuffer
 27283  00470A  6FE3               	movwf	??_PrepareJoinRequestFrame& (0+255),b
 27284  00470C  0E04               	movlw	high _macBuffer
 27285  00470E  6FE4               	movwf	(??_PrepareJoinRequestFrame+1)& (0+255),b
 27286  004710  51EA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27287  004712  27E3               	addwf	??_PrepareJoinRequestFrame& (0+255),f,b
 27288  004714  0E00               	movlw	0
 27289  004716  23E4               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),f,b
 27290  004718  51EB               	movf	PrepareJoinRequestFrame@iCtr& (0+255),w,b
 27291  00471A  25E3               	addwf	??_PrepareJoinRequestFrame& (0+255),w,b
 27292  00471C  6EE9               	movwf	fsr0l,c
 27293  00471E  0E00               	movlw	0
 27294  004720  21E4               	addwfc	(??_PrepareJoinRequestFrame+1)& (0+255),w,b
 27295  004722  6EEA               	movwf	fsr0h,c
 27296  004724  CFDF FFEF          	movff	indf2,indf0
 27297                           
 27298                           ; BSR set to: 0
 27299  004728  2BEB               	incf	PrepareJoinRequestFrame@iCtr& (0+255),f,b
 27300                           
 27301                           ; BSR set to: 0
 27302  00472A  0E07               	movlw	7
 27303  00472C  65EB               	cpfsgt	PrepareJoinRequestFrame@iCtr& (0+255),b
 27304  00472E  D7E4               	goto	l15702
 27305                           
 27306                           ; BSR set to: 0
 27307                           ;lorawan.c: 1830: }
 27308                           ;lorawan.c: 1831: bufferIndex = bufferIndex + sizeof( loRa.activationParameters.deviceEu
      +                          i );
 27309  004730  0E08               	movlw	8
 27310  004732  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27311                           
 27312                           ; BSR set to: 0
 27313                           ;lorawan.c: 1833: loRa.devNonce = Random ((65535U));
 27314  004734  6978               	setf	(Random@max+1)& (0+255),b
 27315  004736  6977               	setf	Random@max& (0+255),b
 27316  004738  EC1C  F03A         	call	_Random	;wreg free
 27317  00473C  C077  F2D2         	movff	?_Random,_loRa+210
 27318  004740  C078  F2D3         	movff	?_Random+1,_loRa+211
 27319                           
 27320                           ; BSR set to: 0
 27321                           ;lorawan.c: 1834: memcpy (&macBuffer[bufferIndex], &loRa.devNonce, sizeof (loRa.devNonce
      +                          ) );
 27322  004744  0EE0               	movlw	low _macBuffer
 27323  004746  25EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27324  004748  6F64               	movwf	memcpy@d1& (0+255),b
 27325  00474A  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 27326  00474C  0E04               	movlw	high _macBuffer
 27327  00474E  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 27328  004750  0ED2               	movlw	low (_loRa+210)
 27329  004752  6F66               	movwf	memcpy@s1& (0+255),b
 27330  004754  0E02               	movlw	high (_loRa+210)
 27331  004756  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 27332  004758  6B69               	clrf	(memcpy@n+1)& (0+255),b
 27333  00475A  0E02               	movlw	2
 27334  00475C  6F68               	movwf	memcpy@n& (0+255),b
 27335  00475E  EC73  F034         	call	_memcpy	;wreg free
 27336                           
 27337                           ; BSR set to: 0
 27338                           ;lorawan.c: 1835: bufferIndex = bufferIndex + sizeof( loRa.devNonce );
 27339  004762  0E02               	movlw	2
 27340  004764  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27341                           
 27342                           ; BSR set to: 0
 27343                           ;lorawan.c: 1837: mic = ComputeMic (loRa.activationParameters.applicationKey, macBuffer,
      +                           bufferIndex);
 27344  004766  0E42               	movlw	low (_loRa+66)
 27345  004768  6FDA               	movwf	ComputeMic@key& (0+255),b
 27346  00476A  0E02               	movlw	high (_loRa+66)
 27347  00476C  6FDB               	movwf	(ComputeMic@key+1)& (0+255),b
 27348  00476E  0EE0               	movlw	low _macBuffer
 27349  004770  6FDC               	movwf	ComputeMic@buffer& (0+255),b
 27350  004772  0E04               	movlw	high _macBuffer
 27351  004774  6FDD               	movwf	(ComputeMic@buffer+1)& (0+255),b
 27352  004776  C0EA  F0DE         	movff	PrepareJoinRequestFrame@bufferIndex,ComputeMic@bufferLength
 27353  00477A  ECC7  F034         	call	_ComputeMic	;wreg free
 27354  00477E  C0DA  F0E5         	movff	?_ComputeMic,PrepareJoinRequestFrame@mic
 27355  004782  C0DB  F0E6         	movff	?_ComputeMic+1,PrepareJoinRequestFrame@mic+1
 27356  004786  C0DC  F0E7         	movff	?_ComputeMic+2,PrepareJoinRequestFrame@mic+2
 27357  00478A  C0DD  F0E8         	movff	?_ComputeMic+3,PrepareJoinRequestFrame@mic+3
 27358                           
 27359                           ; BSR set to: 0
 27360                           ;lorawan.c: 1839: memcpy ( &macBuffer[bufferIndex], &mic, sizeof (mic));
 27361  00478E  0EE0               	movlw	low _macBuffer
 27362  004790  25EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27363  004792  6F64               	movwf	memcpy@d1& (0+255),b
 27364  004794  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 27365  004796  0E04               	movlw	high _macBuffer
 27366  004798  2365               	addwfc	(memcpy@d1+1)& (0+255),f,b
 27367  00479A  0EE5               	movlw	low PrepareJoinRequestFrame@mic
 27368  00479C  6F66               	movwf	memcpy@s1& (0+255),b
 27369  00479E  6B67               	clrf	(memcpy@s1+1)& (0+255),b
 27370  0047A0  6B69               	clrf	(memcpy@n+1)& (0+255),b
 27371  0047A2  0E04               	movlw	4
 27372  0047A4  6F68               	movwf	memcpy@n& (0+255),b
 27373  0047A6  EC73  F034         	call	_memcpy	;wreg free
 27374                           
 27375                           ; BSR set to: 0
 27376                           ;lorawan.c: 1840: bufferIndex = bufferIndex + sizeof(mic);
 27377  0047AA  0E04               	movlw	4
 27378  0047AC  27EA               	addwf	PrepareJoinRequestFrame@bufferIndex& (0+255),f,b
 27379                           
 27380                           ; BSR set to: 0
 27381                           ;lorawan.c: 1842: return bufferIndex;
 27382  0047AE  51EA               	movf	PrepareJoinRequestFrame@bufferIndex& (0+255),w,b
 27383                           
 27384                           ; BSR set to: 0
 27385  0047B0  0012               	return		;funcret
 27386  0047B2                     __end_of_PrepareJoinRequestFrame:
 27387                           	opt stack 0
 27388                           tosu	equ	0xFFF
 27389                           tosh	equ	0xFFE
 27390                           tosl	equ	0xFFD
 27391                           pclath	equ	0xFFA
 27392                           tblptru	equ	0xFF8
 27393                           tblptrh	equ	0xFF7
 27394                           tblptrl	equ	0xFF6
 27395                           tablat	equ	0xFF5
 27396                           prodh	equ	0xFF4
 27397                           prodl	equ	0xFF3
 27398                           intcon	equ	0xFF2
 27399                           indf0	equ	0xFEF
 27400                           postinc0	equ	0xFEE
 27401                           fsr0h	equ	0xFEA
 27402                           fsr0l	equ	0xFE9
 27403                           wreg	equ	0xFE8
 27404                           postinc1	equ	0xFE6
 27405                           postdec1	equ	0xFE5
 27406                           plusw1	equ	0xFE3
 27407                           fsr1h	equ	0xFE2
 27408                           fsr1l	equ	0xFE1
 27409                           indf2	equ	0xFDF
 27410                           postinc2	equ	0xFDE
 27411                           postdec2	equ	0xFDD
 27412                           plusw2	equ	0xFDB
 27413                           fsr2h	equ	0xFDA
 27414                           fsr2l	equ	0xFD9
 27415                           status	equ	0xFD8
 27416                           
 27417 ;; *************** function _Random *****************
 27418 ;; Defined at:
 27419 ;;		line 1116 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27420 ;; Parameters:    Size  Location     Type
 27421 ;;  max             2   23[BANK0 ] unsigned int 
 27422 ;; Auto vars:     Size  Location     Type
 27423 ;;		None
 27424 ;; Return value:  Size  Location     Type
 27425 ;;                  2   23[BANK0 ] unsigned int 
 27426 ;; Registers used:
 27427 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 27428 ;; Tracked objects:
 27429 ;;		On entry : F/0
 27430 ;;		On exit  : F/0
 27431 ;;		Unchanged: 0/0
 27432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27433 ;;      Params:         0       2       0       0       0       0       0       0       0
 27434 ;;      Locals:         0       0       0       0       0       0       0       0       0
 27435 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27436 ;;      Totals:         0       2       0       0       0       0       0       0       0
 27437 ;;Total ram usage:        2 bytes
 27438 ;; Hardware stack levels used:    1
 27439 ;; Hardware stack levels required when called:    9
 27440 ;; This function calls:
 27441 ;;		___lwmod
 27442 ;;		_rand
 27443 ;; This function is called by:
 27444 ;;		_SearchAvailableChannel
 27445 ;;		_PrepareJoinRequestFrame
 27446 ;; This function uses a non-reentrant model
 27447 ;;
 27448                           
 27449                           	psect	text140
 27450  007438                     __ptext140:
 27451                           	opt stack 0
 27452  007438                     _Random:
 27453                           	opt stack 17
 27454                           
 27455                           ; BSR set to: 0
 27456                           ;lorawan.c: 1118: return (rand () % max);
 27457                           
 27458                           ; BSR set to: 0
 27459                           ;incstack = 0
 27460  007438  EC40  F035         	call	_rand	;wreg free
 27461  00743C  C070  F072         	movff	?_rand,___lwmod@dividend
 27462  007440  C071  F073         	movff	?_rand+1,___lwmod@dividend+1
 27463  007444  C077  F074         	movff	Random@max,___lwmod@divisor
 27464  007448  C078  F075         	movff	Random@max+1,___lwmod@divisor+1
 27465  00744C  EC2A  F037         	call	___lwmod	;wreg free
 27466  007450  C072  F077         	movff	?___lwmod,?_Random
 27467  007454  C073  F078         	movff	?___lwmod+1,?_Random+1
 27468                           
 27469                           ; BSR set to: 0
 27470  007458  0012               	return		;funcret
 27471  00745A                     __end_of_Random:
 27472                           	opt stack 0
 27473                           tosu	equ	0xFFF
 27474                           tosh	equ	0xFFE
 27475                           tosl	equ	0xFFD
 27476                           pclath	equ	0xFFA
 27477                           tblptru	equ	0xFF8
 27478                           tblptrh	equ	0xFF7
 27479                           tblptrl	equ	0xFF6
 27480                           tablat	equ	0xFF5
 27481                           prodh	equ	0xFF4
 27482                           prodl	equ	0xFF3
 27483                           intcon	equ	0xFF2
 27484                           indf0	equ	0xFEF
 27485                           postinc0	equ	0xFEE
 27486                           fsr0h	equ	0xFEA
 27487                           fsr0l	equ	0xFE9
 27488                           wreg	equ	0xFE8
 27489                           postinc1	equ	0xFE6
 27490                           postdec1	equ	0xFE5
 27491                           plusw1	equ	0xFE3
 27492                           fsr1h	equ	0xFE2
 27493                           fsr1l	equ	0xFE1
 27494                           indf2	equ	0xFDF
 27495                           postinc2	equ	0xFDE
 27496                           postdec2	equ	0xFDD
 27497                           plusw2	equ	0xFDB
 27498                           fsr2h	equ	0xFDA
 27499                           fsr2l	equ	0xFD9
 27500                           status	equ	0xFD8
 27501                           
 27502 ;; *************** function _rand *****************
 27503 ;; Defined at:
 27504 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\rand.c"
 27505 ;; Parameters:    Size  Location     Type
 27506 ;;		None
 27507 ;; Auto vars:     Size  Location     Type
 27508 ;;		None
 27509 ;; Return value:  Size  Location     Type
 27510 ;;                  2   16[BANK0 ] int 
 27511 ;; Registers used:
 27512 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 27513 ;; Tracked objects:
 27514 ;;		On entry : F/0
 27515 ;;		On exit  : F/0
 27516 ;;		Unchanged: 0/0
 27517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27518 ;;      Params:         0       2       0       0       0       0       0       0       0
 27519 ;;      Locals:         0       0       0       0       0       0       0       0       0
 27520 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27521 ;;      Totals:         0       2       0       0       0       0       0       0       0
 27522 ;;Total ram usage:        2 bytes
 27523 ;; Hardware stack levels used:    1
 27524 ;; Hardware stack levels required when called:    8
 27525 ;; This function calls:
 27526 ;;		___lmul
 27527 ;; This function is called by:
 27528 ;;		_Random
 27529 ;; This function uses a non-reentrant model
 27530 ;;
 27531                           
 27532                           	psect	text141
 27533  006A80                     __ptext141:
 27534                           	opt stack 0
 27535  006A80                     _rand:
 27536                           	opt stack 17
 27537                           
 27538                           ; BSR set to: 0
 27539                           
 27540                           ; BSR set to: 0
 27541                           ;incstack = 0
 27542  006A80  C056  F064         	movff	_randx,___lmul@multiplier
 27543  006A84  C057  F065         	movff	_randx+1,___lmul@multiplier+1
 27544  006A88  C058  F066         	movff	_randx+2,___lmul@multiplier+2
 27545  006A8C  C059  F067         	movff	_randx+3,___lmul@multiplier+3
 27546  006A90  0E6D               	movlw	109
 27547  006A92  6F68               	movwf	___lmul@multiplicand& (0+255),b
 27548  006A94  0E4E               	movlw	78
 27549  006A96  6F69               	movwf	(___lmul@multiplicand+1)& (0+255),b
 27550  006A98  0EC6               	movlw	198
 27551  006A9A  6F6A               	movwf	(___lmul@multiplicand+2)& (0+255),b
 27552  006A9C  0E41               	movlw	65
 27553  006A9E  6F6B               	movwf	(___lmul@multiplicand+3)& (0+255),b
 27554  006AA0  ECF7  F02E         	call	___lmul	;wreg free
 27555  006AA4  C064  F056         	movff	?___lmul,_randx
 27556  006AA8  C065  F057         	movff	?___lmul+1,_randx+1
 27557  006AAC  C066  F058         	movff	?___lmul+2,_randx+2
 27558  006AB0  C067  F059         	movff	?___lmul+3,_randx+3
 27559                           
 27560                           ; BSR set to: 0
 27561  006AB4  0E39               	movlw	57
 27562  006AB6  2656               	addwf	_randx,f,c
 27563  006AB8  0E30               	movlw	48
 27564  006ABA  2257               	addwfc	_randx+1,f,c
 27565  006ABC  0E00               	movlw	0
 27566  006ABE  2258               	addwfc	_randx+2,f,c
 27567  006AC0  2259               	addwfc	_randx+3,f,c
 27568                           
 27569                           ; BSR set to: 0
 27570  006AC2  5058               	movf	_randx+2,w,c
 27571  006AC4  6F70               	movwf	?_rand& (0+255),b
 27572  006AC6  0E7F               	movlw	127
 27573  006AC8  1459               	andwf	_randx+3,w,c
 27574  006ACA  6F71               	movwf	(?_rand+1)& (0+255),b
 27575                           
 27576                           ; BSR set to: 0
 27577  006ACC  0012               	return		;funcret
 27578  006ACE                     __end_of_rand:
 27579                           	opt stack 0
 27580                           tosu	equ	0xFFF
 27581                           tosh	equ	0xFFE
 27582                           tosl	equ	0xFFD
 27583                           pclath	equ	0xFFA
 27584                           tblptru	equ	0xFF8
 27585                           tblptrh	equ	0xFF7
 27586                           tblptrl	equ	0xFF6
 27587                           tablat	equ	0xFF5
 27588                           prodh	equ	0xFF4
 27589                           prodl	equ	0xFF3
 27590                           intcon	equ	0xFF2
 27591                           indf0	equ	0xFEF
 27592                           postinc0	equ	0xFEE
 27593                           fsr0h	equ	0xFEA
 27594                           fsr0l	equ	0xFE9
 27595                           wreg	equ	0xFE8
 27596                           postinc1	equ	0xFE6
 27597                           postdec1	equ	0xFE5
 27598                           plusw1	equ	0xFE3
 27599                           fsr1h	equ	0xFE2
 27600                           fsr1l	equ	0xFE1
 27601                           indf2	equ	0xFDF
 27602                           postinc2	equ	0xFDE
 27603                           postdec2	equ	0xFDD
 27604                           plusw2	equ	0xFDB
 27605                           fsr2h	equ	0xFDA
 27606                           fsr2l	equ	0xFD9
 27607                           status	equ	0xFD8
 27608                           
 27609 ;; *************** function ___lmul *****************
 27610 ;; Defined at:
 27611 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
 27612 ;; Parameters:    Size  Location     Type
 27613 ;;  multiplier      4    4[BANK0 ] unsigned long 
 27614 ;;  multiplicand    4    8[BANK0 ] unsigned long 
 27615 ;; Auto vars:     Size  Location     Type
 27616 ;;  product         4   12[BANK0 ] unsigned long 
 27617 ;; Return value:  Size  Location     Type
 27618 ;;                  4    4[BANK0 ] unsigned long 
 27619 ;; Registers used:
 27620 ;;		wreg, status,2, status,0, prodl, prodh
 27621 ;; Tracked objects:
 27622 ;;		On entry : F/0
 27623 ;;		On exit  : F/0
 27624 ;;		Unchanged: 0/0
 27625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27626 ;;      Params:         0       8       0       0       0       0       0       0       0
 27627 ;;      Locals:         0       4       0       0       0       0       0       0       0
 27628 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27629 ;;      Totals:         0      12       0       0       0       0       0       0       0
 27630 ;;Total ram usage:       12 bytes
 27631 ;; Hardware stack levels used:    1
 27632 ;; Hardware stack levels required when called:    7
 27633 ;; This function calls:
 27634 ;;		Nothing
 27635 ;; This function is called by:
 27636 ;;		_RADIO_WriteConfiguration
 27637 ;;		_ExecuteNewChannel
 27638 ;;		_ExecuteRxParamSetupReq
 27639 ;;		_UpdateCfList
 27640 ;;		_rand
 27641 ;; This function uses a non-reentrant model
 27642 ;;
 27643                           
 27644                           	psect	text142
 27645  005DEE                     __ptext142:
 27646                           	opt stack 0
 27647  005DEE                     ___lmul:
 27648                           	opt stack 17
 27649                           
 27650                           ; BSR set to: 0
 27651                           
 27652                           ; BSR set to: 0
 27653                           ;incstack = 0
 27654  005DEE  5164               	movf	___lmul@multiplier& (0+255),w,b
 27655  005DF0  0368               	mulwf	___lmul@multiplicand& (0+255),b
 27656  005DF2  CFF3 F06C          	movff	prodl,___lmul@product
 27657  005DF6  CFF4 F06D          	movff	prodh,___lmul@product+1
 27658  005DFA  6B6E               	clrf	(___lmul@product+2)& (0+255),b
 27659  005DFC  6B6F               	clrf	(___lmul@product+3)& (0+255),b
 27660  005DFE  5164               	movf	___lmul@multiplier& (0+255),w,b
 27661  005E00  0369               	mulwf	(___lmul@multiplicand+1)& (0+255),b
 27662  005E02  50F3               	movf	prodl,w,c
 27663  005E04  276D               	addwf	(___lmul@product+1)& (0+255),f,b
 27664  005E06  50F4               	movf	prodh,w,c
 27665  005E08  236E               	addwfc	(___lmul@product+2)& (0+255),f,b
 27666  005E0A  0E00               	movlw	0
 27667  005E0C  236F               	addwfc	(___lmul@product+3)& (0+255),f,b
 27668  005E0E  5165               	movf	(___lmul@multiplier+1)& (0+255),w,b
 27669  005E10  0368               	mulwf	___lmul@multiplicand& (0+255),b
 27670  005E12  50F3               	movf	prodl,w,c
 27671  005E14  276D               	addwf	(___lmul@product+1)& (0+255),f,b
 27672  005E16  50F4               	movf	prodh,w,c
 27673  005E18  236E               	addwfc	(___lmul@product+2)& (0+255),f,b
 27674  005E1A  0E00               	movlw	0
 27675  005E1C  236F               	addwfc	(___lmul@product+3)& (0+255),f,b
 27676  005E1E  5164               	movf	___lmul@multiplier& (0+255),w,b
 27677  005E20  036A               	mulwf	(___lmul@multiplicand+2)& (0+255),b
 27678  005E22  50F3               	movf	prodl,w,c
 27679  005E24  276E               	addwf	(___lmul@product+2)& (0+255),f,b
 27680  005E26  50F4               	movf	prodh,w,c
 27681  005E28  236F               	addwfc	(___lmul@product+3)& (0+255),f,b
 27682  005E2A  5165               	movf	(___lmul@multiplier+1)& (0+255),w,b
 27683  005E2C  0369               	mulwf	(___lmul@multiplicand+1)& (0+255),b
 27684  005E2E  50F3               	movf	prodl,w,c
 27685  005E30  276E               	addwf	(___lmul@product+2)& (0+255),f,b
 27686  005E32  50F4               	movf	prodh,w,c
 27687  005E34  236F               	addwfc	(___lmul@product+3)& (0+255),f,b
 27688  005E36  5166               	movf	(___lmul@multiplier+2)& (0+255),w,b
 27689  005E38  0368               	mulwf	___lmul@multiplicand& (0+255),b
 27690  005E3A  50F3               	movf	prodl,w,c
 27691  005E3C  276E               	addwf	(___lmul@product+2)& (0+255),f,b
 27692  005E3E  50F4               	movf	prodh,w,c
 27693  005E40  236F               	addwfc	(___lmul@product+3)& (0+255),f,b
 27694  005E42  516B               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 27695  005E44  0364               	mulwf	___lmul@multiplier& (0+255),b
 27696  005E46  50F3               	movf	prodl,w,c
 27697  005E48  276F               	addwf	(___lmul@product+3)& (0+255),f,b
 27698  005E4A  5165               	movf	(___lmul@multiplier+1)& (0+255),w,b
 27699  005E4C  036A               	mulwf	(___lmul@multiplicand+2)& (0+255),b
 27700  005E4E  50F3               	movf	prodl,w,c
 27701  005E50  276F               	addwf	(___lmul@product+3)& (0+255),f,b
 27702  005E52  5166               	movf	(___lmul@multiplier+2)& (0+255),w,b
 27703  005E54  0369               	mulwf	(___lmul@multiplicand+1)& (0+255),b
 27704  005E56  50F3               	movf	prodl,w,c
 27705  005E58  276F               	addwf	(___lmul@product+3)& (0+255),f,b
 27706  005E5A  5167               	movf	(___lmul@multiplier+3)& (0+255),w,b
 27707  005E5C  0368               	mulwf	___lmul@multiplicand& (0+255),b
 27708  005E5E  50F3               	movf	prodl,w,c
 27709  005E60  276F               	addwf	(___lmul@product+3)& (0+255),f,b
 27710                           
 27711                           ; BSR set to: 0
 27712  005E62  C06C  F064         	movff	___lmul@product,?___lmul
 27713  005E66  C06D  F065         	movff	___lmul@product+1,?___lmul+1
 27714  005E6A  C06E  F066         	movff	___lmul@product+2,?___lmul+2
 27715  005E6E  C06F  F067         	movff	___lmul@product+3,?___lmul+3
 27716                           
 27717                           ; BSR set to: 0
 27718  005E72  0012               	return		;funcret
 27719  005E74                     __end_of___lmul:
 27720                           	opt stack 0
 27721                           tosu	equ	0xFFF
 27722                           tosh	equ	0xFFE
 27723                           tosl	equ	0xFFD
 27724                           pclath	equ	0xFFA
 27725                           tblptru	equ	0xFF8
 27726                           tblptrh	equ	0xFF7
 27727                           tblptrl	equ	0xFF6
 27728                           tablat	equ	0xFF5
 27729                           prodh	equ	0xFF4
 27730                           prodl	equ	0xFF3
 27731                           intcon	equ	0xFF2
 27732                           indf0	equ	0xFEF
 27733                           postinc0	equ	0xFEE
 27734                           fsr0h	equ	0xFEA
 27735                           fsr0l	equ	0xFE9
 27736                           wreg	equ	0xFE8
 27737                           postinc1	equ	0xFE6
 27738                           postdec1	equ	0xFE5
 27739                           plusw1	equ	0xFE3
 27740                           fsr1h	equ	0xFE2
 27741                           fsr1l	equ	0xFE1
 27742                           indf2	equ	0xFDF
 27743                           postinc2	equ	0xFDE
 27744                           postdec2	equ	0xFDD
 27745                           plusw2	equ	0xFDB
 27746                           fsr2h	equ	0xFDA
 27747                           fsr2l	equ	0xFD9
 27748                           status	equ	0xFD8
 27749                           
 27750 ;; *************** function ___lwmod *****************
 27751 ;; Defined at:
 27752 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
 27753 ;; Parameters:    Size  Location     Type
 27754 ;;  dividend        2   18[BANK0 ] unsigned int 
 27755 ;;  divisor         2   20[BANK0 ] unsigned int 
 27756 ;; Auto vars:     Size  Location     Type
 27757 ;;  counter         1   22[BANK0 ] unsigned char 
 27758 ;; Return value:  Size  Location     Type
 27759 ;;                  2   18[BANK0 ] unsigned int 
 27760 ;; Registers used:
 27761 ;;		wreg, status,2, status,0
 27762 ;; Tracked objects:
 27763 ;;		On entry : F/0
 27764 ;;		On exit  : F/0
 27765 ;;		Unchanged: 0/0
 27766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27767 ;;      Params:         0       4       0       0       0       0       0       0       0
 27768 ;;      Locals:         0       1       0       0       0       0       0       0       0
 27769 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27770 ;;      Totals:         0       5       0       0       0       0       0       0       0
 27771 ;;Total ram usage:        5 bytes
 27772 ;; Hardware stack levels used:    1
 27773 ;; Hardware stack levels required when called:    7
 27774 ;; This function calls:
 27775 ;;		Nothing
 27776 ;; This function is called by:
 27777 ;;		_Random
 27778 ;; This function uses a non-reentrant model
 27779 ;;
 27780                           
 27781                           	psect	text143
 27782  006E54                     __ptext143:
 27783                           	opt stack 0
 27784  006E54                     ___lwmod:
 27785                           	opt stack 18
 27786                           
 27787                           ; BSR set to: 0
 27788                           
 27789                           ; BSR set to: 0
 27790                           ;incstack = 0
 27791  006E54  5174               	movf	___lwmod@divisor& (0+255),w,b
 27792  006E56  1175               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27793  006E58  E017               	bz	l3061
 27794                           
 27795                           ; BSR set to: 0
 27796  006E5A  0E01               	movlw	1
 27797  006E5C  6F76               	movwf	___lwmod@counter& (0+255),b
 27798  006E5E  D004               	goto	l12390
 27799  006E60                     l12388:
 27800                           
 27801                           ; BSR set to: 0
 27802  006E60  90D8               	bcf	status,0,c
 27803  006E62  3774               	rlcf	___lwmod@divisor& (0+255),f,b
 27804  006E64  3775               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27805  006E66  2B76               	incf	___lwmod@counter& (0+255),f,b
 27806  006E68                     l12390:
 27807                           
 27808                           ; BSR set to: 0
 27809  006E68  AF75               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27810  006E6A  D7FA               	goto	l12388
 27811  006E6C                     l12392:
 27812                           
 27813                           ; BSR set to: 0
 27814  006E6C  5174               	movf	___lwmod@divisor& (0+255),w,b
 27815  006E6E  5D72               	subwf	___lwmod@dividend& (0+255),w,b
 27816  006E70  5175               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27817  006E72  5973               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27818  006E74  E304               	bnc	l12396
 27819                           
 27820                           ; BSR set to: 0
 27821  006E76  5174               	movf	___lwmod@divisor& (0+255),w,b
 27822  006E78  5F72               	subwf	___lwmod@dividend& (0+255),f,b
 27823  006E7A  5175               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27824  006E7C  5B73               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27825  006E7E                     l12396:
 27826                           
 27827                           ; BSR set to: 0
 27828  006E7E  90D8               	bcf	status,0,c
 27829  006E80  3375               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27830  006E82  3374               	rrcf	___lwmod@divisor& (0+255),f,b
 27831                           
 27832                           ; BSR set to: 0
 27833  006E84  2F76               	decfsz	___lwmod@counter& (0+255),f,b
 27834  006E86  D7F2               	goto	l12392
 27835  006E88                     l3061:
 27836                           
 27837                           ; BSR set to: 0
 27838  006E88  C072  F072         	movff	___lwmod@dividend,?___lwmod
 27839  006E8C  C073  F073         	movff	___lwmod@dividend+1,?___lwmod+1
 27840                           
 27841                           ; BSR set to: 0
 27842  006E90  0012               	return		;funcret
 27843  006E92                     __end_of___lwmod:
 27844                           	opt stack 0
 27845                           tosu	equ	0xFFF
 27846                           tosh	equ	0xFFE
 27847                           tosl	equ	0xFFD
 27848                           pclath	equ	0xFFA
 27849                           tblptru	equ	0xFF8
 27850                           tblptrh	equ	0xFF7
 27851                           tblptrl	equ	0xFF6
 27852                           tablat	equ	0xFF5
 27853                           prodh	equ	0xFF4
 27854                           prodl	equ	0xFF3
 27855                           intcon	equ	0xFF2
 27856                           indf0	equ	0xFEF
 27857                           postinc0	equ	0xFEE
 27858                           fsr0h	equ	0xFEA
 27859                           fsr0l	equ	0xFE9
 27860                           wreg	equ	0xFE8
 27861                           postinc1	equ	0xFE6
 27862                           postdec1	equ	0xFE5
 27863                           plusw1	equ	0xFE3
 27864                           fsr1h	equ	0xFE2
 27865                           fsr1l	equ	0xFE1
 27866                           indf2	equ	0xFDF
 27867                           postinc2	equ	0xFDE
 27868                           postdec2	equ	0xFDD
 27869                           plusw2	equ	0xFDB
 27870                           fsr2h	equ	0xFDA
 27871                           fsr2l	equ	0xFD9
 27872                           status	equ	0xFD8
 27873                           
 27874 ;; *************** function _ComputeMic *****************
 27875 ;; Defined at:
 27876 ;;		line 2194 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 27877 ;; Parameters:    Size  Location     Type
 27878 ;;  key             2  122[BANK0 ] PTR unsigned char 
 27879 ;;		 -> loRa.activationParameters(105), loRa(245), 
 27880 ;;  buffer          2  124[BANK0 ] PTR unsigned char 
 27881 ;;		 -> LORAWAN_RxDone@hdr(2), macBuffer(271), radioBuffer(271), 
 27882 ;;  bufferLength    1  126[BANK0 ] unsigned char 
 27883 ;; Auto vars:     Size  Location     Type
 27884 ;;  mic             4  127[BANK0 ] unsigned long 
 27885 ;; Return value:  Size  Location     Type
 27886 ;;                  4  122[BANK0 ] unsigned long 
 27887 ;; Registers used:
 27888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27889 ;; Tracked objects:
 27890 ;;		On entry : F/0
 27891 ;;		On exit  : F/0
 27892 ;;		Unchanged: 0/0
 27893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27894 ;;      Params:         0       5       0       0       0       0       0       0       0
 27895 ;;      Locals:         0       4       0       0       0       0       0       0       0
 27896 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27897 ;;      Totals:         0       9       0       0       0       0       0       0       0
 27898 ;;Total ram usage:        9 bytes
 27899 ;; Hardware stack levels used:    1
 27900 ;; Hardware stack levels required when called:   12
 27901 ;; This function calls:
 27902 ;;		_AESCmac
 27903 ;;		_memcpy
 27904 ;; This function is called by:
 27905 ;;		_LORAWAN_RxDone
 27906 ;;		_PrepareJoinRequestFrame
 27907 ;; This function uses a non-reentrant model
 27908 ;;
 27909                           
 27910                           	psect	text144
 27911  00698E                     __ptext144:
 27912                           	opt stack 0
 27913  00698E                     _ComputeMic:
 27914                           	opt stack 14
 27915                           
 27916                           ; BSR set to: 0
 27917                           ;lorawan.c: 2196: uint32_t mic = 0;
 27918                           
 27919                           ; BSR set to: 0
 27920                           ;incstack = 0
 27921  00698E  6BDF               	clrf	ComputeMic@mic& (0+255),b
 27922  006990  6BE0               	clrf	(ComputeMic@mic+1)& (0+255),b
 27923  006992  6BE1               	clrf	(ComputeMic@mic+2)& (0+255),b
 27924  006994  6BE2               	clrf	(ComputeMic@mic+3)& (0+255),b
 27925                           
 27926                           ; BSR set to: 0
 27927                           ;lorawan.c: 2198: AESCmac(key, aesBuffer, buffer, bufferLength);
 27928  006996  C0DA  F0CC         	movff	ComputeMic@key,AESCmac@key
 27929  00699A  C0DB  F0CD         	movff	ComputeMic@key+1,AESCmac@key+1
 27930  00699E  0EAB               	movlw	low _aesBuffer
 27931  0069A0  6FCE               	movwf	AESCmac@output& (0+255),b
 27932  0069A2  0E01               	movlw	high _aesBuffer
 27933  0069A4  6FCF               	movwf	(AESCmac@output+1)& (0+255),b
 27934  0069A6  C0DC  F0D0         	movff	ComputeMic@buffer,AESCmac@input
 27935  0069AA  C0DD  F0D1         	movff	ComputeMic@buffer+1,AESCmac@input+1
 27936  0069AE  C0DE  F0D2         	movff	ComputeMic@bufferLength,AESCmac@size
 27937  0069B2  EC16  F00C         	call	_AESCmac	;wreg free
 27938                           
 27939                           ; BSR set to: 0
 27940                           ;lorawan.c: 2200: memcpy(&mic, aesBuffer, sizeof( mic ));
 27941  0069B6  0EDF               	movlw	low ComputeMic@mic
 27942  0069B8  6F64               	movwf	memcpy@d1& (0+255),b
 27943  0069BA  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 27944  0069BC  0EAB               	movlw	low _aesBuffer
 27945  0069BE  6F66               	movwf	memcpy@s1& (0+255),b
 27946  0069C0  0E01               	movlw	high _aesBuffer
 27947  0069C2  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 27948  0069C4  6B69               	clrf	(memcpy@n+1)& (0+255),b
 27949  0069C6  0E04               	movlw	4
 27950  0069C8  6F68               	movwf	memcpy@n& (0+255),b
 27951  0069CA  EC73  F034         	call	_memcpy	;wreg free
 27952                           
 27953                           ; BSR set to: 0
 27954                           ;lorawan.c: 2202: return mic;
 27955  0069CE  C0DF  F0DA         	movff	ComputeMic@mic,?_ComputeMic
 27956  0069D2  C0E0  F0DB         	movff	ComputeMic@mic+1,?_ComputeMic+1
 27957  0069D6  C0E1  F0DC         	movff	ComputeMic@mic+2,?_ComputeMic+2
 27958  0069DA  C0E2  F0DD         	movff	ComputeMic@mic+3,?_ComputeMic+3
 27959                           
 27960                           ; BSR set to: 0
 27961  0069DE  0012               	return		;funcret
 27962  0069E0                     __end_of_ComputeMic:
 27963                           	opt stack 0
 27964                           tosu	equ	0xFFF
 27965                           tosh	equ	0xFFE
 27966                           tosl	equ	0xFFD
 27967                           pclath	equ	0xFFA
 27968                           tblptru	equ	0xFF8
 27969                           tblptrh	equ	0xFF7
 27970                           tblptrl	equ	0xFF6
 27971                           tablat	equ	0xFF5
 27972                           prodh	equ	0xFF4
 27973                           prodl	equ	0xFF3
 27974                           intcon	equ	0xFF2
 27975                           indf0	equ	0xFEF
 27976                           postinc0	equ	0xFEE
 27977                           fsr0h	equ	0xFEA
 27978                           fsr0l	equ	0xFE9
 27979                           wreg	equ	0xFE8
 27980                           postinc1	equ	0xFE6
 27981                           postdec1	equ	0xFE5
 27982                           plusw1	equ	0xFE3
 27983                           fsr1h	equ	0xFE2
 27984                           fsr1l	equ	0xFE1
 27985                           indf2	equ	0xFDF
 27986                           postinc2	equ	0xFDE
 27987                           postdec2	equ	0xFDD
 27988                           plusw2	equ	0xFDB
 27989                           fsr2h	equ	0xFDA
 27990                           fsr2l	equ	0xFD9
 27991                           status	equ	0xFD8
 27992                           
 27993 ;; *************** function _AESCmac *****************
 27994 ;; Defined at:
 27995 ;;		line 41 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 27996 ;; Parameters:    Size  Location     Type
 27997 ;;  key             2  108[BANK0 ] PTR unsigned char 
 27998 ;;		 -> loRa.activationParameters(105), loRa(245), 
 27999 ;;  output          2  110[BANK0 ] PTR unsigned char 
 28000 ;;		 -> aesBuffer(16), 
 28001 ;;  input           2  112[BANK0 ] PTR unsigned char 
 28002 ;;		 -> LORAWAN_RxDone@hdr(2), macBuffer(271), radioBuffer(271), 
 28003 ;;  size            1  114[BANK0 ] unsigned char 
 28004 ;; Auto vars:     Size  Location     Type
 28005 ;;  x              16   80[BANK1 ] unsigned char [16]
 28006 ;;  y              16   64[BANK1 ] unsigned char [16]
 28007 ;;  padded         16   48[BANK1 ] unsigned char [16]
 28008 ;;  mLast          16   32[BANK1 ] unsigned char [16]
 28009 ;;  k1             16   16[BANK1 ] unsigned char [16]
 28010 ;;  k2             16    0[BANK1 ] unsigned char [16]
 28011 ;;  ptr             2   96[BANK1 ] PTR unsigned char 
 28012 ;;		 -> LORAWAN_RxDone@hdr(2), macBuffer(271), radioBuffer(271), NULL(0), 
 28013 ;;  i               1  101[BANK1 ] unsigned char 
 28014 ;;  j               1  100[BANK1 ] unsigned char 
 28015 ;;  n               1   99[BANK1 ] unsigned char 
 28016 ;;  flag            1   98[BANK1 ] unsigned char 
 28017 ;; Return value:  Size  Location     Type
 28018 ;;                  1    wreg      void 
 28019 ;; Registers used:
 28020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28021 ;; Tracked objects:
 28022 ;;		On entry : F/0
 28023 ;;		On exit  : F/0
 28024 ;;		Unchanged: 0/0
 28025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28026 ;;      Params:         0       7       0       0       0       0       0       0       0
 28027 ;;      Locals:         0       0     102       0       0       0       0       0       0
 28028 ;;      Temps:          0       7       0       0       0       0       0       0       0
 28029 ;;      Totals:         0      14     102       0       0       0       0       0       0
 28030 ;;Total ram usage:      116 bytes
 28031 ;; Hardware stack levels used:    1
 28032 ;; Hardware stack levels required when called:   11
 28033 ;; This function calls:
 28034 ;;		_AESEncodeLoRa
 28035 ;;		_GenerateSubkey
 28036 ;;		_memcpy
 28037 ;;		_memset
 28038 ;; This function is called by:
 28039 ;;		_LORAWAN_RxDone
 28040 ;;		_AssemblePacket
 28041 ;;		_ComputeMic
 28042 ;; This function uses a non-reentrant model
 28043 ;;
 28044                           
 28045                           	psect	text145
 28046  00182C                     __ptext145:
 28047                           	opt stack 0
 28048  00182C                     _AESCmac:
 28049                           	opt stack 16
 28050                           
 28051                           ; BSR set to: 0
 28052                           
 28053                           ; BSR set to: 0
 28054                           ;incstack = 0
 28055  00182C  0101               	movlb	1	; () banked
 28056  00182E  6B65               	clrf	AESCmac@i& (0+255),b
 28057  001830  6B64               	clrf	AESCmac@j& (0+255),b
 28058                           
 28059                           ;lorawan_aes_cmac.c: 44: bool flag = 0;
 28060  001832  6B62               	clrf	AESCmac@flag& (0+255),b
 28061                           
 28062                           ;lorawan_aes_cmac.c: 45: uint8_t k1[16], k2[16];
 28063                           ;lorawan_aes_cmac.c: 46: uint8_t x[16], y[16], mLast[16], padded[16];
 28064                           ;lorawan_aes_cmac.c: 47: uint8_t *ptr = (0);
 28065  001834  6B60               	clrf	AESCmac@ptr& (0+255),b
 28066  001836  6B61               	clrf	(AESCmac@ptr+1)& (0+255),b
 28067                           
 28068                           ; BSR set to: 1
 28069                           ;lorawan_aes_cmac.c: 49: GenerateSubkey(key, k1, k2);
 28070  001838  C0CC  F0A4         	movff	AESCmac@key,GenerateSubkey@key
 28071  00183C  C0CD  F0A5         	movff	AESCmac@key+1,GenerateSubkey@key+1
 28072  001840  0E10               	movlw	low AESCmac@k1
 28073  001842  0100               	movlb	0	; () banked
 28074  001844  6FA6               	movwf	GenerateSubkey@k1& (0+255),b
 28075  001846  0E01               	movlw	high AESCmac@k1
 28076  001848  6FA7               	movwf	(GenerateSubkey@k1+1)& (0+255),b
 28077  00184A  0E00               	movlw	low AESCmac@k2
 28078  00184C  6FA8               	movwf	GenerateSubkey@k2& (0+255),b
 28079  00184E  0E01               	movlw	high AESCmac@k2
 28080  001850  6FA9               	movwf	(GenerateSubkey@k2+1)& (0+255),b
 28081  001852  EC5C  F024         	call	_GenerateSubkey	;wreg free
 28082                           
 28083                           ; BSR set to: 0
 28084                           ;lorawan_aes_cmac.c: 51: n = (size + 15) >> (4);
 28085  001856  51D2               	movf	AESCmac@size& (0+255),w,b
 28086  001858  6FD3               	movwf	??_AESCmac& (0+255),b
 28087  00185A  6BD4               	clrf	(??_AESCmac+1)& (0+255),b
 28088  00185C  0E0F               	movlw	15
 28089  00185E  27D3               	addwf	??_AESCmac& (0+255),f,b
 28090  001860  0E00               	movlw	0
 28091  001862  23D4               	addwfc	(??_AESCmac+1)& (0+255),f,b
 28092  001864  0E04               	movlw	4
 28093  001866  6FD5               	movwf	(??_AESCmac+2)& (0+255),b
 28094  001868                     u14265:
 28095  001868  35D4               	rlcf	(??_AESCmac+1)& (0+255),w,b
 28096  00186A  33D4               	rrcf	(??_AESCmac+1)& (0+255),f,b
 28097  00186C  33D3               	rrcf	??_AESCmac& (0+255),f,b
 28098  00186E  2FD5               	decfsz	(??_AESCmac+2)& (0+255),f,b
 28099  001870  D7FB               	goto	u14265
 28100  001872  51D3               	movf	??_AESCmac& (0+255),w,b
 28101  001874  0101               	movlb	1	; () banked
 28102  001876  6F63               	movwf	AESCmac@n& (0+255),b
 28103                           
 28104                           ; BSR set to: 1
 28105                           ;lorawan_aes_cmac.c: 52: if (n == 0)
 28106  001878  5163               	movf	AESCmac@n& (0+255),w,b
 28107  00187A  E104               	bnz	l13016
 28108                           
 28109                           ; BSR set to: 1
 28110                           ;lorawan_aes_cmac.c: 53: {
 28111                           ;lorawan_aes_cmac.c: 54: n = 1;
 28112  00187C  0E01               	movlw	1
 28113  00187E  6F63               	movwf	AESCmac@n& (0+255),b
 28114                           
 28115                           ; BSR set to: 1
 28116                           ;lorawan_aes_cmac.c: 55: flag = 0;
 28117  001880  6B62               	clrf	AESCmac@flag& (0+255),b
 28118                           
 28119                           ;lorawan_aes_cmac.c: 56: }
 28120  001882  D00A               	goto	l1409
 28121  001884                     l13016:
 28122                           
 28123                           ; BSR set to: 1
 28124                           ;lorawan_aes_cmac.c: 57: else
 28125                           ;lorawan_aes_cmac.c: 58: {
 28126                           ;lorawan_aes_cmac.c: 59: flag = !(size % 16);
 28127  001884  C0D2  F0D3         	movff	AESCmac@size,??_AESCmac
 28128  001888  0E0F               	movlw	15
 28129  00188A  0100               	movlb	0	; () banked
 28130  00188C  17D3               	andwf	??_AESCmac& (0+255),f,b
 28131  00188E  0E01               	movlw	1
 28132  001890  A4D8               	btfss	status,2,c
 28133  001892  0E00               	movlw	0
 28134  001894  0101               	movlb	1	; () banked
 28135  001896  6F62               	movwf	AESCmac@flag& (0+255),b
 28136  001898                     l1409:
 28137                           
 28138                           ; BSR set to: 1
 28139                           ;lorawan_aes_cmac.c: 60: }
 28140                           ;lorawan_aes_cmac.c: 62: if ( flag == 1 )
 28141  001898  0562               	decf	AESCmac@flag& (0+255),w,b
 28142  00189A  E141               	bnz	l13030
 28143                           
 28144                           ; BSR set to: 1
 28145                           ;lorawan_aes_cmac.c: 63: {
 28146                           ;lorawan_aes_cmac.c: 64: j = 0;
 28147  00189C  6B64               	clrf	AESCmac@j& (0+255),b
 28148                           
 28149                           ; BSR set to: 1
 28150                           ;lorawan_aes_cmac.c: 65: for (i=((n-1) << (4)); i<(n << (4)); i++)
 28151  00189E  5163               	movf	AESCmac@n& (0+255),w,b
 28152  0018A0  0D10               	mullw	16
 28153  0018A2  50F3               	movf	prodl,w,c
 28154  0018A4  0FF0               	addlw	240
 28155  0018A6  6F65               	movwf	AESCmac@i& (0+255),b
 28156  0018A8  D01E               	goto	l13028
 28157  0018AA                     l13022:
 28158                           
 28159                           ; BSR set to: 0
 28160                           ;lorawan_aes_cmac.c: 66: {
 28161                           ;lorawan_aes_cmac.c: 67: mLast[j] = input[i] ^ k1[j];
 28162  0018AA  0E20               	movlw	low AESCmac@mLast
 28163  0018AC  0101               	movlb	1	; () banked
 28164  0018AE  2564               	addwf	AESCmac@j& (0+255),w,b
 28165  0018B0  6ED9               	movwf	fsr2l,c
 28166  0018B2  6ADA               	clrf	fsr2h,c
 28167  0018B4  0E01               	movlw	high AESCmac@mLast
 28168  0018B6  22DA               	addwfc	fsr2h,f,c
 28169  0018B8  0E10               	movlw	low AESCmac@k1
 28170  0018BA  2564               	addwf	AESCmac@j& (0+255),w,b
 28171  0018BC  6EE9               	movwf	fsr0l,c
 28172  0018BE  6AEA               	clrf	fsr0h,c
 28173  0018C0  0E01               	movlw	high AESCmac@k1
 28174  0018C2  22EA               	addwfc	fsr0h,f,c
 28175  0018C4  50EF               	movf	indf0,w,c
 28176  0018C6  0100               	movlb	0	; () banked
 28177  0018C8  6FD3               	movwf	??_AESCmac& (0+255),b
 28178  0018CA  0101               	movlb	1	; () banked
 28179  0018CC  5165               	movf	AESCmac@i& (0+255),w,b
 28180  0018CE  0100               	movlb	0	; () banked
 28181  0018D0  25D0               	addwf	AESCmac@input& (0+255),w,b
 28182  0018D2  6EE9               	movwf	fsr0l,c
 28183  0018D4  0E00               	movlw	0
 28184  0018D6  21D1               	addwfc	(AESCmac@input+1)& (0+255),w,b
 28185  0018D8  6EEA               	movwf	fsr0h,c
 28186  0018DA  50EF               	movf	indf0,w,c
 28187  0018DC  19D3               	xorwf	??_AESCmac& (0+255),w,b
 28188  0018DE  6EDF               	movwf	indf2,c
 28189                           
 28190                           ; BSR set to: 0
 28191                           ;lorawan_aes_cmac.c: 68: j++;
 28192  0018E0  0101               	movlb	1	; () banked
 28193  0018E2  2B64               	incf	AESCmac@j& (0+255),f,b
 28194                           
 28195                           ; BSR set to: 1
 28196  0018E4  2B65               	incf	AESCmac@i& (0+255),f,b
 28197  0018E6                     l13028:
 28198                           
 28199                           ; BSR set to: 1
 28200  0018E6  5163               	movf	AESCmac@n& (0+255),w,b
 28201  0018E8  0100               	movlb	0	; () banked
 28202  0018EA  6FD3               	movwf	??_AESCmac& (0+255),b
 28203  0018EC  6BD4               	clrf	(??_AESCmac+1)& (0+255),b
 28204  0018EE  3BD3               	swapf	??_AESCmac& (0+255),f,b
 28205  0018F0  3BD4               	swapf	(??_AESCmac+1)& (0+255),f,b
 28206  0018F2  0EF0               	movlw	240
 28207  0018F4  17D4               	andwf	(??_AESCmac+1)& (0+255),f,b
 28208  0018F6  51D3               	movf	??_AESCmac& (0+255),w,b
 28209  0018F8  0B0F               	andlw	15
 28210  0018FA  13D4               	iorwf	(??_AESCmac+1)& (0+255),f,b
 28211  0018FC  0EF0               	movlw	240
 28212  0018FE  17D3               	andwf	??_AESCmac& (0+255),f,b
 28213  001900  0101               	movlb	1	; () banked
 28214  001902  5165               	movf	AESCmac@i& (0+255),w,b
 28215  001904  0100               	movlb	0	; () banked
 28216  001906  6FD5               	movwf	(??_AESCmac+2)& (0+255),b
 28217  001908  6BD6               	clrf	(??_AESCmac+3)& (0+255),b
 28218  00190A  51D3               	movf	??_AESCmac& (0+255),w,b
 28219  00190C  5DD5               	subwf	(??_AESCmac+2)& (0+255),w,b
 28220  00190E  51D6               	movf	(??_AESCmac+3)& (0+255),w,b
 28221  001910  0A80               	xorlw	128
 28222  001912  6FD7               	movwf	(??_AESCmac+4)& (0+255),b
 28223  001914  51D4               	movf	(??_AESCmac+1)& (0+255),w,b
 28224  001916  0A80               	xorlw	128
 28225  001918  59D7               	subwfb	(??_AESCmac+4)& (0+255),w,b
 28226  00191A  E263               	bc	l13060
 28227  00191C  D7C6               	goto	l13022
 28228  00191E                     l13030:
 28229                           
 28230                           ; BSR set to: 1
 28231                           ;lorawan_aes_cmac.c: 71: else
 28232                           ;lorawan_aes_cmac.c: 72: {
 28233                           ;lorawan_aes_cmac.c: 74: ptr = &input[size - (size%16)];
 28234  00191E  0100               	movlb	0	; () banked
 28235  001920  51D2               	movf	AESCmac@size& (0+255),w,b
 28236  001922  25D0               	addwf	AESCmac@input& (0+255),w,b
 28237  001924  6FD3               	movwf	??_AESCmac& (0+255),b
 28238  001926  0E00               	movlw	0
 28239  001928  21D1               	addwfc	(AESCmac@input+1)& (0+255),w,b
 28240  00192A  6FD4               	movwf	(??_AESCmac+1)& (0+255),b
 28241  00192C  51D2               	movf	AESCmac@size& (0+255),w,b
 28242  00192E  0B0F               	andlw	15
 28243  001930  5DD3               	subwf	??_AESCmac& (0+255),w,b
 28244  001932  0101               	movlb	1	; () banked
 28245  001934  6F60               	movwf	AESCmac@ptr& (0+255),b
 28246  001936  0100               	movlb	0	; () banked
 28247  001938  51D4               	movf	(??_AESCmac+1)& (0+255),w,b
 28248  00193A  A0D8               	btfss	status,0,c
 28249  00193C  05D4               	decf	(??_AESCmac+1)& (0+255),w,b
 28250  00193E  0101               	movlb	1	; () banked
 28251  001940  6F61               	movwf	(AESCmac@ptr+1)& (0+255),b
 28252                           
 28253                           ; BSR set to: 1
 28254                           ;lorawan_aes_cmac.c: 75: for (i=0; i<16; i++)
 28255  001942  6B65               	clrf	AESCmac@i& (0+255),b
 28256  001944                     l13036:
 28257                           
 28258                           ; BSR set to: 1
 28259                           ;lorawan_aes_cmac.c: 76: {
 28260                           ;lorawan_aes_cmac.c: 77: if ( i < (size%16) )
 28261  001944  0100               	movlb	0	; () banked
 28262  001946  51D2               	movf	AESCmac@size& (0+255),w,b
 28263  001948  0B0F               	andlw	15
 28264  00194A  0101               	movlb	1	; () banked
 28265  00194C  6165               	cpfslt	AESCmac@i& (0+255),b
 28266  00194E  D00F               	goto	l13040
 28267                           
 28268                           ; BSR set to: 1
 28269                           ;lorawan_aes_cmac.c: 78: {
 28270                           ;lorawan_aes_cmac.c: 79: padded[i] = ptr[i];
 28271  001950  5165               	movf	AESCmac@i& (0+255),w,b
 28272  001952  2560               	addwf	AESCmac@ptr& (0+255),w,b
 28273  001954  6ED9               	movwf	fsr2l,c
 28274  001956  0E00               	movlw	0
 28275  001958  2161               	addwfc	(AESCmac@ptr+1)& (0+255),w,b
 28276  00195A  6EDA               	movwf	fsr2h,c
 28277  00195C  0E30               	movlw	low AESCmac@padded
 28278  00195E  2565               	addwf	AESCmac@i& (0+255),w,b
 28279  001960  6EE9               	movwf	fsr0l,c
 28280  001962  6AEA               	clrf	fsr0h,c
 28281  001964  0E01               	movlw	high AESCmac@padded
 28282  001966  22EA               	addwfc	fsr0h,f,c
 28283  001968  CFDF FFEF          	movff	indf2,indf0
 28284                           
 28285                           ;lorawan_aes_cmac.c: 80: }
 28286  00196C  D016               	goto	l13046
 28287  00196E                     l13040:
 28288                           
 28289                           ; BSR set to: 1
 28290                           ;lorawan_aes_cmac.c: 81: else
 28291                           ;lorawan_aes_cmac.c: 82: {
 28292                           ;lorawan_aes_cmac.c: 83: if ( i == (size%16) )
 28293  00196E  0100               	movlb	0	; () banked
 28294  001970  51D2               	movf	AESCmac@size& (0+255),w,b
 28295  001972  0B0F               	andlw	15
 28296  001974  0101               	movlb	1	; () banked
 28297  001976  1965               	xorwf	AESCmac@i& (0+255),w,b
 28298  001978  E109               	bnz	l13044
 28299                           
 28300                           ; BSR set to: 1
 28301                           ;lorawan_aes_cmac.c: 84: {
 28302                           ;lorawan_aes_cmac.c: 85: padded[i] = 0x80;
 28303  00197A  0E30               	movlw	low AESCmac@padded
 28304  00197C  2565               	addwf	AESCmac@i& (0+255),w,b
 28305  00197E  6ED9               	movwf	fsr2l,c
 28306  001980  6ADA               	clrf	fsr2h,c
 28307  001982  0E01               	movlw	high AESCmac@padded
 28308  001984  22DA               	addwfc	fsr2h,f,c
 28309  001986  0E80               	movlw	128
 28310  001988  6EDF               	movwf	indf2,c
 28311                           
 28312                           ;lorawan_aes_cmac.c: 86: }
 28313  00198A  D007               	goto	l13046
 28314  00198C                     l13044:
 28315                           
 28316                           ; BSR set to: 1
 28317                           ;lorawan_aes_cmac.c: 87: else
 28318                           ;lorawan_aes_cmac.c: 88: {
 28319                           ;lorawan_aes_cmac.c: 89: padded[i] = 0x00;
 28320  00198C  0E30               	movlw	low AESCmac@padded
 28321  00198E  2565               	addwf	AESCmac@i& (0+255),w,b
 28322  001990  6ED9               	movwf	fsr2l,c
 28323  001992  6ADA               	clrf	fsr2h,c
 28324  001994  0E01               	movlw	high AESCmac@padded
 28325  001996  22DA               	addwfc	fsr2h,f,c
 28326  001998  6ADF               	clrf	indf2,c
 28327  00199A                     l13046:
 28328                           
 28329                           ; BSR set to: 1
 28330  00199A  2B65               	incf	AESCmac@i& (0+255),f,b
 28331                           
 28332                           ; BSR set to: 1
 28333  00199C  0E0F               	movlw	15
 28334  00199E  6565               	cpfsgt	AESCmac@i& (0+255),b
 28335  0019A0  D7D1               	goto	l13036
 28336                           
 28337                           ; BSR set to: 1
 28338                           ;lorawan_aes_cmac.c: 90: }
 28339                           ;lorawan_aes_cmac.c: 91: }
 28340                           ;lorawan_aes_cmac.c: 92: }
 28341                           ;lorawan_aes_cmac.c: 95: for (i=0; i<sizeof(mLast); i++)
 28342  0019A2  6B65               	clrf	AESCmac@i& (0+255),b
 28343  0019A4                     l13054:
 28344                           
 28345                           ; BSR set to: 1
 28346                           ;lorawan_aes_cmac.c: 96: {
 28347                           ;lorawan_aes_cmac.c: 97: mLast[i] = padded[i] ^ k2[i];
 28348  0019A4  0E20               	movlw	low AESCmac@mLast
 28349  0019A6  2565               	addwf	AESCmac@i& (0+255),w,b
 28350  0019A8  6ED9               	movwf	fsr2l,c
 28351  0019AA  6ADA               	clrf	fsr2h,c
 28352  0019AC  0E01               	movlw	high AESCmac@mLast
 28353  0019AE  22DA               	addwfc	fsr2h,f,c
 28354  0019B0  0E00               	movlw	low AESCmac@k2
 28355  0019B2  2565               	addwf	AESCmac@i& (0+255),w,b
 28356  0019B4  6EE9               	movwf	fsr0l,c
 28357  0019B6  6AEA               	clrf	fsr0h,c
 28358  0019B8  0E01               	movlw	high AESCmac@k2
 28359  0019BA  22EA               	addwfc	fsr0h,f,c
 28360  0019BC  50EF               	movf	indf0,w,c
 28361  0019BE  0100               	movlb	0	; () banked
 28362  0019C0  6FD3               	movwf	??_AESCmac& (0+255),b
 28363  0019C2  0E30               	movlw	low AESCmac@padded
 28364  0019C4  0101               	movlb	1	; () banked
 28365  0019C6  2565               	addwf	AESCmac@i& (0+255),w,b
 28366  0019C8  6EE9               	movwf	fsr0l,c
 28367  0019CA  6AEA               	clrf	fsr0h,c
 28368  0019CC  0E01               	movlw	high AESCmac@padded
 28369  0019CE  22EA               	addwfc	fsr0h,f,c
 28370  0019D0  50EF               	movf	indf0,w,c
 28371  0019D2  0100               	movlb	0	; () banked
 28372  0019D4  19D3               	xorwf	??_AESCmac& (0+255),w,b
 28373  0019D6  6EDF               	movwf	indf2,c
 28374                           
 28375                           ; BSR set to: 0
 28376  0019D8  0101               	movlb	1	; () banked
 28377  0019DA  2B65               	incf	AESCmac@i& (0+255),f,b
 28378                           
 28379                           ; BSR set to: 1
 28380  0019DC  0E0F               	movlw	15
 28381  0019DE  6565               	cpfsgt	AESCmac@i& (0+255),b
 28382  0019E0  D7E1               	goto	l13054
 28383  0019E2                     l13060:
 28384                           
 28385                           ;lorawan_aes_cmac.c: 98: }
 28386                           ;lorawan_aes_cmac.c: 99: }
 28387                           ;lorawan_aes_cmac.c: 101: memset(x, 0, sizeof(x));
 28388  0019E2  0E50               	movlw	low AESCmac@x
 28389  0019E4  0100               	movlb	0	; () banked
 28390  0019E6  6F64               	movwf	memset@p1& (0+255),b
 28391  0019E8  0E01               	movlw	high AESCmac@x
 28392  0019EA  6F65               	movwf	(memset@p1+1)& (0+255),b
 28393  0019EC  6B67               	clrf	(memset@c+1)& (0+255),b
 28394  0019EE  6B66               	clrf	memset@c& (0+255),b
 28395  0019F0  6B69               	clrf	(memset@n+1)& (0+255),b
 28396  0019F2  0E10               	movlw	16
 28397  0019F4  6F68               	movwf	memset@n& (0+255),b
 28398  0019F6  EC60  F039         	call	_memset	;wreg free
 28399                           
 28400                           ; BSR set to: 0
 28401                           ;lorawan_aes_cmac.c: 103: for (i=0; i<(n-1); i++)
 28402  0019FA  0101               	movlb	1	; () banked
 28403  0019FC  6B65               	clrf	AESCmac@i& (0+255),b
 28404  0019FE  D051               	goto	l13078
 28405  001A00                     l1424:
 28406                           
 28407                           ; BSR set to: 0
 28408                           ;lorawan_aes_cmac.c: 104: {
 28409                           ;lorawan_aes_cmac.c: 105: for (j=0; j<16; j++)
 28410  001A00  0101               	movlb	1	; () banked
 28411  001A02  6B64               	clrf	AESCmac@j& (0+255),b
 28412  001A04                     l13068:
 28413                           
 28414                           ; BSR set to: 1
 28415                           ;lorawan_aes_cmac.c: 106: {
 28416                           ;lorawan_aes_cmac.c: 107: y[j] = x[j] ^ input[(i << (4))+j];
 28417  001A04  0E40               	movlw	low AESCmac@y
 28418  001A06  2564               	addwf	AESCmac@j& (0+255),w,b
 28419  001A08  6ED9               	movwf	fsr2l,c
 28420  001A0A  6ADA               	clrf	fsr2h,c
 28421  001A0C  0E01               	movlw	high AESCmac@y
 28422  001A0E  22DA               	addwfc	fsr2h,f,c
 28423  001A10  5165               	movf	AESCmac@i& (0+255),w,b
 28424  001A12  0100               	movlb	0	; () banked
 28425  001A14  6FD3               	movwf	??_AESCmac& (0+255),b
 28426  001A16  6BD4               	clrf	(??_AESCmac+1)& (0+255),b
 28427  001A18  3BD3               	swapf	??_AESCmac& (0+255),f,b
 28428  001A1A  3BD4               	swapf	(??_AESCmac+1)& (0+255),f,b
 28429  001A1C  0EF0               	movlw	240
 28430  001A1E  17D4               	andwf	(??_AESCmac+1)& (0+255),f,b
 28431  001A20  51D3               	movf	??_AESCmac& (0+255),w,b
 28432  001A22  0B0F               	andlw	15
 28433  001A24  13D4               	iorwf	(??_AESCmac+1)& (0+255),f,b
 28434  001A26  0EF0               	movlw	240
 28435  001A28  17D3               	andwf	??_AESCmac& (0+255),f,b
 28436  001A2A  C0D0  F0D5         	movff	AESCmac@input,??_AESCmac+2
 28437  001A2E  C0D1  F0D6         	movff	AESCmac@input+1,??_AESCmac+3
 28438  001A32  51D3               	movf	??_AESCmac& (0+255),w,b
 28439  001A34  27D5               	addwf	(??_AESCmac+2)& (0+255),f,b
 28440  001A36  51D4               	movf	(??_AESCmac+1)& (0+255),w,b
 28441  001A38  23D6               	addwfc	(??_AESCmac+3)& (0+255),f,b
 28442  001A3A  0101               	movlb	1	; () banked
 28443  001A3C  5164               	movf	AESCmac@j& (0+255),w,b
 28444  001A3E  0100               	movlb	0	; () banked
 28445  001A40  25D5               	addwf	(??_AESCmac+2)& (0+255),w,b
 28446  001A42  6EE9               	movwf	fsr0l,c
 28447  001A44  0E00               	movlw	0
 28448  001A46  21D6               	addwfc	(??_AESCmac+3)& (0+255),w,b
 28449  001A48  6EEA               	movwf	fsr0h,c
 28450  001A4A  50EF               	movf	indf0,w,c
 28451  001A4C  6FD7               	movwf	(??_AESCmac+4)& (0+255),b
 28452  001A4E  0E50               	movlw	low AESCmac@x
 28453  001A50  0101               	movlb	1	; () banked
 28454  001A52  2564               	addwf	AESCmac@j& (0+255),w,b
 28455  001A54  6EE9               	movwf	fsr0l,c
 28456  001A56  6AEA               	clrf	fsr0h,c
 28457  001A58  0E01               	movlw	high AESCmac@x
 28458  001A5A  22EA               	addwfc	fsr0h,f,c
 28459  001A5C  50EF               	movf	indf0,w,c
 28460  001A5E  0100               	movlb	0	; () banked
 28461  001A60  19D7               	xorwf	(??_AESCmac+4)& (0+255),w,b
 28462  001A62  6EDF               	movwf	indf2,c
 28463                           
 28464                           ; BSR set to: 0
 28465  001A64  0101               	movlb	1	; () banked
 28466  001A66  2B64               	incf	AESCmac@j& (0+255),f,b
 28467                           
 28468                           ; BSR set to: 1
 28469  001A68  0E0F               	movlw	15
 28470  001A6A  6564               	cpfsgt	AESCmac@j& (0+255),b
 28471  001A6C  D7CB               	goto	l13068
 28472                           
 28473                           ; BSR set to: 1
 28474                           ;lorawan_aes_cmac.c: 108: }
 28475                           ;lorawan_aes_cmac.c: 109: memcpy(x, y, sizeof(y));
 28476  001A6E  0E50               	movlw	low AESCmac@x
 28477  001A70  0100               	movlb	0	; () banked
 28478  001A72  6F64               	movwf	memcpy@d1& (0+255),b
 28479  001A74  0E01               	movlw	high AESCmac@x
 28480  001A76  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 28481  001A78  0E40               	movlw	low AESCmac@y
 28482  001A7A  6F66               	movwf	memcpy@s1& (0+255),b
 28483  001A7C  0E01               	movlw	high AESCmac@y
 28484  001A7E  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 28485  001A80  6B69               	clrf	(memcpy@n+1)& (0+255),b
 28486  001A82  0E10               	movlw	16
 28487  001A84  6F68               	movwf	memcpy@n& (0+255),b
 28488  001A86  EC73  F034         	call	_memcpy	;wreg free
 28489                           
 28490                           ;lorawan_aes_cmac.c: 110: AESEncodeLoRa(x,key);
 28491  001A8A  0E50               	movlw	low AESCmac@x
 28492  001A8C  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 28493  001A8E  0E01               	movlw	high AESCmac@x
 28494  001A90  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 28495  001A92  C0CC  F092         	movff	AESCmac@key,AESEncodeLoRa@key
 28496  001A96  C0CD  F093         	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 28497  001A9A  EC89  F039         	call	_AESEncodeLoRa	;wreg free
 28498                           
 28499                           ; BSR set to: 0
 28500  001A9E  0101               	movlb	1	; () banked
 28501  001AA0  2B65               	incf	AESCmac@i& (0+255),f,b
 28502  001AA2                     l13078:
 28503                           
 28504                           ; BSR set to: 1
 28505  001AA2  0100               	movlb	0	; () banked
 28506  001AA4  69D3               	setf	??_AESCmac& (0+255),b
 28507  001AA6  69D4               	setf	(??_AESCmac+1)& (0+255),b
 28508  001AA8  0101               	movlb	1	; () banked
 28509  001AAA  5163               	movf	AESCmac@n& (0+255),w,b
 28510  001AAC  0100               	movlb	0	; () banked
 28511  001AAE  6FD5               	movwf	(??_AESCmac+2)& (0+255),b
 28512  001AB0  6BD6               	clrf	(??_AESCmac+3)& (0+255),b
 28513  001AB2  51D3               	movf	??_AESCmac& (0+255),w,b
 28514  001AB4  27D5               	addwf	(??_AESCmac+2)& (0+255),f,b
 28515  001AB6  51D4               	movf	(??_AESCmac+1)& (0+255),w,b
 28516  001AB8  23D6               	addwfc	(??_AESCmac+3)& (0+255),f,b
 28517  001ABA  0101               	movlb	1	; () banked
 28518  001ABC  5165               	movf	AESCmac@i& (0+255),w,b
 28519  001ABE  0100               	movlb	0	; () banked
 28520  001AC0  6FD7               	movwf	(??_AESCmac+4)& (0+255),b
 28521  001AC2  6BD8               	clrf	(??_AESCmac+5)& (0+255),b
 28522  001AC4  51D5               	movf	(??_AESCmac+2)& (0+255),w,b
 28523  001AC6  5DD7               	subwf	(??_AESCmac+4)& (0+255),w,b
 28524  001AC8  51D8               	movf	(??_AESCmac+5)& (0+255),w,b
 28525  001ACA  0A80               	xorlw	128
 28526  001ACC  6FD9               	movwf	(??_AESCmac+6)& (0+255),b
 28527  001ACE  51D6               	movf	(??_AESCmac+3)& (0+255),w,b
 28528  001AD0  0A80               	xorlw	128
 28529  001AD2  59D9               	subwfb	(??_AESCmac+6)& (0+255),w,b
 28530  001AD4  E395               	bnc	l1424
 28531                           
 28532                           ; BSR set to: 0
 28533                           ;lorawan_aes_cmac.c: 111: }
 28534                           ;lorawan_aes_cmac.c: 113: for (i=0; i<sizeof(x); i++)
 28535  001AD6  0101               	movlb	1	; () banked
 28536  001AD8  6B65               	clrf	AESCmac@i& (0+255),b
 28537  001ADA                     l13084:
 28538                           
 28539                           ; BSR set to: 1
 28540                           ;lorawan_aes_cmac.c: 114: {
 28541                           ;lorawan_aes_cmac.c: 115: y[i] = x[i] ^ mLast[i];
 28542  001ADA  0E40               	movlw	low AESCmac@y
 28543  001ADC  2565               	addwf	AESCmac@i& (0+255),w,b
 28544  001ADE  6ED9               	movwf	fsr2l,c
 28545  001AE0  6ADA               	clrf	fsr2h,c
 28546  001AE2  0E01               	movlw	high AESCmac@y
 28547  001AE4  22DA               	addwfc	fsr2h,f,c
 28548  001AE6  0E20               	movlw	low AESCmac@mLast
 28549  001AE8  2565               	addwf	AESCmac@i& (0+255),w,b
 28550  001AEA  6EE9               	movwf	fsr0l,c
 28551  001AEC  6AEA               	clrf	fsr0h,c
 28552  001AEE  0E01               	movlw	high AESCmac@mLast
 28553  001AF0  22EA               	addwfc	fsr0h,f,c
 28554  001AF2  50EF               	movf	indf0,w,c
 28555  001AF4  0100               	movlb	0	; () banked
 28556  001AF6  6FD3               	movwf	??_AESCmac& (0+255),b
 28557  001AF8  0E50               	movlw	low AESCmac@x
 28558  001AFA  0101               	movlb	1	; () banked
 28559  001AFC  2565               	addwf	AESCmac@i& (0+255),w,b
 28560  001AFE  6EE9               	movwf	fsr0l,c
 28561  001B00  6AEA               	clrf	fsr0h,c
 28562  001B02  0E01               	movlw	high AESCmac@x
 28563  001B04  22EA               	addwfc	fsr0h,f,c
 28564  001B06  50EF               	movf	indf0,w,c
 28565  001B08  0100               	movlb	0	; () banked
 28566  001B0A  19D3               	xorwf	??_AESCmac& (0+255),w,b
 28567  001B0C  6EDF               	movwf	indf2,c
 28568                           
 28569                           ; BSR set to: 0
 28570  001B0E  0101               	movlb	1	; () banked
 28571  001B10  2B65               	incf	AESCmac@i& (0+255),f,b
 28572                           
 28573                           ; BSR set to: 1
 28574  001B12  0E0F               	movlw	15
 28575  001B14  6565               	cpfsgt	AESCmac@i& (0+255),b
 28576  001B16  D7E1               	goto	l13084
 28577                           
 28578                           ; BSR set to: 1
 28579                           ;lorawan_aes_cmac.c: 116: }
 28580                           ;lorawan_aes_cmac.c: 118: AESEncodeLoRa(y, key);
 28581  001B18  0E40               	movlw	low AESCmac@y
 28582  001B1A  0100               	movlb	0	; () banked
 28583  001B1C  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 28584  001B1E  0E01               	movlw	high AESCmac@y
 28585  001B20  6F91               	movwf	(AESEncodeLoRa@block+1)& (0+255),b
 28586  001B22  C0CC  F092         	movff	AESCmac@key,AESEncodeLoRa@key
 28587  001B26  C0CD  F093         	movff	AESCmac@key+1,AESEncodeLoRa@key+1
 28588  001B2A  EC89  F039         	call	_AESEncodeLoRa	;wreg free
 28589                           
 28590                           ;lorawan_aes_cmac.c: 120: memcpy(output, y, sizeof(y));
 28591  001B2E  C0CE  F064         	movff	AESCmac@output,memcpy@d1
 28592  001B32  C0CF  F065         	movff	AESCmac@output+1,memcpy@d1+1
 28593  001B36  0E40               	movlw	low AESCmac@y
 28594  001B38  6F66               	movwf	memcpy@s1& (0+255),b
 28595  001B3A  0E01               	movlw	high AESCmac@y
 28596  001B3C  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 28597  001B3E  6B69               	clrf	(memcpy@n+1)& (0+255),b
 28598  001B40  0E10               	movlw	16
 28599  001B42  6F68               	movwf	memcpy@n& (0+255),b
 28600  001B44  EF73  F034         	goto	_memcpy	;wreg free
 28601  001B48                     __end_of_AESCmac:
 28602                           	opt stack 0
 28603                           tosu	equ	0xFFF
 28604                           tosh	equ	0xFFE
 28605                           tosl	equ	0xFFD
 28606                           pclath	equ	0xFFA
 28607                           tblptru	equ	0xFF8
 28608                           tblptrh	equ	0xFF7
 28609                           tblptrl	equ	0xFF6
 28610                           tablat	equ	0xFF5
 28611                           prodh	equ	0xFF4
 28612                           prodl	equ	0xFF3
 28613                           intcon	equ	0xFF2
 28614                           indf0	equ	0xFEF
 28615                           postinc0	equ	0xFEE
 28616                           fsr0h	equ	0xFEA
 28617                           fsr0l	equ	0xFE9
 28618                           wreg	equ	0xFE8
 28619                           postinc1	equ	0xFE6
 28620                           postdec1	equ	0xFE5
 28621                           plusw1	equ	0xFE3
 28622                           fsr1h	equ	0xFE2
 28623                           fsr1l	equ	0xFE1
 28624                           indf2	equ	0xFDF
 28625                           postinc2	equ	0xFDE
 28626                           postdec2	equ	0xFDD
 28627                           plusw2	equ	0xFDB
 28628                           fsr2h	equ	0xFDA
 28629                           fsr2l	equ	0xFD9
 28630                           status	equ	0xFD8
 28631                           
 28632 ;; *************** function _GenerateSubkey *****************
 28633 ;; Defined at:
 28634 ;;		line 124 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 28635 ;; Parameters:    Size  Location     Type
 28636 ;;  key             2   68[BANK0 ] PTR unsigned char 
 28637 ;;		 -> loRa.activationParameters(105), loRa(245), 
 28638 ;;  k1              2   70[BANK0 ] PTR unsigned char 
 28639 ;;		 -> AESCmac@k1(16), 
 28640 ;;  k2              2   72[BANK0 ] PTR unsigned char 
 28641 ;;		 -> AESCmac@k2(16), 
 28642 ;; Auto vars:     Size  Location     Type
 28643 ;;  l              16   91[BANK0 ] unsigned char [16]
 28644 ;;  const_Rb       16   75[BANK0 ] unsigned char [16]
 28645 ;;  i               1  107[BANK0 ] unsigned char 
 28646 ;; Return value:  Size  Location     Type
 28647 ;;                  1    wreg      void 
 28648 ;; Registers used:
 28649 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 28650 ;; Tracked objects:
 28651 ;;		On entry : F/0
 28652 ;;		On exit  : F/0
 28653 ;;		Unchanged: 0/0
 28654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28655 ;;      Params:         0       6       0       0       0       0       0       0       0
 28656 ;;      Locals:         0      33       0       0       0       0       0       0       0
 28657 ;;      Temps:          0       1       0       0       0       0       0       0       0
 28658 ;;      Totals:         0      40       0       0       0       0       0       0       0
 28659 ;;Total ram usage:       40 bytes
 28660 ;; Hardware stack levels used:    1
 28661 ;; Hardware stack levels required when called:   10
 28662 ;; This function calls:
 28663 ;;		_AESEncodeLoRa
 28664 ;;		_FillSubKey
 28665 ;;		_memset
 28666 ;; This function is called by:
 28667 ;;		_AESCmac
 28668 ;; This function uses a non-reentrant model
 28669 ;;
 28670                           
 28671                           	psect	text146
 28672  0048B8                     __ptext146:
 28673                           	opt stack 0
 28674  0048B8                     _GenerateSubkey:
 28675                           	opt stack 16
 28676                           
 28677                           ; BSR set to: 0
 28678                           ;lorawan_aes_cmac.c: 127: uint8_t l[16];
 28679                           ;lorawan_aes_cmac.c: 128: uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
      +                          00, 0x00,
 28680                           ;lorawan_aes_cmac.c: 129: 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87};
 28681                           
 28682                           ; BSR set to: 0
 28683                           
 28684                           ; BSR set to: 0
 28685                           ;incstack = 0
 28686  0048B8  EE21  F0BD         	lfsr	2,GenerateSubkey@F17044
 28687  0048BC  EE00  F0AB         	lfsr	0,GenerateSubkey@const_Rb
 28688  0048C0  0E0F               	movlw	15
 28689  0048C2                     u13701:
 28690  0048C2  CFDB FFEB          	movff	plusw2,plusw0
 28691  0048C6  06E8               	decf	wreg,f,c
 28692  0048C8  E2FC               	bc	u13701
 28693                           
 28694                           ; BSR set to: 0
 28695                           ;lorawan_aes_cmac.c: 132: memset(l, 0, sizeof(l));
 28696  0048CA  0EBB               	movlw	low GenerateSubkey@l
 28697  0048CC  6F64               	movwf	memset@p1& (0+255),b
 28698  0048CE  6B65               	clrf	(memset@p1+1)& (0+255),b
 28699  0048D0  6B67               	clrf	(memset@c+1)& (0+255),b
 28700  0048D2  6B66               	clrf	memset@c& (0+255),b
 28701  0048D4  6B69               	clrf	(memset@n+1)& (0+255),b
 28702  0048D6  0E10               	movlw	16
 28703  0048D8  6F68               	movwf	memset@n& (0+255),b
 28704  0048DA  EC60  F039         	call	_memset	;wreg free
 28705                           
 28706                           ; BSR set to: 0
 28707                           ;lorawan_aes_cmac.c: 134: AESEncodeLoRa(l, key);
 28708  0048DE  0EBB               	movlw	low GenerateSubkey@l
 28709  0048E0  6F90               	movwf	AESEncodeLoRa@block& (0+255),b
 28710  0048E2  6B91               	clrf	(AESEncodeLoRa@block+1)& (0+255),b
 28711  0048E4  C0A4  F092         	movff	GenerateSubkey@key,AESEncodeLoRa@key
 28712  0048E8  C0A5  F093         	movff	GenerateSubkey@key+1,AESEncodeLoRa@key+1
 28713  0048EC  EC89  F039         	call	_AESEncodeLoRa	;wreg free
 28714                           
 28715                           ; BSR set to: 0
 28716                           ;lorawan_aes_cmac.c: 137: if ( (l[0] & 0x80) == 0x00 )
 28717  0048F0  BFBB               	btfsc	GenerateSubkey@l& (0+255),7,b
 28718  0048F2  D00C               	goto	l12658
 28719                           
 28720                           ; BSR set to: 0
 28721                           ;lorawan_aes_cmac.c: 138: {
 28722                           ;lorawan_aes_cmac.c: 139: FillSubKey( l, k1, (sizeof(l) ) );
 28723  0048F4  0EBB               	movlw	low GenerateSubkey@l
 28724  0048F6  6F64               	movwf	FillSubKey@source& (0+255),b
 28725  0048F8  6B65               	clrf	(FillSubKey@source+1)& (0+255),b
 28726  0048FA  C0A6  F066         	movff	GenerateSubkey@k1,FillSubKey@key
 28727  0048FE  C0A7  F067         	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 28728  004902  0E10               	movlw	16
 28729  004904  6F68               	movwf	FillSubKey@size& (0+255),b
 28730  004906  ECD9  F035         	call	_FillSubKey	;wreg free
 28731                           
 28732                           ;lorawan_aes_cmac.c: 140: }
 28733  00490A  D01E               	goto	l12672
 28734  00490C                     l12658:
 28735                           
 28736                           ; BSR set to: 0
 28737                           ;lorawan_aes_cmac.c: 141: else
 28738                           ;lorawan_aes_cmac.c: 142: {
 28739                           ;lorawan_aes_cmac.c: 143: FillSubKey( l, k1, (sizeof(l) ) );
 28740  00490C  0EBB               	movlw	low GenerateSubkey@l
 28741  00490E  6F64               	movwf	FillSubKey@source& (0+255),b
 28742  004910  6B65               	clrf	(FillSubKey@source+1)& (0+255),b
 28743  004912  C0A6  F066         	movff	GenerateSubkey@k1,FillSubKey@key
 28744  004916  C0A7  F067         	movff	GenerateSubkey@k1+1,FillSubKey@key+1
 28745  00491A  0E10               	movlw	16
 28746  00491C  6F68               	movwf	FillSubKey@size& (0+255),b
 28747  00491E  ECD9  F035         	call	_FillSubKey	;wreg free
 28748                           
 28749                           ; BSR set to: 0
 28750                           ;lorawan_aes_cmac.c: 145: for (i=0; i<sizeof(l); i++)
 28751  004922  6BCB               	clrf	GenerateSubkey@i& (0+255),b
 28752  004924                     l12666:
 28753                           
 28754                           ; BSR set to: 0
 28755                           ;lorawan_aes_cmac.c: 146: {
 28756                           ;lorawan_aes_cmac.c: 147: k1[i] ^= const_Rb[i];
 28757  004924  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28758  004926  0FAB               	addlw	low GenerateSubkey@const_Rb
 28759  004928  6ED9               	movwf	fsr2l,c
 28760  00492A  6ADA               	clrf	fsr2h,c
 28761  00492C  50DF               	movf	indf2,w,c
 28762  00492E  6FAA               	movwf	??_GenerateSubkey& (0+255),b
 28763  004930  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28764  004932  25A6               	addwf	GenerateSubkey@k1& (0+255),w,b
 28765  004934  6ED9               	movwf	fsr2l,c
 28766  004936  0E00               	movlw	0
 28767  004938  21A7               	addwfc	(GenerateSubkey@k1+1)& (0+255),w,b
 28768  00493A  6EDA               	movwf	fsr2h,c
 28769  00493C  51AA               	movf	??_GenerateSubkey& (0+255),w,b
 28770  00493E  1ADF               	xorwf	indf2,f,c
 28771                           
 28772                           ; BSR set to: 0
 28773  004940  2BCB               	incf	GenerateSubkey@i& (0+255),f,b
 28774                           
 28775                           ; BSR set to: 0
 28776  004942  0E0F               	movlw	15
 28777  004944  65CB               	cpfsgt	GenerateSubkey@i& (0+255),b
 28778  004946  D7EE               	goto	l12666
 28779  004948                     l12672:
 28780                           
 28781                           ; BSR set to: 0
 28782                           ;lorawan_aes_cmac.c: 148: }
 28783                           ;lorawan_aes_cmac.c: 149: }
 28784                           ;lorawan_aes_cmac.c: 152: if ( (k1[0] & 0x80) == 0x00 )
 28785  004948  C0A6  FFD9         	movff	GenerateSubkey@k1,fsr2l
 28786  00494C  C0A7  FFDA         	movff	GenerateSubkey@k1+1,fsr2h
 28787  004950  BEDF               	btfsc	indf2,7,c
 28788  004952  D00C               	goto	l12676
 28789                           
 28790                           ; BSR set to: 0
 28791                           ;lorawan_aes_cmac.c: 153: {
 28792                           ;lorawan_aes_cmac.c: 154: FillSubKey( k1, k2, (sizeof(l)) );
 28793  004954  C0A6  F064         	movff	GenerateSubkey@k1,FillSubKey@source
 28794  004958  C0A7  F065         	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 28795  00495C  C0A8  F066         	movff	GenerateSubkey@k2,FillSubKey@key
 28796  004960  C0A9  F067         	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 28797  004964  0E10               	movlw	16
 28798  004966  6F68               	movwf	FillSubKey@size& (0+255),b
 28799  004968  EFD9  F035         	goto	_FillSubKey	;wreg free
 28800  00496C                     l12676:
 28801                           
 28802                           ; BSR set to: 0
 28803                           ;lorawan_aes_cmac.c: 156: else
 28804                           ;lorawan_aes_cmac.c: 157: {
 28805                           ;lorawan_aes_cmac.c: 158: FillSubKey( k1, k2, (sizeof(l) ) );
 28806  00496C  C0A6  F064         	movff	GenerateSubkey@k1,FillSubKey@source
 28807  004970  C0A7  F065         	movff	GenerateSubkey@k1+1,FillSubKey@source+1
 28808  004974  C0A8  F066         	movff	GenerateSubkey@k2,FillSubKey@key
 28809  004978  C0A9  F067         	movff	GenerateSubkey@k2+1,FillSubKey@key+1
 28810  00497C  0E10               	movlw	16
 28811  00497E  6F68               	movwf	FillSubKey@size& (0+255),b
 28812  004980  ECD9  F035         	call	_FillSubKey	;wreg free
 28813                           
 28814                           ; BSR set to: 0
 28815                           ;lorawan_aes_cmac.c: 160: for (i=0; i<sizeof(l); i++)
 28816  004984  6BCB               	clrf	GenerateSubkey@i& (0+255),b
 28817  004986                     l12684:
 28818                           
 28819                           ; BSR set to: 0
 28820                           ;lorawan_aes_cmac.c: 161: {
 28821                           ;lorawan_aes_cmac.c: 162: k2[i] = k2[i] ^ const_Rb[i];
 28822  004986  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28823  004988  25A8               	addwf	GenerateSubkey@k2& (0+255),w,b
 28824  00498A  6ED9               	movwf	fsr2l,c
 28825  00498C  0E00               	movlw	0
 28826  00498E  21A9               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 28827  004990  6EDA               	movwf	fsr2h,c
 28828  004992  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28829  004994  0FAB               	addlw	low GenerateSubkey@const_Rb
 28830  004996  6EE9               	movwf	fsr0l,c
 28831  004998  6AEA               	clrf	fsr0h,c
 28832  00499A  50EF               	movf	indf0,w,c
 28833  00499C  6FAA               	movwf	??_GenerateSubkey& (0+255),b
 28834  00499E  51CB               	movf	GenerateSubkey@i& (0+255),w,b
 28835  0049A0  25A8               	addwf	GenerateSubkey@k2& (0+255),w,b
 28836  0049A2  6EE9               	movwf	fsr0l,c
 28837  0049A4  0E00               	movlw	0
 28838  0049A6  21A9               	addwfc	(GenerateSubkey@k2+1)& (0+255),w,b
 28839  0049A8  6EEA               	movwf	fsr0h,c
 28840  0049AA  50EF               	movf	indf0,w,c
 28841  0049AC  19AA               	xorwf	??_GenerateSubkey& (0+255),w,b
 28842  0049AE  6EDF               	movwf	indf2,c
 28843                           
 28844                           ; BSR set to: 0
 28845  0049B0  2BCB               	incf	GenerateSubkey@i& (0+255),f,b
 28846                           
 28847                           ; BSR set to: 0
 28848  0049B2  0E0F               	movlw	15
 28849  0049B4  65CB               	cpfsgt	GenerateSubkey@i& (0+255),b
 28850  0049B6  D7E7               	goto	l12684
 28851  0049B8  0C0F               	retlw	15
 28852  0049BA                     __end_of_GenerateSubkey:
 28853                           	opt stack 0
 28854                           tosu	equ	0xFFF
 28855                           tosh	equ	0xFFE
 28856                           tosl	equ	0xFFD
 28857                           pclath	equ	0xFFA
 28858                           tblptru	equ	0xFF8
 28859                           tblptrh	equ	0xFF7
 28860                           tblptrl	equ	0xFF6
 28861                           tablat	equ	0xFF5
 28862                           prodh	equ	0xFF4
 28863                           prodl	equ	0xFF3
 28864                           intcon	equ	0xFF2
 28865                           indf0	equ	0xFEF
 28866                           postinc0	equ	0xFEE
 28867                           plusw0	equ	0xFEB
 28868                           fsr0h	equ	0xFEA
 28869                           fsr0l	equ	0xFE9
 28870                           wreg	equ	0xFE8
 28871                           postinc1	equ	0xFE6
 28872                           postdec1	equ	0xFE5
 28873                           plusw1	equ	0xFE3
 28874                           fsr1h	equ	0xFE2
 28875                           fsr1l	equ	0xFE1
 28876                           indf2	equ	0xFDF
 28877                           postinc2	equ	0xFDE
 28878                           postdec2	equ	0xFDD
 28879                           plusw2	equ	0xFDB
 28880                           fsr2h	equ	0xFDA
 28881                           fsr2l	equ	0xFD9
 28882                           status	equ	0xFD8
 28883                           
 28884 ;; *************** function _FillSubKey *****************
 28885 ;; Defined at:
 28886 ;;		line 167 in file "mcc_generated_files/LoRaWAN/lorawan_aes_cmac.c"
 28887 ;; Parameters:    Size  Location     Type
 28888 ;;  source          2    4[BANK0 ] PTR unsigned char 
 28889 ;;		 -> GenerateSubkey@l(16), AESCmac@k1(16), 
 28890 ;;  key             2    6[BANK0 ] PTR unsigned char 
 28891 ;;		 -> AESCmac@k2(16), AESCmac@k1(16), 
 28892 ;;  size            1    8[BANK0 ] unsigned char 
 28893 ;; Auto vars:     Size  Location     Type
 28894 ;;  i               1   11[BANK0 ] unsigned char 
 28895 ;;  carry           1   10[BANK0 ] unsigned char 
 28896 ;; Return value:  Size  Location     Type
 28897 ;;                  1    wreg      void 
 28898 ;; Registers used:
 28899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 28900 ;; Tracked objects:
 28901 ;;		On entry : F/0
 28902 ;;		On exit  : F/0
 28903 ;;		Unchanged: 0/0
 28904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28905 ;;      Params:         0       5       0       0       0       0       0       0       0
 28906 ;;      Locals:         0       2       0       0       0       0       0       0       0
 28907 ;;      Temps:          0       1       0       0       0       0       0       0       0
 28908 ;;      Totals:         0       8       0       0       0       0       0       0       0
 28909 ;;Total ram usage:        8 bytes
 28910 ;; Hardware stack levels used:    1
 28911 ;; Hardware stack levels required when called:    7
 28912 ;; This function calls:
 28913 ;;		Nothing
 28914 ;; This function is called by:
 28915 ;;		_GenerateSubkey
 28916 ;; This function uses a non-reentrant model
 28917 ;;
 28918                           
 28919                           	psect	text147
 28920  006BB2                     __ptext147:
 28921                           	opt stack 0
 28922  006BB2                     _FillSubKey:
 28923                           	opt stack 18
 28924                           
 28925                           ; BSR set to: 0
 28926                           ;lorawan_aes_cmac.c: 169: uint8_t i = 0;
 28927                           
 28928                           ; BSR set to: 0
 28929                           ;incstack = 0
 28930  006BB2  6B6B               	clrf	FillSubKey@i& (0+255),b
 28931                           
 28932                           ;lorawan_aes_cmac.c: 170: uint8_t carry = 0;
 28933  006BB4  6B6A               	clrf	FillSubKey@carry& (0+255),b
 28934                           
 28935                           ;lorawan_aes_cmac.c: 172: i=size;
 28936  006BB6  C068  F06B         	movff	FillSubKey@size,FillSubKey@i
 28937                           
 28938                           ;lorawan_aes_cmac.c: 174: while(i--)
 28939  006BBA  D01C               	goto	l12374
 28940  006BBC                     l12370:
 28941                           
 28942                           ; BSR set to: 0
 28943                           ;lorawan_aes_cmac.c: 175: {
 28944                           ;lorawan_aes_cmac.c: 176: key[i] = (source[i] << (1)) | carry;
 28945  006BBC  516B               	movf	FillSubKey@i& (0+255),w,b
 28946  006BBE  2566               	addwf	FillSubKey@key& (0+255),w,b
 28947  006BC0  6ED9               	movwf	fsr2l,c
 28948  006BC2  0E00               	movlw	0
 28949  006BC4  2167               	addwfc	(FillSubKey@key+1)& (0+255),w,b
 28950  006BC6  6EDA               	movwf	fsr2h,c
 28951  006BC8  516B               	movf	FillSubKey@i& (0+255),w,b
 28952  006BCA  2564               	addwf	FillSubKey@source& (0+255),w,b
 28953  006BCC  6EE9               	movwf	fsr0l,c
 28954  006BCE  0E00               	movlw	0
 28955  006BD0  2165               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 28956  006BD2  6EEA               	movwf	fsr0h,c
 28957  006BD4  50EF               	movf	indf0,w,c
 28958  006BD6  6F69               	movwf	??_FillSubKey& (0+255),b
 28959  006BD8  90D8               	bcf	status,0,c
 28960  006BDA  3569               	rlcf	??_FillSubKey& (0+255),w,b
 28961  006BDC  116A               	iorwf	FillSubKey@carry& (0+255),w,b
 28962  006BDE  6EDF               	movwf	indf2,c
 28963                           
 28964                           ; BSR set to: 0
 28965                           ;lorawan_aes_cmac.c: 177: carry = !!(source[i] & 0x80);
 28966  006BE0  516B               	movf	FillSubKey@i& (0+255),w,b
 28967  006BE2  2564               	addwf	FillSubKey@source& (0+255),w,b
 28968  006BE4  6ED9               	movwf	fsr2l,c
 28969  006BE6  0E00               	movlw	0
 28970  006BE8  2165               	addwfc	(FillSubKey@source+1)& (0+255),w,b
 28971  006BEA  6EDA               	movwf	fsr2h,c
 28972  006BEC  0E01               	movlw	1
 28973  006BEE  AEDF               	btfss	indf2,7,c
 28974  006BF0  0E00               	movlw	0
 28975  006BF2  6F6A               	movwf	FillSubKey@carry& (0+255),b
 28976  006BF4                     l12374:
 28977                           
 28978                           ; BSR set to: 0
 28979  006BF4  076B               	decf	FillSubKey@i& (0+255),f,b
 28980  006BF6  296B               	incf	FillSubKey@i& (0+255),w,b
 28981  006BF8  E1E1               	bnz	l12370
 28982                           
 28983                           ; BSR set to: 0
 28984  006BFA  0012               	return		;funcret
 28985  006BFC                     __end_of_FillSubKey:
 28986                           	opt stack 0
 28987                           tosu	equ	0xFFF
 28988                           tosh	equ	0xFFE
 28989                           tosl	equ	0xFFD
 28990                           pclath	equ	0xFFA
 28991                           tblptru	equ	0xFF8
 28992                           tblptrh	equ	0xFF7
 28993                           tblptrl	equ	0xFF6
 28994                           tablat	equ	0xFF5
 28995                           prodh	equ	0xFF4
 28996                           prodl	equ	0xFF3
 28997                           intcon	equ	0xFF2
 28998                           indf0	equ	0xFEF
 28999                           postinc0	equ	0xFEE
 29000                           plusw0	equ	0xFEB
 29001                           fsr0h	equ	0xFEA
 29002                           fsr0l	equ	0xFE9
 29003                           wreg	equ	0xFE8
 29004                           postinc1	equ	0xFE6
 29005                           postdec1	equ	0xFE5
 29006                           plusw1	equ	0xFE3
 29007                           fsr1h	equ	0xFE2
 29008                           fsr1l	equ	0xFE1
 29009                           indf2	equ	0xFDF
 29010                           postinc2	equ	0xFDE
 29011                           postdec2	equ	0xFDD
 29012                           plusw2	equ	0xFDB
 29013                           fsr2h	equ	0xFDA
 29014                           fsr2l	equ	0xFD9
 29015                           status	equ	0xFD8
 29016                           
 29017 ;; *************** function _AESEncodeLoRa *****************
 29018 ;; Defined at:
 29019 ;;		line 34 in file "mcc_generated_files/LoRaWAN/lorawan_aes.c"
 29020 ;; Parameters:    Size  Location     Type
 29021 ;;  block           2   48[BANK0 ] PTR unsigned char 
 29022 ;;		 -> aesBuffer(16), LORAWAN_RxDone@hdr(2), GenerateSubkey@l(16), AESCmac@y(16), 
 29023 ;;		 -> AESCmac@x(16), loRa.activationParameters(105), radioBuffer(271), loRa(245), 
 29024 ;;  key             2   50[BANK0 ] PTR unsigned char 
 29025 ;;		 -> loRa.activationParameters(105), loRa(245), 
 29026 ;; Auto vars:     Size  Location     Type
 29027 ;;  useKey         16   52[BANK0 ] unsigned char [16]
 29028 ;; Return value:  Size  Location     Type
 29029 ;;                  1    wreg      void 
 29030 ;; Registers used:
 29031 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 29032 ;; Tracked objects:
 29033 ;;		On entry : F/0
 29034 ;;		On exit  : F/0
 29035 ;;		Unchanged: 0/0
 29036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29037 ;;      Params:         0       4       0       0       0       0       0       0       0
 29038 ;;      Locals:         0      16       0       0       0       0       0       0       0
 29039 ;;      Temps:          0       0       0       0       0       0       0       0       0
 29040 ;;      Totals:         0      20       0       0       0       0       0       0       0
 29041 ;;Total ram usage:       20 bytes
 29042 ;; Hardware stack levels used:    1
 29043 ;; Hardware stack levels required when called:    9
 29044 ;; This function calls:
 29045 ;;		_AESEncode
 29046 ;;		_memcpy
 29047 ;; This function is called by:
 29048 ;;		_AESCmac
 29049 ;;		_GenerateSubkey
 29050 ;;		_LORAWAN_RxDone
 29051 ;;		_ComputeSessionKeys
 29052 ;;		_EncryptFRMPayload
 29053 ;; This function uses a non-reentrant model
 29054 ;;
 29055                           
 29056                           	psect	text148
 29057  007312                     __ptext148:
 29058                           	opt stack 0
 29059  007312                     _AESEncodeLoRa:
 29060                           	opt stack 17
 29061                           
 29062                           ; BSR set to: 0
 29063                           ;lorawan_aes.c: 36: uint8_t useKey[16];
 29064                           ;lorawan_aes.c: 37: memcpy(useKey, key, sizeof(useKey));
 29065                           
 29066                           ; BSR set to: 0
 29067                           ;incstack = 0
 29068  007312  0E94               	movlw	low AESEncodeLoRa@useKey
 29069  007314  6F64               	movwf	memcpy@d1& (0+255),b
 29070  007316  6B65               	clrf	(memcpy@d1+1)& (0+255),b
 29071  007318  C092  F066         	movff	AESEncodeLoRa@key,memcpy@s1
 29072  00731C  C093  F067         	movff	AESEncodeLoRa@key+1,memcpy@s1+1
 29073  007320  6B69               	clrf	(memcpy@n+1)& (0+255),b
 29074  007322  0E10               	movlw	16
 29075  007324  6F68               	movwf	memcpy@n& (0+255),b
 29076  007326  EC73  F034         	call	_memcpy	;wreg free
 29077                           
 29078                           ;lorawan_aes.c: 38: AESEncode(block, useKey);
 29079  00732A  C090  F06A         	movff	AESEncodeLoRa@block,AESEncode@block
 29080  00732E  C091  F06B         	movff	AESEncodeLoRa@block+1,AESEncode@block+1
 29081  007332  0E94               	movlw	low AESEncodeLoRa@useKey
 29082  007334  6F6C               	movwf	AESEncode@masterKey& (0+255),b
 29083  007336  EF9C  F010         	goto	_AESEncode	;wreg free
 29084  00733A                     __end_of_AESEncodeLoRa:
 29085                           	opt stack 0
 29086                           tosu	equ	0xFFF
 29087                           tosh	equ	0xFFE
 29088                           tosl	equ	0xFFD
 29089                           pclath	equ	0xFFA
 29090                           tblptru	equ	0xFF8
 29091                           tblptrh	equ	0xFF7
 29092                           tblptrl	equ	0xFF6
 29093                           tablat	equ	0xFF5
 29094                           prodh	equ	0xFF4
 29095                           prodl	equ	0xFF3
 29096                           intcon	equ	0xFF2
 29097                           indf0	equ	0xFEF
 29098                           postinc0	equ	0xFEE
 29099                           plusw0	equ	0xFEB
 29100                           fsr0h	equ	0xFEA
 29101                           fsr0l	equ	0xFE9
 29102                           wreg	equ	0xFE8
 29103                           postinc1	equ	0xFE6
 29104                           postdec1	equ	0xFE5
 29105                           plusw1	equ	0xFE3
 29106                           fsr1h	equ	0xFE2
 29107                           fsr1l	equ	0xFE1
 29108                           indf2	equ	0xFDF
 29109                           postinc2	equ	0xFDE
 29110                           postdec2	equ	0xFDD
 29111                           plusw2	equ	0xFDB
 29112                           fsr2h	equ	0xFDA
 29113                           fsr2l	equ	0xFD9
 29114                           status	equ	0xFD8
 29115                           
 29116 ;; *************** function _AESEncode *****************
 29117 ;; Defined at:
 29118 ;;		line 236 in file "mcc_generated_files/LoRaWAN/AES.c"
 29119 ;; Parameters:    Size  Location     Type
 29120 ;;  block           2   10[BANK0 ] PTR unsigned char 
 29121 ;;		 -> aesBuffer(16), LORAWAN_RxDone@hdr(2), GenerateSubkey@l(16), AESCmac@y(16), 
 29122 ;;		 -> AESCmac@x(16), loRa.activationParameters(105), radioBuffer(271), loRa(245), 
 29123 ;;  masterKey       1   12[BANK0 ] PTR unsigned char 
 29124 ;;		 -> AESEncodeLoRa@useKey(16), 
 29125 ;; Auto vars:     Size  Location     Type
 29126 ;;  aux3            1   46[BANK0 ] unsigned char 
 29127 ;;  aux1            1   45[BANK0 ] unsigned char 
 29128 ;;  aux2            1   44[BANK0 ] unsigned char 
 29129 ;;  aux             1   43[BANK0 ] unsigned char 
 29130 ;;  key            16   21[BANK0 ] unsigned char [16]
 29131 ;;  i               1   47[BANK0 ] unsigned char 
 29132 ;; Return value:  Size  Location     Type
 29133 ;;                  1    wreg      void 
 29134 ;; Registers used:
 29135 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 29136 ;; Tracked objects:
 29137 ;;		On entry : F/0
 29138 ;;		On exit  : F/0
 29139 ;;		Unchanged: 0/0
 29140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29141 ;;      Params:         0       3       0       0       0       0       0       0       0
 29142 ;;      Locals:         0      27       0       0       0       0       0       0       0
 29143 ;;      Temps:          0       8       0       0       0       0       0       0       0
 29144 ;;      Totals:         0      38       0       0       0       0       0       0       0
 29145 ;;Total ram usage:       38 bytes
 29146 ;; Hardware stack levels used:    1
 29147 ;; Hardware stack levels required when called:    8
 29148 ;; This function calls:
 29149 ;;		_EncKeySchedule
 29150 ;;		_EncodeShiftRow
 29151 ;; This function is called by:
 29152 ;;		_AESEncodeLoRa
 29153 ;; This function uses a non-reentrant model
 29154 ;;
 29155                           
 29156                           	psect	text149
 29157  002138                     __ptext149:
 29158                           	opt stack 0
 29159  002138                     _AESEncode:
 29160                           	opt stack 17
 29161                           
 29162                           ; BSR set to: 0
 29163                           ;AES.c: 238: unsigned char i;
 29164                           ;AES.c: 240: unsigned char key[16];
 29165                           ;AES.c: 242: for (i = 0; i < 16; i++)
 29166                           
 29167                           ; BSR set to: 0
 29168                           ;incstack = 0
 29169  002138  6B8F               	clrf	AESEncode@i& (0+255),b
 29170  00213A                     l11974:
 29171                           
 29172                           ; BSR set to: 0
 29173                           ;AES.c: 243: {
 29174                           ;AES.c: 244: key[i] = masterKey[i];
 29175  00213A  516C               	movf	AESEncode@masterKey& (0+255),w,b
 29176  00213C  258F               	addwf	AESEncode@i& (0+255),w,b
 29177  00213E  6ED9               	movwf	fsr2l,c
 29178  002140  6ADA               	clrf	fsr2h,c
 29179  002142  518F               	movf	AESEncode@i& (0+255),w,b
 29180  002144  0F75               	addlw	low AESEncode@key
 29181  002146  6EE9               	movwf	fsr0l,c
 29182  002148  6AEA               	clrf	fsr0h,c
 29183  00214A  CFDF FFEF          	movff	indf2,indf0
 29184                           
 29185                           ; BSR set to: 0
 29186  00214E  2B8F               	incf	AESEncode@i& (0+255),f,b
 29187                           
 29188                           ; BSR set to: 0
 29189  002150  0E0F               	movlw	15
 29190  002152  658F               	cpfsgt	AESEncode@i& (0+255),b
 29191  002154  D7F2               	goto	l11974
 29192                           
 29193                           ; BSR set to: 0
 29194                           ;AES.c: 245: }
 29195                           ;AES.c: 248: _roundCounter = 10;
 29196  002156  0E0A               	movlw	10
 29197  002158  6E47               	movwf	__roundCounter,c
 29198                           
 29199                           ;AES.c: 250: _rcon = 0x01;
 29200  00215A  0E01               	movlw	1
 29201  00215C  6E46               	movwf	__rcon,c
 29202                           
 29203                           ; BSR set to: 0
 29204                           ;AES.c: 253: for(i=0;i<16;i++)
 29205  00215E  6B8F               	clrf	AESEncode@i& (0+255),b
 29206  002160                     l11988:
 29207                           
 29208                           ; BSR set to: 0
 29209                           ;AES.c: 254: {
 29210                           ;AES.c: 255: block[i] ^= key[i];
 29211  002160  518F               	movf	AESEncode@i& (0+255),w,b
 29212  002162  0F75               	addlw	low AESEncode@key
 29213  002164  6ED9               	movwf	fsr2l,c
 29214  002166  6ADA               	clrf	fsr2h,c
 29215  002168  50DF               	movf	indf2,w,c
 29216  00216A  6F6D               	movwf	??_AESEncode& (0+255),b
 29217  00216C  518F               	movf	AESEncode@i& (0+255),w,b
 29218  00216E  256A               	addwf	AESEncode@block& (0+255),w,b
 29219  002170  6ED9               	movwf	fsr2l,c
 29220  002172  0E00               	movlw	0
 29221  002174  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29222  002176  6EDA               	movwf	fsr2h,c
 29223  002178  516D               	movf	??_AESEncode& (0+255),w,b
 29224  00217A  1ADF               	xorwf	indf2,f,c
 29225                           
 29226                           ; BSR set to: 0
 29227  00217C  2B8F               	incf	AESEncode@i& (0+255),f,b
 29228                           
 29229                           ; BSR set to: 0
 29230  00217E  0E0F               	movlw	15
 29231  002180  658F               	cpfsgt	AESEncode@i& (0+255),b
 29232  002182  D7EE               	goto	l11988
 29233  002184                     l2541:
 29234                           
 29235                           ; BSR set to: 0
 29236                           ;AES.c: 259: {
 29237                           ;AES.c: 261: for(i=0;i<16;i++)
 29238  002184  6B8F               	clrf	AESEncode@i& (0+255),b
 29239  002186                     l11998:
 29240                           
 29241                           ; BSR set to: 0
 29242                           ;AES.c: 262: {
 29243                           ;AES.c: 263: block[i]=STable[block[i]];
 29244  002186  518F               	movf	AESEncode@i& (0+255),w,b
 29245  002188  256A               	addwf	AESEncode@block& (0+255),w,b
 29246  00218A  6ED9               	movwf	fsr2l,c
 29247  00218C  0E00               	movlw	0
 29248  00218E  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29249  002190  6EDA               	movwf	fsr2h,c
 29250  002192  50DF               	movf	indf2,w,c
 29251  002194  6F6D               	movwf	??_AESEncode& (0+255),b
 29252  002196  6B6E               	clrf	(??_AESEncode+1)& (0+255),b
 29253  002198  0E6D               	movlw	low _STable
 29254  00219A  256D               	addwf	??_AESEncode& (0+255),w,b
 29255  00219C  6EF6               	movwf	tblptrl,c
 29256  00219E  0E7E               	movlw	high _STable
 29257  0021A0  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29258  0021A2  6EF7               	movwf	tblptrh,c
 29259  0021A4                     	if	0	;There are less than 3 active tblptr bytes
 29260  0021A4                     	endif
 29261  0021A4  518F               	movf	AESEncode@i& (0+255),w,b
 29262  0021A6  256A               	addwf	AESEncode@block& (0+255),w,b
 29263  0021A8  6ED9               	movwf	fsr2l,c
 29264  0021AA  0E00               	movlw	0
 29265  0021AC  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29266  0021AE  6EDA               	movwf	fsr2h,c
 29267  0021B0  0008               	tblrd		*
 29268  0021B2  CFF5 FFDF          	movff	tablat,indf2
 29269                           
 29270                           ; BSR set to: 0
 29271  0021B6  2B8F               	incf	AESEncode@i& (0+255),f,b
 29272                           
 29273                           ; BSR set to: 0
 29274  0021B8  0E0F               	movlw	15
 29275  0021BA  658F               	cpfsgt	AESEncode@i& (0+255),b
 29276  0021BC  D7E4               	goto	l11998
 29277                           
 29278                           ; BSR set to: 0
 29279                           ;AES.c: 264: }
 29280                           ;AES.c: 267: EncodeShiftRow(block);
 29281  0021BE  C06A  F064         	movff	AESEncode@block,EncodeShiftRow@stateTable
 29282  0021C2  C06B  F065         	movff	AESEncode@block+1,EncodeShiftRow@stateTable+1
 29283  0021C6  ECB6  F01E         	call	_EncodeShiftRow	;wreg free
 29284                           
 29285                           ; BSR set to: 0
 29286                           ;AES.c: 270: if(_roundCounter != 1)
 29287  0021CA  0447               	decf	__roundCounter,w,c
 29288  0021CC  E101 D111          	bz	l12046
 29289                           
 29290                           ; BSR set to: 0
 29291                           ;AES.c: 271: {
 29292                           ;AES.c: 272: unsigned char aux,aux1,aux2,aux3;
 29293                           ;AES.c: 274: for(i=0;i<16;i+=4)
 29294  0021D0  6B8F               	clrf	AESEncode@i& (0+255),b
 29295  0021D2                     l12014:
 29296                           
 29297                           ; BSR set to: 0
 29298                           ;AES.c: 275: {
 29299                           ;AES.c: 276: aux1= block[i+0] ^ block[i+1];
 29300  0021D2  518F               	movf	AESEncode@i& (0+255),w,b
 29301  0021D4  256A               	addwf	AESEncode@block& (0+255),w,b
 29302  0021D6  6F6D               	movwf	??_AESEncode& (0+255),b
 29303  0021D8  0E00               	movlw	0
 29304  0021DA  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29305  0021DC  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29306  0021DE  296D               	incf	??_AESEncode& (0+255),w,b
 29307  0021E0  6ED9               	movwf	fsr2l,c
 29308  0021E2  0E00               	movlw	0
 29309  0021E4  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29310  0021E6  6EDA               	movwf	fsr2h,c
 29311  0021E8  50DF               	movf	indf2,w,c
 29312  0021EA  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29313  0021EC  518F               	movf	AESEncode@i& (0+255),w,b
 29314  0021EE  256A               	addwf	AESEncode@block& (0+255),w,b
 29315  0021F0  6ED9               	movwf	fsr2l,c
 29316  0021F2  0E00               	movlw	0
 29317  0021F4  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29318  0021F6  6EDA               	movwf	fsr2h,c
 29319  0021F8  50DF               	movf	indf2,w,c
 29320  0021FA  196F               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29321  0021FC  6F8D               	movwf	AESEncode@aux1& (0+255),b
 29322                           
 29323                           ;AES.c: 277: aux3= block[i+2]^block[i+3];
 29324  0021FE  518F               	movf	AESEncode@i& (0+255),w,b
 29325  002200  256A               	addwf	AESEncode@block& (0+255),w,b
 29326  002202  6F6D               	movwf	??_AESEncode& (0+255),b
 29327  002204  0E00               	movlw	0
 29328  002206  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29329  002208  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29330  00220A  0E03               	movlw	3
 29331  00220C  256D               	addwf	??_AESEncode& (0+255),w,b
 29332  00220E  6ED9               	movwf	fsr2l,c
 29333  002210  0E00               	movlw	0
 29334  002212  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29335  002214  6EDA               	movwf	fsr2h,c
 29336  002216  50DF               	movf	indf2,w,c
 29337  002218  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29338  00221A  518F               	movf	AESEncode@i& (0+255),w,b
 29339  00221C  256A               	addwf	AESEncode@block& (0+255),w,b
 29340  00221E  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29341  002220  0E00               	movlw	0
 29342  002222  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29343  002224  6F71               	movwf	(??_AESEncode+4)& (0+255),b
 29344  002226  0E02               	movlw	2
 29345  002228  2570               	addwf	(??_AESEncode+3)& (0+255),w,b
 29346  00222A  6ED9               	movwf	fsr2l,c
 29347  00222C  0E00               	movlw	0
 29348  00222E  2171               	addwfc	(??_AESEncode+4)& (0+255),w,b
 29349  002230  6EDA               	movwf	fsr2h,c
 29350  002232  50DF               	movf	indf2,w,c
 29351  002234  196F               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29352  002236  6F8E               	movwf	AESEncode@aux3& (0+255),b
 29353                           
 29354                           ; BSR set to: 0
 29355                           ;AES.c: 278: aux = aux1 ^ aux3;
 29356  002238  198D               	xorwf	AESEncode@aux1& (0+255),w,b
 29357  00223A  6F8B               	movwf	AESEncode@aux& (0+255),b
 29358                           
 29359                           ; BSR set to: 0
 29360                           ;AES.c: 279: aux2= block[i+2]^block[i+1];
 29361  00223C  518F               	movf	AESEncode@i& (0+255),w,b
 29362  00223E  256A               	addwf	AESEncode@block& (0+255),w,b
 29363  002240  6F6D               	movwf	??_AESEncode& (0+255),b
 29364  002242  0E00               	movlw	0
 29365  002244  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29366  002246  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29367  002248  296D               	incf	??_AESEncode& (0+255),w,b
 29368  00224A  6ED9               	movwf	fsr2l,c
 29369  00224C  0E00               	movlw	0
 29370  00224E  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29371  002250  6EDA               	movwf	fsr2h,c
 29372  002252  50DF               	movf	indf2,w,c
 29373  002254  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29374  002256  518F               	movf	AESEncode@i& (0+255),w,b
 29375  002258  256A               	addwf	AESEncode@block& (0+255),w,b
 29376  00225A  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29377  00225C  0E00               	movlw	0
 29378  00225E  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29379  002260  6F71               	movwf	(??_AESEncode+4)& (0+255),b
 29380  002262  0E02               	movlw	2
 29381  002264  2570               	addwf	(??_AESEncode+3)& (0+255),w,b
 29382  002266  6ED9               	movwf	fsr2l,c
 29383  002268  0E00               	movlw	0
 29384  00226A  2171               	addwfc	(??_AESEncode+4)& (0+255),w,b
 29385  00226C  6EDA               	movwf	fsr2h,c
 29386  00226E  50DF               	movf	indf2,w,c
 29387  002270  196F               	xorwf	(??_AESEncode+2)& (0+255),w,b
 29388  002272  6F8C               	movwf	AESEncode@aux2& (0+255),b
 29389                           
 29390                           ;AES.c: 281: aux1 = (((aux1)<0x80)?(aux1)<<1:(((aux1)<<1)^0x1b) );
 29391  002274  0E7F               	movlw	127
 29392  002276  658D               	cpfsgt	AESEncode@aux1& (0+255),b
 29393  002278  D00C               	goto	l12022
 29394                           
 29395                           ; BSR set to: 0
 29396  00227A  0E1B               	movlw	27
 29397  00227C  C08D  F06D         	movff	AESEncode@aux1,??_AESEncode
 29398  002280  6B6E               	clrf	(??_AESEncode+1)& (0+255),b
 29399  002282  90D8               	bcf	status,0,c
 29400  002284  376D               	rlcf	??_AESEncode& (0+255),f,b
 29401  002286  376E               	rlcf	(??_AESEncode+1)& (0+255),f,b
 29402  002288  196D               	xorwf	??_AESEncode& (0+255),w,b
 29403  00228A  6F85               	movwf	_AESEncode$3781& (0+255),b
 29404  00228C  516E               	movf	(??_AESEncode+1)& (0+255),w,b
 29405  00228E  6F86               	movwf	(_AESEncode$3781+1)& (0+255),b
 29406  002290  D005               	goto	l12024
 29407  002292                     l12022:
 29408                           
 29409                           ; BSR set to: 0
 29410  002292  90D8               	bcf	status,0,c
 29411  002294  358D               	rlcf	AESEncode@aux1& (0+255),w,b
 29412  002296  6F85               	movwf	_AESEncode$3781& (0+255),b
 29413  002298  6B86               	clrf	(_AESEncode$3781+1)& (0+255),b
 29414  00229A  3786               	rlcf	(_AESEncode$3781+1)& (0+255),f,b
 29415  00229C                     l12024:
 29416                           
 29417                           ; BSR set to: 0
 29418  00229C  C085  F08D         	movff	_AESEncode$3781,AESEncode@aux1
 29419                           
 29420                           ;AES.c: 282: aux2 = (((aux2)<0x80)?(aux2)<<1:(((aux2)<<1)^0x1b) );
 29421  0022A0  0E7F               	movlw	127
 29422  0022A2  658C               	cpfsgt	AESEncode@aux2& (0+255),b
 29423  0022A4  D00C               	goto	l12028
 29424                           
 29425                           ; BSR set to: 0
 29426  0022A6  0E1B               	movlw	27
 29427  0022A8  C08C  F06D         	movff	AESEncode@aux2,??_AESEncode
 29428  0022AC  6B6E               	clrf	(??_AESEncode+1)& (0+255),b
 29429  0022AE  90D8               	bcf	status,0,c
 29430  0022B0  376D               	rlcf	??_AESEncode& (0+255),f,b
 29431  0022B2  376E               	rlcf	(??_AESEncode+1)& (0+255),f,b
 29432  0022B4  196D               	xorwf	??_AESEncode& (0+255),w,b
 29433  0022B6  6F87               	movwf	_AESEncode$3782& (0+255),b
 29434  0022B8  516E               	movf	(??_AESEncode+1)& (0+255),w,b
 29435  0022BA  6F88               	movwf	(_AESEncode$3782+1)& (0+255),b
 29436  0022BC  D005               	goto	l12030
 29437  0022BE                     l12028:
 29438                           
 29439                           ; BSR set to: 0
 29440  0022BE  90D8               	bcf	status,0,c
 29441  0022C0  358C               	rlcf	AESEncode@aux2& (0+255),w,b
 29442  0022C2  6F87               	movwf	_AESEncode$3782& (0+255),b
 29443  0022C4  6B88               	clrf	(_AESEncode$3782+1)& (0+255),b
 29444  0022C6  3788               	rlcf	(_AESEncode$3782+1)& (0+255),f,b
 29445  0022C8                     l12030:
 29446                           
 29447                           ; BSR set to: 0
 29448  0022C8  C087  F08C         	movff	_AESEncode$3782,AESEncode@aux2
 29449                           
 29450                           ;AES.c: 283: aux3 = (((aux3)<0x80)?(aux3)<<1:(((aux3)<<1)^0x1b) );
 29451  0022CC  0E7F               	movlw	127
 29452  0022CE  658E               	cpfsgt	AESEncode@aux3& (0+255),b
 29453  0022D0  D00C               	goto	l12034
 29454                           
 29455                           ; BSR set to: 0
 29456  0022D2  0E1B               	movlw	27
 29457  0022D4  C08E  F06D         	movff	AESEncode@aux3,??_AESEncode
 29458  0022D8  6B6E               	clrf	(??_AESEncode+1)& (0+255),b
 29459  0022DA  90D8               	bcf	status,0,c
 29460  0022DC  376D               	rlcf	??_AESEncode& (0+255),f,b
 29461  0022DE  376E               	rlcf	(??_AESEncode+1)& (0+255),f,b
 29462  0022E0  196D               	xorwf	??_AESEncode& (0+255),w,b
 29463  0022E2  6F89               	movwf	_AESEncode$3783& (0+255),b
 29464  0022E4  516E               	movf	(??_AESEncode+1)& (0+255),w,b
 29465  0022E6  6F8A               	movwf	(_AESEncode$3783+1)& (0+255),b
 29466  0022E8  D005               	goto	l12036
 29467  0022EA                     l12034:
 29468                           
 29469                           ; BSR set to: 0
 29470  0022EA  90D8               	bcf	status,0,c
 29471  0022EC  358E               	rlcf	AESEncode@aux3& (0+255),w,b
 29472  0022EE  6F89               	movwf	_AESEncode$3783& (0+255),b
 29473  0022F0  6B8A               	clrf	(_AESEncode$3783+1)& (0+255),b
 29474  0022F2  378A               	rlcf	(_AESEncode$3783+1)& (0+255),f,b
 29475  0022F4                     l12036:
 29476                           
 29477                           ; BSR set to: 0
 29478  0022F4  C089  F08E         	movff	_AESEncode$3783,AESEncode@aux3
 29479                           
 29480                           ; BSR set to: 0
 29481                           ;AES.c: 285: block[i+0]= aux^aux1^block[i+0];
 29482  0022F8  518F               	movf	AESEncode@i& (0+255),w,b
 29483  0022FA  256A               	addwf	AESEncode@block& (0+255),w,b
 29484  0022FC  6ED9               	movwf	fsr2l,c
 29485  0022FE  0E00               	movlw	0
 29486  002300  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29487  002302  6EDA               	movwf	fsr2h,c
 29488  002304  518F               	movf	AESEncode@i& (0+255),w,b
 29489  002306  256A               	addwf	AESEncode@block& (0+255),w,b
 29490  002308  6EE9               	movwf	fsr0l,c
 29491  00230A  0E00               	movlw	0
 29492  00230C  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29493  00230E  6EEA               	movwf	fsr0h,c
 29494  002310  50EF               	movf	indf0,w,c
 29495  002312  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29496  002314  198D               	xorwf	AESEncode@aux1& (0+255),w,b
 29497  002316  6EDF               	movwf	indf2,c
 29498                           
 29499                           ; BSR set to: 0
 29500                           ;AES.c: 286: block[i+1]= aux^aux2^block[i+1];
 29501  002318  518F               	movf	AESEncode@i& (0+255),w,b
 29502  00231A  256A               	addwf	AESEncode@block& (0+255),w,b
 29503  00231C  6F6D               	movwf	??_AESEncode& (0+255),b
 29504  00231E  0E00               	movlw	0
 29505  002320  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29506  002322  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29507  002324  296D               	incf	??_AESEncode& (0+255),w,b
 29508  002326  6ED9               	movwf	fsr2l,c
 29509  002328  0E00               	movlw	0
 29510  00232A  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29511  00232C  6EDA               	movwf	fsr2h,c
 29512  00232E  518F               	movf	AESEncode@i& (0+255),w,b
 29513  002330  256A               	addwf	AESEncode@block& (0+255),w,b
 29514  002332  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29515  002334  0E00               	movlw	0
 29516  002336  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29517  002338  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29518  00233A  296F               	incf	(??_AESEncode+2)& (0+255),w,b
 29519  00233C  6EE9               	movwf	fsr0l,c
 29520  00233E  0E00               	movlw	0
 29521  002340  2170               	addwfc	(??_AESEncode+3)& (0+255),w,b
 29522  002342  6EEA               	movwf	fsr0h,c
 29523  002344  50EF               	movf	indf0,w,c
 29524  002346  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29525  002348  198C               	xorwf	AESEncode@aux2& (0+255),w,b
 29526  00234A  6EDF               	movwf	indf2,c
 29527                           
 29528                           ; BSR set to: 0
 29529                           ;AES.c: 287: block[i+2]= aux^aux3^block[i+2];
 29530  00234C  518F               	movf	AESEncode@i& (0+255),w,b
 29531  00234E  256A               	addwf	AESEncode@block& (0+255),w,b
 29532  002350  6F6D               	movwf	??_AESEncode& (0+255),b
 29533  002352  0E00               	movlw	0
 29534  002354  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29535  002356  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29536  002358  0E02               	movlw	2
 29537  00235A  256D               	addwf	??_AESEncode& (0+255),w,b
 29538  00235C  6ED9               	movwf	fsr2l,c
 29539  00235E  0E00               	movlw	0
 29540  002360  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29541  002362  6EDA               	movwf	fsr2h,c
 29542  002364  518F               	movf	AESEncode@i& (0+255),w,b
 29543  002366  256A               	addwf	AESEncode@block& (0+255),w,b
 29544  002368  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29545  00236A  0E00               	movlw	0
 29546  00236C  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29547  00236E  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29548  002370  0E02               	movlw	2
 29549  002372  256F               	addwf	(??_AESEncode+2)& (0+255),w,b
 29550  002374  6EE9               	movwf	fsr0l,c
 29551  002376  0E00               	movlw	0
 29552  002378  2170               	addwfc	(??_AESEncode+3)& (0+255),w,b
 29553  00237A  6EEA               	movwf	fsr0h,c
 29554  00237C  50EF               	movf	indf0,w,c
 29555  00237E  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29556  002380  198E               	xorwf	AESEncode@aux3& (0+255),w,b
 29557  002382  6EDF               	movwf	indf2,c
 29558                           
 29559                           ; BSR set to: 0
 29560                           ;AES.c: 288: block[i+3]= block[i+0]^block[i+1]^block[i+2]^aux;
 29561  002384  518F               	movf	AESEncode@i& (0+255),w,b
 29562  002386  256A               	addwf	AESEncode@block& (0+255),w,b
 29563  002388  6F6D               	movwf	??_AESEncode& (0+255),b
 29564  00238A  0E00               	movlw	0
 29565  00238C  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29566  00238E  6F6E               	movwf	(??_AESEncode+1)& (0+255),b
 29567  002390  0E03               	movlw	3
 29568  002392  256D               	addwf	??_AESEncode& (0+255),w,b
 29569  002394  6ED9               	movwf	fsr2l,c
 29570  002396  0E00               	movlw	0
 29571  002398  216E               	addwfc	(??_AESEncode+1)& (0+255),w,b
 29572  00239A  6EDA               	movwf	fsr2h,c
 29573  00239C  518F               	movf	AESEncode@i& (0+255),w,b
 29574  00239E  256A               	addwf	AESEncode@block& (0+255),w,b
 29575  0023A0  6F6F               	movwf	(??_AESEncode+2)& (0+255),b
 29576  0023A2  0E00               	movlw	0
 29577  0023A4  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29578  0023A6  6F70               	movwf	(??_AESEncode+3)& (0+255),b
 29579  0023A8  0E02               	movlw	2
 29580  0023AA  256F               	addwf	(??_AESEncode+2)& (0+255),w,b
 29581  0023AC  6EE9               	movwf	fsr0l,c
 29582  0023AE  0E00               	movlw	0
 29583  0023B0  2170               	addwfc	(??_AESEncode+3)& (0+255),w,b
 29584  0023B2  6EEA               	movwf	fsr0h,c
 29585  0023B4  50EF               	movf	indf0,w,c
 29586  0023B6  6F71               	movwf	(??_AESEncode+4)& (0+255),b
 29587  0023B8  518F               	movf	AESEncode@i& (0+255),w,b
 29588  0023BA  256A               	addwf	AESEncode@block& (0+255),w,b
 29589  0023BC  6F72               	movwf	(??_AESEncode+5)& (0+255),b
 29590  0023BE  0E00               	movlw	0
 29591  0023C0  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29592  0023C2  6F73               	movwf	(??_AESEncode+6)& (0+255),b
 29593  0023C4  2972               	incf	(??_AESEncode+5)& (0+255),w,b
 29594  0023C6  6EE9               	movwf	fsr0l,c
 29595  0023C8  0E00               	movlw	0
 29596  0023CA  2173               	addwfc	(??_AESEncode+6)& (0+255),w,b
 29597  0023CC  6EEA               	movwf	fsr0h,c
 29598  0023CE  50EF               	movf	indf0,w,c
 29599  0023D0  6F74               	movwf	(??_AESEncode+7)& (0+255),b
 29600  0023D2  518F               	movf	AESEncode@i& (0+255),w,b
 29601  0023D4  256A               	addwf	AESEncode@block& (0+255),w,b
 29602  0023D6  6EE9               	movwf	fsr0l,c
 29603  0023D8  0E00               	movlw	0
 29604  0023DA  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29605  0023DC  6EEA               	movwf	fsr0h,c
 29606  0023DE  50EF               	movf	indf0,w,c
 29607  0023E0  1974               	xorwf	(??_AESEncode+7)& (0+255),w,b
 29608  0023E2  1971               	xorwf	(??_AESEncode+4)& (0+255),w,b
 29609  0023E4  198B               	xorwf	AESEncode@aux& (0+255),w,b
 29610  0023E6  6EDF               	movwf	indf2,c
 29611  0023E8  0E04               	movlw	4
 29612  0023EA  278F               	addwf	AESEncode@i& (0+255),f,b
 29613  0023EC  0E0F               	movlw	15
 29614  0023EE  658F               	cpfsgt	AESEncode@i& (0+255),b
 29615  0023F0  D6F0               	goto	l12014
 29616  0023F2                     l12046:
 29617                           
 29618                           ; BSR set to: 0
 29619                           ;AES.c: 289: }
 29620                           ;AES.c: 290: }
 29621                           ;AES.c: 292: EncKeySchedule(key);
 29622  0023F2  0E75               	movlw	low AESEncode@key
 29623  0023F4  6F64               	movwf	EncKeySchedule@key& (0+255),b
 29624  0023F6  ECE4  F014         	call	_EncKeySchedule	;wreg free
 29625                           
 29626                           ; BSR set to: 0
 29627                           ;AES.c: 294: for(i=0;i<16;i++)
 29628  0023FA  6B8F               	clrf	AESEncode@i& (0+255),b
 29629  0023FC                     l12054:
 29630                           
 29631                           ; BSR set to: 0
 29632                           ;AES.c: 295: {
 29633                           ;AES.c: 296: block[i] ^= key[i];
 29634  0023FC  518F               	movf	AESEncode@i& (0+255),w,b
 29635  0023FE  0F75               	addlw	low AESEncode@key
 29636  002400  6ED9               	movwf	fsr2l,c
 29637  002402  6ADA               	clrf	fsr2h,c
 29638  002404  50DF               	movf	indf2,w,c
 29639  002406  6F6D               	movwf	??_AESEncode& (0+255),b
 29640  002408  518F               	movf	AESEncode@i& (0+255),w,b
 29641  00240A  256A               	addwf	AESEncode@block& (0+255),w,b
 29642  00240C  6ED9               	movwf	fsr2l,c
 29643  00240E  0E00               	movlw	0
 29644  002410  216B               	addwfc	(AESEncode@block+1)& (0+255),w,b
 29645  002412  6EDA               	movwf	fsr2h,c
 29646  002414  516D               	movf	??_AESEncode& (0+255),w,b
 29647  002416  1ADF               	xorwf	indf2,f,c
 29648                           
 29649                           ; BSR set to: 0
 29650  002418  2B8F               	incf	AESEncode@i& (0+255),f,b
 29651                           
 29652                           ; BSR set to: 0
 29653  00241A  0E0F               	movlw	15
 29654  00241C  658F               	cpfsgt	AESEncode@i& (0+255),b
 29655  00241E  D7EE               	goto	l12054
 29656                           
 29657                           ; BSR set to: 0
 29658                           ;AES.c: 297: }
 29659                           ;AES.c: 299: _roundCounter--;
 29660  002420  0647               	decf	__roundCounter,f,c
 29661                           
 29662                           ; BSR set to: 0
 29663                           ;AES.c: 300: }
 29664                           ;AES.c: 301: while(_roundCounter !=0);
 29665  002422  5047               	movf	__roundCounter,w,c
 29666  002424  E001 D6AE          	bnz	l2541
 29667                           
 29668                           ; BSR set to: 0
 29669  002428  0012               	return		;funcret
 29670  00242A                     __end_of_AESEncode:
 29671                           	opt stack 0
 29672                           tosu	equ	0xFFF
 29673                           tosh	equ	0xFFE
 29674                           tosl	equ	0xFFD
 29675                           pclath	equ	0xFFA
 29676                           tblptru	equ	0xFF8
 29677                           tblptrh	equ	0xFF7
 29678                           tblptrl	equ	0xFF6
 29679                           tablat	equ	0xFF5
 29680                           prodh	equ	0xFF4
 29681                           prodl	equ	0xFF3
 29682                           intcon	equ	0xFF2
 29683                           indf0	equ	0xFEF
 29684                           postinc0	equ	0xFEE
 29685                           plusw0	equ	0xFEB
 29686                           fsr0h	equ	0xFEA
 29687                           fsr0l	equ	0xFE9
 29688                           wreg	equ	0xFE8
 29689                           postinc1	equ	0xFE6
 29690                           postdec1	equ	0xFE5
 29691                           plusw1	equ	0xFE3
 29692                           fsr1h	equ	0xFE2
 29693                           fsr1l	equ	0xFE1
 29694                           indf2	equ	0xFDF
 29695                           postinc2	equ	0xFDE
 29696                           postdec2	equ	0xFDD
 29697                           plusw2	equ	0xFDB
 29698                           fsr2h	equ	0xFDA
 29699                           fsr2l	equ	0xFD9
 29700                           status	equ	0xFD8
 29701                           
 29702 ;; *************** function _EncodeShiftRow *****************
 29703 ;; Defined at:
 29704 ;;		line 205 in file "mcc_generated_files/LoRaWAN/AES.c"
 29705 ;; Parameters:    Size  Location     Type
 29706 ;;  stateTable      2    4[BANK0 ] PTR unsigned char 
 29707 ;;		 -> aesBuffer(16), LORAWAN_RxDone@hdr(2), GenerateSubkey@l(16), AESCmac@y(16), 
 29708 ;;		 -> AESCmac@x(16), loRa.activationParameters(105), radioBuffer(271), loRa(245), 
 29709 ;; Auto vars:     Size  Location     Type
 29710 ;;  temp            1    6[BANK0 ] unsigned char 
 29711 ;; Return value:  Size  Location     Type
 29712 ;;                  1    wreg      void 
 29713 ;; Registers used:
 29714 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 29715 ;; Tracked objects:
 29716 ;;		On entry : F/0
 29717 ;;		On exit  : F/0
 29718 ;;		Unchanged: 0/0
 29719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29720 ;;      Params:         0       2       0       0       0       0       0       0       0
 29721 ;;      Locals:         0       1       0       0       0       0       0       0       0
 29722 ;;      Temps:          0       0       0       0       0       0       0       0       0
 29723 ;;      Totals:         0       3       0       0       0       0       0       0       0
 29724 ;;Total ram usage:        3 bytes
 29725 ;; Hardware stack levels used:    1
 29726 ;; Hardware stack levels required when called:    7
 29727 ;; This function calls:
 29728 ;;		Nothing
 29729 ;; This function is called by:
 29730 ;;		_AESEncode
 29731 ;; This function uses a non-reentrant model
 29732 ;;
 29733                           
 29734                           	psect	text150
 29735  003D6C                     __ptext150:
 29736                           	opt stack 0
 29737  003D6C                     _EncodeShiftRow:
 29738                           	opt stack 17
 29739                           
 29740                           ; BSR set to: 0
 29741                           ;AES.c: 207: unsigned char temp;
 29742                           ;AES.c: 212: temp=stateTable[1];
 29743                           
 29744                           ; BSR set to: 0
 29745                           ;incstack = 0
 29746  003D6C  EE20 F001          	lfsr	2,1
 29747  003D70  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29748  003D72  26D9               	addwf	fsr2l,f,c
 29749  003D74  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29750  003D76  22DA               	addwfc	fsr2h,f,c
 29751  003D78  50DF               	movf	indf2,w,c
 29752  003D7A  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29753                           
 29754                           ; BSR set to: 0
 29755                           ;AES.c: 213: stateTable[1]=stateTable[5];
 29756  003D7C  EE20 F005          	lfsr	2,5
 29757  003D80  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29758  003D82  26D9               	addwf	fsr2l,f,c
 29759  003D84  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29760  003D86  22DA               	addwfc	fsr2h,f,c
 29761  003D88  EE00 F001          	lfsr	0,1
 29762  003D8C  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29763  003D8E  26E9               	addwf	fsr0l,f,c
 29764  003D90  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29765  003D92  22EA               	addwfc	fsr0h,f,c
 29766  003D94  CFDF FFEF          	movff	indf2,indf0
 29767                           
 29768                           ; BSR set to: 0
 29769                           ;AES.c: 214: stateTable[5]=stateTable[9];
 29770  003D98  EE20 F009          	lfsr	2,9
 29771  003D9C  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29772  003D9E  26D9               	addwf	fsr2l,f,c
 29773  003DA0  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29774  003DA2  22DA               	addwfc	fsr2h,f,c
 29775  003DA4  EE00 F005          	lfsr	0,5
 29776  003DA8  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29777  003DAA  26E9               	addwf	fsr0l,f,c
 29778  003DAC  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29779  003DAE  22EA               	addwfc	fsr0h,f,c
 29780  003DB0  CFDF FFEF          	movff	indf2,indf0
 29781                           
 29782                           ; BSR set to: 0
 29783                           ;AES.c: 215: stateTable[9]=stateTable[13];
 29784  003DB4  EE20 F00D          	lfsr	2,13
 29785  003DB8  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29786  003DBA  26D9               	addwf	fsr2l,f,c
 29787  003DBC  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29788  003DBE  22DA               	addwfc	fsr2h,f,c
 29789  003DC0  EE00 F009          	lfsr	0,9
 29790  003DC4  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29791  003DC6  26E9               	addwf	fsr0l,f,c
 29792  003DC8  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29793  003DCA  22EA               	addwfc	fsr0h,f,c
 29794  003DCC  CFDF FFEF          	movff	indf2,indf0
 29795                           
 29796                           ; BSR set to: 0
 29797                           ;AES.c: 216: stateTable[13]=temp;
 29798  003DD0  EE20 F00D          	lfsr	2,13
 29799  003DD4  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29800  003DD6  26D9               	addwf	fsr2l,f,c
 29801  003DD8  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29802  003DDA  22DA               	addwfc	fsr2h,f,c
 29803  003DDC  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29804                           
 29805                           ; BSR set to: 0
 29806                           ;AES.c: 219: temp=stateTable[2];
 29807  003DE0  EE20 F002          	lfsr	2,2
 29808  003DE4  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29809  003DE6  26D9               	addwf	fsr2l,f,c
 29810  003DE8  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29811  003DEA  22DA               	addwfc	fsr2h,f,c
 29812  003DEC  50DF               	movf	indf2,w,c
 29813  003DEE  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29814                           
 29815                           ; BSR set to: 0
 29816                           ;AES.c: 220: stateTable[2]=stateTable[10];
 29817  003DF0  EE20 F00A          	lfsr	2,10
 29818  003DF4  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29819  003DF6  26D9               	addwf	fsr2l,f,c
 29820  003DF8  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29821  003DFA  22DA               	addwfc	fsr2h,f,c
 29822  003DFC  EE00 F002          	lfsr	0,2
 29823  003E00  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29824  003E02  26E9               	addwf	fsr0l,f,c
 29825  003E04  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29826  003E06  22EA               	addwfc	fsr0h,f,c
 29827  003E08  CFDF FFEF          	movff	indf2,indf0
 29828                           
 29829                           ;AES.c: 221: stateTable[10]=temp;
 29830  003E0C  EE20 F00A          	lfsr	2,10
 29831  003E10  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29832  003E12  26D9               	addwf	fsr2l,f,c
 29833  003E14  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29834  003E16  22DA               	addwfc	fsr2h,f,c
 29835  003E18  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29836                           
 29837                           ;AES.c: 222: temp=stateTable[14];
 29838  003E1C  EE20 F00E          	lfsr	2,14
 29839  003E20  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29840  003E22  26D9               	addwf	fsr2l,f,c
 29841  003E24  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29842  003E26  22DA               	addwfc	fsr2h,f,c
 29843  003E28  50DF               	movf	indf2,w,c
 29844  003E2A  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29845                           
 29846                           ; BSR set to: 0
 29847                           ;AES.c: 223: stateTable[14]=stateTable[6];
 29848  003E2C  EE20 F006          	lfsr	2,6
 29849  003E30  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29850  003E32  26D9               	addwf	fsr2l,f,c
 29851  003E34  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29852  003E36  22DA               	addwfc	fsr2h,f,c
 29853  003E38  EE00 F00E          	lfsr	0,14
 29854  003E3C  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29855  003E3E  26E9               	addwf	fsr0l,f,c
 29856  003E40  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29857  003E42  22EA               	addwfc	fsr0h,f,c
 29858  003E44  CFDF FFEF          	movff	indf2,indf0
 29859                           
 29860                           ; BSR set to: 0
 29861                           ;AES.c: 224: stateTable[6]=temp;
 29862  003E48  EE20 F006          	lfsr	2,6
 29863  003E4C  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29864  003E4E  26D9               	addwf	fsr2l,f,c
 29865  003E50  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29866  003E52  22DA               	addwfc	fsr2h,f,c
 29867  003E54  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29868                           
 29869                           ; BSR set to: 0
 29870                           ;AES.c: 227: temp=stateTable[3];
 29871  003E58  EE20 F003          	lfsr	2,3
 29872  003E5C  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29873  003E5E  26D9               	addwf	fsr2l,f,c
 29874  003E60  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29875  003E62  22DA               	addwfc	fsr2h,f,c
 29876  003E64  50DF               	movf	indf2,w,c
 29877  003E66  6F66               	movwf	EncodeShiftRow@temp& (0+255),b
 29878                           
 29879                           ; BSR set to: 0
 29880                           ;AES.c: 228: stateTable[3]=stateTable[15];
 29881  003E68  EE20 F00F          	lfsr	2,15
 29882  003E6C  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29883  003E6E  26D9               	addwf	fsr2l,f,c
 29884  003E70  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29885  003E72  22DA               	addwfc	fsr2h,f,c
 29886  003E74  EE00 F003          	lfsr	0,3
 29887  003E78  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29888  003E7A  26E9               	addwf	fsr0l,f,c
 29889  003E7C  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29890  003E7E  22EA               	addwfc	fsr0h,f,c
 29891  003E80  CFDF FFEF          	movff	indf2,indf0
 29892                           
 29893                           ; BSR set to: 0
 29894                           ;AES.c: 229: stateTable[15]=stateTable[11];
 29895  003E84  EE20 F00B          	lfsr	2,11
 29896  003E88  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29897  003E8A  26D9               	addwf	fsr2l,f,c
 29898  003E8C  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29899  003E8E  22DA               	addwfc	fsr2h,f,c
 29900  003E90  EE00 F00F          	lfsr	0,15
 29901  003E94  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29902  003E96  26E9               	addwf	fsr0l,f,c
 29903  003E98  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29904  003E9A  22EA               	addwfc	fsr0h,f,c
 29905  003E9C  CFDF FFEF          	movff	indf2,indf0
 29906                           
 29907                           ; BSR set to: 0
 29908                           ;AES.c: 230: stateTable[11]=stateTable[7];
 29909  003EA0  EE20 F007          	lfsr	2,7
 29910  003EA4  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29911  003EA6  26D9               	addwf	fsr2l,f,c
 29912  003EA8  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29913  003EAA  22DA               	addwfc	fsr2h,f,c
 29914  003EAC  EE00 F00B          	lfsr	0,11
 29915  003EB0  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29916  003EB2  26E9               	addwf	fsr0l,f,c
 29917  003EB4  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29918  003EB6  22EA               	addwfc	fsr0h,f,c
 29919  003EB8  CFDF FFEF          	movff	indf2,indf0
 29920                           
 29921                           ;AES.c: 231: stateTable[7]=temp;
 29922  003EBC  EE20 F007          	lfsr	2,7
 29923  003EC0  5164               	movf	EncodeShiftRow@stateTable& (0+255),w,b
 29924  003EC2  26D9               	addwf	fsr2l,f,c
 29925  003EC4  5165               	movf	(EncodeShiftRow@stateTable+1)& (0+255),w,b
 29926  003EC6  22DA               	addwfc	fsr2h,f,c
 29927  003EC8  C066  FFDF         	movff	EncodeShiftRow@temp,indf2
 29928                           
 29929                           ; BSR set to: 0
 29930  003ECC  0012               	return		;funcret
 29931  003ECE                     __end_of_EncodeShiftRow:
 29932                           	opt stack 0
 29933                           tosu	equ	0xFFF
 29934                           tosh	equ	0xFFE
 29935                           tosl	equ	0xFFD
 29936                           pclath	equ	0xFFA
 29937                           tblptru	equ	0xFF8
 29938                           tblptrh	equ	0xFF7
 29939                           tblptrl	equ	0xFF6
 29940                           tablat	equ	0xFF5
 29941                           prodh	equ	0xFF4
 29942                           prodl	equ	0xFF3
 29943                           intcon	equ	0xFF2
 29944                           indf0	equ	0xFEF
 29945                           postinc0	equ	0xFEE
 29946                           plusw0	equ	0xFEB
 29947                           fsr0h	equ	0xFEA
 29948                           fsr0l	equ	0xFE9
 29949                           wreg	equ	0xFE8
 29950                           postinc1	equ	0xFE6
 29951                           postdec1	equ	0xFE5
 29952                           plusw1	equ	0xFE3
 29953                           fsr1h	equ	0xFE2
 29954                           fsr1l	equ	0xFE1
 29955                           indf2	equ	0xFDF
 29956                           postinc2	equ	0xFDE
 29957                           postdec2	equ	0xFDD
 29958                           plusw2	equ	0xFDB
 29959                           fsr2h	equ	0xFDA
 29960                           fsr2l	equ	0xFD9
 29961                           status	equ	0xFD8
 29962                           
 29963 ;; *************** function _EncKeySchedule *****************
 29964 ;; Defined at:
 29965 ;;		line 160 in file "mcc_generated_files/LoRaWAN/AES.c"
 29966 ;; Parameters:    Size  Location     Type
 29967 ;;  key             1    4[BANK0 ] PTR unsigned char 
 29968 ;;		 -> AESEncode@key(16), 
 29969 ;; Auto vars:     Size  Location     Type
 29970 ;;		None
 29971 ;; Return value:  Size  Location     Type
 29972 ;;                  1    wreg      void 
 29973 ;; Registers used:
 29974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 29975 ;; Tracked objects:
 29976 ;;		On entry : F/0
 29977 ;;		On exit  : F/0
 29978 ;;		Unchanged: 0/0
 29979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 29980 ;;      Params:         0       1       0       0       0       0       0       0       0
 29981 ;;      Locals:         0       2       0       0       0       0       0       0       0
 29982 ;;      Temps:          0       3       0       0       0       0       0       0       0
 29983 ;;      Totals:         0       6       0       0       0       0       0       0       0
 29984 ;;Total ram usage:        6 bytes
 29985 ;; Hardware stack levels used:    1
 29986 ;; Hardware stack levels required when called:    7
 29987 ;; This function calls:
 29988 ;;		Nothing
 29989 ;; This function is called by:
 29990 ;;		_AESEncode
 29991 ;; This function uses a non-reentrant model
 29992 ;;
 29993                           
 29994                           	psect	text151
 29995  0029C8                     __ptext151:
 29996                           	opt stack 0
 29997  0029C8                     _EncKeySchedule:
 29998                           	opt stack 17
 29999                           
 30000                           ; BSR set to: 0
 30001                           ;AES.c: 163: key[0]^=STable[key[13]];
 30002                           
 30003                           ; BSR set to: 0
 30004                           ;incstack = 0
 30005  0029C8  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30006  0029CA  6ED9               	movwf	fsr2l,c
 30007  0029CC  6ADA               	clrf	fsr2h,c
 30008  0029CE  0E0D               	movlw	13
 30009  0029D0  26D9               	addwf	fsr2l,f,c
 30010  0029D2  50DF               	movf	indf2,w,c
 30011  0029D4  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30012  0029D6  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 30013  0029D8  0E6D               	movlw	low _STable
 30014  0029DA  2565               	addwf	??_EncKeySchedule& (0+255),w,b
 30015  0029DC  6EF6               	movwf	tblptrl,c
 30016  0029DE  0E7E               	movlw	high _STable
 30017  0029E0  2166               	addwfc	(??_EncKeySchedule+1)& (0+255),w,b
 30018  0029E2  6EF7               	movwf	tblptrh,c
 30019  0029E4                     	if	0	;There are less than 3 active tblptr bytes
 30020  0029E4                     	endif
 30021  0029E4  0008               	tblrd		*
 30022  0029E6  CFF5 F067          	movff	tablat,??_EncKeySchedule+2
 30023  0029EA  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30024  0029EC  6ED9               	movwf	fsr2l,c
 30025  0029EE  6ADA               	clrf	fsr2h,c
 30026  0029F0  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 30027  0029F2  1ADF               	xorwf	indf2,f,c
 30028                           
 30029                           ;AES.c: 164: key[1]^=STable[key[14]];
 30030  0029F4  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30031  0029F6  6ED9               	movwf	fsr2l,c
 30032  0029F8  6ADA               	clrf	fsr2h,c
 30033  0029FA  0E0E               	movlw	14
 30034  0029FC  26D9               	addwf	fsr2l,f,c
 30035  0029FE  50DF               	movf	indf2,w,c
 30036  002A00  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30037  002A02  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 30038  002A04  0E6D               	movlw	low _STable
 30039  002A06  2565               	addwf	??_EncKeySchedule& (0+255),w,b
 30040  002A08  6EF6               	movwf	tblptrl,c
 30041  002A0A  0E7E               	movlw	high _STable
 30042  002A0C  2166               	addwfc	(??_EncKeySchedule+1)& (0+255),w,b
 30043  002A0E  6EF7               	movwf	tblptrh,c
 30044  002A10                     	if	0	;There are less than 3 active tblptr bytes
 30045  002A10                     	endif
 30046  002A10  0008               	tblrd		*
 30047  002A12  CFF5 F067          	movff	tablat,??_EncKeySchedule+2
 30048  002A16  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30049  002A18  6ED9               	movwf	fsr2l,c
 30050  002A1A  6ADA               	clrf	fsr2h,c
 30051  002A1C  2AD9               	incf	fsr2l,f,c
 30052  002A1E  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 30053  002A20  1ADF               	xorwf	indf2,f,c
 30054                           
 30055                           ;AES.c: 165: key[2]^=STable[key[15]];
 30056  002A22  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30057  002A24  6ED9               	movwf	fsr2l,c
 30058  002A26  6ADA               	clrf	fsr2h,c
 30059  002A28  0E0F               	movlw	15
 30060  002A2A  26D9               	addwf	fsr2l,f,c
 30061  002A2C  50DF               	movf	indf2,w,c
 30062  002A2E  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30063  002A30  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 30064  002A32  0E6D               	movlw	low _STable
 30065  002A34  2565               	addwf	??_EncKeySchedule& (0+255),w,b
 30066  002A36  6EF6               	movwf	tblptrl,c
 30067  002A38  0E7E               	movlw	high _STable
 30068  002A3A  2166               	addwfc	(??_EncKeySchedule+1)& (0+255),w,b
 30069  002A3C  6EF7               	movwf	tblptrh,c
 30070  002A3E                     	if	0	;There are less than 3 active tblptr bytes
 30071  002A3E                     	endif
 30072  002A3E  0008               	tblrd		*
 30073  002A40  CFF5 F067          	movff	tablat,??_EncKeySchedule+2
 30074  002A44  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30075  002A46  6ED9               	movwf	fsr2l,c
 30076  002A48  6ADA               	clrf	fsr2h,c
 30077  002A4A  0E02               	movlw	2
 30078  002A4C  26D9               	addwf	fsr2l,f,c
 30079  002A4E  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 30080  002A50  1ADF               	xorwf	indf2,f,c
 30081                           
 30082                           ;AES.c: 166: key[3]^=STable[key[12]];
 30083  002A52  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30084  002A54  6ED9               	movwf	fsr2l,c
 30085  002A56  6ADA               	clrf	fsr2h,c
 30086  002A58  0E0C               	movlw	12
 30087  002A5A  26D9               	addwf	fsr2l,f,c
 30088  002A5C  50DF               	movf	indf2,w,c
 30089  002A5E  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30090  002A60  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 30091  002A62  0E6D               	movlw	low _STable
 30092  002A64  2565               	addwf	??_EncKeySchedule& (0+255),w,b
 30093  002A66  6EF6               	movwf	tblptrl,c
 30094  002A68  0E7E               	movlw	high _STable
 30095  002A6A  2166               	addwfc	(??_EncKeySchedule+1)& (0+255),w,b
 30096  002A6C  6EF7               	movwf	tblptrh,c
 30097  002A6E                     	if	0	;There are less than 3 active tblptr bytes
 30098  002A6E                     	endif
 30099  002A6E  0008               	tblrd		*
 30100  002A70  CFF5 F067          	movff	tablat,??_EncKeySchedule+2
 30101  002A74  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30102  002A76  6ED9               	movwf	fsr2l,c
 30103  002A78  6ADA               	clrf	fsr2h,c
 30104  002A7A  0E03               	movlw	3
 30105  002A7C  26D9               	addwf	fsr2l,f,c
 30106  002A7E  5167               	movf	(??_EncKeySchedule+2)& (0+255),w,b
 30107  002A80  1ADF               	xorwf	indf2,f,c
 30108                           
 30109                           ; BSR set to: 0
 30110                           ;AES.c: 168: key[0]^=_rcon;
 30111  002A82  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30112  002A84  6ED9               	movwf	fsr2l,c
 30113  002A86  6ADA               	clrf	fsr2h,c
 30114  002A88  5046               	movf	__rcon,w,c
 30115  002A8A  1ADF               	xorwf	indf2,f,c
 30116                           
 30117                           ; BSR set to: 0
 30118                           ;AES.c: 169: _rcon = (((_rcon)<0x80)?(_rcon)<<1:(((_rcon)<<1)^0x1b) );
 30119  002A8C  0E7F               	movlw	127
 30120  002A8E  6446               	cpfsgt	__rcon,c
 30121  002A90  D00C               	goto	l11836
 30122                           
 30123                           ; BSR set to: 0
 30124  002A92  0E1B               	movlw	27
 30125  002A94  C046  F065         	movff	__rcon,??_EncKeySchedule
 30126  002A98  6B66               	clrf	(??_EncKeySchedule+1)& (0+255),b
 30127  002A9A  90D8               	bcf	status,0,c
 30128  002A9C  3765               	rlcf	??_EncKeySchedule& (0+255),f,b
 30129  002A9E  3766               	rlcf	(??_EncKeySchedule+1)& (0+255),f,b
 30130  002AA0  1965               	xorwf	??_EncKeySchedule& (0+255),w,b
 30131  002AA2  6F68               	movwf	_EncKeySchedule$3767& (0+255),b
 30132  002AA4  5166               	movf	(??_EncKeySchedule+1)& (0+255),w,b
 30133  002AA6  6F69               	movwf	(_EncKeySchedule$3767+1)& (0+255),b
 30134  002AA8  D005               	goto	l11838
 30135  002AAA                     l11836:
 30136                           
 30137                           ; BSR set to: 0
 30138  002AAA  90D8               	bcf	status,0,c
 30139  002AAC  3446               	rlcf	__rcon,w,c
 30140  002AAE  6F68               	movwf	_EncKeySchedule$3767& (0+255),b
 30141  002AB0  6B69               	clrf	(_EncKeySchedule$3767+1)& (0+255),b
 30142  002AB2  3769               	rlcf	(_EncKeySchedule$3767+1)& (0+255),f,b
 30143  002AB4                     l11838:
 30144                           
 30145                           ; BSR set to: 0
 30146  002AB4  C068  F046         	movff	_EncKeySchedule$3767,__rcon
 30147                           
 30148                           ; BSR set to: 0
 30149                           ;AES.c: 172: key[4]^=key[0];
 30150  002AB8  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30151  002ABA  6ED9               	movwf	fsr2l,c
 30152  002ABC  6ADA               	clrf	fsr2h,c
 30153  002ABE  50DF               	movf	indf2,w,c
 30154  002AC0  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30155  002AC2  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30156  002AC4  6ED9               	movwf	fsr2l,c
 30157  002AC6  6ADA               	clrf	fsr2h,c
 30158  002AC8  0E04               	movlw	4
 30159  002ACA  26D9               	addwf	fsr2l,f,c
 30160  002ACC  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30161  002ACE  1ADF               	xorwf	indf2,f,c
 30162                           
 30163                           ; BSR set to: 0
 30164                           ;AES.c: 173: key[5]^=key[1];
 30165  002AD0  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30166  002AD2  6ED9               	movwf	fsr2l,c
 30167  002AD4  6ADA               	clrf	fsr2h,c
 30168  002AD6  2AD9               	incf	fsr2l,f,c
 30169  002AD8  50DF               	movf	indf2,w,c
 30170  002ADA  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30171  002ADC  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30172  002ADE  6ED9               	movwf	fsr2l,c
 30173  002AE0  6ADA               	clrf	fsr2h,c
 30174  002AE2  0E05               	movlw	5
 30175  002AE4  26D9               	addwf	fsr2l,f,c
 30176  002AE6  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30177  002AE8  1ADF               	xorwf	indf2,f,c
 30178                           
 30179                           ; BSR set to: 0
 30180                           ;AES.c: 174: key[6]^=key[2];
 30181  002AEA  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30182  002AEC  6ED9               	movwf	fsr2l,c
 30183  002AEE  6ADA               	clrf	fsr2h,c
 30184  002AF0  0E02               	movlw	2
 30185  002AF2  26D9               	addwf	fsr2l,f,c
 30186  002AF4  50DF               	movf	indf2,w,c
 30187  002AF6  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30188  002AF8  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30189  002AFA  6ED9               	movwf	fsr2l,c
 30190  002AFC  6ADA               	clrf	fsr2h,c
 30191  002AFE  0E06               	movlw	6
 30192  002B00  26D9               	addwf	fsr2l,f,c
 30193  002B02  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30194  002B04  1ADF               	xorwf	indf2,f,c
 30195                           
 30196                           ; BSR set to: 0
 30197                           ;AES.c: 175: key[7]^=key[3];
 30198  002B06  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30199  002B08  6ED9               	movwf	fsr2l,c
 30200  002B0A  6ADA               	clrf	fsr2h,c
 30201  002B0C  0E03               	movlw	3
 30202  002B0E  26D9               	addwf	fsr2l,f,c
 30203  002B10  50DF               	movf	indf2,w,c
 30204  002B12  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30205  002B14  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30206  002B16  6ED9               	movwf	fsr2l,c
 30207  002B18  6ADA               	clrf	fsr2h,c
 30208  002B1A  0E07               	movlw	7
 30209  002B1C  26D9               	addwf	fsr2l,f,c
 30210  002B1E  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30211  002B20  1ADF               	xorwf	indf2,f,c
 30212                           
 30213                           ; BSR set to: 0
 30214                           ;AES.c: 178: key[8]^=key[4];
 30215  002B22  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30216  002B24  6ED9               	movwf	fsr2l,c
 30217  002B26  6ADA               	clrf	fsr2h,c
 30218  002B28  0E04               	movlw	4
 30219  002B2A  26D9               	addwf	fsr2l,f,c
 30220  002B2C  50DF               	movf	indf2,w,c
 30221  002B2E  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30222  002B30  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30223  002B32  6ED9               	movwf	fsr2l,c
 30224  002B34  6ADA               	clrf	fsr2h,c
 30225  002B36  0E08               	movlw	8
 30226  002B38  26D9               	addwf	fsr2l,f,c
 30227  002B3A  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30228  002B3C  1ADF               	xorwf	indf2,f,c
 30229                           
 30230                           ; BSR set to: 0
 30231                           ;AES.c: 179: key[9]^=key[5];
 30232  002B3E  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30233  002B40  6ED9               	movwf	fsr2l,c
 30234  002B42  6ADA               	clrf	fsr2h,c
 30235  002B44  0E05               	movlw	5
 30236  002B46  26D9               	addwf	fsr2l,f,c
 30237  002B48  50DF               	movf	indf2,w,c
 30238  002B4A  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30239  002B4C  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30240  002B4E  6ED9               	movwf	fsr2l,c
 30241  002B50  6ADA               	clrf	fsr2h,c
 30242  002B52  0E09               	movlw	9
 30243  002B54  26D9               	addwf	fsr2l,f,c
 30244  002B56  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30245  002B58  1ADF               	xorwf	indf2,f,c
 30246                           
 30247                           ; BSR set to: 0
 30248                           ;AES.c: 180: key[10]^=key[6];
 30249  002B5A  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30250  002B5C  6ED9               	movwf	fsr2l,c
 30251  002B5E  6ADA               	clrf	fsr2h,c
 30252  002B60  0E06               	movlw	6
 30253  002B62  26D9               	addwf	fsr2l,f,c
 30254  002B64  50DF               	movf	indf2,w,c
 30255  002B66  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30256  002B68  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30257  002B6A  6ED9               	movwf	fsr2l,c
 30258  002B6C  6ADA               	clrf	fsr2h,c
 30259  002B6E  0E0A               	movlw	10
 30260  002B70  26D9               	addwf	fsr2l,f,c
 30261  002B72  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30262  002B74  1ADF               	xorwf	indf2,f,c
 30263                           
 30264                           ; BSR set to: 0
 30265                           ;AES.c: 181: key[11]^=key[7];
 30266  002B76  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30267  002B78  6ED9               	movwf	fsr2l,c
 30268  002B7A  6ADA               	clrf	fsr2h,c
 30269  002B7C  0E07               	movlw	7
 30270  002B7E  26D9               	addwf	fsr2l,f,c
 30271  002B80  50DF               	movf	indf2,w,c
 30272  002B82  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30273  002B84  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30274  002B86  6ED9               	movwf	fsr2l,c
 30275  002B88  6ADA               	clrf	fsr2h,c
 30276  002B8A  0E0B               	movlw	11
 30277  002B8C  26D9               	addwf	fsr2l,f,c
 30278  002B8E  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30279  002B90  1ADF               	xorwf	indf2,f,c
 30280                           
 30281                           ; BSR set to: 0
 30282                           ;AES.c: 184: key[12]^=key[8];
 30283  002B92  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30284  002B94  6ED9               	movwf	fsr2l,c
 30285  002B96  6ADA               	clrf	fsr2h,c
 30286  002B98  0E08               	movlw	8
 30287  002B9A  26D9               	addwf	fsr2l,f,c
 30288  002B9C  50DF               	movf	indf2,w,c
 30289  002B9E  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30290  002BA0  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30291  002BA2  6ED9               	movwf	fsr2l,c
 30292  002BA4  6ADA               	clrf	fsr2h,c
 30293  002BA6  0E0C               	movlw	12
 30294  002BA8  26D9               	addwf	fsr2l,f,c
 30295  002BAA  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30296  002BAC  1ADF               	xorwf	indf2,f,c
 30297                           
 30298                           ; BSR set to: 0
 30299                           ;AES.c: 185: key[13]^=key[9];
 30300  002BAE  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30301  002BB0  6ED9               	movwf	fsr2l,c
 30302  002BB2  6ADA               	clrf	fsr2h,c
 30303  002BB4  0E09               	movlw	9
 30304  002BB6  26D9               	addwf	fsr2l,f,c
 30305  002BB8  50DF               	movf	indf2,w,c
 30306  002BBA  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30307  002BBC  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30308  002BBE  6ED9               	movwf	fsr2l,c
 30309  002BC0  6ADA               	clrf	fsr2h,c
 30310  002BC2  0E0D               	movlw	13
 30311  002BC4  26D9               	addwf	fsr2l,f,c
 30312  002BC6  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30313  002BC8  1ADF               	xorwf	indf2,f,c
 30314                           
 30315                           ; BSR set to: 0
 30316                           ;AES.c: 186: key[14]^=key[10];
 30317  002BCA  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30318  002BCC  6ED9               	movwf	fsr2l,c
 30319  002BCE  6ADA               	clrf	fsr2h,c
 30320  002BD0  0E0A               	movlw	10
 30321  002BD2  26D9               	addwf	fsr2l,f,c
 30322  002BD4  50DF               	movf	indf2,w,c
 30323  002BD6  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30324  002BD8  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30325  002BDA  6ED9               	movwf	fsr2l,c
 30326  002BDC  6ADA               	clrf	fsr2h,c
 30327  002BDE  0E0E               	movlw	14
 30328  002BE0  26D9               	addwf	fsr2l,f,c
 30329  002BE2  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30330  002BE4  1ADF               	xorwf	indf2,f,c
 30331                           
 30332                           ; BSR set to: 0
 30333                           ;AES.c: 187: key[15]^=key[11];
 30334  002BE6  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30335  002BE8  6ED9               	movwf	fsr2l,c
 30336  002BEA  6ADA               	clrf	fsr2h,c
 30337  002BEC  0E0B               	movlw	11
 30338  002BEE  26D9               	addwf	fsr2l,f,c
 30339  002BF0  50DF               	movf	indf2,w,c
 30340  002BF2  6F65               	movwf	??_EncKeySchedule& (0+255),b
 30341  002BF4  5164               	movf	EncKeySchedule@key& (0+255),w,b
 30342  002BF6  6ED9               	movwf	fsr2l,c
 30343  002BF8  6ADA               	clrf	fsr2h,c
 30344  002BFA  0E0F               	movlw	15
 30345  002BFC  26D9               	addwf	fsr2l,f,c
 30346  002BFE  5165               	movf	??_EncKeySchedule& (0+255),w,b
 30347  002C00  1ADF               	xorwf	indf2,f,c
 30348                           
 30349                           ; BSR set to: 0
 30350  002C02  0012               	return		;funcret
 30351  002C04                     __end_of_EncKeySchedule:
 30352                           	opt stack 0
 30353                           tosu	equ	0xFFF
 30354                           tosh	equ	0xFFE
 30355                           tosl	equ	0xFFD
 30356                           pclath	equ	0xFFA
 30357                           tblptru	equ	0xFF8
 30358                           tblptrh	equ	0xFF7
 30359                           tblptrl	equ	0xFF6
 30360                           tablat	equ	0xFF5
 30361                           prodh	equ	0xFF4
 30362                           prodl	equ	0xFF3
 30363                           intcon	equ	0xFF2
 30364                           indf0	equ	0xFEF
 30365                           postinc0	equ	0xFEE
 30366                           plusw0	equ	0xFEB
 30367                           fsr0h	equ	0xFEA
 30368                           fsr0l	equ	0xFE9
 30369                           wreg	equ	0xFE8
 30370                           postinc1	equ	0xFE6
 30371                           postdec1	equ	0xFE5
 30372                           plusw1	equ	0xFE3
 30373                           fsr1h	equ	0xFE2
 30374                           fsr1l	equ	0xFE1
 30375                           indf2	equ	0xFDF
 30376                           postinc2	equ	0xFDE
 30377                           postdec2	equ	0xFDD
 30378                           plusw2	equ	0xFDB
 30379                           fsr2h	equ	0xFDA
 30380                           fsr2l	equ	0xFD9
 30381                           status	equ	0xFD8
 30382                           
 30383 ;; *************** function _LORAWAN_Init *****************
 30384 ;; Defined at:
 30385 ;;		line 123 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30386 ;; Parameters:    Size  Location     Type
 30387 ;;  RxPayload       2   68[BANK0 ] PTR FTN(PTR unsigned cha
 30388 ;;		 -> RxDataDone(1), 
 30389 ;;  RxJoinRespon    2   70[BANK0 ] PTR FTN(unsigned char ,)
 30390 ;;		 -> RxJoinResponse(1), 
 30391 ;; Auto vars:     Size  Location     Type
 30392 ;;		None
 30393 ;; Return value:  Size  Location     Type
 30394 ;;                  1    wreg      void 
 30395 ;; Registers used:
 30396 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30397 ;; Tracked objects:
 30398 ;;		On entry : F/0
 30399 ;;		On exit  : D/0
 30400 ;;		Unchanged: 0/0
 30401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30402 ;;      Params:         0       4       0       0       0       0       0       0       0
 30403 ;;      Locals:         0       0       0       0       0       0       0       0       0
 30404 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30405 ;;      Totals:         0       4       0       0       0       0       0       0       0
 30406 ;;Total ram usage:        4 bytes
 30407 ;; Hardware stack levels used:    1
 30408 ;; Hardware stack levels required when called:   13
 30409 ;; This function calls:
 30410 ;;		_CreateAllSoftwareTimers
 30411 ;;		_LORAWAN_Reset
 30412 ;;		_RADIO_Init
 30413 ;;		_RADIO_ReadRandom
 30414 ;;		_SetCallbackSoftwareTimers
 30415 ;;		_StopAllSoftwareTimers
 30416 ;;		_srand
 30417 ;; This function is called by:
 30418 ;;		_main
 30419 ;; This function uses a non-reentrant model
 30420 ;;
 30421                           
 30422                           	psect	text152
 30423  00677E                     __ptext152:
 30424                           	opt stack 0
 30425  00677E                     _LORAWAN_Init:
 30426                           	opt stack 17
 30427                           
 30428                           ; BSR set to: 0
 30429                           ;lorawan_eu.c: 126: if (loRa.macInitialized == 0)
 30430                           
 30431                           ; BSR set to: 0
 30432                           ;incstack = 0
 30433  00677E  0102               	movlb	2	; () banked
 30434  006780  51F0               	movf	(_loRa+240)& (0+255),w,b
 30435  006782  E108               	bnz	l15768
 30436                           
 30437                           ; BSR set to: 2
 30438                           ;lorawan_eu.c: 127: {
 30439                           ;lorawan_eu.c: 128: CreateAllSoftwareTimers ();
 30440  006784  ECF0  F034         	call	_CreateAllSoftwareTimers	;wreg free
 30441                           
 30442                           ;lorawan_eu.c: 129: SetCallbackSoftwareTimers ();
 30443  006788  EC69  F02B         	call	_SetCallbackSoftwareTimers	;wreg free
 30444                           
 30445                           ; BSR set to: 0
 30446                           ;lorawan_eu.c: 130: loRa.macInitialized = 1;
 30447  00678C  0E01               	movlw	1
 30448  00678E  0102               	movlb	2	; () banked
 30449  006790  6FF0               	movwf	(_loRa+240)& (0+255),b
 30450                           
 30451                           ;lorawan_eu.c: 131: }
 30452  006792  D002               	goto	l15770
 30453  006794                     l15768:
 30454                           
 30455                           ; BSR set to: 2
 30456                           ;lorawan_eu.c: 132: else
 30457                           ;lorawan_eu.c: 133: {
 30458                           ;lorawan_eu.c: 134: StopAllSoftwareTimers ();
 30459  006794  EC67  F035         	call	_StopAllSoftwareTimers	;wreg free
 30460  006798                     l15770:
 30461                           
 30462                           ;lorawan_eu.c: 135: }
 30463                           ;lorawan_eu.c: 137: rxPayload.RxAppData = RxPayload;
 30464  006798  C0A4  F16E         	movff	LORAWAN_Init@RxPayload,_rxPayload
 30465  00679C  C0A5  F16F         	movff	LORAWAN_Init@RxPayload+1,_rxPayload+1
 30466                           
 30467                           ;lorawan_eu.c: 138: rxPayload.RxJoinResponse = RxJoinResponse;
 30468  0067A0  C0A6  F170         	movff	LORAWAN_Init@RxJoinResponse,_rxPayload+2
 30469  0067A4  C0A7  F171         	movff	LORAWAN_Init@RxJoinResponse+1,_rxPayload+3
 30470                           
 30471                           ;lorawan_eu.c: 140: RADIO_Init(&radioBuffer[16], (868100000));
 30472  0067A8  0EFF               	movlw	low (_radioBuffer+16)
 30473  0067AA  0100               	movlb	0	; () banked
 30474  0067AC  6F7D               	movwf	RADIO_Init@radioBuffer& (0+255),b
 30475  0067AE  0E05               	movlw	high (_radioBuffer+16)
 30476  0067B0  6F7E               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 30477  0067B2  0EA0               	movlw	160
 30478  0067B4  6F7F               	movwf	RADIO_Init@frequency& (0+255),b
 30479  0067B6  0E27               	movlw	39
 30480  0067B8  6F80               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 30481  0067BA  0EBE               	movlw	190
 30482  0067BC  6F81               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 30483  0067BE  0E33               	movlw	51
 30484  0067C0  6F82               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 30485  0067C2  EC5D  F01C         	call	_RADIO_Init	;wreg free
 30486                           
 30487                           ; BSR set to: 1
 30488                           ;lorawan_eu.c: 142: srand (RADIO_ReadRandom ());
 30489  0067C6  ECBA  F02F         	call	_RADIO_ReadRandom	;wreg free
 30490  0067CA  C070  F075         	movff	?_RADIO_ReadRandom,srand@x
 30491  0067CE  C071  F076         	movff	?_RADIO_ReadRandom+1,srand@x+1
 30492  0067D2  ECD7  F03B         	call	_srand	;wreg free
 30493                           
 30494                           ;lorawan_eu.c: 144: LORAWAN_Reset (ISM_EU868);
 30495  0067D6  0E00               	movlw	0
 30496  0067D8  EF67  F01F         	goto	_LORAWAN_Reset
 30497  0067DC                     __end_of_LORAWAN_Init:
 30498                           	opt stack 0
 30499                           tosu	equ	0xFFF
 30500                           tosh	equ	0xFFE
 30501                           tosl	equ	0xFFD
 30502                           pclath	equ	0xFFA
 30503                           tblptru	equ	0xFF8
 30504                           tblptrh	equ	0xFF7
 30505                           tblptrl	equ	0xFF6
 30506                           tablat	equ	0xFF5
 30507                           prodh	equ	0xFF4
 30508                           prodl	equ	0xFF3
 30509                           intcon	equ	0xFF2
 30510                           indf0	equ	0xFEF
 30511                           postinc0	equ	0xFEE
 30512                           plusw0	equ	0xFEB
 30513                           fsr0h	equ	0xFEA
 30514                           fsr0l	equ	0xFE9
 30515                           wreg	equ	0xFE8
 30516                           postinc1	equ	0xFE6
 30517                           postdec1	equ	0xFE5
 30518                           plusw1	equ	0xFE3
 30519                           fsr1h	equ	0xFE2
 30520                           fsr1l	equ	0xFE1
 30521                           indf2	equ	0xFDF
 30522                           postinc2	equ	0xFDE
 30523                           postdec2	equ	0xFDD
 30524                           plusw2	equ	0xFDB
 30525                           fsr2h	equ	0xFDA
 30526                           fsr2l	equ	0xFD9
 30527                           status	equ	0xFD8
 30528                           
 30529 ;; *************** function _srand *****************
 30530 ;; Defined at:
 30531 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\rand.c"
 30532 ;; Parameters:    Size  Location     Type
 30533 ;;  x               2   21[BANK0 ] unsigned int 
 30534 ;; Auto vars:     Size  Location     Type
 30535 ;;		None
 30536 ;; Return value:  Size  Location     Type
 30537 ;;                  1    wreg      void 
 30538 ;; Registers used:
 30539 ;;		status,2
 30540 ;; Tracked objects:
 30541 ;;		On entry : 1/0
 30542 ;;		On exit  : 1/0
 30543 ;;		Unchanged: 1/0
 30544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30545 ;;      Params:         0       2       0       0       0       0       0       0       0
 30546 ;;      Locals:         0       0       0       0       0       0       0       0       0
 30547 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30548 ;;      Totals:         0       2       0       0       0       0       0       0       0
 30549 ;;Total ram usage:        2 bytes
 30550 ;; Hardware stack levels used:    1
 30551 ;; Hardware stack levels required when called:    7
 30552 ;; This function calls:
 30553 ;;		Nothing
 30554 ;; This function is called by:
 30555 ;;		_LORAWAN_Init
 30556 ;; This function uses a non-reentrant model
 30557 ;;
 30558                           
 30559                           	psect	text153
 30560  0077AE                     __ptext153:
 30561                           	opt stack 0
 30562  0077AE                     _srand:
 30563                           	opt stack 22
 30564                           
 30565                           ;incstack = 0
 30566  0077AE  C075  F056         	movff	srand@x,_randx
 30567  0077B2  C076  F057         	movff	srand@x+1,_randx+1
 30568  0077B6  6A58               	clrf	_randx+2,c
 30569  0077B8  6A59               	clrf	_randx+3,c
 30570  0077BA  0012               	return		;funcret
 30571  0077BC                     __end_of_srand:
 30572                           	opt stack 0
 30573                           tosu	equ	0xFFF
 30574                           tosh	equ	0xFFE
 30575                           tosl	equ	0xFFD
 30576                           pclath	equ	0xFFA
 30577                           tblptru	equ	0xFF8
 30578                           tblptrh	equ	0xFF7
 30579                           tblptrl	equ	0xFF6
 30580                           tablat	equ	0xFF5
 30581                           prodh	equ	0xFF4
 30582                           prodl	equ	0xFF3
 30583                           intcon	equ	0xFF2
 30584                           indf0	equ	0xFEF
 30585                           postinc0	equ	0xFEE
 30586                           plusw0	equ	0xFEB
 30587                           fsr0h	equ	0xFEA
 30588                           fsr0l	equ	0xFE9
 30589                           wreg	equ	0xFE8
 30590                           postinc1	equ	0xFE6
 30591                           postdec1	equ	0xFE5
 30592                           plusw1	equ	0xFE3
 30593                           fsr1h	equ	0xFE2
 30594                           fsr1l	equ	0xFE1
 30595                           indf2	equ	0xFDF
 30596                           postinc2	equ	0xFDE
 30597                           postdec2	equ	0xFDD
 30598                           plusw2	equ	0xFDB
 30599                           fsr2h	equ	0xFDA
 30600                           fsr2l	equ	0xFD9
 30601                           status	equ	0xFD8
 30602                           
 30603 ;; *************** function _SetCallbackSoftwareTimers *****************
 30604 ;; Defined at:
 30605 ;;		line 951 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30606 ;; Parameters:    Size  Location     Type
 30607 ;;		None
 30608 ;; Auto vars:     Size  Location     Type
 30609 ;;		None
 30610 ;; Return value:  Size  Location     Type
 30611 ;;                  1    wreg      void 
 30612 ;; Registers used:
 30613 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30614 ;; Tracked objects:
 30615 ;;		On entry : F/2
 30616 ;;		On exit  : F/0
 30617 ;;		Unchanged: 0/0
 30618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30619 ;;      Params:         0       0       0       0       0       0       0       0       0
 30620 ;;      Locals:         0       0       0       0       0       0       0       0       0
 30621 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30622 ;;      Totals:         0       0       0       0       0       0       0       0       0
 30623 ;;Total ram usage:        0 bytes
 30624 ;; Hardware stack levels used:    1
 30625 ;; Hardware stack levels required when called:    8
 30626 ;; This function calls:
 30627 ;;		_SwTimerSetCallback
 30628 ;; This function is called by:
 30629 ;;		_LORAWAN_Init
 30630 ;; This function uses a non-reentrant model
 30631 ;;
 30632                           
 30633                           	psect	text154
 30634  0056D2                     __ptext154:
 30635                           	opt stack 0
 30636  0056D2                     _SetCallbackSoftwareTimers:
 30637                           	opt stack 21
 30638                           
 30639                           ; BSR set to: 2
 30640                           ;lorawan_eu.c: 953: SwTimerSetCallback(loRa.joinAccept1TimerId, LORAWAN_ReceiveWindow1Ca
      +                          llback, 0);
 30641                           
 30642                           ;incstack = 0
 30643  0056D2  0E4E               	movlw	low _LORAWAN_ReceiveWindow1Callback
 30644  0056D4  0100               	movlb	0	; () banked
 30645  0056D6  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30646  0056D8  0E5A               	movlw	high _LORAWAN_ReceiveWindow1Callback
 30647  0056DA  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30648  0056DC  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30649  0056DE  0102               	movlb	2	; () banked
 30650  0056E0  51E2               	movf	(_loRa+226)& (0+255),w,b
 30651  0056E2  ECB1  F038         	call	_SwTimerSetCallback
 30652                           
 30653                           ;lorawan_eu.c: 954: SwTimerSetCallback(loRa.joinAccept2TimerId, LORAWAN_ReceiveWindow2Ca
      +                          llback, 0);
 30654  0056E6  0E4C               	movlw	low _LORAWAN_ReceiveWindow2Callback
 30655  0056E8  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30656  0056EA  0E55               	movlw	high _LORAWAN_ReceiveWindow2Callback
 30657  0056EC  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30658  0056EE  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30659  0056F0  0102               	movlb	2	; () banked
 30660  0056F2  51E3               	movf	(_loRa+227)& (0+255),w,b
 30661  0056F4  ECB1  F038         	call	_SwTimerSetCallback
 30662                           
 30663                           ;lorawan_eu.c: 955: SwTimerSetCallback(loRa.linkCheckTimerId, LORAWAN_LinkCheckCallback,
      +                           0);
 30664  0056F8  0E2C               	movlw	low _LORAWAN_LinkCheckCallback
 30665  0056FA  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30666  0056FC  0E40               	movlw	high _LORAWAN_LinkCheckCallback
 30667  0056FE  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30668  005700  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30669  005702  0102               	movlb	2	; () banked
 30670  005704  51E7               	movf	(_loRa+231)& (0+255),w,b
 30671  005706  ECB1  F038         	call	_SwTimerSetCallback
 30672                           
 30673                           ;lorawan_eu.c: 956: SwTimerSetCallback(loRa.receiveWindow1TimerId, LORAWAN_ReceiveWindow
      +                          1Callback, 0);
 30674  00570A  0E4E               	movlw	low _LORAWAN_ReceiveWindow1Callback
 30675  00570C  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30676  00570E  0E5A               	movlw	high _LORAWAN_ReceiveWindow1Callback
 30677  005710  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30678  005712  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30679  005714  0102               	movlb	2	; () banked
 30680  005716  51E4               	movf	(_loRa+228)& (0+255),w,b
 30681  005718  ECB1  F038         	call	_SwTimerSetCallback
 30682                           
 30683                           ;lorawan_eu.c: 957: SwTimerSetCallback(loRa.receiveWindow2TimerId, LORAWAN_ReceiveWindow
      +                          2Callback, 0);
 30684  00571C  0E4C               	movlw	low _LORAWAN_ReceiveWindow2Callback
 30685  00571E  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30686  005720  0E55               	movlw	high _LORAWAN_ReceiveWindow2Callback
 30687  005722  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30688  005724  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30689  005726  0102               	movlb	2	; () banked
 30690  005728  51E5               	movf	(_loRa+229)& (0+255),w,b
 30691  00572A  ECB1  F038         	call	_SwTimerSetCallback
 30692                           
 30693                           ;lorawan_eu.c: 958: SwTimerSetCallback(loRa.ackTimeoutTimerId, AckRetransmissionCallback
      +                          , 0);
 30694  00572E  0EBA               	movlw	low _AckRetransmissionCallback
 30695  005730  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30696  005732  0E49               	movlw	high _AckRetransmissionCallback
 30697  005734  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30698  005736  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30699  005738  0102               	movlb	2	; () banked
 30700  00573A  51E8               	movf	(_loRa+232)& (0+255),w,b
 30701  00573C  ECB1  F038         	call	_SwTimerSetCallback
 30702                           
 30703                           ;lorawan_eu.c: 959: SwTimerSetCallback(loRa.automaticReplyTimerId, AutomaticReplyCallbac
      +                          k, 0);
 30704  005740  0EDA               	movlw	low _AutomaticReplyCallback
 30705  005742  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30706  005744  0E74               	movlw	high _AutomaticReplyCallback
 30707  005746  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30708  005748  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30709  00574A  0102               	movlb	2	; () banked
 30710  00574C  51E6               	movf	(_loRa+230)& (0+255),w,b
 30711  00574E  ECB1  F038         	call	_SwTimerSetCallback
 30712                           
 30713                           ;lorawan_eu.c: 960: SwTimerSetCallback(loRa.unconfirmedRetransmisionTimerId, Unconfirmed
      +                          TransmissionCallback, 0);
 30714  005752  0EBE               	movlw	low _UnconfirmedTransmissionCallback
 30715  005754  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30716  005756  0E62               	movlw	high _UnconfirmedTransmissionCallback
 30717  005758  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30718  00575A  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30719  00575C  0102               	movlb	2	; () banked
 30720  00575E  51EA               	movf	(_loRa+234)& (0+255),w,b
 30721  005760  ECB1  F038         	call	_SwTimerSetCallback
 30722                           
 30723                           ;lorawan_eu.c: 961: SwTimerSetCallback(loRa.abpJoinTimerId, UpdateJoinSuccessState, 0);
 30724  005764  0E54               	movlw	low _UpdateJoinSuccessState
 30725  005766  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30726  005768  0E45               	movlw	high _UpdateJoinSuccessState
 30727  00576A  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30728  00576C  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30729  00576E  0102               	movlb	2	; () banked
 30730  005770  51F3               	movf	(_loRa+243)& (0+255),w,b
 30731  005772  ECB1  F038         	call	_SwTimerSetCallback
 30732                           
 30733                           ;lorawan_eu.c: 962: SwTimerSetCallback (loRa.dutyCycleTimerId, DutyCycleCallback, 0);
 30734  005776  0E2A               	movlw	low _DutyCycleCallback
 30735  005778  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 30736  00577A  0E24               	movlw	high _DutyCycleCallback
 30737  00577C  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 30738  00577E  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 30739  005780  0102               	movlb	2	; () banked
 30740  005782  51E9               	movf	(_loRa+233)& (0+255),w,b
 30741  005784  EFB1  F038         	goto	_SwTimerSetCallback
 30742  005788                     __end_of_SetCallbackSoftwareTimers:
 30743                           	opt stack 0
 30744                           tosu	equ	0xFFF
 30745                           tosh	equ	0xFFE
 30746                           tosl	equ	0xFFD
 30747                           pclath	equ	0xFFA
 30748                           tblptru	equ	0xFF8
 30749                           tblptrh	equ	0xFF7
 30750                           tblptrl	equ	0xFF6
 30751                           tablat	equ	0xFF5
 30752                           prodh	equ	0xFF4
 30753                           prodl	equ	0xFF3
 30754                           intcon	equ	0xFF2
 30755                           indf0	equ	0xFEF
 30756                           postinc0	equ	0xFEE
 30757                           plusw0	equ	0xFEB
 30758                           fsr0h	equ	0xFEA
 30759                           fsr0l	equ	0xFE9
 30760                           wreg	equ	0xFE8
 30761                           postinc1	equ	0xFE6
 30762                           postdec1	equ	0xFE5
 30763                           plusw1	equ	0xFE3
 30764                           fsr1h	equ	0xFE2
 30765                           fsr1l	equ	0xFE1
 30766                           indf2	equ	0xFDF
 30767                           postinc2	equ	0xFDE
 30768                           postdec2	equ	0xFDD
 30769                           plusw2	equ	0xFDB
 30770                           fsr2h	equ	0xFDA
 30771                           fsr2l	equ	0xFD9
 30772                           status	equ	0xFD8
 30773                           
 30774 ;; *************** function _RADIO_ReadRandom *****************
 30775 ;; Defined at:
 30776 ;;		line 1367 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 30777 ;; Parameters:    Size  Location     Type
 30778 ;;		None
 30779 ;; Auto vars:     Size  Location     Type
 30780 ;;  retVal          2   18[BANK0 ] unsigned int 
 30781 ;;  i               1   20[BANK0 ] unsigned char 
 30782 ;; Return value:  Size  Location     Type
 30783 ;;                  2   16[BANK0 ] unsigned int 
 30784 ;; Registers used:
 30785 ;;		wreg, status,2, status,0, cstack
 30786 ;; Tracked objects:
 30787 ;;		On entry : F/1
 30788 ;;		On exit  : 1/0
 30789 ;;		Unchanged: 0/0
 30790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30791 ;;      Params:         0       2       0       0       0       0       0       0       0
 30792 ;;      Locals:         0       3       0       0       0       0       0       0       0
 30793 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30794 ;;      Totals:         0       5       0       0       0       0       0       0       0
 30795 ;;Total ram usage:        5 bytes
 30796 ;; Hardware stack levels used:    1
 30797 ;; Hardware stack levels required when called:   11
 30798 ;; This function calls:
 30799 ;;		_RADIO_RegisterRead
 30800 ;;		_RADIO_RegisterWrite
 30801 ;;		_RADIO_WriteMode
 30802 ;;		_SystemBlockingWaitMs
 30803 ;; This function is called by:
 30804 ;;		_LORAWAN_Init
 30805 ;; This function uses a non-reentrant model
 30806 ;;
 30807                           
 30808                           	psect	text155
 30809  005F74                     __ptext155:
 30810                           	opt stack 0
 30811  005F74                     _RADIO_ReadRandom:
 30812                           	opt stack 18
 30813                           
 30814                           ; BSR set to: 1
 30815                           ;radio_driver_SX1276.c: 1369: uint8_t i;
 30816                           ;radio_driver_SX1276.c: 1370: uint16_t retVal;
 30817                           ;radio_driver_SX1276.c: 1371: retVal = 0;
 30818                           
 30819                           ; BSR set to: 0
 30820                           ;incstack = 0
 30821  005F74  0100               	movlb	0	; () banked
 30822  005F76  6B72               	clrf	RADIO_ReadRandom@retVal& (0+255),b
 30823  005F78  6B73               	clrf	(RADIO_ReadRandom@retVal+1)& (0+255),b
 30824                           
 30825                           ; BSR set to: 0
 30826                           ;radio_driver_SX1276.c: 1373: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 30827  005F7A  0E01               	movlw	1
 30828  005F7C  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30829  005F7E  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30830  005F80  0E00               	movlw	0
 30831  005F82  EC6B  F029         	call	_RADIO_WriteMode
 30832                           
 30833                           ;radio_driver_SX1276.c: 1374: RADIO_RegisterWrite(0x11, 0xFF);
 30834  005F86  0100               	movlb	0	; () banked
 30835  005F88  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 30836  005F8A  0E11               	movlw	17
 30837  005F8C  EC9A  F03A         	call	_RADIO_RegisterWrite
 30838                           
 30839                           ;radio_driver_SX1276.c: 1375: RADIO_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
 30840  005F90  0E01               	movlw	1
 30841  005F92  0100               	movlb	0	; () banked
 30842  005F94  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30843  005F96  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30844  005F98  0E05               	movlw	5
 30845  005F9A  EC6B  F029         	call	_RADIO_WriteMode
 30846                           
 30847                           ;radio_driver_SX1276.c: 1376: for (i = 0; i < 16; i++)
 30848  005F9E  0100               	movlb	0	; () banked
 30849  005FA0  6B74               	clrf	RADIO_ReadRandom@i& (0+255),b
 30850  005FA2                     l15536:
 30851                           
 30852                           ; BSR set to: 0
 30853                           ;radio_driver_SX1276.c: 1377: {
 30854                           ;radio_driver_SX1276.c: 1378: SystemBlockingWaitMs(1);
 30855  005FA2  0E01               	movlw	1
 30856  005FA4  6F64               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 30857  005FA6  6B65               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 30858  005FA8  6B66               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 30859  005FAA  6B67               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 30860  005FAC  EC4B  F039         	call	_SystemBlockingWaitMs	;wreg free
 30861                           
 30862                           ; BSR set to: 0
 30863                           ;radio_driver_SX1276.c: 1379: retVal <<= (1);
 30864  005FB0  90D8               	bcf	status,0,c
 30865  005FB2  3772               	rlcf	RADIO_ReadRandom@retVal& (0+255),f,b
 30866  005FB4  3773               	rlcf	(RADIO_ReadRandom@retVal+1)& (0+255),f,b
 30867                           
 30868                           ; BSR set to: 0
 30869                           ;radio_driver_SX1276.c: 1380: retVal |= RADIO_RegisterRead(0x2C) & 0x01;
 30870  005FB6  0E2C               	movlw	44
 30871  005FB8  ECB0  F039         	call	_RADIO_RegisterRead
 30872  005FBC  0B01               	andlw	1
 30873  005FBE  1372               	iorwf	RADIO_ReadRandom@retVal& (0+255),f,b
 30874  005FC0  2B74               	incf	RADIO_ReadRandom@i& (0+255),f,b
 30875                           
 30876                           ; BSR set to: 0
 30877  005FC2  0E0F               	movlw	15
 30878  005FC4  6574               	cpfsgt	RADIO_ReadRandom@i& (0+255),b
 30879  005FC6  D7ED               	goto	l15536
 30880                           
 30881                           ; BSR set to: 0
 30882                           ;radio_driver_SX1276.c: 1381: }
 30883                           ;radio_driver_SX1276.c: 1384: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 30884  005FC8  0E01               	movlw	1
 30885  005FCA  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 30886  005FCC  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 30887  005FCE  0E00               	movlw	0
 30888  005FD0  EC6B  F029         	call	_RADIO_WriteMode
 30889                           
 30890                           ;radio_driver_SX1276.c: 1386: RADIO_RegisterWrite(0x12, 0xFF);
 30891  005FD4  0100               	movlb	0	; () banked
 30892  005FD6  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 30893  005FD8  0E12               	movlw	18
 30894  005FDA  EC9A  F03A         	call	_RADIO_RegisterWrite
 30895                           
 30896                           ;radio_driver_SX1276.c: 1388: RADIO_RegisterWrite(0x11, 0x00);
 30897  005FDE  0100               	movlb	0	; () banked
 30898  005FE0  6B66               	clrf	RADIO_RegisterWrite@value& (0+255),b
 30899  005FE2  0E11               	movlw	17
 30900  005FE4  EC9A  F03A         	call	_RADIO_RegisterWrite
 30901                           
 30902                           ;radio_driver_SX1276.c: 1389: return retVal;
 30903  005FE8  C072  F070         	movff	RADIO_ReadRandom@retVal,?_RADIO_ReadRandom
 30904  005FEC  C073  F071         	movff	RADIO_ReadRandom@retVal+1,?_RADIO_ReadRandom+1
 30905  005FF0  0012               	return		;funcret
 30906  005FF2                     __end_of_RADIO_ReadRandom:
 30907                           	opt stack 0
 30908                           tosu	equ	0xFFF
 30909                           tosh	equ	0xFFE
 30910                           tosl	equ	0xFFD
 30911                           pclath	equ	0xFFA
 30912                           tblptru	equ	0xFF8
 30913                           tblptrh	equ	0xFF7
 30914                           tblptrl	equ	0xFF6
 30915                           tablat	equ	0xFF5
 30916                           prodh	equ	0xFF4
 30917                           prodl	equ	0xFF3
 30918                           intcon	equ	0xFF2
 30919                           indf0	equ	0xFEF
 30920                           postinc0	equ	0xFEE
 30921                           plusw0	equ	0xFEB
 30922                           fsr0h	equ	0xFEA
 30923                           fsr0l	equ	0xFE9
 30924                           wreg	equ	0xFE8
 30925                           postinc1	equ	0xFE6
 30926                           postdec1	equ	0xFE5
 30927                           plusw1	equ	0xFE3
 30928                           fsr1h	equ	0xFE2
 30929                           fsr1l	equ	0xFE1
 30930                           indf2	equ	0xFDF
 30931                           postinc2	equ	0xFDE
 30932                           postdec2	equ	0xFDD
 30933                           plusw2	equ	0xFDB
 30934                           fsr2h	equ	0xFDA
 30935                           fsr2l	equ	0xFD9
 30936                           status	equ	0xFD8
 30937                           
 30938 ;; *************** function _LORAWAN_Reset *****************
 30939 ;; Defined at:
 30940 ;;		line 148 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 30941 ;; Parameters:    Size  Location     Type
 30942 ;;  ismBandNew      1    wreg     enum E17221
 30943 ;; Auto vars:     Size  Location     Type
 30944 ;;  ismBandNew      1   67[BANK0 ] enum E17221
 30945 ;; Return value:  Size  Location     Type
 30946 ;;                  1    wreg      void 
 30947 ;; Registers used:
 30948 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30949 ;; Tracked objects:
 30950 ;;		On entry : 1/0
 30951 ;;		On exit  : D/0
 30952 ;;		Unchanged: 0/0
 30953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 30954 ;;      Params:         0       0       0       0       0       0       0       0       0
 30955 ;;      Locals:         0       1       0       0       0       0       0       0       0
 30956 ;;      Temps:          0       0       0       0       0       0       0       0       0
 30957 ;;      Totals:         0       1       0       0       0       0       0       0       0
 30958 ;;Total ram usage:        1 bytes
 30959 ;; Hardware stack levels used:    1
 30960 ;; Hardware stack levels required when called:   12
 30961 ;; This function calls:
 30962 ;;		_InitDefault433Channels
 30963 ;;		_InitDefault868Channels
 30964 ;;		_LORAWAN_LinkCheckConfigure
 30965 ;;		_RADIO_Init
 30966 ;;		_RADIO_SetLoRaSyncWord
 30967 ;;		_StopAllSoftwareTimers
 30968 ;;		_UpdateMinMaxChDataRate
 30969 ;;		_memset
 30970 ;; This function is called by:
 30971 ;;		_LORAWAN_Init
 30972 ;;		_main
 30973 ;; This function uses a non-reentrant model
 30974 ;;
 30975                           
 30976                           	psect	text156
 30977  003ECE                     __ptext156:
 30978                           	opt stack 0
 30979  003ECE                     _LORAWAN_Reset:
 30980                           	opt stack 18
 30981                           
 30982                           ;incstack = 0
 30983                           ;LORAWAN_Reset@ismBandNew stored from wreg
 30984  003ECE  0100               	movlb	0	; () banked
 30985  003ED0  6FA3               	movwf	LORAWAN_Reset@ismBandNew& (0+255),b
 30986                           
 30987                           ;lorawan_eu.c: 150: if (loRa.macInitialized == 1)
 30988  003ED2  0102               	movlb	2	; () banked
 30989  003ED4  05F0               	decf	(_loRa+240)& (0+255),w,b
 30990  003ED6  E102               	bnz	l15560
 30991                           
 30992                           ; BSR set to: 2
 30993                           ;lorawan_eu.c: 151: {
 30994                           ;lorawan_eu.c: 152: StopAllSoftwareTimers ();
 30995  003ED8  EC67  F035         	call	_StopAllSoftwareTimers	;wreg free
 30996  003EDC                     l15560:
 30997                           
 30998                           ;lorawan_eu.c: 153: }
 30999                           ;lorawan_eu.c: 155: loRa.syncWord = 0x34;
 31000  003EDC  0E34               	movlw	52
 31001  003EDE  0102               	movlb	2	; () banked
 31002  003EE0  6FF4               	movwf	(_loRa+244)& (0+255),b
 31003                           
 31004                           ; BSR set to: 2
 31005                           ;lorawan_eu.c: 156: RADIO_SetLoRaSyncWord(loRa.syncWord);
 31006  003EE2  51F4               	movf	(_loRa+244)& (0+255),w,b
 31007  003EE4  EC17  F03C         	call	_RADIO_SetLoRaSyncWord
 31008                           
 31009                           ;lorawan_eu.c: 158: loRa.macStatus.value = 0;
 31010  003EE8  0102               	movlb	2	; () banked
 31011  003EEA  6B02               	clrf	(_loRa+2)& (0+255),b
 31012  003EEC  6B03               	clrf	(_loRa+3)& (0+255),b
 31013  003EEE  6B04               	clrf	(_loRa+4)& (0+255),b
 31014  003EF0  6B05               	clrf	(_loRa+5)& (0+255),b
 31015                           
 31016                           ; BSR set to: 2
 31017                           ;lorawan_eu.c: 159: loRa.linkCheckMargin = 255;
 31018  003EF2  69DD               	setf	(_loRa+221)& (0+255),b
 31019                           
 31020                           ; BSR set to: 2
 31021                           ;lorawan_eu.c: 160: loRa.linkCheckGwCnt = 0;
 31022  003EF4  6BDE               	clrf	(_loRa+222)& (0+255),b
 31023                           
 31024                           ; BSR set to: 2
 31025                           ;lorawan_eu.c: 161: loRa.lastTimerValue = 0;
 31026  003EF6  6BC8               	clrf	(_loRa+200)& (0+255),b
 31027  003EF8  6BC9               	clrf	(_loRa+201)& (0+255),b
 31028  003EFA  6BCA               	clrf	(_loRa+202)& (0+255),b
 31029  003EFC  6BCB               	clrf	(_loRa+203)& (0+255),b
 31030                           
 31031                           ; BSR set to: 2
 31032                           ;lorawan_eu.c: 162: loRa.lastPacketLength = 0;
 31033  003EFE  6BD4               	clrf	(_loRa+212)& (0+255),b
 31034  003F00  6BD5               	clrf	(_loRa+213)& (0+255),b
 31035                           
 31036                           ; BSR set to: 2
 31037                           ;lorawan_eu.c: 163: loRa.fCntDown.value = 0;
 31038  003F02  6B0A               	clrf	(_loRa+10)& (0+255),b
 31039  003F04  6B0B               	clrf	(_loRa+11)& (0+255),b
 31040  003F06  6B0C               	clrf	(_loRa+12)& (0+255),b
 31041  003F08  6B0D               	clrf	(_loRa+13)& (0+255),b
 31042                           
 31043                           ; BSR set to: 2
 31044                           ;lorawan_eu.c: 164: loRa.fCntUp.value = 0;
 31045  003F0A  6B06               	clrf	(_loRa+6)& (0+255),b
 31046  003F0C  6B07               	clrf	(_loRa+7)& (0+255),b
 31047  003F0E  6B08               	clrf	(_loRa+8)& (0+255),b
 31048  003F10  6B09               	clrf	(_loRa+9)& (0+255),b
 31049                           
 31050                           ; BSR set to: 2
 31051                           ;lorawan_eu.c: 165: loRa.devNonce = 0;
 31052  003F12  6BD2               	clrf	(_loRa+210)& (0+255),b
 31053  003F14  6BD3               	clrf	(_loRa+211)& (0+255),b
 31054                           
 31055                           ; BSR set to: 2
 31056                           ;lorawan_eu.c: 166: loRa.prescaler = 1;
 31057  003F16  6BDC               	clrf	(_loRa+220)& (0+255),b
 31058  003F18  0E01               	movlw	1
 31059  003F1A  6FDB               	movwf	(_loRa+219)& (0+255),b
 31060                           
 31061                           ; BSR set to: 2
 31062                           ;lorawan_eu.c: 167: loRa.adrAckCnt = 0;
 31063  003F1C  6BD0               	clrf	(_loRa+208)& (0+255),b
 31064  003F1E  6BD1               	clrf	(_loRa+209)& (0+255),b
 31065                           
 31066                           ; BSR set to: 2
 31067                           ;lorawan_eu.c: 168: loRa.counterAdrAckDelay = 0;
 31068  003F20  6BEE               	clrf	(_loRa+238)& (0+255),b
 31069                           
 31070                           ; BSR set to: 2
 31071                           ;lorawan_eu.c: 169: loRa.offset = 0;
 31072  003F22  6BEF               	clrf	(_loRa+239)& (0+255),b
 31073                           
 31074                           ; BSR set to: 2
 31075                           ;lorawan_eu.c: 170: loRa.lastTimerValue = 0;
 31076  003F24  6BC8               	clrf	(_loRa+200)& (0+255),b
 31077  003F26  6BC9               	clrf	(_loRa+201)& (0+255),b
 31078  003F28  6BCA               	clrf	(_loRa+202)& (0+255),b
 31079  003F2A  6BCB               	clrf	(_loRa+203)& (0+255),b
 31080                           
 31081                           ; BSR set to: 2
 31082                           ;lorawan_eu.c: 173: loRa.macStatus.linkCheck = 0;
 31083  003F2C  9503               	bcf	(_loRa+3)& (0+255),2,b
 31084                           
 31085                           ; BSR set to: 2
 31086                           ;lorawan_eu.c: 176: loRa.macStatus.value = 0;
 31087  003F2E  6B02               	clrf	(_loRa+2)& (0+255),b
 31088  003F30  6B03               	clrf	(_loRa+3)& (0+255),b
 31089  003F32  6B04               	clrf	(_loRa+4)& (0+255),b
 31090  003F34  6B05               	clrf	(_loRa+5)& (0+255),b
 31091                           
 31092                           ; BSR set to: 2
 31093                           ;lorawan_eu.c: 177: loRa.lorawanMacStatus.value = 0;
 31094  003F36  6B00               	clrf	_loRa& (0+255),b
 31095  003F38  6B01               	clrf	(_loRa+1)& (0+255),b
 31096                           
 31097                           ; BSR set to: 2
 31098                           ;lorawan_eu.c: 179: loRa.maxRepetitionsConfirmedUplink = 7;
 31099  003F3A  0E07               	movlw	7
 31100  003F3C  6FD7               	movwf	(_loRa+215)& (0+255),b
 31101                           
 31102                           ; BSR set to: 2
 31103                           ;lorawan_eu.c: 180: loRa.maxRepetitionsUnconfirmedUplink = 0;
 31104  003F3E  6BD6               	clrf	(_loRa+214)& (0+255),b
 31105                           
 31106                           ; BSR set to: 2
 31107                           ;lorawan_eu.c: 181: loRa.counterRepetitionsConfirmedUplink = 1;
 31108  003F40  0E01               	movlw	1
 31109  003F42  6FD9               	movwf	(_loRa+217)& (0+255),b
 31110                           
 31111                           ; BSR set to: 2
 31112                           ;lorawan_eu.c: 182: loRa.counterRepetitionsUnconfirmedUplink = 1;
 31113  003F44  6FD8               	movwf	(_loRa+216)& (0+255),b
 31114                           
 31115                           ; BSR set to: 2
 31116                           ;lorawan_eu.c: 184: loRa.batteryLevel = (0xFF);
 31117  003F46  69E0               	setf	(_loRa+224)& (0+255),b
 31118                           
 31119                           ; BSR set to: 2
 31120                           ;lorawan_eu.c: 186: loRa.ismBand = ismBandNew;
 31121  003F48  C0A3  F2A4         	movff	LORAWAN_Reset@ismBandNew,_loRa+164
 31122                           
 31123                           ; BSR set to: 2
 31124                           ;lorawan_eu.c: 188: loRa.deviceClass = CLASS_A;
 31125  003F4C  6B12               	clrf	(_loRa+18)& (0+255),b
 31126                           
 31127                           ; BSR set to: 2
 31128                           ;lorawan_eu.c: 191: loRa.maxChannels = 16;
 31129  003F4E  0E10               	movlw	16
 31130  003F50  6FED               	movwf	(_loRa+237)& (0+255),b
 31131                           
 31132                           ; BSR set to: 2
 31133                           ;lorawan_eu.c: 192: if(ISM_EU868 == ismBandNew)
 31134  003F52  0100               	movlb	0	; () banked
 31135  003F54  51A3               	movf	LORAWAN_Reset@ismBandNew& (0+255),w,b
 31136  003F56  E11A               	bnz	l15622
 31137                           
 31138                           ; BSR set to: 0
 31139                           ;lorawan_eu.c: 193: {
 31140                           ;lorawan_eu.c: 194: RADIO_Init(&radioBuffer[16], (868100000));
 31141  003F58  0EFF               	movlw	low (_radioBuffer+16)
 31142  003F5A  6F7D               	movwf	RADIO_Init@radioBuffer& (0+255),b
 31143  003F5C  0E05               	movlw	high (_radioBuffer+16)
 31144  003F5E  6F7E               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 31145  003F60  0EA0               	movlw	160
 31146  003F62  6F7F               	movwf	RADIO_Init@frequency& (0+255),b
 31147  003F64  0E27               	movlw	39
 31148  003F66  6F80               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 31149  003F68  0EBE               	movlw	190
 31150  003F6A  6F81               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 31151  003F6C  0E33               	movlw	51
 31152  003F6E  6F82               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 31153  003F70  EC5D  F01C         	call	_RADIO_Init	;wreg free
 31154                           
 31155                           ; BSR set to: 1
 31156                           ;lorawan_eu.c: 196: InitDefault868Channels ();
 31157  003F74  EC34  F032         	call	_InitDefault868Channels	;wreg free
 31158                           
 31159                           ; BSR set to: 0
 31160                           ;lorawan_eu.c: 198: loRa.receiveWindow2Parameters.dataRate = (0);
 31161  003F78  0102               	movlb	2	; () banked
 31162  003F7A  6B1C               	clrf	(_loRa+28)& (0+255),b
 31163                           
 31164                           ; BSR set to: 2
 31165                           ;lorawan_eu.c: 199: loRa.receiveWindow2Parameters.frequency = (869525000);
 31166  003F7C  0E08               	movlw	8
 31167  003F7E  6F18               	movwf	(_loRa+24)& (0+255),b
 31168  003F80  0EE6               	movlw	230
 31169  003F82  6F19               	movwf	(_loRa+25)& (0+255),b
 31170  003F84  0ED3               	movlw	211
 31171  003F86  6F1A               	movwf	(_loRa+26)& (0+255),b
 31172  003F88  0E33               	movlw	51
 31173  003F8A  D019               	goto	L20
 31174  003F8C                     l15622:
 31175                           
 31176                           ; BSR set to: 0
 31177                           ;lorawan_eu.c: 201: else
 31178                           ;lorawan_eu.c: 202: {
 31179                           ;lorawan_eu.c: 203: RADIO_Init(&radioBuffer[16], (433300000));
 31180  003F8C  0EFF               	movlw	low (_radioBuffer+16)
 31181  003F8E  6F7D               	movwf	RADIO_Init@radioBuffer& (0+255),b
 31182  003F90  0E05               	movlw	high (_radioBuffer+16)
 31183  003F92  6F7E               	movwf	(RADIO_Init@radioBuffer+1)& (0+255),b
 31184  003F94  0E20               	movlw	32
 31185  003F96  6F7F               	movwf	RADIO_Init@frequency& (0+255),b
 31186  003F98  0EA2               	movlw	162
 31187  003F9A  6F80               	movwf	(RADIO_Init@frequency+1)& (0+255),b
 31188  003F9C  0ED3               	movlw	211
 31189  003F9E  6F81               	movwf	(RADIO_Init@frequency+2)& (0+255),b
 31190  003FA0  0E19               	movlw	25
 31191  003FA2  6F82               	movwf	(RADIO_Init@frequency+3)& (0+255),b
 31192  003FA4  EC5D  F01C         	call	_RADIO_Init	;wreg free
 31193                           
 31194                           ; BSR set to: 1
 31195                           ;lorawan_eu.c: 205: InitDefault433Channels ();
 31196  003FA8  EC67  F032         	call	_InitDefault433Channels	;wreg free
 31197                           
 31198                           ; BSR set to: 0
 31199                           ;lorawan_eu.c: 207: loRa.receiveWindow2Parameters.dataRate = (0);
 31200  003FAC  0102               	movlb	2	; () banked
 31201  003FAE  6B1C               	clrf	(_loRa+28)& (0+255),b
 31202                           
 31203                           ; BSR set to: 2
 31204                           ;lorawan_eu.c: 208: loRa.receiveWindow2Parameters.frequency = (434665000);
 31205  003FB0  0E28               	movlw	40
 31206  003FB2  6F18               	movwf	(_loRa+24)& (0+255),b
 31207  003FB4  0E76               	movlw	118
 31208  003FB6  6F19               	movwf	(_loRa+25)& (0+255),b
 31209  003FB8  0EE8               	movlw	232
 31210  003FBA  6F1A               	movwf	(_loRa+26)& (0+255),b
 31211  003FBC  0E19               	movlw	25
 31212  003FBE                     L20:
 31213  003FBE  6F1B               	movwf	(_loRa+27)& (0+255),b
 31214                           
 31215                           ; BSR set to: 2
 31216                           ;lorawan_eu.c: 209: }
 31217                           ;lorawan_eu.c: 211: loRa.txPower = 1;
 31218  003FC0  0E01               	movlw	1
 31219  003FC2  6FE1               	movwf	(_loRa+225)& (0+255),b
 31220                           
 31221                           ; BSR set to: 2
 31222                           ;lorawan_eu.c: 213: loRa.currentDataRate = 0;
 31223  003FC4  6BDF               	clrf	(_loRa+223)& (0+255),b
 31224                           
 31225                           ; BSR set to: 2
 31226                           ;lorawan_eu.c: 215: UpdateMinMaxChDataRate ();
 31227  003FC6  ECC4  F02B         	call	_UpdateMinMaxChDataRate	;wreg free
 31228                           
 31229                           ; BSR set to: 0
 31230                           ;lorawan_eu.c: 218: loRa.macKeys.value = 0;
 31231  003FCA  0102               	movlb	2	; () banked
 31232  003FCC  6BA5               	clrf	(_loRa+165)& (0+255),b
 31233  003FCE  6BA6               	clrf	(_loRa+166)& (0+255),b
 31234                           
 31235                           ; BSR set to: 2
 31236                           ;lorawan_eu.c: 219: memset (&loRa.activationParameters, 0, sizeof(loRa.activationParamet
      +                          ers));
 31237  003FD0  0E1D               	movlw	low (_loRa+29)
 31238  003FD2  0100               	movlb	0	; () banked
 31239  003FD4  6F64               	movwf	memset@p1& (0+255),b
 31240  003FD6  0E02               	movlw	high (_loRa+29)
 31241  003FD8  6F65               	movwf	(memset@p1+1)& (0+255),b
 31242  003FDA  6B67               	clrf	(memset@c+1)& (0+255),b
 31243  003FDC  6B66               	clrf	memset@c& (0+255),b
 31244  003FDE  6B69               	clrf	(memset@n+1)& (0+255),b
 31245  003FE0  0E69               	movlw	105
 31246  003FE2  6F68               	movwf	memset@n& (0+255),b
 31247  003FE4  EC60  F039         	call	_memset	;wreg free
 31248                           
 31249                           ; BSR set to: 0
 31250                           ;lorawan_eu.c: 222: loRa.protocolParameters.receiveDelay1 = 1000UL;
 31251  003FE8  0E03               	movlw	3
 31252  003FEA  0102               	movlb	2	; () banked
 31253  003FEC  6F95               	movwf	(_loRa+149)& (0+255),b
 31254  003FEE  0EE8               	movlw	232
 31255  003FF0  6F94               	movwf	(_loRa+148)& (0+255),b
 31256                           
 31257                           ; BSR set to: 2
 31258                           ;lorawan_eu.c: 223: loRa.protocolParameters.receiveDelay2 = 2000UL;
 31259  003FF2  0E07               	movlw	7
 31260  003FF4  6F97               	movwf	(_loRa+151)& (0+255),b
 31261  003FF6  0ED0               	movlw	208
 31262  003FF8  6F96               	movwf	(_loRa+150)& (0+255),b
 31263                           
 31264                           ; BSR set to: 2
 31265                           ;lorawan_eu.c: 224: loRa.protocolParameters.joinAcceptDelay1 = 5000UL;
 31266  003FFA  0E13               	movlw	19
 31267  003FFC  6F99               	movwf	(_loRa+153)& (0+255),b
 31268  003FFE  0E88               	movlw	136
 31269  004000  6F98               	movwf	(_loRa+152)& (0+255),b
 31270                           
 31271                           ; BSR set to: 2
 31272                           ;lorawan_eu.c: 225: loRa.protocolParameters.joinAcceptDelay2 = 6000UL;
 31273  004002  0E17               	movlw	23
 31274  004004  6F9B               	movwf	(_loRa+155)& (0+255),b
 31275  004006  0E70               	movlw	112
 31276  004008  6F9A               	movwf	(_loRa+154)& (0+255),b
 31277                           
 31278                           ; BSR set to: 2
 31279                           ;lorawan_eu.c: 226: loRa.protocolParameters.ackTimeout = 2000;
 31280  00400A  0E07               	movlw	7
 31281  00400C  6FA1               	movwf	(_loRa+161)& (0+255),b
 31282  00400E  0ED0               	movlw	208
 31283  004010  6FA0               	movwf	(_loRa+160)& (0+255),b
 31284                           
 31285                           ; BSR set to: 2
 31286                           ;lorawan_eu.c: 227: loRa.protocolParameters.adrAckDelay = 32;
 31287  004012  0E20               	movlw	32
 31288  004014  6FA3               	movwf	(_loRa+163)& (0+255),b
 31289                           
 31290                           ; BSR set to: 2
 31291                           ;lorawan_eu.c: 228: loRa.protocolParameters.adrAckLimit = 64;
 31292  004016  0E40               	movlw	64
 31293  004018  6FA2               	movwf	(_loRa+162)& (0+255),b
 31294                           
 31295                           ; BSR set to: 2
 31296                           ;lorawan_eu.c: 229: loRa.protocolParameters.maxFcntGap = 16384;
 31297  00401A  6F9D               	movwf	(_loRa+157)& (0+255),b
 31298  00401C  6B9C               	clrf	(_loRa+156)& (0+255),b
 31299                           
 31300                           ; BSR set to: 2
 31301                           ;lorawan_eu.c: 230: loRa.protocolParameters.maxMultiFcntGap = 16384;
 31302  00401E  6F9F               	movwf	(_loRa+159)& (0+255),b
 31303  004020  6B9E               	clrf	(_loRa+158)& (0+255),b
 31304                           
 31305                           ; BSR set to: 2
 31306                           ;lorawan_eu.c: 232: LORAWAN_LinkCheckConfigure (0);
 31307  004022  0100               	movlb	0	; () banked
 31308  004024  6B95               	clrf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),b
 31309  004026  6B94               	clrf	LORAWAN_LinkCheckConfigure@period& (0+255),b
 31310  004028  EF8F  F01B         	goto	_LORAWAN_LinkCheckConfigure	;wreg free
 31311  00402C                     __end_of_LORAWAN_Reset:
 31312                           	opt stack 0
 31313                           tosu	equ	0xFFF
 31314                           tosh	equ	0xFFE
 31315                           tosl	equ	0xFFD
 31316                           pclath	equ	0xFFA
 31317                           tblptru	equ	0xFF8
 31318                           tblptrh	equ	0xFF7
 31319                           tblptrl	equ	0xFF6
 31320                           tablat	equ	0xFF5
 31321                           prodh	equ	0xFF4
 31322                           prodl	equ	0xFF3
 31323                           intcon	equ	0xFF2
 31324                           indf0	equ	0xFEF
 31325                           postinc0	equ	0xFEE
 31326                           plusw0	equ	0xFEB
 31327                           fsr0h	equ	0xFEA
 31328                           fsr0l	equ	0xFE9
 31329                           wreg	equ	0xFE8
 31330                           postinc1	equ	0xFE6
 31331                           postdec1	equ	0xFE5
 31332                           plusw1	equ	0xFE3
 31333                           fsr1h	equ	0xFE2
 31334                           fsr1l	equ	0xFE1
 31335                           indf2	equ	0xFDF
 31336                           postinc2	equ	0xFDE
 31337                           postdec2	equ	0xFDD
 31338                           plusw2	equ	0xFDB
 31339                           fsr2h	equ	0xFDA
 31340                           fsr2l	equ	0xFD9
 31341                           status	equ	0xFD8
 31342                           
 31343 ;; *************** function _UpdateMinMaxChDataRate *****************
 31344 ;; Defined at:
 31345 ;;		line 1063 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 31346 ;; Parameters:    Size  Location     Type
 31347 ;;		None
 31348 ;; Auto vars:     Size  Location     Type
 31349 ;;  i               1    5[BANK0 ] unsigned char 
 31350 ;; Return value:  Size  Location     Type
 31351 ;;                  1    wreg      void 
 31352 ;; Registers used:
 31353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 31354 ;; Tracked objects:
 31355 ;;		On entry : F/2
 31356 ;;		On exit  : F/0
 31357 ;;		Unchanged: 0/0
 31358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31359 ;;      Params:         0       0       0       0       0       0       0       0       0
 31360 ;;      Locals:         0       1       0       0       0       0       0       0       0
 31361 ;;      Temps:          0       1       0       0       0       0       0       0       0
 31362 ;;      Totals:         0       2       0       0       0       0       0       0       0
 31363 ;;Total ram usage:        2 bytes
 31364 ;; Hardware stack levels used:    1
 31365 ;; Hardware stack levels required when called:    7
 31366 ;; This function calls:
 31367 ;;		Nothing
 31368 ;; This function is called by:
 31369 ;;		_LORAWAN_Reset
 31370 ;; This function uses a non-reentrant model
 31371 ;;
 31372                           
 31373                           	psect	text157
 31374  005788                     __ptext157:
 31375                           	opt stack 0
 31376  005788                     _UpdateMinMaxChDataRate:
 31377                           	opt stack 22
 31378                           
 31379                           ; BSR set to: 2
 31380                           ;lorawan.c: 1065: uint8_t i;
 31381                           ;lorawan.c: 1068: loRa.minDataRate = 7;
 31382                           
 31383                           ;incstack = 0
 31384  005788  0E07               	movlw	7
 31385  00578A  6FEB               	movwf	(_loRa+235)& (0+255),b
 31386                           
 31387                           ; BSR set to: 2
 31388                           ;lorawan.c: 1069: loRa.maxDataRate = 0;
 31389  00578C  6BEC               	clrf	(_loRa+236)& (0+255),b
 31390                           
 31391                           ; BSR set to: 2
 31392                           ;lorawan.c: 1071: for (i = 0; i < loRa.maxChannels; i++)
 31393  00578E  0100               	movlb	0	; () banked
 31394  005790  6B65               	clrf	UpdateMinMaxChDataRate@i& (0+255),b
 31395  005792  D04E               	goto	l15052
 31396  005794                     l15040:
 31397                           
 31398                           ; BSR set to: 0
 31399                           ;lorawan.c: 1072: {
 31400                           ;lorawan.c: 1073: if ( (Channels[i].dataRange.min < loRa.minDataRate) && (Channels[i].st
      +                          atus == 1) )
 31401  005794  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31402  005796  0D0E               	mullw	14
 31403  005798  0E05               	movlw	low (_Channels+5)
 31404  00579A  24F3               	addwf	prodl,w,c
 31405  00579C  6ED9               	movwf	fsr2l,c
 31406  00579E  0E04               	movlw	high (_Channels+5)
 31407  0057A0  20F4               	addwfc	prodh,w,c
 31408  0057A2  6EDA               	movwf	fsr2h,c
 31409  0057A4  50DF               	movf	223,w,c
 31410  0057A6  0B0F               	andlw	15
 31411  0057A8  0100               	movlb	0	; () banked
 31412  0057AA  6F64               	movwf	??_UpdateMinMaxChDataRate& (0+255),b
 31413  0057AC  0102               	movlb	2	; () banked
 31414  0057AE  51EB               	movf	(_loRa+235)& (0+255),w,b
 31415  0057B0  0100               	movlb	0	; () banked
 31416  0057B2  5D64               	subwf	??_UpdateMinMaxChDataRate& (0+255),w,b
 31417  0057B4  E216               	bc	l2116
 31418                           
 31419                           ; BSR set to: 0
 31420  0057B6  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31421  0057B8  0D0E               	mullw	14
 31422  0057BA  0E04               	movlw	low (_Channels+4)
 31423  0057BC  24F3               	addwf	prodl,w,c
 31424  0057BE  6ED9               	movwf	fsr2l,c
 31425  0057C0  0E04               	movlw	high (_Channels+4)
 31426  0057C2  20F4               	addwfc	prodh,w,c
 31427  0057C4  6EDA               	movwf	fsr2h,c
 31428  0057C6  04DE               	decf	postinc2,w,c
 31429  0057C8  E10C               	bnz	l2116
 31430                           
 31431                           ; BSR set to: 0
 31432                           ;lorawan.c: 1074: {
 31433                           ;lorawan.c: 1075: loRa.minDataRate = Channels[i].dataRange.min;
 31434  0057CA  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31435  0057CC  0D0E               	mullw	14
 31436  0057CE  0E05               	movlw	low (_Channels+5)
 31437  0057D0  24F3               	addwf	prodl,w,c
 31438  0057D2  6ED9               	movwf	fsr2l,c
 31439  0057D4  0E04               	movlw	high (_Channels+5)
 31440  0057D6  20F4               	addwfc	prodh,w,c
 31441  0057D8  6EDA               	movwf	fsr2h,c
 31442  0057DA  50DF               	movf	223,w,c
 31443  0057DC  0B0F               	andlw	15
 31444  0057DE  0102               	movlb	2	; () banked
 31445  0057E0  6FEB               	movwf	(_loRa+235)& (0+255),b
 31446  0057E2                     l2116:
 31447                           
 31448                           ;lorawan.c: 1076: }
 31449                           ;lorawan.c: 1077: if ( (Channels[i].dataRange.max > loRa.maxDataRate) && (Channels[i].st
      +                          atus == 1) )
 31450  0057E2  0100               	movlb	0	; () banked
 31451  0057E4  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31452  0057E6  0D0E               	mullw	14
 31453  0057E8  0E05               	movlw	low (_Channels+5)
 31454  0057EA  24F3               	addwf	prodl,w,c
 31455  0057EC  6ED9               	movwf	fsr2l,c
 31456  0057EE  0E04               	movlw	high (_Channels+5)
 31457  0057F0  20F4               	addwfc	prodh,w,c
 31458  0057F2  6EDA               	movwf	fsr2h,c
 31459  0057F4  38DF               	swapf	223,w,c
 31460  0057F6  0B0F               	andlw	15
 31461  0057F8  0102               	movlb	2	; () banked
 31462  0057FA  61EC               	cpfslt	(_loRa+236)& (0+255),b
 31463  0057FC  D017               	goto	l15050
 31464                           
 31465                           ; BSR set to: 2
 31466  0057FE  0100               	movlb	0	; () banked
 31467  005800  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31468  005802  0D0E               	mullw	14
 31469  005804  0E04               	movlw	low (_Channels+4)
 31470  005806  24F3               	addwf	prodl,w,c
 31471  005808  6ED9               	movwf	fsr2l,c
 31472  00580A  0E04               	movlw	high (_Channels+4)
 31473  00580C  20F4               	addwfc	prodh,w,c
 31474  00580E  6EDA               	movwf	fsr2h,c
 31475  005810  04DE               	decf	postinc2,w,c
 31476  005812  E10C               	bnz	l15050
 31477                           
 31478                           ; BSR set to: 0
 31479                           ;lorawan.c: 1078: {
 31480                           ;lorawan.c: 1079: loRa.maxDataRate = Channels[i].dataRange.max;
 31481  005814  5165               	movf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31482  005816  0D0E               	mullw	14
 31483  005818  0E05               	movlw	low (_Channels+5)
 31484  00581A  24F3               	addwf	prodl,w,c
 31485  00581C  6ED9               	movwf	fsr2l,c
 31486  00581E  0E04               	movlw	high (_Channels+5)
 31487  005820  20F4               	addwfc	prodh,w,c
 31488  005822  6EDA               	movwf	fsr2h,c
 31489  005824  38DF               	swapf	223,w,c
 31490  005826  0B0F               	andlw	15
 31491  005828  0102               	movlb	2	; () banked
 31492  00582A  6FEC               	movwf	(_loRa+236)& (0+255),b
 31493  00582C                     l15050:
 31494  00582C  0100               	movlb	0	; () banked
 31495  00582E  2B65               	incf	UpdateMinMaxChDataRate@i& (0+255),f,b
 31496  005830                     l15052:
 31497                           
 31498                           ; BSR set to: 0
 31499  005830  0102               	movlb	2	; () banked
 31500  005832  51ED               	movf	(_loRa+237)& (0+255),w,b
 31501  005834  0100               	movlb	0	; () banked
 31502  005836  5D65               	subwf	UpdateMinMaxChDataRate@i& (0+255),w,b
 31503  005838  E3AD               	bnc	l15040
 31504                           
 31505                           ; BSR set to: 0
 31506  00583A  0012               	return		;funcret
 31507  00583C                     __end_of_UpdateMinMaxChDataRate:
 31508                           	opt stack 0
 31509                           tosu	equ	0xFFF
 31510                           tosh	equ	0xFFE
 31511                           tosl	equ	0xFFD
 31512                           pclath	equ	0xFFA
 31513                           tblptru	equ	0xFF8
 31514                           tblptrh	equ	0xFF7
 31515                           tblptrl	equ	0xFF6
 31516                           tablat	equ	0xFF5
 31517                           prodh	equ	0xFF4
 31518                           prodl	equ	0xFF3
 31519                           intcon	equ	0xFF2
 31520                           indf0	equ	0xFEF
 31521                           postinc0	equ	0xFEE
 31522                           plusw0	equ	0xFEB
 31523                           fsr0h	equ	0xFEA
 31524                           fsr0l	equ	0xFE9
 31525                           wreg	equ	0xFE8
 31526                           postinc1	equ	0xFE6
 31527                           postdec1	equ	0xFE5
 31528                           plusw1	equ	0xFE3
 31529                           fsr1h	equ	0xFE2
 31530                           fsr1l	equ	0xFE1
 31531                           indf2	equ	0xFDF
 31532                           postinc2	equ	0xFDE
 31533                           postdec2	equ	0xFDD
 31534                           plusw2	equ	0xFDB
 31535                           fsr2h	equ	0xFDA
 31536                           fsr2l	equ	0xFD9
 31537                           status	equ	0xFD8
 31538                           
 31539 ;; *************** function _StopAllSoftwareTimers *****************
 31540 ;; Defined at:
 31541 ;;		line 965 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 31542 ;; Parameters:    Size  Location     Type
 31543 ;;		None
 31544 ;; Auto vars:     Size  Location     Type
 31545 ;;		None
 31546 ;; Return value:  Size  Location     Type
 31547 ;;                  1    wreg      void 
 31548 ;; Registers used:
 31549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31550 ;; Tracked objects:
 31551 ;;		On entry : F/2
 31552 ;;		On exit  : F/0
 31553 ;;		Unchanged: 0/0
 31554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31555 ;;      Params:         0       0       0       0       0       0       0       0       0
 31556 ;;      Locals:         0       0       0       0       0       0       0       0       0
 31557 ;;      Temps:          0       0       0       0       0       0       0       0       0
 31558 ;;      Totals:         0       0       0       0       0       0       0       0       0
 31559 ;;Total ram usage:        0 bytes
 31560 ;; Hardware stack levels used:    1
 31561 ;; Hardware stack levels required when called:    8
 31562 ;; This function calls:
 31563 ;;		_SwTimerStop
 31564 ;; This function is called by:
 31565 ;;		_LORAWAN_Init
 31566 ;;		_LORAWAN_Reset
 31567 ;; This function uses a non-reentrant model
 31568 ;;
 31569                           
 31570                           	psect	text158
 31571  006ACE                     __ptext158:
 31572                           	opt stack 0
 31573  006ACE                     _StopAllSoftwareTimers:
 31574                           	opt stack 21
 31575                           
 31576                           ; BSR set to: 2
 31577                           ;lorawan_eu.c: 967: SwTimerStop(loRa.joinAccept1TimerId);
 31578                           
 31579                           ; BSR set to: 0
 31580                           ;incstack = 0
 31581  006ACE  51E2               	movf	(_loRa+226)& (0+255),w,b
 31582  006AD0  ECF3  F03A         	call	_SwTimerStop
 31583                           
 31584                           ;lorawan_eu.c: 968: SwTimerStop(loRa.joinAccept2TimerId);
 31585  006AD4  0102               	movlb	2	; () banked
 31586  006AD6  51E3               	movf	(_loRa+227)& (0+255),w,b
 31587  006AD8  ECF3  F03A         	call	_SwTimerStop
 31588                           
 31589                           ;lorawan_eu.c: 969: SwTimerStop(loRa.linkCheckTimerId);
 31590  006ADC  0102               	movlb	2	; () banked
 31591  006ADE  51E7               	movf	(_loRa+231)& (0+255),w,b
 31592  006AE0  ECF3  F03A         	call	_SwTimerStop
 31593                           
 31594                           ;lorawan_eu.c: 970: SwTimerStop(loRa.receiveWindow1TimerId);
 31595  006AE4  0102               	movlb	2	; () banked
 31596  006AE6  51E4               	movf	(_loRa+228)& (0+255),w,b
 31597  006AE8  ECF3  F03A         	call	_SwTimerStop
 31598                           
 31599                           ;lorawan_eu.c: 971: SwTimerStop(loRa.receiveWindow2TimerId);
 31600  006AEC  0102               	movlb	2	; () banked
 31601  006AEE  51E5               	movf	(_loRa+229)& (0+255),w,b
 31602  006AF0  ECF3  F03A         	call	_SwTimerStop
 31603                           
 31604                           ;lorawan_eu.c: 972: SwTimerStop(loRa.ackTimeoutTimerId);
 31605  006AF4  0102               	movlb	2	; () banked
 31606  006AF6  51E8               	movf	(_loRa+232)& (0+255),w,b
 31607  006AF8  ECF3  F03A         	call	_SwTimerStop
 31608                           
 31609                           ;lorawan_eu.c: 973: SwTimerStop(loRa.automaticReplyTimerId);
 31610  006AFC  0102               	movlb	2	; () banked
 31611  006AFE  51E6               	movf	(_loRa+230)& (0+255),w,b
 31612  006B00  ECF3  F03A         	call	_SwTimerStop
 31613                           
 31614                           ;lorawan_eu.c: 974: SwTimerStop(loRa.unconfirmedRetransmisionTimerId);
 31615  006B04  0102               	movlb	2	; () banked
 31616  006B06  51EA               	movf	(_loRa+234)& (0+255),w,b
 31617  006B08  ECF3  F03A         	call	_SwTimerStop
 31618                           
 31619                           ;lorawan_eu.c: 975: SwTimerStop(loRa.abpJoinTimerId);
 31620  006B0C  0102               	movlb	2	; () banked
 31621  006B0E  51F3               	movf	(_loRa+243)& (0+255),w,b
 31622  006B10  ECF3  F03A         	call	_SwTimerStop
 31623                           
 31624                           ;lorawan_eu.c: 976: SwTimerStop(loRa.dutyCycleTimerId);
 31625  006B14  0102               	movlb	2	; () banked
 31626  006B16  51E9               	movf	(_loRa+233)& (0+255),w,b
 31627  006B18  EFF3  F03A         	goto	_SwTimerStop
 31628  006B1C                     __end_of_StopAllSoftwareTimers:
 31629                           	opt stack 0
 31630                           tosu	equ	0xFFF
 31631                           tosh	equ	0xFFE
 31632                           tosl	equ	0xFFD
 31633                           pclath	equ	0xFFA
 31634                           tblptru	equ	0xFF8
 31635                           tblptrh	equ	0xFF7
 31636                           tblptrl	equ	0xFF6
 31637                           tablat	equ	0xFF5
 31638                           prodh	equ	0xFF4
 31639                           prodl	equ	0xFF3
 31640                           intcon	equ	0xFF2
 31641                           indf0	equ	0xFEF
 31642                           postinc0	equ	0xFEE
 31643                           plusw0	equ	0xFEB
 31644                           fsr0h	equ	0xFEA
 31645                           fsr0l	equ	0xFE9
 31646                           wreg	equ	0xFE8
 31647                           postinc1	equ	0xFE6
 31648                           postdec1	equ	0xFE5
 31649                           plusw1	equ	0xFE3
 31650                           fsr1h	equ	0xFE2
 31651                           fsr1l	equ	0xFE1
 31652                           indf2	equ	0xFDF
 31653                           postinc2	equ	0xFDE
 31654                           postdec2	equ	0xFDD
 31655                           plusw2	equ	0xFDB
 31656                           fsr2h	equ	0xFDA
 31657                           fsr2l	equ	0xFD9
 31658                           status	equ	0xFD8
 31659                           
 31660 ;; *************** function _RADIO_SetLoRaSyncWord *****************
 31661 ;; Defined at:
 31662 ;;		line 522 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31663 ;; Parameters:    Size  Location     Type
 31664 ;;  syncWord        1    wreg     unsigned char 
 31665 ;; Auto vars:     Size  Location     Type
 31666 ;;  syncWord        1    4[BANK0 ] unsigned char 
 31667 ;; Return value:  Size  Location     Type
 31668 ;;                  1    wreg      void 
 31669 ;; Registers used:
 31670 ;;		wreg
 31671 ;; Tracked objects:
 31672 ;;		On entry : F/2
 31673 ;;		On exit  : 0/0
 31674 ;;		Unchanged: 0/0
 31675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31676 ;;      Params:         0       0       0       0       0       0       0       0       0
 31677 ;;      Locals:         0       1       0       0       0       0       0       0       0
 31678 ;;      Temps:          0       0       0       0       0       0       0       0       0
 31679 ;;      Totals:         0       1       0       0       0       0       0       0       0
 31680 ;;Total ram usage:        1 bytes
 31681 ;; Hardware stack levels used:    1
 31682 ;; Hardware stack levels required when called:    7
 31683 ;; This function calls:
 31684 ;;		Nothing
 31685 ;; This function is called by:
 31686 ;;		_LORAWAN_Reset
 31687 ;;		_ConfigureRadio
 31688 ;; This function uses a non-reentrant model
 31689 ;;
 31690                           
 31691                           	psect	text159
 31692  00782E                     __ptext159:
 31693                           	opt stack 0
 31694  00782E                     _RADIO_SetLoRaSyncWord:
 31695                           	opt stack 18
 31696                           
 31697                           ; BSR set to: 0
 31698                           ;incstack = 0
 31699                           ;RADIO_SetLoRaSyncWord@syncWord stored from wreg
 31700  00782E  0100               	movlb	0	; () banked
 31701  007830  6F64               	movwf	RADIO_SetLoRaSyncWord@syncWord& (0+255),b
 31702                           
 31703                           ;radio_driver_SX1276.c: 525: RadioConfiguration.syncWordLoRa = syncWord;
 31704  007832  C064  F183         	movff	RADIO_SetLoRaSyncWord@syncWord,_RadioConfiguration+14
 31705  007836  0012               	return		;funcret
 31706  007838                     __end_of_RADIO_SetLoRaSyncWord:
 31707                           	opt stack 0
 31708                           tosu	equ	0xFFF
 31709                           tosh	equ	0xFFE
 31710                           tosl	equ	0xFFD
 31711                           pclath	equ	0xFFA
 31712                           tblptru	equ	0xFF8
 31713                           tblptrh	equ	0xFF7
 31714                           tblptrl	equ	0xFF6
 31715                           tablat	equ	0xFF5
 31716                           prodh	equ	0xFF4
 31717                           prodl	equ	0xFF3
 31718                           intcon	equ	0xFF2
 31719                           indf0	equ	0xFEF
 31720                           postinc0	equ	0xFEE
 31721                           plusw0	equ	0xFEB
 31722                           fsr0h	equ	0xFEA
 31723                           fsr0l	equ	0xFE9
 31724                           wreg	equ	0xFE8
 31725                           postinc1	equ	0xFE6
 31726                           postdec1	equ	0xFE5
 31727                           plusw1	equ	0xFE3
 31728                           fsr1h	equ	0xFE2
 31729                           fsr1l	equ	0xFE1
 31730                           indf2	equ	0xFDF
 31731                           postinc2	equ	0xFDE
 31732                           postdec2	equ	0xFDD
 31733                           plusw2	equ	0xFDB
 31734                           fsr2h	equ	0xFDA
 31735                           fsr2l	equ	0xFD9
 31736                           status	equ	0xFD8
 31737                           
 31738 ;; *************** function _RADIO_Init *****************
 31739 ;; Defined at:
 31740 ;;		line 422 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 31741 ;; Parameters:    Size  Location     Type
 31742 ;;  radioBuffer     2   29[BANK0 ] PTR unsigned char 
 31743 ;;		 -> radioBuffer(271), 
 31744 ;;  frequency       4   31[BANK0 ] unsigned long 
 31745 ;; Auto vars:     Size  Location     Type
 31746 ;;		None
 31747 ;; Return value:  Size  Location     Type
 31748 ;;                  1    wreg      void 
 31749 ;; Registers used:
 31750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31751 ;; Tracked objects:
 31752 ;;		On entry : F/0
 31753 ;;		On exit  : F/1
 31754 ;;		Unchanged: 0/0
 31755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 31756 ;;      Params:         0       6       0       0       0       0       0       0       0
 31757 ;;      Locals:         0       0       0       0       0       0       0       0       0
 31758 ;;      Temps:          0       1       0       0       0       0       0       0       0
 31759 ;;      Totals:         0       7       0       0       0       0       0       0       0
 31760 ;;Total ram usage:        7 bytes
 31761 ;; Hardware stack levels used:    1
 31762 ;; Hardware stack levels required when called:   11
 31763 ;; This function calls:
 31764 ;;		_RADIO_RegisterRead
 31765 ;;		_RADIO_RegisterWrite
 31766 ;;		_RADIO_Reset
 31767 ;;		_RADIO_WriteFrequency
 31768 ;;		_RADIO_WriteMode
 31769 ;;		_SwTimerCreate
 31770 ;;		_SwTimerSetCallback
 31771 ;;		_SwTimerStop
 31772 ;; This function is called by:
 31773 ;;		_LORAWAN_Init
 31774 ;;		_LORAWAN_Reset
 31775 ;; This function uses a non-reentrant model
 31776 ;;
 31777                           
 31778                           	psect	text160
 31779  0038BA                     __ptext160:
 31780                           	opt stack 0
 31781  0038BA                     _RADIO_Init:
 31782                           	opt stack 18
 31783                           
 31784                           ; BSR set to: 0
 31785                           ;radio_driver_SX1276.c: 424: RadioConfiguration.frequency = frequency;
 31786                           
 31787                           ;incstack = 0
 31788  0038BA  C07F  F175         	movff	RADIO_Init@frequency,_RadioConfiguration
 31789  0038BE  C080  F176         	movff	RADIO_Init@frequency+1,_RadioConfiguration+1
 31790  0038C2  C081  F177         	movff	RADIO_Init@frequency+2,_RadioConfiguration+2
 31791  0038C6  C082  F178         	movff	RADIO_Init@frequency+3,_RadioConfiguration+3
 31792                           
 31793                           ; BSR set to: 0
 31794                           ;radio_driver_SX1276.c: 425: RadioConfiguration.frequencyDeviation = 25000;
 31795  0038CA  0EA8               	movlw	168
 31796  0038CC  0101               	movlb	1	; () banked
 31797  0038CE  6F79               	movwf	(_RadioConfiguration+4)& (0+255),b
 31798  0038D0  0E61               	movlw	97
 31799  0038D2  6F7A               	movwf	(_RadioConfiguration+5)& (0+255),b
 31800  0038D4  6B7B               	clrf	(_RadioConfiguration+6)& (0+255),b
 31801  0038D6  6B7C               	clrf	(_RadioConfiguration+7)& (0+255),b
 31802                           
 31803                           ;radio_driver_SX1276.c: 426: RadioConfiguration.bitRate = 50000;
 31804  0038D8  0E50               	movlw	80
 31805  0038DA  6F7D               	movwf	(_RadioConfiguration+8)& (0+255),b
 31806  0038DC  0EC3               	movlw	195
 31807  0038DE  6F7E               	movwf	(_RadioConfiguration+9)& (0+255),b
 31808  0038E0  6B7F               	clrf	(_RadioConfiguration+10)& (0+255),b
 31809  0038E2  6B80               	clrf	(_RadioConfiguration+11)& (0+255),b
 31810                           
 31811                           ;radio_driver_SX1276.c: 427: RadioConfiguration.modulation = MODULATION_LORA;
 31812  0038E4  0E01               	movlw	1
 31813  0038E6  6F8D               	movwf	(_RadioConfiguration+24)& (0+255),b
 31814                           
 31815                           ;radio_driver_SX1276.c: 428: RadioConfiguration.bandWidth = BW_125KHZ;
 31816  0038E8  0E07               	movlw	7
 31817  0038EA  6F8F               	movwf	(_RadioConfiguration+26)& (0+255),b
 31818                           
 31819                           ;radio_driver_SX1276.c: 429: RadioConfiguration.outputPower = 1;
 31820  0038EC  0E01               	movlw	1
 31821  0038EE  6F90               	movwf	(_RadioConfiguration+27)& (0+255),b
 31822                           
 31823                           ;radio_driver_SX1276.c: 430: RadioConfiguration.errorCodingRate = CR_4_5;
 31824  0038F0  6F96               	movwf	(_RadioConfiguration+33)& (0+255),b
 31825                           
 31826                           ; BSR set to: 1
 31827                           ;radio_driver_SX1276.c: 431: RadioConfiguration.implicitHeaderMode = 0;
 31828  0038F2  6B97               	clrf	(_RadioConfiguration+34)& (0+255),b
 31829                           
 31830                           ;radio_driver_SX1276.c: 432: RadioConfiguration.preambleLen = 8;
 31831  0038F4  6B82               	clrf	(_RadioConfiguration+13)& (0+255),b
 31832  0038F6  0E08               	movlw	8
 31833  0038F8  6F81               	movwf	(_RadioConfiguration+12)& (0+255),b
 31834                           
 31835                           ;radio_driver_SX1276.c: 433: RadioConfiguration.dataRate = SF_12;
 31836  0038FA  0E0C               	movlw	12
 31837  0038FC  6F8E               	movwf	(_RadioConfiguration+25)& (0+255),b
 31838                           
 31839                           ;radio_driver_SX1276.c: 434: RadioConfiguration.crcOn = 1;
 31840  0038FE  0E01               	movlw	1
 31841  003900  6F91               	movwf	(_RadioConfiguration+28)& (0+255),b
 31842                           
 31843                           ; BSR set to: 1
 31844                           ;radio_driver_SX1276.c: 435: RadioConfiguration.paBoost = 0;
 31845  003902  6B92               	clrf	(_RadioConfiguration+29)& (0+255),b
 31846                           
 31847                           ; BSR set to: 1
 31848                           ;radio_driver_SX1276.c: 436: RadioConfiguration.iqInverted = 0;
 31849  003904  6B95               	clrf	(_RadioConfiguration+32)& (0+255),b
 31850                           
 31851                           ;radio_driver_SX1276.c: 437: RadioConfiguration.syncWord[0] = 0xC1;
 31852  003906  0EC1               	movlw	193
 31853  003908  6F84               	movwf	(_RadioConfiguration+15)& (0+255),b
 31854                           
 31855                           ;radio_driver_SX1276.c: 438: RadioConfiguration.syncWord[1] = 0x94;
 31856  00390A  0E94               	movlw	148
 31857  00390C  6F85               	movwf	(_RadioConfiguration+16)& (0+255),b
 31858                           
 31859                           ;radio_driver_SX1276.c: 439: RadioConfiguration.syncWord[2] = 0xC1;
 31860  00390E  0EC1               	movlw	193
 31861  003910  6F86               	movwf	(_RadioConfiguration+17)& (0+255),b
 31862                           
 31863                           ;radio_driver_SX1276.c: 440: RadioConfiguration.syncWordLen = 3;
 31864  003912  0E03               	movlw	3
 31865  003914  6F8C               	movwf	(_RadioConfiguration+23)& (0+255),b
 31866                           
 31867                           ;radio_driver_SX1276.c: 441: RadioConfiguration.syncWordLoRa = 0x34;
 31868  003916  0E34               	movlw	52
 31869  003918  6F83               	movwf	(_RadioConfiguration+14)& (0+255),b
 31870                           
 31871                           ; BSR set to: 1
 31872                           ;radio_driver_SX1276.c: 442: RadioConfiguration.flags = 0;
 31873  00391A  6B98               	clrf	(_RadioConfiguration+35)& (0+255),b
 31874                           
 31875                           ; BSR set to: 1
 31876                           ;radio_driver_SX1276.c: 443: RadioConfiguration.dataBufferLen = 0;
 31877  00391C  6B99               	clrf	(_RadioConfiguration+36)& (0+255),b
 31878                           
 31879                           ; BSR set to: 1
 31880                           ;radio_driver_SX1276.c: 444: RadioConfiguration.dataBuffer = radioBuffer;
 31881  00391E  C07D  F19A         	movff	RADIO_Init@radioBuffer,_RadioConfiguration+37
 31882  003922  C07E  F19B         	movff	RADIO_Init@radioBuffer+1,_RadioConfiguration+38
 31883                           
 31884                           ; BSR set to: 1
 31885                           ;radio_driver_SX1276.c: 445: RadioConfiguration.frequencyHopPeriod = 0;
 31886  003926  6B93               	clrf	(_RadioConfiguration+30)& (0+255),b
 31887  003928  6B94               	clrf	(_RadioConfiguration+31)& (0+255),b
 31888                           
 31889                           ; BSR set to: 1
 31890                           ;radio_driver_SX1276.c: 446: RadioConfiguration.packetSNR = -128;
 31891  00392A  0E80               	movlw	128
 31892  00392C  6FA7               	movwf	(_RadioConfiguration+50)& (0+255),b
 31893                           
 31894                           ; BSR set to: 1
 31895                           ;radio_driver_SX1276.c: 447: RadioConfiguration.watchdogTimerTimeout = ((uint32_t)15000)
      +                          ;
 31896  00392E  0E98               	movlw	152
 31897  003930  6F9F               	movwf	(_RadioConfiguration+42)& (0+255),b
 31898  003932  0E3A               	movlw	58
 31899  003934  6FA0               	movwf	(_RadioConfiguration+43)& (0+255),b
 31900  003936  6BA1               	clrf	(_RadioConfiguration+44)& (0+255),b
 31901  003938  6BA2               	clrf	(_RadioConfiguration+45)& (0+255),b
 31902                           
 31903                           ; BSR set to: 1
 31904                           ;radio_driver_SX1276.c: 448: RadioConfiguration.fskDataShaping = FSK_SHAPING_GAUSS_BT_0_
      +                          5;
 31905  00393A  0E02               	movlw	2
 31906  00393C  6FA8               	movwf	(_RadioConfiguration+51)& (0+255),b
 31907                           
 31908                           ; BSR set to: 1
 31909                           ;radio_driver_SX1276.c: 449: RadioConfiguration.rxBw = FSKBW_50_0KHZ;
 31910  00393E  0E0B               	movlw	11
 31911  003940  6FA9               	movwf	(_RadioConfiguration+52)& (0+255),b
 31912                           
 31913                           ; BSR set to: 1
 31914                           ;radio_driver_SX1276.c: 450: RadioConfiguration.afcBw = FSKBW_83_3KHZ;
 31915  003942  0E12               	movlw	18
 31916  003944  6FAA               	movwf	(_RadioConfiguration+53)& (0+255),b
 31917                           
 31918                           ; BSR set to: 1
 31919                           ;radio_driver_SX1276.c: 451: RadioConfiguration.fhssNextFrequency = (0);
 31920  003946  6BA4               	clrf	(_RadioConfiguration+47)& (0+255),b
 31921  003948  6BA5               	clrf	(_RadioConfiguration+48)& (0+255),b
 31922                           
 31923                           ; BSR set to: 1
 31924                           ;radio_driver_SX1276.c: 456: if (0 == RadioConfiguration.initialized)
 31925  00394A  51A3               	movf	(_RadioConfiguration+46)& (0+255),w,b
 31926  00394C  E123               	bnz	l14804
 31927                           
 31928                           ; BSR set to: 1
 31929                           ;radio_driver_SX1276.c: 457: {
 31930                           ;radio_driver_SX1276.c: 460: RadioConfiguration.timeOnAirTimerId = SwTimerCreate();
 31931  00394E  EC27  F031         	call	_SwTimerCreate	;wreg free
 31932  003952  0101               	movlb	1	; () banked
 31933  003954  6F9C               	movwf	(_RadioConfiguration+39)& (0+255),b
 31934                           
 31935                           ;radio_driver_SX1276.c: 461: RadioConfiguration.fskRxWindowTimerId = SwTimerCreate();
 31936  003956  EC27  F031         	call	_SwTimerCreate	;wreg free
 31937  00395A  0101               	movlb	1	; () banked
 31938  00395C  6F9D               	movwf	(_RadioConfiguration+40)& (0+255),b
 31939                           
 31940                           ;radio_driver_SX1276.c: 462: RadioConfiguration.watchdogTimerId = SwTimerCreate();
 31941  00395E  EC27  F031         	call	_SwTimerCreate	;wreg free
 31942  003962  0101               	movlb	1	; () banked
 31943  003964  6F9E               	movwf	(_RadioConfiguration+41)& (0+255),b
 31944                           
 31945                           ;radio_driver_SX1276.c: 463: SwTimerSetCallback(RadioConfiguration.fskRxWindowTimerId, R
      +                          ADIO_RxFSKTimeout, 0);
 31946  003966  0E2E               	movlw	low _RADIO_RxFSKTimeout
 31947  003968  0100               	movlb	0	; () banked
 31948  00396A  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 31949  00396C  0E70               	movlw	high _RADIO_RxFSKTimeout
 31950  00396E  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 31951  003970  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 31952  003972  0101               	movlb	1	; () banked
 31953  003974  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 31954  003976  ECB1  F038         	call	_SwTimerSetCallback
 31955                           
 31956                           ;radio_driver_SX1276.c: 464: SwTimerSetCallback(RadioConfiguration.watchdogTimerId, RADI
      +                          O_WatchdogTimeout, 0);
 31957  00397A  0ECE               	movlw	low _RADIO_WatchdogTimeout
 31958  00397C  6F64               	movwf	SwTimerSetCallback@callback& (0+255),b
 31959  00397E  0E6C               	movlw	high _RADIO_WatchdogTimeout
 31960  003980  6F65               	movwf	(SwTimerSetCallback@callback+1)& (0+255),b
 31961  003982  6B66               	clrf	SwTimerSetCallback@callbackParameter& (0+255),b
 31962  003984  0101               	movlb	1	; () banked
 31963  003986  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 31964  003988  ECB1  F038         	call	_SwTimerSetCallback
 31965                           
 31966                           ; BSR set to: 0
 31967                           ;radio_driver_SX1276.c: 465: RadioConfiguration.initialized = 1;
 31968  00398C  0E01               	movlw	1
 31969  00398E  0101               	movlb	1	; () banked
 31970  003990  6FA3               	movwf	(_RadioConfiguration+46)& (0+255),b
 31971                           
 31972                           ;radio_driver_SX1276.c: 466: }
 31973  003992  D00B               	goto	l14806
 31974  003994                     l14804:
 31975                           
 31976                           ; BSR set to: 1
 31977                           ;radio_driver_SX1276.c: 467: else
 31978                           ;radio_driver_SX1276.c: 468: {
 31979                           ;radio_driver_SX1276.c: 469: SwTimerStop(RadioConfiguration.timeOnAirTimerId);
 31980  003994  519C               	movf	(_RadioConfiguration+39)& (0+255),w,b
 31981  003996  ECF3  F03A         	call	_SwTimerStop
 31982                           
 31983                           ;radio_driver_SX1276.c: 470: SwTimerStop(RadioConfiguration.fskRxWindowTimerId);
 31984  00399A  0101               	movlb	1	; () banked
 31985  00399C  519D               	movf	(_RadioConfiguration+40)& (0+255),w,b
 31986  00399E  ECF3  F03A         	call	_SwTimerStop
 31987                           
 31988                           ;radio_driver_SX1276.c: 471: SwTimerStop(RadioConfiguration.watchdogTimerId);
 31989  0039A2  0101               	movlb	1	; () banked
 31990  0039A4  519E               	movf	(_RadioConfiguration+41)& (0+255),w,b
 31991  0039A6  ECF3  F03A         	call	_SwTimerStop
 31992  0039AA                     l14806:
 31993                           
 31994                           ;radio_driver_SX1276.c: 472: }
 31995                           ;radio_driver_SX1276.c: 474: RADIO_Reset();
 31996  0039AA  EC4C  F038         	call	_RADIO_Reset	;wreg free
 31997                           
 31998                           ;radio_driver_SX1276.c: 479: RADIO_WriteMode(MODE_STANDBY, MODULATION_FSK, 1);
 31999  0039AE  0E00               	movlw	0
 32000  0039B0  0100               	movlb	0	; () banked
 32001  0039B2  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 32002  0039B4  0E01               	movlw	1
 32003  0039B6  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 32004  0039B8  EC6B  F029         	call	_RADIO_WriteMode
 32005                           
 32006                           ;radio_driver_SX1276.c: 482: RADIO_WriteFrequency(RadioConfiguration.frequency);
 32007  0039BC  C175  F071         	movff	_RadioConfiguration,RADIO_WriteFrequency@frequency
 32008  0039C0  C176  F072         	movff	_RadioConfiguration+1,RADIO_WriteFrequency@frequency+1
 32009  0039C4  C177  F073         	movff	_RadioConfiguration+2,RADIO_WriteFrequency@frequency+2
 32010  0039C8  C178  F074         	movff	_RadioConfiguration+3,RADIO_WriteFrequency@frequency+3
 32011  0039CC  EC90  F028         	call	_RADIO_WriteFrequency	;wreg free
 32012                           
 32013                           ;radio_driver_SX1276.c: 486: RADIO_RegisterWrite(0x3B, 0x42);
 32014  0039D0  0E42               	movlw	66
 32015  0039D2  0100               	movlb	0	; () banked
 32016  0039D4  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32017  0039D6  0E3B               	movlw	59
 32018  0039D8  EC9A  F03A         	call	_RADIO_RegisterWrite
 32019  0039DC                     l14814:
 32020  0039DC  0E3B               	movlw	59
 32021  0039DE  ECB0  F039         	call	_RADIO_RegisterRead
 32022  0039E2  6F83               	movwf	??_RADIO_Init& (0+255),b
 32023  0039E4  BB83               	btfsc	??_RADIO_Init& (0+255),5,b
 32024  0039E6  D7FA               	goto	l14814
 32025                           
 32026                           ; BSR set to: 0
 32027                           ;radio_driver_SX1276.c: 493: RADIO_RegisterWrite(0x0C, 0x23);
 32028  0039E8  0E23               	movlw	35
 32029  0039EA  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32030  0039EC  0E0C               	movlw	12
 32031  0039EE  EC9A  F03A         	call	_RADIO_RegisterWrite
 32032                           
 32033                           ;radio_driver_SX1276.c: 496: RADIO_RegisterWrite(0x0D, 0x1E);
 32034  0039F2  0E1E               	movlw	30
 32035  0039F4  0100               	movlb	0	; () banked
 32036  0039F6  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32037  0039F8  0E0D               	movlw	13
 32038  0039FA  EC9A  F03A         	call	_RADIO_RegisterWrite
 32039                           
 32040                           ;radio_driver_SX1276.c: 500: RADIO_RegisterWrite(0x1F, 0xAA);
 32041  0039FE  0EAA               	movlw	170
 32042  003A00  0100               	movlb	0	; () banked
 32043  003A02  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32044  003A04  0E1F               	movlw	31
 32045  003A06  EC9A  F03A         	call	_RADIO_RegisterWrite
 32046                           
 32047                           ;radio_driver_SX1276.c: 504: RADIO_RegisterWrite(0x35, 0x8F);
 32048  003A0A  0E8F               	movlw	143
 32049  003A0C  0100               	movlb	0	; () banked
 32050  003A0E  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32051  003A10  0E35               	movlw	53
 32052  003A12  EC9A  F03A         	call	_RADIO_RegisterWrite
 32053                           
 32054                           ;radio_driver_SX1276.c: 507: RADIO_RegisterWrite(0x32, 0xFF);
 32055  003A16  0100               	movlb	0	; () banked
 32056  003A18  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 32057  003A1A  0E32               	movlw	50
 32058  003A1C  EC9A  F03A         	call	_RADIO_RegisterWrite
 32059                           
 32060                           ;radio_driver_SX1276.c: 510: RADIO_RegisterWrite(0x31, 1 << (6));
 32061  003A20  0E40               	movlw	64
 32062  003A22  0100               	movlb	0	; () banked
 32063  003A24  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32064  003A26  0E31               	movlw	49
 32065  003A28  EC9A  F03A         	call	_RADIO_RegisterWrite
 32066                           
 32067                           ;radio_driver_SX1276.c: 513: RADIO_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
 32068  003A2C  0E01               	movlw	1
 32069  003A2E  0100               	movlb	0	; () banked
 32070  003A30  6F69               	movwf	RADIO_WriteMode@newModulation& (0+255),b
 32071  003A32  6F6A               	movwf	RADIO_WriteMode@blocking& (0+255),b
 32072  003A34  0E00               	movlw	0
 32073  003A36  EC6B  F029         	call	_RADIO_WriteMode
 32074                           
 32075                           ;radio_driver_SX1276.c: 517: RADIO_RegisterWrite(0x23, 0xFF);
 32076  003A3A  0100               	movlb	0	; () banked
 32077  003A3C  6966               	setf	RADIO_RegisterWrite@value& (0+255),b
 32078  003A3E  0E23               	movlw	35
 32079  003A40  EC9A  F03A         	call	_RADIO_RegisterWrite
 32080                           
 32081                           ;radio_driver_SX1276.c: 519: RadioConfiguration.regVersion = RADIO_RegisterRead(0x42);
 32082  003A44  0E42               	movlw	66
 32083  003A46  ECB0  F039         	call	_RADIO_RegisterRead
 32084  003A4A  0101               	movlb	1	; () banked
 32085  003A4C  6FA6               	movwf	(_RadioConfiguration+49)& (0+255),b
 32086                           
 32087                           ; BSR set to: 1
 32088  003A4E  0012               	return		;funcret
 32089  003A50                     __end_of_RADIO_Init:
 32090                           	opt stack 0
 32091                           tosu	equ	0xFFF
 32092                           tosh	equ	0xFFE
 32093                           tosl	equ	0xFFD
 32094                           pclath	equ	0xFFA
 32095                           tblptru	equ	0xFF8
 32096                           tblptrh	equ	0xFF7
 32097                           tblptrl	equ	0xFF6
 32098                           tablat	equ	0xFF5
 32099                           prodh	equ	0xFF4
 32100                           prodl	equ	0xFF3
 32101                           intcon	equ	0xFF2
 32102                           indf0	equ	0xFEF
 32103                           postinc0	equ	0xFEE
 32104                           plusw0	equ	0xFEB
 32105                           fsr0h	equ	0xFEA
 32106                           fsr0l	equ	0xFE9
 32107                           wreg	equ	0xFE8
 32108                           postinc1	equ	0xFE6
 32109                           postdec1	equ	0xFE5
 32110                           plusw1	equ	0xFE3
 32111                           fsr1h	equ	0xFE2
 32112                           fsr1l	equ	0xFE1
 32113                           indf2	equ	0xFDF
 32114                           postinc2	equ	0xFDE
 32115                           postdec2	equ	0xFDD
 32116                           plusw2	equ	0xFDB
 32117                           fsr2h	equ	0xFDA
 32118                           fsr2l	equ	0xFD9
 32119                           status	equ	0xFD8
 32120                           
 32121 ;; *************** function _SwTimerSetCallback *****************
 32122 ;; Defined at:
 32123 ;;		line 180 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 32124 ;; Parameters:    Size  Location     Type
 32125 ;;  timerId         1    wreg     unsigned char 
 32126 ;;  callback        2    4[BANK0 ] PTR FTN(unsigned char ,)
 32127 ;;		 -> DutyCycleCallback(1), UpdateJoinSuccessState(1), UnconfirmedTransmissionCallback(1), AutomaticReplyCallback(1), 
 32128 ;;		 -> AckRetransmissionCallback(1), LORAWAN_LinkCheckCallback(1), LORAWAN_ReceiveWindow1Callback(1), LORAWAN_ReceiveWi
      +ndow2Callback(1), 
 32129 ;;		 -> RADIO_WatchdogTimeout(1), RADIO_RxFSKTimeout(1), 
 32130 ;;  callbackPara    1    6[BANK0 ] unsigned char 
 32131 ;; Auto vars:     Size  Location     Type
 32132 ;;  timerId         1    7[BANK0 ] unsigned char 
 32133 ;; Return value:  Size  Location     Type
 32134 ;;                  1    wreg      void 
 32135 ;; Registers used:
 32136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 32137 ;; Tracked objects:
 32138 ;;		On entry : C/2
 32139 ;;		On exit  : F/0
 32140 ;;		Unchanged: 0/0
 32141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32142 ;;      Params:         0       3       0       0       0       0       0       0       0
 32143 ;;      Locals:         0       1       0       0       0       0       0       0       0
 32144 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32145 ;;      Totals:         0       4       0       0       0       0       0       0       0
 32146 ;;Total ram usage:        4 bytes
 32147 ;; Hardware stack levels used:    1
 32148 ;; Hardware stack levels required when called:    7
 32149 ;; This function calls:
 32150 ;;		Nothing
 32151 ;; This function is called by:
 32152 ;;		_RADIO_Init
 32153 ;;		_SetCallbackSoftwareTimers
 32154 ;; This function uses a non-reentrant model
 32155 ;;
 32156                           
 32157                           	psect	text161
 32158  007162                     __ptext161:
 32159                           	opt stack 0
 32160  007162                     _SwTimerSetCallback:
 32161                           	opt stack 21
 32162                           
 32163                           ; BSR set to: 1
 32164                           ;incstack = 0
 32165                           ;SwTimerSetCallback@timerId stored from wreg
 32166  007162  0100               	movlb	0	; () banked
 32167  007164  6F67               	movwf	SwTimerSetCallback@timerId& (0+255),b
 32168                           
 32169                           ;sw_timer.c: 182: swTimers[timerId].callback = callback;
 32170  007166  5167               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 32171  007168  0D08               	mullw	8
 32172  00716A  0E06               	movlw	low (_swTimers+6)
 32173  00716C  24F3               	addwf	prodl,w,c
 32174  00716E  6ED9               	movwf	fsr2l,c
 32175  007170  0E03               	movlw	high (_swTimers+6)
 32176  007172  20F4               	addwfc	prodh,w,c
 32177  007174  6EDA               	movwf	fsr2h,c
 32178  007176  C064  FFDE         	movff	SwTimerSetCallback@callback,postinc2	;volatile
 32179  00717A  C065  FFDD         	movff	SwTimerSetCallback@callback+1,postdec2	;volatile
 32180                           
 32181                           ;sw_timer.c: 183: swTimers[timerId].callbackParameter = callbackParameter;
 32182  00717E  5167               	movf	SwTimerSetCallback@timerId& (0+255),w,b
 32183  007180  0D08               	mullw	8
 32184  007182  0E05               	movlw	low (_swTimers+5)
 32185  007184  24F3               	addwf	prodl,w,c
 32186  007186  6ED9               	movwf	fsr2l,c
 32187  007188  0E03               	movlw	high (_swTimers+5)
 32188  00718A  20F4               	addwfc	prodh,w,c
 32189  00718C  6EDA               	movwf	fsr2h,c
 32190  00718E  C066  FFDF         	movff	SwTimerSetCallback@callbackParameter,indf2
 32191                           
 32192                           ; BSR set to: 0
 32193  007192  0012               	return		;funcret
 32194  007194                     __end_of_SwTimerSetCallback:
 32195                           	opt stack 0
 32196                           tosu	equ	0xFFF
 32197                           tosh	equ	0xFFE
 32198                           tosl	equ	0xFFD
 32199                           pclath	equ	0xFFA
 32200                           tblptru	equ	0xFF8
 32201                           tblptrh	equ	0xFF7
 32202                           tblptrl	equ	0xFF6
 32203                           tablat	equ	0xFF5
 32204                           prodh	equ	0xFF4
 32205                           prodl	equ	0xFF3
 32206                           intcon	equ	0xFF2
 32207                           indf0	equ	0xFEF
 32208                           postinc0	equ	0xFEE
 32209                           plusw0	equ	0xFEB
 32210                           fsr0h	equ	0xFEA
 32211                           fsr0l	equ	0xFE9
 32212                           wreg	equ	0xFE8
 32213                           postinc1	equ	0xFE6
 32214                           postdec1	equ	0xFE5
 32215                           plusw1	equ	0xFE3
 32216                           fsr1h	equ	0xFE2
 32217                           fsr1l	equ	0xFE1
 32218                           indf2	equ	0xFDF
 32219                           postinc2	equ	0xFDE
 32220                           postdec2	equ	0xFDD
 32221                           plusw2	equ	0xFDB
 32222                           fsr2h	equ	0xFDA
 32223                           fsr2l	equ	0xFD9
 32224                           status	equ	0xFD8
 32225                           
 32226 ;; *************** function _RADIO_WriteMode *****************
 32227 ;; Defined at:
 32228 ;;		line 147 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32229 ;; Parameters:    Size  Location     Type
 32230 ;;  newMode         1    wreg     enum E17657
 32231 ;;  newModulatio    1    9[BANK0 ] enum E16925
 32232 ;;  blocking        1   10[BANK0 ] unsigned char 
 32233 ;; Auto vars:     Size  Location     Type
 32234 ;;  newMode         1   14[BANK0 ] enum E17657
 32235 ;;  opMode          1   15[BANK0 ] unsigned char 
 32236 ;;  currentMode     1   13[BANK0 ] enum E17657
 32237 ;;  dioMapping      1   12[BANK0 ] unsigned char 
 32238 ;;  currentModul    1   11[BANK0 ] enum E16925
 32239 ;; Return value:  Size  Location     Type
 32240 ;;                  1    wreg      void 
 32241 ;; Registers used:
 32242 ;;		wreg, status,2, status,0, cstack
 32243 ;; Tracked objects:
 32244 ;;		On entry : F/0
 32245 ;;		On exit  : 0/0
 32246 ;;		Unchanged: 0/0
 32247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32248 ;;      Params:         0       2       0       0       0       0       0       0       0
 32249 ;;      Locals:         0       5       0       0       0       0       0       0       0
 32250 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32251 ;;      Totals:         0       7       0       0       0       0       0       0       0
 32252 ;;Total ram usage:        7 bytes
 32253 ;; Hardware stack levels used:    1
 32254 ;; Hardware stack levels required when called:   10
 32255 ;; This function calls:
 32256 ;;		_HALDIO5PinValue
 32257 ;;		_RADIO_RegisterRead
 32258 ;;		_RADIO_RegisterWrite
 32259 ;;		_SystemBlockingWaitMs
 32260 ;; This function is called by:
 32261 ;;		_RADIO_Init
 32262 ;;		_RADIO_WriteConfiguration
 32263 ;;		_RADIO_Transmit
 32264 ;;		_RADIO_ReceiveStart
 32265 ;;		_RADIO_ReceiveStop
 32266 ;;		_RADIO_RxDone
 32267 ;;		_RADIO_FSKPayloadReady
 32268 ;;		_RADIO_RxTimeout
 32269 ;;		_RADIO_TxDone
 32270 ;;		_RADIO_FSKPacketSent
 32271 ;;		_RADIO_ReadRandom
 32272 ;;		_RADIO_RxFSKTimeout
 32273 ;;		_RADIO_WatchdogTimeout
 32274 ;; This function uses a non-reentrant model
 32275 ;;
 32276                           
 32277                           	psect	text162
 32278  0052D6                     __ptext162:
 32279                           	opt stack 0
 32280  0052D6                     _RADIO_WriteMode:
 32281                           	opt stack 17
 32282                           
 32283                           ; BSR set to: 0
 32284                           ;incstack = 0
 32285                           ;RADIO_WriteMode@newMode stored from wreg
 32286  0052D6  6F6E               	movwf	RADIO_WriteMode@newMode& (0+255),b
 32287                           
 32288                           ;radio_driver_SX1276.c: 149: uint8_t opMode;
 32289                           ;radio_driver_SX1276.c: 150: uint8_t dioMapping;
 32290                           ;radio_driver_SX1276.c: 151: RadioModulation_t currentModulation;
 32291                           ;radio_driver_SX1276.c: 152: RadioMode_t currentMode;
 32292                           ;radio_driver_SX1276.c: 154: if ((MODULATION_FSK == newModulation) &&
 32293                           ;radio_driver_SX1276.c: 155: ((MODE_RXSINGLE == newMode) || (MODE_CAD == newMode)))
 32294  0052D8  0100               	movlb	0	; () banked
 32295  0052DA  5169               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 32296  0052DC  E108               	bnz	l12146
 32297                           
 32298                           ; BSR set to: 0
 32299  0052DE  0E06               	movlw	6
 32300  0052E0  196E               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 32301  0052E2  B4D8               	btfsc	status,2,c
 32302  0052E4  0012               	return	
 32303                           
 32304                           ; BSR set to: 0
 32305  0052E6  0E07               	movlw	7
 32306  0052E8  196E               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 32307  0052EA  E101               	bnz	l12146
 32308  0052EC  0012               	return	
 32309  0052EE                     l12146:
 32310                           
 32311                           ; BSR set to: 0
 32312                           ;radio_driver_SX1276.c: 159: }
 32313                           ;radio_driver_SX1276.c: 162: newMode &= 0x07;
 32314  0052EE  0E07               	movlw	7
 32315  0052F0  176E               	andwf	RADIO_WriteMode@newMode& (0+255),f,b
 32316                           
 32317                           ;radio_driver_SX1276.c: 163: newModulation &= 0x01;
 32318  0052F2  0E01               	movlw	1
 32319  0052F4  1769               	andwf	RADIO_WriteMode@newModulation& (0+255),f,b
 32320                           
 32321                           ; BSR set to: 0
 32322                           ;radio_driver_SX1276.c: 165: opMode = RADIO_RegisterRead(0x01);
 32323  0052F6  ECB0  F039         	call	_RADIO_RegisterRead
 32324  0052FA  6F6F               	movwf	RADIO_WriteMode@opMode& (0+255),b
 32325                           
 32326                           ; BSR set to: 0
 32327                           ;radio_driver_SX1276.c: 167: if ((opMode & 0x80) != 0)
 32328  0052FC  AF6F               	btfss	RADIO_WriteMode@opMode& (0+255),7,b
 32329  0052FE  D003               	goto	l401
 32330                           
 32331                           ; BSR set to: 0
 32332                           ;radio_driver_SX1276.c: 168: {
 32333                           ;radio_driver_SX1276.c: 169: currentModulation = MODULATION_LORA;
 32334  005300  0E01               	movlw	1
 32335  005302  6F6B               	movwf	RADIO_WriteMode@currentModulation& (0+255),b
 32336                           
 32337                           ;radio_driver_SX1276.c: 170: }
 32338  005304  D001               	goto	l12154
 32339  005306                     l401:
 32340                           
 32341                           ; BSR set to: 0
 32342                           ;radio_driver_SX1276.c: 171: else
 32343                           ;radio_driver_SX1276.c: 172: {
 32344                           ;radio_driver_SX1276.c: 173: currentModulation = MODULATION_FSK;
 32345  005306  6B6B               	clrf	RADIO_WriteMode@currentModulation& (0+255),b
 32346  005308                     l12154:
 32347                           
 32348                           ; BSR set to: 0
 32349                           ;radio_driver_SX1276.c: 174: }
 32350                           ;radio_driver_SX1276.c: 176: currentMode = opMode & 0x07;
 32351  005308  516F               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 32352  00530A  0B07               	andlw	7
 32353  00530C  6F6D               	movwf	RADIO_WriteMode@currentMode& (0+255),b
 32354                           
 32355                           ;radio_driver_SX1276.c: 180: if (newModulation != currentModulation)
 32356  00530E  516B               	movf	RADIO_WriteMode@currentModulation& (0+255),w,b
 32357  005310  1969               	xorwf	RADIO_WriteMode@newModulation& (0+255),w,b
 32358  005312  E018               	bz	l12170
 32359                           
 32360                           ; BSR set to: 0
 32361                           ;radio_driver_SX1276.c: 181: {
 32362                           ;radio_driver_SX1276.c: 183: if (MODE_SLEEP != currentMode)
 32363  005314  516D               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 32364  005316  E008               	bz	l12162
 32365                           
 32366                           ; BSR set to: 0
 32367                           ;radio_driver_SX1276.c: 184: {
 32368                           ;radio_driver_SX1276.c: 186: RADIO_RegisterWrite(0x01, opMode & (~0x07));
 32369  005318  516F               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 32370  00531A  0BF8               	andlw	248
 32371  00531C  6F66               	movwf	RADIO_RegisterWrite@value& (0+255),b
 32372  00531E  0E01               	movlw	1
 32373  005320  EC9A  F03A         	call	_RADIO_RegisterWrite
 32374                           
 32375                           ;radio_driver_SX1276.c: 187: currentMode = MODE_SLEEP;
 32376  005324  0100               	movlb	0	; () banked
 32377  005326  6B6D               	clrf	RADIO_WriteMode@currentMode& (0+255),b
 32378  005328                     l12162:
 32379                           
 32380                           ; BSR set to: 0
 32381                           ;radio_driver_SX1276.c: 188: }
 32382                           ;radio_driver_SX1276.c: 190: if (MODULATION_FSK == newModulation)
 32383  005328  5169               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 32384  00532A  E103               	bnz	l12166
 32385                           
 32386                           ; BSR set to: 0
 32387                           ;radio_driver_SX1276.c: 191: {
 32388                           ;radio_driver_SX1276.c: 193: opMode = opMode & (~0x87);
 32389  00532C  0E78               	movlw	120
 32390  00532E  176F               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 32391                           
 32392                           ;radio_driver_SX1276.c: 194: }
 32393  005330  D004               	goto	l12168
 32394  005332                     l12166:
 32395                           
 32396                           ; BSR set to: 0
 32397                           ;radio_driver_SX1276.c: 195: else
 32398                           ;radio_driver_SX1276.c: 196: {
 32399                           ;radio_driver_SX1276.c: 198: opMode = 0x80 | (opMode & (~0x87));
 32400  005332  516F               	movf	RADIO_WriteMode@opMode& (0+255),w,b
 32401  005334  0B78               	andlw	120
 32402  005336  0980               	iorlw	128
 32403  005338  6F6F               	movwf	RADIO_WriteMode@opMode& (0+255),b
 32404  00533A                     l12168:
 32405                           
 32406                           ; BSR set to: 0
 32407                           ;radio_driver_SX1276.c: 199: }
 32408                           ;radio_driver_SX1276.c: 200: RADIO_RegisterWrite(0x01, opMode);
 32409  00533A  C06F  F066         	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 32410  00533E  0E01               	movlw	1
 32411  005340  EC9A  F03A         	call	_RADIO_RegisterWrite
 32412  005344                     l12170:
 32413                           
 32414                           ;radio_driver_SX1276.c: 201: }
 32415                           ;radio_driver_SX1276.c: 207: if (newMode != currentMode)
 32416  005344  0100               	movlb	0	; () banked
 32417  005346  516D               	movf	RADIO_WriteMode@currentMode& (0+255),w,b
 32418  005348  196E               	xorwf	RADIO_WriteMode@newMode& (0+255),w,b
 32419  00534A  B4D8               	btfsc	status,2,c
 32420  00534C  0012               	return	
 32421                           
 32422                           ; BSR set to: 0
 32423                           ;radio_driver_SX1276.c: 208: {
 32424                           ;radio_driver_SX1276.c: 211: if ((MODE_SLEEP != newMode) && (1 == blocking))
 32425  00534E  516E               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 32426  005350  E012               	bz	l12186
 32427                           
 32428                           ; BSR set to: 0
 32429  005352  056A               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 32430  005354  E110               	bnz	l12186
 32431                           
 32432                           ; BSR set to: 0
 32433                           ;radio_driver_SX1276.c: 212: {
 32434                           ;radio_driver_SX1276.c: 213: dioMapping = RADIO_RegisterRead(0x41);
 32435  005356  0E41               	movlw	65
 32436  005358  ECB0  F039         	call	_RADIO_RegisterRead
 32437  00535C  6F6C               	movwf	RADIO_WriteMode@dioMapping& (0+255),b
 32438                           
 32439                           ; BSR set to: 0
 32440                           ;radio_driver_SX1276.c: 214: if (MODULATION_FSK == newModulation)
 32441  00535E  5169               	movf	RADIO_WriteMode@newModulation& (0+255),w,b
 32442  005360  E103               	bnz	l12182
 32443                           
 32444                           ; BSR set to: 0
 32445                           ;radio_driver_SX1276.c: 215: {
 32446                           ;radio_driver_SX1276.c: 217: dioMapping |= 0x30;
 32447  005362  0E30               	movlw	48
 32448  005364  136C               	iorwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 32449                           
 32450                           ;radio_driver_SX1276.c: 218: }
 32451  005366  D002               	goto	l12184
 32452  005368                     l12182:
 32453                           
 32454                           ; BSR set to: 0
 32455                           ;radio_driver_SX1276.c: 219: else
 32456                           ;radio_driver_SX1276.c: 220: {
 32457                           ;radio_driver_SX1276.c: 222: dioMapping &= ~0x30;
 32458  005368  0ECF               	movlw	207
 32459  00536A  176C               	andwf	RADIO_WriteMode@dioMapping& (0+255),f,b
 32460  00536C                     l12184:
 32461                           
 32462                           ; BSR set to: 0
 32463                           ;radio_driver_SX1276.c: 223: }
 32464                           ;radio_driver_SX1276.c: 224: RADIO_RegisterWrite(0x41, dioMapping);
 32465  00536C  C06C  F066         	movff	RADIO_WriteMode@dioMapping,RADIO_RegisterWrite@value
 32466  005370  0E41               	movlw	65
 32467  005372  EC9A  F03A         	call	_RADIO_RegisterWrite
 32468  005376                     l12186:
 32469                           
 32470                           ;radio_driver_SX1276.c: 225: }
 32471                           ;radio_driver_SX1276.c: 228: opMode &= ~0x07;
 32472  005376  0EF8               	movlw	248
 32473  005378  0100               	movlb	0	; () banked
 32474  00537A  176F               	andwf	RADIO_WriteMode@opMode& (0+255),f,b
 32475                           
 32476                           ; BSR set to: 0
 32477                           ;radio_driver_SX1276.c: 229: opMode |= newMode;
 32478  00537C  516E               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 32479  00537E  136F               	iorwf	RADIO_WriteMode@opMode& (0+255),f,b
 32480                           
 32481                           ; BSR set to: 0
 32482                           ;radio_driver_SX1276.c: 230: RADIO_RegisterWrite(0x01, opMode);
 32483  005380  C06F  F066         	movff	RADIO_WriteMode@opMode,RADIO_RegisterWrite@value
 32484  005384  0E01               	movlw	1
 32485  005386  EC9A  F03A         	call	_RADIO_RegisterWrite
 32486                           
 32487                           ;radio_driver_SX1276.c: 233: if (1 == blocking)
 32488  00538A  0100               	movlb	0	; () banked
 32489  00538C  056A               	decf	RADIO_WriteMode@blocking& (0+255),w,b
 32490  00538E  A4D8               	btfss	status,2,c
 32491  005390  0012               	return	
 32492                           
 32493                           ; BSR set to: 0
 32494                           ;radio_driver_SX1276.c: 234: {
 32495                           ;radio_driver_SX1276.c: 235: if (MODE_SLEEP != newMode)
 32496  005392  516E               	movf	RADIO_WriteMode@newMode& (0+255),w,b
 32497  005394  E005               	bz	l12198
 32498  005396                     l12196:
 32499  005396  EC60  F03C         	call	_HALDIO5PinValue	;wreg free
 32500  00539A  0900               	iorlw	0
 32501  00539C  E0FC               	bz	l12196
 32502  00539E  0012               	return	
 32503  0053A0                     l12198:
 32504                           
 32505                           ; BSR set to: 0
 32506                           ;radio_driver_SX1276.c: 240: else
 32507                           ;radio_driver_SX1276.c: 241: {
 32508                           ;radio_driver_SX1276.c: 242: SystemBlockingWaitMs(1);
 32509  0053A0  0E01               	movlw	1
 32510  0053A2  6F64               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 32511  0053A4  6B65               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 32512  0053A6  6B66               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 32513  0053A8  6B67               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 32514  0053AA  EF4B  F039         	goto	_SystemBlockingWaitMs	;wreg free
 32515  0053AE                     __end_of_RADIO_WriteMode:
 32516                           	opt stack 0
 32517                           tosu	equ	0xFFF
 32518                           tosh	equ	0xFFE
 32519                           tosl	equ	0xFFD
 32520                           pclath	equ	0xFFA
 32521                           tblptru	equ	0xFF8
 32522                           tblptrh	equ	0xFF7
 32523                           tblptrl	equ	0xFF6
 32524                           tablat	equ	0xFF5
 32525                           prodh	equ	0xFF4
 32526                           prodl	equ	0xFF3
 32527                           intcon	equ	0xFF2
 32528                           indf0	equ	0xFEF
 32529                           postinc0	equ	0xFEE
 32530                           plusw0	equ	0xFEB
 32531                           fsr0h	equ	0xFEA
 32532                           fsr0l	equ	0xFE9
 32533                           wreg	equ	0xFE8
 32534                           postinc1	equ	0xFE6
 32535                           postdec1	equ	0xFE5
 32536                           plusw1	equ	0xFE3
 32537                           fsr1h	equ	0xFE2
 32538                           fsr1l	equ	0xFE1
 32539                           indf2	equ	0xFDF
 32540                           postinc2	equ	0xFDE
 32541                           postdec2	equ	0xFDD
 32542                           plusw2	equ	0xFDB
 32543                           fsr2h	equ	0xFDA
 32544                           fsr2l	equ	0xFD9
 32545                           status	equ	0xFD8
 32546                           
 32547 ;; *************** function _RADIO_RegisterRead *****************
 32548 ;; Defined at:
 32549 ;;		line 134 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32550 ;; Parameters:    Size  Location     Type
 32551 ;;  reg             1    wreg     unsigned char 
 32552 ;; Auto vars:     Size  Location     Type
 32553 ;;  reg             1    6[BANK0 ] unsigned char 
 32554 ;;  readValue       1    7[BANK0 ] unsigned char 
 32555 ;; Return value:  Size  Location     Type
 32556 ;;                  1    wreg      unsigned char 
 32557 ;; Registers used:
 32558 ;;		wreg, status,2, status,0, cstack
 32559 ;; Tracked objects:
 32560 ;;		On entry : 0/0
 32561 ;;		On exit  : F/0
 32562 ;;		Unchanged: 0/0
 32563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32564 ;;      Params:         0       0       0       0       0       0       0       0       0
 32565 ;;      Locals:         0       2       0       0       0       0       0       0       0
 32566 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32567 ;;      Totals:         0       2       0       0       0       0       0       0       0
 32568 ;;Total ram usage:        2 bytes
 32569 ;; Hardware stack levels used:    1
 32570 ;; Hardware stack levels required when called:    9
 32571 ;; This function calls:
 32572 ;;		_HALSPICSAssert
 32573 ;;		_HALSPICSDeassert
 32574 ;;		_HALSPISend
 32575 ;; This function is called by:
 32576 ;;		_RADIO_WriteMode
 32577 ;;		_RADIO_WritePower
 32578 ;;		_RADIO_Init
 32579 ;;		_RADIO_WriteConfiguration
 32580 ;;		_RADIO_Transmit
 32581 ;;		_RADIO_RxDone
 32582 ;;		_RADIO_FSKPayloadReady
 32583 ;;		_RADIO_FSKPacketSent
 32584 ;;		_RADIO_FHSSChangeChannel
 32585 ;;		_RADIO_DIO0
 32586 ;;		_RADIO_DIO1
 32587 ;;		_RADIO_DIO2
 32588 ;;		_RADIO_DIO3
 32589 ;;		_RADIO_DIO4
 32590 ;;		_RADIO_DIO5
 32591 ;;		_RADIO_ReadRandom
 32592 ;;		_RADIO_RxFSKTimeout
 32593 ;; This function uses a non-reentrant model
 32594 ;;
 32595                           
 32596                           	psect	text163
 32597  007360                     __ptext163:
 32598                           	opt stack 0
 32599  007360                     _RADIO_RegisterRead:
 32600                           	opt stack 17
 32601                           
 32602                           ;incstack = 0
 32603                           ;RADIO_RegisterRead@reg stored from wreg
 32604  007360  0100               	movlb	0	; () banked
 32605  007362  6F66               	movwf	RADIO_RegisterRead@reg& (0+255),b
 32606                           
 32607                           ;radio_driver_SX1276.c: 136: uint8_t readValue;
 32608                           ;radio_driver_SX1276.c: 137: reg &= 0x7F;
 32609  007364  9F66               	bcf	RADIO_RegisterRead@reg& (0+255),7,b
 32610                           
 32611                           ; BSR set to: 0
 32612                           ;radio_driver_SX1276.c: 138: HALSPICSAssert();
 32613  007366  EC72  F03C         	call	_HALSPICSAssert	;wreg free
 32614                           
 32615                           ;radio_driver_SX1276.c: 139: HALSPISend(reg);
 32616  00736A  0100               	movlb	0	; () banked
 32617  00736C  5166               	movf	RADIO_RegisterRead@reg& (0+255),w,b
 32618  00736E  EC1C  F03C         	call	_HALSPISend
 32619                           
 32620                           ; BSR set to: 14
 32621                           ;radio_driver_SX1276.c: 140: readValue = HALSPISend(0xFF);
 32622  007372  0EFF               	movlw	255
 32623  007374  EC1C  F03C         	call	_HALSPISend
 32624  007378  0100               	movlb	0	; () banked
 32625  00737A  6F67               	movwf	RADIO_RegisterRead@readValue& (0+255),b
 32626                           
 32627                           ; BSR set to: 0
 32628                           ;radio_driver_SX1276.c: 141: HALSPICSDeassert();
 32629  00737C  EC70  F03C         	call	_HALSPICSDeassert	;wreg free
 32630                           
 32631                           ;radio_driver_SX1276.c: 142: return readValue;
 32632  007380  0100               	movlb	0	; () banked
 32633  007382  5167               	movf	RADIO_RegisterRead@readValue& (0+255),w,b
 32634                           
 32635                           ; BSR set to: 0
 32636  007384  0012               	return		;funcret
 32637  007386                     __end_of_RADIO_RegisterRead:
 32638                           	opt stack 0
 32639                           tosu	equ	0xFFF
 32640                           tosh	equ	0xFFE
 32641                           tosl	equ	0xFFD
 32642                           pclath	equ	0xFFA
 32643                           tblptru	equ	0xFF8
 32644                           tblptrh	equ	0xFF7
 32645                           tblptrl	equ	0xFF6
 32646                           tablat	equ	0xFF5
 32647                           prodh	equ	0xFF4
 32648                           prodl	equ	0xFF3
 32649                           intcon	equ	0xFF2
 32650                           indf0	equ	0xFEF
 32651                           postinc0	equ	0xFEE
 32652                           plusw0	equ	0xFEB
 32653                           fsr0h	equ	0xFEA
 32654                           fsr0l	equ	0xFE9
 32655                           wreg	equ	0xFE8
 32656                           postinc1	equ	0xFE6
 32657                           postdec1	equ	0xFE5
 32658                           plusw1	equ	0xFE3
 32659                           fsr1h	equ	0xFE2
 32660                           fsr1l	equ	0xFE1
 32661                           indf2	equ	0xFDF
 32662                           postinc2	equ	0xFDE
 32663                           postdec2	equ	0xFDD
 32664                           plusw2	equ	0xFDB
 32665                           fsr2h	equ	0xFDA
 32666                           fsr2l	equ	0xFD9
 32667                           status	equ	0xFD8
 32668                           
 32669 ;; *************** function _HALDIO5PinValue *****************
 32670 ;; Defined at:
 32671 ;;		line 95 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 32672 ;; Parameters:    Size  Location     Type
 32673 ;;		None
 32674 ;; Auto vars:     Size  Location     Type
 32675 ;;		None
 32676 ;; Return value:  Size  Location     Type
 32677 ;;                  1    wreg      unsigned char 
 32678 ;; Registers used:
 32679 ;;		wreg
 32680 ;; Tracked objects:
 32681 ;;		On entry : 0/0
 32682 ;;		On exit  : 0/0
 32683 ;;		Unchanged: 0/0
 32684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32685 ;;      Params:         0       0       0       0       0       0       0       0       0
 32686 ;;      Locals:         0       0       0       0       0       0       0       0       0
 32687 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32688 ;;      Totals:         0       0       0       0       0       0       0       0       0
 32689 ;;Total ram usage:        0 bytes
 32690 ;; Hardware stack levels used:    1
 32691 ;; Hardware stack levels required when called:    7
 32692 ;; This function calls:
 32693 ;;		Nothing
 32694 ;; This function is called by:
 32695 ;;		_RADIO_WriteMode
 32696 ;; This function uses a non-reentrant model
 32697 ;;
 32698                           
 32699                           	psect	text164
 32700  0078C0                     __ptext164:
 32701                           	opt stack 0
 32702  0078C0                     _HALDIO5PinValue:
 32703                           	opt stack 19
 32704                           
 32705                           ;radio_driver_hal.c: 97: return PORTBbits.RB0;
 32706                           
 32707                           ; BSR set to: 0
 32708                           ;incstack = 0
 32709  0078C0  B08A               	btfsc	3978,0,c	;volatile
 32710  0078C2  0C01               	retlw	1
 32711  0078C4  0C00               	retlw	0	;funcret
 32712  0078C6                     __end_of_HALDIO5PinValue:
 32713                           	opt stack 0
 32714                           tosu	equ	0xFFF
 32715                           tosh	equ	0xFFE
 32716                           tosl	equ	0xFFD
 32717                           pclath	equ	0xFFA
 32718                           tblptru	equ	0xFF8
 32719                           tblptrh	equ	0xFF7
 32720                           tblptrl	equ	0xFF6
 32721                           tablat	equ	0xFF5
 32722                           prodh	equ	0xFF4
 32723                           prodl	equ	0xFF3
 32724                           intcon	equ	0xFF2
 32725                           indf0	equ	0xFEF
 32726                           postinc0	equ	0xFEE
 32727                           plusw0	equ	0xFEB
 32728                           fsr0h	equ	0xFEA
 32729                           fsr0l	equ	0xFE9
 32730                           wreg	equ	0xFE8
 32731                           postinc1	equ	0xFE6
 32732                           postdec1	equ	0xFE5
 32733                           plusw1	equ	0xFE3
 32734                           fsr1h	equ	0xFE2
 32735                           fsr1l	equ	0xFE1
 32736                           indf2	equ	0xFDF
 32737                           postinc2	equ	0xFDE
 32738                           postdec2	equ	0xFDD
 32739                           plusw2	equ	0xFDB
 32740                           fsr2h	equ	0xFDA
 32741                           fsr2l	equ	0xFD9
 32742                           status	equ	0xFD8
 32743                           
 32744 ;; *************** function _RADIO_WriteFrequency *****************
 32745 ;; Defined at:
 32746 ;;		line 262 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 32747 ;; Parameters:    Size  Location     Type
 32748 ;;  frequency       4   17[BANK0 ] unsigned long 
 32749 ;; Auto vars:     Size  Location     Type
 32750 ;;  num             4   25[BANK0 ] unsigned long 
 32751 ;;  num_mod         4   21[BANK0 ] unsigned long 
 32752 ;; Return value:  Size  Location     Type
 32753 ;;                  1    wreg      void 
 32754 ;; Registers used:
 32755 ;;		wreg, status,2, status,0, cstack
 32756 ;; Tracked objects:
 32757 ;;		On entry : 0/0
 32758 ;;		On exit  : 1/0
 32759 ;;		Unchanged: 0/0
 32760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32761 ;;      Params:         0       4       0       0       0       0       0       0       0
 32762 ;;      Locals:         0       8       0       0       0       0       0       0       0
 32763 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32764 ;;      Totals:         0      12       0       0       0       0       0       0       0
 32765 ;;Total ram usage:       12 bytes
 32766 ;; Hardware stack levels used:    1
 32767 ;; Hardware stack levels required when called:   10
 32768 ;; This function calls:
 32769 ;;		_RADIO_RegisterWrite
 32770 ;;		___lldiv
 32771 ;;		___llmod
 32772 ;; This function is called by:
 32773 ;;		_RADIO_Init
 32774 ;;		_RADIO_WriteConfiguration
 32775 ;;		_RADIO_FHSSChangeChannel
 32776 ;; This function uses a non-reentrant model
 32777 ;;
 32778                           
 32779                           	psect	text165
 32780  005120                     __ptext165:
 32781                           	opt stack 0
 32782  005120                     _RADIO_WriteFrequency:
 32783                           	opt stack 16
 32784                           
 32785                           ;radio_driver_SX1276.c: 264: uint32_t num, num_mod;
 32786                           ;radio_driver_SX1276.c: 272: num = frequency / 15625;
 32787                           
 32788                           ;incstack = 0
 32789  005120  C071  F064         	movff	RADIO_WriteFrequency@frequency,___lldiv@dividend
 32790  005124  C072  F065         	movff	RADIO_WriteFrequency@frequency+1,___lldiv@dividend+1
 32791  005128  C073  F066         	movff	RADIO_WriteFrequency@frequency+2,___lldiv@dividend+2
 32792  00512C  C074  F067         	movff	RADIO_WriteFrequency@frequency+3,___lldiv@dividend+3
 32793  005130  0E09               	movlw	9
 32794  005132  0100               	movlb	0	; () banked
 32795  005134  6F68               	movwf	___lldiv@divisor& (0+255),b
 32796  005136  0E3D               	movlw	61
 32797  005138  6F69               	movwf	(___lldiv@divisor+1)& (0+255),b
 32798  00513A  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 32799  00513C  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 32800  00513E  ECB3  F030         	call	___lldiv	;wreg free
 32801  005142  C064  F079         	movff	?___lldiv,RADIO_WriteFrequency@num
 32802  005146  C065  F07A         	movff	?___lldiv+1,RADIO_WriteFrequency@num+1
 32803  00514A  C066  F07B         	movff	?___lldiv+2,RADIO_WriteFrequency@num+2
 32804  00514E  C067  F07C         	movff	?___lldiv+3,RADIO_WriteFrequency@num+3
 32805                           
 32806                           ;radio_driver_SX1276.c: 273: num_mod = frequency % 15625;
 32807  005152  C071  F064         	movff	RADIO_WriteFrequency@frequency,___llmod@dividend
 32808  005156  C072  F065         	movff	RADIO_WriteFrequency@frequency+1,___llmod@dividend+1
 32809  00515A  C073  F066         	movff	RADIO_WriteFrequency@frequency+2,___llmod@dividend+2
 32810  00515E  C074  F067         	movff	RADIO_WriteFrequency@frequency+3,___llmod@dividend+3
 32811  005162  0E09               	movlw	9
 32812  005164  6F68               	movwf	___llmod@divisor& (0+255),b
 32813  005166  0E3D               	movlw	61
 32814  005168  6F69               	movwf	(___llmod@divisor+1)& (0+255),b
 32815  00516A  6B6A               	clrf	(___llmod@divisor+2)& (0+255),b
 32816  00516C  6B6B               	clrf	(___llmod@divisor+3)& (0+255),b
 32817  00516E  EC2F  F033         	call	___llmod	;wreg free
 32818  005172  C064  F075         	movff	?___llmod,RADIO_WriteFrequency@num_mod
 32819  005176  C065  F076         	movff	?___llmod+1,RADIO_WriteFrequency@num_mod+1
 32820  00517A  C066  F077         	movff	?___llmod+2,RADIO_WriteFrequency@num_mod+2
 32821  00517E  C067  F078         	movff	?___llmod+3,RADIO_WriteFrequency@num_mod+3
 32822                           
 32823                           ; BSR set to: 0
 32824                           ;radio_driver_SX1276.c: 277: num <<= (8);
 32825  005182  C07B  F07C         	movff	RADIO_WriteFrequency@num+2,RADIO_WriteFrequency@num+3
 32826  005186  C07A  F07B         	movff	RADIO_WriteFrequency@num+1,RADIO_WriteFrequency@num+2
 32827  00518A  C079  F07A         	movff	RADIO_WriteFrequency@num,RADIO_WriteFrequency@num+1
 32828  00518E  6B79               	clrf	RADIO_WriteFrequency@num& (0+255),b
 32829                           
 32830                           ; BSR set to: 0
 32831                           ;radio_driver_SX1276.c: 278: num_mod <<= (8);
 32832  005190  C077  F078         	movff	RADIO_WriteFrequency@num_mod+2,RADIO_WriteFrequency@num_mod+3
 32833  005194  C076  F077         	movff	RADIO_WriteFrequency@num_mod+1,RADIO_WriteFrequency@num_mod+2
 32834  005198  C075  F076         	movff	RADIO_WriteFrequency@num_mod,RADIO_WriteFrequency@num_mod+1
 32835  00519C  6B75               	clrf	RADIO_WriteFrequency@num_mod& (0+255),b
 32836                           
 32837                           ;radio_driver_SX1276.c: 282: num_mod = num_mod / 15625;
 32838  00519E  C075  F064         	movff	RADIO_WriteFrequency@num_mod,___lldiv@dividend
 32839  0051A2  C076  F065         	movff	RADIO_WriteFrequency@num_mod+1,___lldiv@dividend+1
 32840  0051A6  C077  F066         	movff	RADIO_WriteFrequency@num_mod+2,___lldiv@dividend+2
 32841  0051AA  C078  F067         	movff	RADIO_WriteFrequency@num_mod+3,___lldiv@dividend+3
 32842  0051AE  0E09               	movlw	9
 32843  0051B0  6F68               	movwf	___lldiv@divisor& (0+255),b
 32844  0051B2  0E3D               	movlw	61
 32845  0051B4  6F69               	movwf	(___lldiv@divisor+1)& (0+255),b
 32846  0051B6  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 32847  0051B8  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 32848  0051BA  ECB3  F030         	call	___lldiv	;wreg free
 32849  0051BE  C064  F075         	movff	?___lldiv,RADIO_WriteFrequency@num_mod
 32850  0051C2  C065  F076         	movff	?___lldiv+1,RADIO_WriteFrequency@num_mod+1
 32851  0051C6  C066  F077         	movff	?___lldiv+2,RADIO_WriteFrequency@num_mod+2
 32852  0051CA  C067  F078         	movff	?___lldiv+3,RADIO_WriteFrequency@num_mod+3
 32853                           
 32854                           ; BSR set to: 0
 32855                           ;radio_driver_SX1276.c: 283: num += num_mod;
 32856  0051CE  5175               	movf	RADIO_WriteFrequency@num_mod& (0+255),w,b
 32857  0051D0  2779               	addwf	RADIO_WriteFrequency@num& (0+255),f,b
 32858  0051D2  5176               	movf	(RADIO_WriteFrequency@num_mod+1)& (0+255),w,b
 32859  0051D4  237A               	addwfc	(RADIO_WriteFrequency@num+1)& (0+255),f,b
 32860  0051D6  5177               	movf	(RADIO_WriteFrequency@num_mod+2)& (0+255),w,b
 32861  0051D8  237B               	addwfc	(RADIO_WriteFrequency@num+2)& (0+255),f,b
 32862  0051DA  5178               	movf	(RADIO_WriteFrequency@num_mod+3)& (0+255),w,b
 32863  0051DC  237C               	addwfc	(RADIO_WriteFrequency@num+3)& (0+255),f,b
 32864                           
 32865                           ; BSR set to: 0
 32866                           ;radio_driver_SX1276.c: 287: RADIO_RegisterWrite(0x06, (num >> (16)) & 0xFF);
 32867  0051DE  C07B  F066         	movff	RADIO_WriteFrequency@num+2,RADIO_RegisterWrite@value
 32868  0051E2  0E06               	movlw	6
 32869  0051E4  EC9A  F03A         	call	_RADIO_RegisterWrite
 32870                           
 32871                           ;radio_driver_SX1276.c: 288: RADIO_RegisterWrite(0x07, (num >> (8)) & 0xFF);
 32872  0051E8  C07A  F066         	movff	RADIO_WriteFrequency@num+1,RADIO_RegisterWrite@value
 32873  0051EC  0E07               	movlw	7
 32874  0051EE  EC9A  F03A         	call	_RADIO_RegisterWrite
 32875                           
 32876                           ;radio_driver_SX1276.c: 289: RADIO_RegisterWrite(0x08, num & 0xFF);
 32877  0051F2  C079  F066         	movff	RADIO_WriteFrequency@num,RADIO_RegisterWrite@value
 32878  0051F6  0E08               	movlw	8
 32879  0051F8  EF9A  F03A         	goto	_RADIO_RegisterWrite
 32880  0051FC                     __end_of_RADIO_WriteFrequency:
 32881                           	opt stack 0
 32882                           tosu	equ	0xFFF
 32883                           tosh	equ	0xFFE
 32884                           tosl	equ	0xFFD
 32885                           pclath	equ	0xFFA
 32886                           tblptru	equ	0xFF8
 32887                           tblptrh	equ	0xFF7
 32888                           tblptrl	equ	0xFF6
 32889                           tablat	equ	0xFF5
 32890                           prodh	equ	0xFF4
 32891                           prodl	equ	0xFF3
 32892                           intcon	equ	0xFF2
 32893                           indf0	equ	0xFEF
 32894                           postinc0	equ	0xFEE
 32895                           plusw0	equ	0xFEB
 32896                           fsr0h	equ	0xFEA
 32897                           fsr0l	equ	0xFE9
 32898                           wreg	equ	0xFE8
 32899                           postinc1	equ	0xFE6
 32900                           postdec1	equ	0xFE5
 32901                           plusw1	equ	0xFE3
 32902                           fsr1h	equ	0xFE2
 32903                           fsr1l	equ	0xFE1
 32904                           indf2	equ	0xFDF
 32905                           postinc2	equ	0xFDE
 32906                           postdec2	equ	0xFDD
 32907                           plusw2	equ	0xFDB
 32908                           fsr2h	equ	0xFDA
 32909                           fsr2l	equ	0xFD9
 32910                           status	equ	0xFD8
 32911                           
 32912 ;; *************** function ___llmod *****************
 32913 ;; Defined at:
 32914 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
 32915 ;; Parameters:    Size  Location     Type
 32916 ;;  dividend        4    4[BANK0 ] unsigned long 
 32917 ;;  divisor         4    8[BANK0 ] unsigned long 
 32918 ;; Auto vars:     Size  Location     Type
 32919 ;;  counter         1   12[BANK0 ] unsigned char 
 32920 ;; Return value:  Size  Location     Type
 32921 ;;                  4    4[BANK0 ] unsigned long 
 32922 ;; Registers used:
 32923 ;;		wreg, status,2, status,0
 32924 ;; Tracked objects:
 32925 ;;		On entry : F/0
 32926 ;;		On exit  : F/0
 32927 ;;		Unchanged: 0/0
 32928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 32929 ;;      Params:         0       8       0       0       0       0       0       0       0
 32930 ;;      Locals:         0       1       0       0       0       0       0       0       0
 32931 ;;      Temps:          0       0       0       0       0       0       0       0       0
 32932 ;;      Totals:         0       9       0       0       0       0       0       0       0
 32933 ;;Total ram usage:        9 bytes
 32934 ;; Hardware stack levels used:    1
 32935 ;; Hardware stack levels required when called:    7
 32936 ;; This function calls:
 32937 ;;		Nothing
 32938 ;; This function is called by:
 32939 ;;		_RADIO_WriteFrequency
 32940 ;; This function uses a non-reentrant model
 32941 ;;
 32942                           
 32943                           	psect	text166
 32944  00665E                     __ptext166:
 32945                           	opt stack 0
 32946  00665E                     ___llmod:
 32947                           	opt stack 18
 32948                           
 32949                           ; BSR set to: 0
 32950                           
 32951                           ;incstack = 0
 32952  00665E  5168               	movf	___llmod@divisor& (0+255),w,b
 32953  006660  1169               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 32954  006662  116A               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 32955  006664  116B               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 32956  006666  E023               	bz	l3008
 32957                           
 32958                           ; BSR set to: 0
 32959  006668  0E01               	movlw	1
 32960  00666A  6F6C               	movwf	___llmod@counter& (0+255),b
 32961  00666C  D006               	goto	l12098
 32962  00666E                     l12096:
 32963                           
 32964                           ; BSR set to: 0
 32965  00666E  90D8               	bcf	status,0,c
 32966  006670  3768               	rlcf	___llmod@divisor& (0+255),f,b
 32967  006672  3769               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 32968  006674  376A               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 32969  006676  376B               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 32970  006678  2B6C               	incf	___llmod@counter& (0+255),f,b
 32971  00667A                     l12098:
 32972                           
 32973                           ; BSR set to: 0
 32974  00667A  AF6B               	btfss	(___llmod@divisor+3)& (0+255),7,b
 32975  00667C  D7F8               	goto	l12096
 32976  00667E                     l12100:
 32977                           
 32978                           ; BSR set to: 0
 32979  00667E  5168               	movf	___llmod@divisor& (0+255),w,b
 32980  006680  5D64               	subwf	___llmod@dividend& (0+255),w,b
 32981  006682  5169               	movf	(___llmod@divisor+1)& (0+255),w,b
 32982  006684  5965               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 32983  006686  516A               	movf	(___llmod@divisor+2)& (0+255),w,b
 32984  006688  5966               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 32985  00668A  516B               	movf	(___llmod@divisor+3)& (0+255),w,b
 32986  00668C  5967               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 32987  00668E  E308               	bnc	l12104
 32988                           
 32989                           ; BSR set to: 0
 32990  006690  5168               	movf	___llmod@divisor& (0+255),w,b
 32991  006692  5F64               	subwf	___llmod@dividend& (0+255),f,b
 32992  006694  5169               	movf	(___llmod@divisor+1)& (0+255),w,b
 32993  006696  5B65               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 32994  006698  516A               	movf	(___llmod@divisor+2)& (0+255),w,b
 32995  00669A  5B66               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 32996  00669C  516B               	movf	(___llmod@divisor+3)& (0+255),w,b
 32997  00669E  5B67               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 32998  0066A0                     l12104:
 32999                           
 33000                           ; BSR set to: 0
 33001  0066A0  90D8               	bcf	status,0,c
 33002  0066A2  336B               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 33003  0066A4  336A               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 33004  0066A6  3369               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 33005  0066A8  3368               	rrcf	___llmod@divisor& (0+255),f,b
 33006                           
 33007                           ; BSR set to: 0
 33008  0066AA  2F6C               	decfsz	___llmod@counter& (0+255),f,b
 33009  0066AC  D7E8               	goto	l12100
 33010  0066AE                     l3008:
 33011                           
 33012                           ; BSR set to: 0
 33013  0066AE  C064  F064         	movff	___llmod@dividend,?___llmod
 33014  0066B2  C065  F065         	movff	___llmod@dividend+1,?___llmod+1
 33015  0066B6  C066  F066         	movff	___llmod@dividend+2,?___llmod+2
 33016  0066BA  C067  F067         	movff	___llmod@dividend+3,?___llmod+3
 33017                           
 33018                           ; BSR set to: 0
 33019  0066BE  0012               	return		;funcret
 33020  0066C0                     __end_of___llmod:
 33021                           	opt stack 0
 33022                           tosu	equ	0xFFF
 33023                           tosh	equ	0xFFE
 33024                           tosl	equ	0xFFD
 33025                           pclath	equ	0xFFA
 33026                           tblptru	equ	0xFF8
 33027                           tblptrh	equ	0xFF7
 33028                           tblptrl	equ	0xFF6
 33029                           tablat	equ	0xFF5
 33030                           prodh	equ	0xFF4
 33031                           prodl	equ	0xFF3
 33032                           intcon	equ	0xFF2
 33033                           indf0	equ	0xFEF
 33034                           postinc0	equ	0xFEE
 33035                           plusw0	equ	0xFEB
 33036                           fsr0h	equ	0xFEA
 33037                           fsr0l	equ	0xFE9
 33038                           wreg	equ	0xFE8
 33039                           postinc1	equ	0xFE6
 33040                           postdec1	equ	0xFE5
 33041                           plusw1	equ	0xFE3
 33042                           fsr1h	equ	0xFE2
 33043                           fsr1l	equ	0xFE1
 33044                           indf2	equ	0xFDF
 33045                           postinc2	equ	0xFDE
 33046                           postdec2	equ	0xFDD
 33047                           plusw2	equ	0xFDB
 33048                           fsr2h	equ	0xFDA
 33049                           fsr2l	equ	0xFD9
 33050                           status	equ	0xFD8
 33051                           
 33052 ;; *************** function _RADIO_RegisterWrite *****************
 33053 ;; Defined at:
 33054 ;;		line 126 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 33055 ;; Parameters:    Size  Location     Type
 33056 ;;  reg             1    wreg     unsigned char 
 33057 ;;  value           1    6[BANK0 ] unsigned char 
 33058 ;; Auto vars:     Size  Location     Type
 33059 ;;  reg             1    7[BANK0 ] unsigned char 
 33060 ;; Return value:  Size  Location     Type
 33061 ;;                  1    wreg      void 
 33062 ;; Registers used:
 33063 ;;		wreg, status,2, status,0, cstack
 33064 ;; Tracked objects:
 33065 ;;		On entry : 0/0
 33066 ;;		On exit  : 1/0
 33067 ;;		Unchanged: 0/0
 33068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33069 ;;      Params:         0       1       0       0       0       0       0       0       0
 33070 ;;      Locals:         0       1       0       0       0       0       0       0       0
 33071 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33072 ;;      Totals:         0       2       0       0       0       0       0       0       0
 33073 ;;Total ram usage:        2 bytes
 33074 ;; Hardware stack levels used:    1
 33075 ;; Hardware stack levels required when called:    9
 33076 ;; This function calls:
 33077 ;;		_HALSPICSAssert
 33078 ;;		_HALSPICSDeassert
 33079 ;;		_HALSPISend
 33080 ;; This function is called by:
 33081 ;;		_RADIO_WriteMode
 33082 ;;		_RADIO_WriteFrequency
 33083 ;;		_RADIO_WriteFSKFrequencyDeviation
 33084 ;;		_RADIO_WriteFSKBitRate
 33085 ;;		_RADIO_WritePower
 33086 ;;		_RADIO_Init
 33087 ;;		_RADIO_WriteConfiguration
 33088 ;;		_RADIO_Transmit
 33089 ;;		_RADIO_ReceiveStart
 33090 ;;		_RADIO_RxDone
 33091 ;;		_RADIO_RxTimeout
 33092 ;;		_RADIO_TxDone
 33093 ;;		_RADIO_UnhandledInterrupt
 33094 ;;		_RADIO_FHSSChangeChannel
 33095 ;;		_RADIO_ReadRandom
 33096 ;; This function uses a non-reentrant model
 33097 ;;
 33098                           
 33099                           	psect	text167
 33100  007534                     __ptext167:
 33101                           	opt stack 0
 33102  007534                     _RADIO_RegisterWrite:
 33103                           	opt stack 17
 33104                           
 33105                           ; BSR set to: 0
 33106                           ;incstack = 0
 33107                           ;RADIO_RegisterWrite@reg stored from wreg
 33108  007534  0100               	movlb	0	; () banked
 33109  007536  6F67               	movwf	RADIO_RegisterWrite@reg& (0+255),b
 33110                           
 33111                           ;radio_driver_SX1276.c: 128: HALSPICSAssert();
 33112  007538  EC72  F03C         	call	_HALSPICSAssert	;wreg free
 33113                           
 33114                           ;radio_driver_SX1276.c: 129: HALSPISend(0x80 | reg);
 33115  00753C  0100               	movlb	0	; () banked
 33116  00753E  5167               	movf	RADIO_RegisterWrite@reg& (0+255),w,b
 33117  007540  0980               	iorlw	128
 33118  007542  EC1C  F03C         	call	_HALSPISend
 33119                           
 33120                           ; BSR set to: 14
 33121                           ;radio_driver_SX1276.c: 130: HALSPISend(value);
 33122  007546  0100               	movlb	0	; () banked
 33123  007548  5166               	movf	RADIO_RegisterWrite@value& (0+255),w,b
 33124  00754A  EC1C  F03C         	call	_HALSPISend
 33125                           
 33126                           ; BSR set to: 14
 33127                           ;radio_driver_SX1276.c: 131: HALSPICSDeassert();
 33128  00754E  EF70  F03C         	goto	_HALSPICSDeassert	;wreg free
 33129  007552                     __end_of_RADIO_RegisterWrite:
 33130                           	opt stack 0
 33131                           tosu	equ	0xFFF
 33132                           tosh	equ	0xFFE
 33133                           tosl	equ	0xFFD
 33134                           pclath	equ	0xFFA
 33135                           tblptru	equ	0xFF8
 33136                           tblptrh	equ	0xFF7
 33137                           tblptrl	equ	0xFF6
 33138                           tablat	equ	0xFF5
 33139                           prodh	equ	0xFF4
 33140                           prodl	equ	0xFF3
 33141                           intcon	equ	0xFF2
 33142                           indf0	equ	0xFEF
 33143                           postinc0	equ	0xFEE
 33144                           plusw0	equ	0xFEB
 33145                           fsr0h	equ	0xFEA
 33146                           fsr0l	equ	0xFE9
 33147                           wreg	equ	0xFE8
 33148                           postinc1	equ	0xFE6
 33149                           postdec1	equ	0xFE5
 33150                           plusw1	equ	0xFE3
 33151                           fsr1h	equ	0xFE2
 33152                           fsr1l	equ	0xFE1
 33153                           indf2	equ	0xFDF
 33154                           postinc2	equ	0xFDE
 33155                           postdec2	equ	0xFDD
 33156                           plusw2	equ	0xFDB
 33157                           fsr2h	equ	0xFDA
 33158                           fsr2l	equ	0xFD9
 33159                           status	equ	0xFD8
 33160                           
 33161 ;; *************** function _HALSPISend *****************
 33162 ;; Defined at:
 33163 ;;		line 73 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33164 ;; Parameters:    Size  Location     Type
 33165 ;;  data            1    wreg     unsigned char 
 33166 ;; Auto vars:     Size  Location     Type
 33167 ;;  data            1    5[BANK0 ] unsigned char 
 33168 ;; Return value:  Size  Location     Type
 33169 ;;                  1    wreg      unsigned char 
 33170 ;; Registers used:
 33171 ;;		wreg, status,2, cstack
 33172 ;; Tracked objects:
 33173 ;;		On entry : 0/0
 33174 ;;		On exit  : F/E
 33175 ;;		Unchanged: 0/0
 33176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33177 ;;      Params:         0       0       0       0       0       0       0       0       0
 33178 ;;      Locals:         0       1       0       0       0       0       0       0       0
 33179 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33180 ;;      Totals:         0       1       0       0       0       0       0       0       0
 33181 ;;Total ram usage:        1 bytes
 33182 ;; Hardware stack levels used:    1
 33183 ;; Hardware stack levels required when called:    8
 33184 ;; This function calls:
 33185 ;;		_SPI2_Exchange8bit
 33186 ;; This function is called by:
 33187 ;;		_RADIO_RegisterWrite
 33188 ;;		_RADIO_RegisterRead
 33189 ;;		_RADIO_Transmit
 33190 ;;		_RADIO_RxDone
 33191 ;;		_RADIO_FSKPayloadReady
 33192 ;; This function uses a non-reentrant model
 33193 ;;
 33194                           
 33195                           	psect	text168
 33196  007838                     __ptext168:
 33197                           	opt stack 0
 33198  007838                     _HALSPISend:
 33199                           	opt stack 17
 33200                           
 33201                           ;incstack = 0
 33202                           ;HALSPISend@data stored from wreg
 33203  007838  0100               	movlb	0	; () banked
 33204  00783A  6F65               	movwf	HALSPISend@data& (0+255),b
 33205                           
 33206                           ;radio_driver_hal.c: 75: return SPI2_Exchange8bit(data);
 33207  00783C  5165               	movf	HALSPISend@data& (0+255),w,b
 33208  00783E  EFB9  F03B         	goto	_SPI2_Exchange8bit
 33209  007842                     __end_of_HALSPISend:
 33210                           	opt stack 0
 33211                           tosu	equ	0xFFF
 33212                           tosh	equ	0xFFE
 33213                           tosl	equ	0xFFD
 33214                           pclath	equ	0xFFA
 33215                           tblptru	equ	0xFF8
 33216                           tblptrh	equ	0xFF7
 33217                           tblptrl	equ	0xFF6
 33218                           tablat	equ	0xFF5
 33219                           prodh	equ	0xFF4
 33220                           prodl	equ	0xFF3
 33221                           intcon	equ	0xFF2
 33222                           indf0	equ	0xFEF
 33223                           postinc0	equ	0xFEE
 33224                           plusw0	equ	0xFEB
 33225                           fsr0h	equ	0xFEA
 33226                           fsr0l	equ	0xFE9
 33227                           wreg	equ	0xFE8
 33228                           postinc1	equ	0xFE6
 33229                           postdec1	equ	0xFE5
 33230                           plusw1	equ	0xFE3
 33231                           fsr1h	equ	0xFE2
 33232                           fsr1l	equ	0xFE1
 33233                           indf2	equ	0xFDF
 33234                           postinc2	equ	0xFDE
 33235                           postdec2	equ	0xFDD
 33236                           plusw2	equ	0xFDB
 33237                           fsr2h	equ	0xFDA
 33238                           fsr2l	equ	0xFD9
 33239                           status	equ	0xFD8
 33240                           
 33241 ;; *************** function _SPI2_Exchange8bit *****************
 33242 ;; Defined at:
 33243 ;;		line 77 in file "mcc_generated_files/spi2.c"
 33244 ;; Parameters:    Size  Location     Type
 33245 ;;  data            1    wreg     unsigned char 
 33246 ;; Auto vars:     Size  Location     Type
 33247 ;;  data            1    4[BANK0 ] unsigned char 
 33248 ;; Return value:  Size  Location     Type
 33249 ;;                  1    wreg      unsigned char 
 33250 ;; Registers used:
 33251 ;;		wreg, status,2
 33252 ;; Tracked objects:
 33253 ;;		On entry : F/0
 33254 ;;		On exit  : F/E
 33255 ;;		Unchanged: 0/0
 33256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33257 ;;      Params:         0       0       0       0       0       0       0       0       0
 33258 ;;      Locals:         0       1       0       0       0       0       0       0       0
 33259 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33260 ;;      Totals:         0       1       0       0       0       0       0       0       0
 33261 ;;Total ram usage:        1 bytes
 33262 ;; Hardware stack levels used:    1
 33263 ;; Hardware stack levels required when called:    7
 33264 ;; This function calls:
 33265 ;;		Nothing
 33266 ;; This function is called by:
 33267 ;;		_HALSPISend
 33268 ;; This function uses a non-reentrant model
 33269 ;;
 33270                           
 33271                           	psect	text169
 33272  007772                     __ptext169:
 33273                           	opt stack 0
 33274  007772                     _SPI2_Exchange8bit:
 33275                           	opt stack 17
 33276                           
 33277                           ; BSR set to: 14
 33278                           ;incstack = 0
 33279                           ;SPI2_Exchange8bit@data stored from wreg
 33280  007772  6F64               	movwf	SPI2_Exchange8bit@data& (0+255),b
 33281                           
 33282                           ;spi2.c: 80: SSP2CON1bits.WCOL = 0;
 33283  007774  010E               	movlb	14	; () banked
 33284  007776  9FD9               	bcf	217,7,b	;volatile
 33285                           
 33286                           ; BSR set to: 14
 33287                           ;spi2.c: 82: SSP2BUF = data;
 33288  007778  C064  FED5         	movff	SPI2_Exchange8bit@data,3797	;volatile
 33289  00777C                     l209:
 33290                           
 33291                           ; BSR set to: 14
 33292  00777C  A1D8               	btfss	216,0,b	;volatile
 33293  00777E  D7FE               	goto	l209
 33294                           
 33295                           ; BSR set to: 14
 33296                           ;spi2.c: 86: }
 33297                           ;spi2.c: 88: return (SSP2BUF);
 33298  007780  51D5               	movf	213,w,b	;volatile
 33299                           
 33300                           ; BSR set to: 14
 33301  007782  0012               	return		;funcret
 33302  007784                     __end_of_SPI2_Exchange8bit:
 33303                           	opt stack 0
 33304                           tosu	equ	0xFFF
 33305                           tosh	equ	0xFFE
 33306                           tosl	equ	0xFFD
 33307                           pclath	equ	0xFFA
 33308                           tblptru	equ	0xFF8
 33309                           tblptrh	equ	0xFF7
 33310                           tblptrl	equ	0xFF6
 33311                           tablat	equ	0xFF5
 33312                           prodh	equ	0xFF4
 33313                           prodl	equ	0xFF3
 33314                           intcon	equ	0xFF2
 33315                           indf0	equ	0xFEF
 33316                           postinc0	equ	0xFEE
 33317                           plusw0	equ	0xFEB
 33318                           fsr0h	equ	0xFEA
 33319                           fsr0l	equ	0xFE9
 33320                           wreg	equ	0xFE8
 33321                           postinc1	equ	0xFE6
 33322                           postdec1	equ	0xFE5
 33323                           plusw1	equ	0xFE3
 33324                           fsr1h	equ	0xFE2
 33325                           fsr1l	equ	0xFE1
 33326                           indf2	equ	0xFDF
 33327                           postinc2	equ	0xFDE
 33328                           postdec2	equ	0xFDD
 33329                           plusw2	equ	0xFDB
 33330                           fsr2h	equ	0xFDA
 33331                           fsr2l	equ	0xFD9
 33332                           status	equ	0xFD8
 33333                           
 33334 ;; *************** function _HALSPICSDeassert *****************
 33335 ;; Defined at:
 33336 ;;		line 68 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33337 ;; Parameters:    Size  Location     Type
 33338 ;;		None
 33339 ;; Auto vars:     Size  Location     Type
 33340 ;;		None
 33341 ;; Return value:  Size  Location     Type
 33342 ;;                  1    wreg      void 
 33343 ;; Registers used:
 33344 ;;		None
 33345 ;; Tracked objects:
 33346 ;;		On entry : 1/0
 33347 ;;		On exit  : 1/0
 33348 ;;		Unchanged: 1/0
 33349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33350 ;;      Params:         0       0       0       0       0       0       0       0       0
 33351 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33352 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33353 ;;      Totals:         0       0       0       0       0       0       0       0       0
 33354 ;;Total ram usage:        0 bytes
 33355 ;; Hardware stack levels used:    1
 33356 ;; Hardware stack levels required when called:    7
 33357 ;; This function calls:
 33358 ;;		Nothing
 33359 ;; This function is called by:
 33360 ;;		_RADIO_RegisterWrite
 33361 ;;		_RADIO_RegisterRead
 33362 ;;		_RADIO_Transmit
 33363 ;;		_RADIO_RxDone
 33364 ;;		_RADIO_FSKPayloadReady
 33365 ;; This function uses a non-reentrant model
 33366 ;;
 33367                           
 33368                           	psect	text170
 33369  0078E0                     __ptext170:
 33370                           	opt stack 0
 33371  0078E0                     _HALSPICSDeassert:
 33372                           	opt stack 18
 33373                           
 33374                           ; BSR set to: 14
 33375                           ;incstack = 0
 33376                           ;radio_driver_hal.c: 70: do { LATC1 = 1; } while(0);
 33377  0078E0  827B               	bsf	3963,1,c	;volatile
 33378  0078E2  0012               	return		;funcret
 33379  0078E4                     __end_of_HALSPICSDeassert:
 33380                           	opt stack 0
 33381                           tosu	equ	0xFFF
 33382                           tosh	equ	0xFFE
 33383                           tosl	equ	0xFFD
 33384                           pclath	equ	0xFFA
 33385                           tblptru	equ	0xFF8
 33386                           tblptrh	equ	0xFF7
 33387                           tblptrl	equ	0xFF6
 33388                           tablat	equ	0xFF5
 33389                           prodh	equ	0xFF4
 33390                           prodl	equ	0xFF3
 33391                           intcon	equ	0xFF2
 33392                           indf0	equ	0xFEF
 33393                           postinc0	equ	0xFEE
 33394                           plusw0	equ	0xFEB
 33395                           fsr0h	equ	0xFEA
 33396                           fsr0l	equ	0xFE9
 33397                           wreg	equ	0xFE8
 33398                           postinc1	equ	0xFE6
 33399                           postdec1	equ	0xFE5
 33400                           plusw1	equ	0xFE3
 33401                           fsr1h	equ	0xFE2
 33402                           fsr1l	equ	0xFE1
 33403                           indf2	equ	0xFDF
 33404                           postinc2	equ	0xFDE
 33405                           postdec2	equ	0xFDD
 33406                           plusw2	equ	0xFDB
 33407                           fsr2h	equ	0xFDA
 33408                           fsr2l	equ	0xFD9
 33409                           status	equ	0xFD8
 33410                           
 33411 ;; *************** function _HALSPICSAssert *****************
 33412 ;; Defined at:
 33413 ;;		line 63 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33414 ;; Parameters:    Size  Location     Type
 33415 ;;		None
 33416 ;; Auto vars:     Size  Location     Type
 33417 ;;		None
 33418 ;; Return value:  Size  Location     Type
 33419 ;;                  1    wreg      void 
 33420 ;; Registers used:
 33421 ;;		None
 33422 ;; Tracked objects:
 33423 ;;		On entry : 0/0
 33424 ;;		On exit  : 0/0
 33425 ;;		Unchanged: 0/0
 33426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33427 ;;      Params:         0       0       0       0       0       0       0       0       0
 33428 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33429 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33430 ;;      Totals:         0       0       0       0       0       0       0       0       0
 33431 ;;Total ram usage:        0 bytes
 33432 ;; Hardware stack levels used:    1
 33433 ;; Hardware stack levels required when called:    7
 33434 ;; This function calls:
 33435 ;;		Nothing
 33436 ;; This function is called by:
 33437 ;;		_RADIO_RegisterWrite
 33438 ;;		_RADIO_RegisterRead
 33439 ;;		_RADIO_Transmit
 33440 ;;		_RADIO_RxDone
 33441 ;;		_RADIO_FSKPayloadReady
 33442 ;; This function uses a non-reentrant model
 33443 ;;
 33444                           
 33445                           	psect	text171
 33446  0078E4                     __ptext171:
 33447                           	opt stack 0
 33448  0078E4                     _HALSPICSAssert:
 33449                           	opt stack 18
 33450                           
 33451                           ;incstack = 0
 33452                           ;radio_driver_hal.c: 65: do { LATC1 = 0; } while(0);
 33453  0078E4  927B               	bcf	3963,1,c	;volatile
 33454  0078E6  0012               	return		;funcret
 33455  0078E8                     __end_of_HALSPICSAssert:
 33456                           	opt stack 0
 33457                           tosu	equ	0xFFF
 33458                           tosh	equ	0xFFE
 33459                           tosl	equ	0xFFD
 33460                           pclath	equ	0xFFA
 33461                           tblptru	equ	0xFF8
 33462                           tblptrh	equ	0xFF7
 33463                           tblptrl	equ	0xFF6
 33464                           tablat	equ	0xFF5
 33465                           prodh	equ	0xFF4
 33466                           prodl	equ	0xFF3
 33467                           intcon	equ	0xFF2
 33468                           indf0	equ	0xFEF
 33469                           postinc0	equ	0xFEE
 33470                           plusw0	equ	0xFEB
 33471                           fsr0h	equ	0xFEA
 33472                           fsr0l	equ	0xFE9
 33473                           wreg	equ	0xFE8
 33474                           postinc1	equ	0xFE6
 33475                           postdec1	equ	0xFE5
 33476                           plusw1	equ	0xFE3
 33477                           fsr1h	equ	0xFE2
 33478                           fsr1l	equ	0xFE1
 33479                           indf2	equ	0xFDF
 33480                           postinc2	equ	0xFDE
 33481                           postdec2	equ	0xFDD
 33482                           plusw2	equ	0xFDB
 33483                           fsr2h	equ	0xFDA
 33484                           fsr2l	equ	0xFD9
 33485                           status	equ	0xFD8
 33486                           
 33487 ;; *************** function _RADIO_Reset *****************
 33488 ;; Defined at:
 33489 ;;		line 249 in file "mcc_generated_files/LoRaWAN/radio_driver_SX1276.c"
 33490 ;; Parameters:    Size  Location     Type
 33491 ;;		None
 33492 ;; Auto vars:     Size  Location     Type
 33493 ;;		None
 33494 ;; Return value:  Size  Location     Type
 33495 ;;                  1    wreg      void 
 33496 ;; Registers used:
 33497 ;;		wreg, status,2, status,0, cstack
 33498 ;; Tracked objects:
 33499 ;;		On entry : E/1
 33500 ;;		On exit  : E/0
 33501 ;;		Unchanged: 0/0
 33502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33503 ;;      Params:         0       0       0       0       0       0       0       0       0
 33504 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33505 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33506 ;;      Totals:         0       0       0       0       0       0       0       0       0
 33507 ;;Total ram usage:        0 bytes
 33508 ;; Hardware stack levels used:    1
 33509 ;; Hardware stack levels required when called:    8
 33510 ;; This function calls:
 33511 ;;		_HALResetPinMakeInput
 33512 ;;		_HALResetPinMakeOutput
 33513 ;;		_HALResetPinOutputValue
 33514 ;;		_SystemBlockingWaitMs
 33515 ;; This function is called by:
 33516 ;;		_RADIO_Init
 33517 ;; This function uses a non-reentrant model
 33518 ;;
 33519                           
 33520                           	psect	text172
 33521  007098                     __ptext172:
 33522                           	opt stack 0
 33523  007098                     _RADIO_Reset:
 33524                           	opt stack 20
 33525                           
 33526                           ;radio_driver_SX1276.c: 251: HALResetPinMakeOutput();
 33527                           
 33528                           ;incstack = 0
 33529  007098  EC74  F03C         	call	_HALResetPinMakeOutput	;wreg free
 33530                           
 33531                           ;radio_driver_SX1276.c: 252: HALResetPinOutputValue(0);
 33532  00709C  0E00               	movlw	0
 33533  00709E  EC9D  F03B         	call	_HALResetPinOutputValue
 33534                           
 33535                           ; BSR set to: 0
 33536                           ;radio_driver_SX1276.c: 253: SystemBlockingWaitMs(1);
 33537  0070A2  0E01               	movlw	1
 33538  0070A4  6F64               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 33539  0070A6  6B65               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 33540  0070A8  6B66               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 33541  0070AA  6B67               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 33542  0070AC  EC4B  F039         	call	_SystemBlockingWaitMs	;wreg free
 33543                           
 33544                           ;radio_driver_SX1276.c: 254: HALResetPinMakeInput();
 33545  0070B0  EC76  F03C         	call	_HALResetPinMakeInput	;wreg free
 33546                           
 33547                           ; BSR set to: 0
 33548                           ;radio_driver_SX1276.c: 255: SystemBlockingWaitMs(10);
 33549  0070B4  0E0A               	movlw	10
 33550  0070B6  6F64               	movwf	SystemBlockingWaitMs@ms& (0+255),b
 33551  0070B8  6B65               	clrf	(SystemBlockingWaitMs@ms+1)& (0+255),b
 33552  0070BA  6B66               	clrf	(SystemBlockingWaitMs@ms+2)& (0+255),b
 33553  0070BC  6B67               	clrf	(SystemBlockingWaitMs@ms+3)& (0+255),b
 33554  0070BE  EC4B  F039         	call	_SystemBlockingWaitMs	;wreg free
 33555                           
 33556                           ; BSR set to: 0
 33557                           ;radio_driver_SX1276.c: 257: HALResetPinOutputValue(1);
 33558  0070C2  0E01               	movlw	1
 33559  0070C4  EC9D  F03B         	call	_HALResetPinOutputValue
 33560                           
 33561                           ;radio_driver_SX1276.c: 258: HALResetPinMakeOutput();
 33562  0070C8  EF74  F03C         	goto	_HALResetPinMakeOutput	;wreg free
 33563  0070CC                     __end_of_RADIO_Reset:
 33564                           	opt stack 0
 33565                           tosu	equ	0xFFF
 33566                           tosh	equ	0xFFE
 33567                           tosl	equ	0xFFD
 33568                           pclath	equ	0xFFA
 33569                           tblptru	equ	0xFF8
 33570                           tblptrh	equ	0xFF7
 33571                           tblptrl	equ	0xFF6
 33572                           tablat	equ	0xFF5
 33573                           prodh	equ	0xFF4
 33574                           prodl	equ	0xFF3
 33575                           intcon	equ	0xFF2
 33576                           indf0	equ	0xFEF
 33577                           postinc0	equ	0xFEE
 33578                           plusw0	equ	0xFEB
 33579                           fsr0h	equ	0xFEA
 33580                           fsr0l	equ	0xFE9
 33581                           wreg	equ	0xFE8
 33582                           postinc1	equ	0xFE6
 33583                           postdec1	equ	0xFE5
 33584                           plusw1	equ	0xFE3
 33585                           fsr1h	equ	0xFE2
 33586                           fsr1l	equ	0xFE1
 33587                           indf2	equ	0xFDF
 33588                           postinc2	equ	0xFDE
 33589                           postdec2	equ	0xFDD
 33590                           plusw2	equ	0xFDB
 33591                           fsr2h	equ	0xFDA
 33592                           fsr2l	equ	0xFD9
 33593                           status	equ	0xFD8
 33594                           
 33595 ;; *************** function _SystemBlockingWaitMs *****************
 33596 ;; Defined at:
 33597 ;;		line 145 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 33598 ;; Parameters:    Size  Location     Type
 33599 ;;  ms              4    4[BANK0 ] unsigned long 
 33600 ;; Auto vars:     Size  Location     Type
 33601 ;;		None
 33602 ;; Return value:  Size  Location     Type
 33603 ;;                  1    wreg      void 
 33604 ;; Registers used:
 33605 ;;		wreg, status,2, status,0
 33606 ;; Tracked objects:
 33607 ;;		On entry : F/0
 33608 ;;		On exit  : F/0
 33609 ;;		Unchanged: 0/0
 33610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33611 ;;      Params:         0       4       0       0       0       0       0       0       0
 33612 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33613 ;;      Temps:          0       1       0       0       0       0       0       0       0
 33614 ;;      Totals:         0       5       0       0       0       0       0       0       0
 33615 ;;Total ram usage:        5 bytes
 33616 ;; Hardware stack levels used:    1
 33617 ;; Hardware stack levels required when called:    7
 33618 ;; This function calls:
 33619 ;;		Nothing
 33620 ;; This function is called by:
 33621 ;;		_RADIO_WriteMode
 33622 ;;		_RADIO_Reset
 33623 ;;		_RADIO_ReadRandom
 33624 ;; This function uses a non-reentrant model
 33625 ;;
 33626                           
 33627                           	psect	text173
 33628  007296                     __ptext173:
 33629                           	opt stack 0
 33630  007296                     _SystemBlockingWaitMs:
 33631                           	opt stack 19
 33632                           
 33633                           ; BSR set to: 0
 33634                           ;sw_timer.c: 147: while (ms > 0)
 33635                           
 33636                           ;incstack = 0
 33637  007296  D00E               	goto	l11930
 33638  007298                     l11926:
 33639                           
 33640                           ; BSR set to: 0
 33641                           ;sw_timer.c: 148: {
 33642                           ;sw_timer.c: 149: _delay((unsigned long)((1)*(16000000/4000.0)));
 33643  007298  0E06               	movlw	6
 33644  00729A  6F68               	movwf	??_SystemBlockingWaitMs& (0+255),b
 33645  00729C  0E30               	movlw	48
 33646  00729E                     u20007:
 33647  00729E  2EE8               	decfsz	wreg,f,c
 33648  0072A0  D7FE               	goto	u20007
 33649  0072A2  2F68               	decfsz	??_SystemBlockingWaitMs& (0+255),f,b
 33650  0072A4  D7FC               	goto	u20007
 33651  0072A6  D000               	nop2	
 33652                           
 33653                           ;sw_timer.c: 150: ms--;
 33654  0072A8  0100               	movlb	0	; () banked
 33655  0072AA  0764               	decf	SystemBlockingWaitMs@ms& (0+255),f,b
 33656  0072AC  0E00               	movlw	0
 33657  0072AE  5B65               	subwfb	(SystemBlockingWaitMs@ms+1)& (0+255),f,b
 33658  0072B0  5B66               	subwfb	(SystemBlockingWaitMs@ms+2)& (0+255),f,b
 33659  0072B2  5B67               	subwfb	(SystemBlockingWaitMs@ms+3)& (0+255),f,b
 33660  0072B4                     l11930:
 33661                           
 33662                           ; BSR set to: 0
 33663  0072B4  5164               	movf	SystemBlockingWaitMs@ms& (0+255),w,b
 33664  0072B6  1165               	iorwf	(SystemBlockingWaitMs@ms+1)& (0+255),w,b
 33665  0072B8  1166               	iorwf	(SystemBlockingWaitMs@ms+2)& (0+255),w,b
 33666  0072BA  1167               	iorwf	(SystemBlockingWaitMs@ms+3)& (0+255),w,b
 33667  0072BC  E1ED               	bnz	l11926
 33668                           
 33669                           ; BSR set to: 0
 33670  0072BE  0012               	return		;funcret
 33671  0072C0                     __end_of_SystemBlockingWaitMs:
 33672                           	opt stack 0
 33673                           tosu	equ	0xFFF
 33674                           tosh	equ	0xFFE
 33675                           tosl	equ	0xFFD
 33676                           pclath	equ	0xFFA
 33677                           tblptru	equ	0xFF8
 33678                           tblptrh	equ	0xFF7
 33679                           tblptrl	equ	0xFF6
 33680                           tablat	equ	0xFF5
 33681                           prodh	equ	0xFF4
 33682                           prodl	equ	0xFF3
 33683                           intcon	equ	0xFF2
 33684                           indf0	equ	0xFEF
 33685                           postinc0	equ	0xFEE
 33686                           plusw0	equ	0xFEB
 33687                           fsr0h	equ	0xFEA
 33688                           fsr0l	equ	0xFE9
 33689                           wreg	equ	0xFE8
 33690                           postinc1	equ	0xFE6
 33691                           postdec1	equ	0xFE5
 33692                           plusw1	equ	0xFE3
 33693                           fsr1h	equ	0xFE2
 33694                           fsr1l	equ	0xFE1
 33695                           indf2	equ	0xFDF
 33696                           postinc2	equ	0xFDE
 33697                           postdec2	equ	0xFDD
 33698                           plusw2	equ	0xFDB
 33699                           fsr2h	equ	0xFDA
 33700                           fsr2l	equ	0xFD9
 33701                           status	equ	0xFD8
 33702                           
 33703 ;; *************** function _HALResetPinOutputValue *****************
 33704 ;; Defined at:
 33705 ;;		line 55 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33706 ;; Parameters:    Size  Location     Type
 33707 ;;  value           1    wreg     unsigned char 
 33708 ;; Auto vars:     Size  Location     Type
 33709 ;;  value           1    4[BANK0 ] unsigned char 
 33710 ;; Return value:  Size  Location     Type
 33711 ;;                  1    wreg      void 
 33712 ;; Registers used:
 33713 ;;		wreg, status,2, status,0
 33714 ;; Tracked objects:
 33715 ;;		On entry : E/1
 33716 ;;		On exit  : F/0
 33717 ;;		Unchanged: 0/0
 33718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33719 ;;      Params:         0       0       0       0       0       0       0       0       0
 33720 ;;      Locals:         0       1       0       0       0       0       0       0       0
 33721 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33722 ;;      Totals:         0       1       0       0       0       0       0       0       0
 33723 ;;Total ram usage:        1 bytes
 33724 ;; Hardware stack levels used:    1
 33725 ;; Hardware stack levels required when called:    7
 33726 ;; This function calls:
 33727 ;;		Nothing
 33728 ;; This function is called by:
 33729 ;;		_RADIO_Reset
 33730 ;; This function uses a non-reentrant model
 33731 ;;
 33732                           
 33733                           	psect	text174
 33734  00773A                     __ptext174:
 33735                           	opt stack 0
 33736  00773A                     _HALResetPinOutputValue:
 33737                           	opt stack 20
 33738                           
 33739                           ; BSR set to: 0
 33740                           ;incstack = 0
 33741                           ;HALResetPinOutputValue@value stored from wreg
 33742  00773A  0100               	movlb	0	; () banked
 33743  00773C  6F64               	movwf	HALResetPinOutputValue@value& (0+255),b
 33744                           
 33745                           ;radio_driver_hal.c: 57: if (value == 0)
 33746  00773E  5164               	movf	HALResetPinOutputValue@value& (0+255),w,b
 33747  007740  E102               	bnz	l13782
 33748                           
 33749                           ; BSR set to: 0
 33750                           
 33751                           ;radio_driver_hal.c: 58: do { LATC0 = 0; } while(0);
 33752  007742  907B               	bcf	3963,0,c	;volatile
 33753  007744  0012               	return	
 33754  007746                     l13782:
 33755                           
 33756                           ; BSR set to: 0
 33757                           ;radio_driver_hal.c: 59: else if (value == 1)
 33758  007746  0564               	decf	HALResetPinOutputValue@value& (0+255),w,b
 33759  007748  B4D8               	btfsc	status,2,c
 33760                           
 33761                           ; BSR set to: 0
 33762                           
 33763                           ;radio_driver_hal.c: 60: do { LATC0 = 1; } while(0);
 33764  00774A  807B               	bsf	3963,0,c	;volatile
 33765                           
 33766                           ; BSR set to: 0
 33767  00774C  0012               	return		;funcret
 33768  00774E                     __end_of_HALResetPinOutputValue:
 33769                           	opt stack 0
 33770                           tosu	equ	0xFFF
 33771                           tosh	equ	0xFFE
 33772                           tosl	equ	0xFFD
 33773                           pclath	equ	0xFFA
 33774                           tblptru	equ	0xFF8
 33775                           tblptrh	equ	0xFF7
 33776                           tblptrl	equ	0xFF6
 33777                           tablat	equ	0xFF5
 33778                           prodh	equ	0xFF4
 33779                           prodl	equ	0xFF3
 33780                           intcon	equ	0xFF2
 33781                           indf0	equ	0xFEF
 33782                           postinc0	equ	0xFEE
 33783                           plusw0	equ	0xFEB
 33784                           fsr0h	equ	0xFEA
 33785                           fsr0l	equ	0xFE9
 33786                           wreg	equ	0xFE8
 33787                           postinc1	equ	0xFE6
 33788                           postdec1	equ	0xFE5
 33789                           plusw1	equ	0xFE3
 33790                           fsr1h	equ	0xFE2
 33791                           fsr1l	equ	0xFE1
 33792                           indf2	equ	0xFDF
 33793                           postinc2	equ	0xFDE
 33794                           postdec2	equ	0xFDD
 33795                           plusw2	equ	0xFDB
 33796                           fsr2h	equ	0xFDA
 33797                           fsr2l	equ	0xFD9
 33798                           status	equ	0xFD8
 33799                           
 33800 ;; *************** function _HALResetPinMakeOutput *****************
 33801 ;; Defined at:
 33802 ;;		line 45 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33803 ;; Parameters:    Size  Location     Type
 33804 ;;		None
 33805 ;; Auto vars:     Size  Location     Type
 33806 ;;		None
 33807 ;; Return value:  Size  Location     Type
 33808 ;;                  1    wreg      void 
 33809 ;; Registers used:
 33810 ;;		None
 33811 ;; Tracked objects:
 33812 ;;		On entry : E/1
 33813 ;;		On exit  : E/0
 33814 ;;		Unchanged: E/0
 33815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33816 ;;      Params:         0       0       0       0       0       0       0       0       0
 33817 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33818 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33819 ;;      Totals:         0       0       0       0       0       0       0       0       0
 33820 ;;Total ram usage:        0 bytes
 33821 ;; Hardware stack levels used:    1
 33822 ;; Hardware stack levels required when called:    7
 33823 ;; This function calls:
 33824 ;;		Nothing
 33825 ;; This function is called by:
 33826 ;;		_RADIO_Reset
 33827 ;; This function uses a non-reentrant model
 33828 ;;
 33829                           
 33830                           	psect	text175
 33831  0078E8                     __ptext175:
 33832                           	opt stack 0
 33833  0078E8                     _HALResetPinMakeOutput:
 33834                           	opt stack 20
 33835                           
 33836                           ; BSR set to: 0
 33837                           ;incstack = 0
 33838                           ;radio_driver_hal.c: 47: do { TRISC0 = 0; } while(0);
 33839  0078E8  9083               	bcf	3971,0,c	;volatile
 33840  0078EA  0012               	return		;funcret
 33841  0078EC                     __end_of_HALResetPinMakeOutput:
 33842                           	opt stack 0
 33843                           tosu	equ	0xFFF
 33844                           tosh	equ	0xFFE
 33845                           tosl	equ	0xFFD
 33846                           pclath	equ	0xFFA
 33847                           tblptru	equ	0xFF8
 33848                           tblptrh	equ	0xFF7
 33849                           tblptrl	equ	0xFF6
 33850                           tablat	equ	0xFF5
 33851                           prodh	equ	0xFF4
 33852                           prodl	equ	0xFF3
 33853                           intcon	equ	0xFF2
 33854                           indf0	equ	0xFEF
 33855                           postinc0	equ	0xFEE
 33856                           plusw0	equ	0xFEB
 33857                           fsr0h	equ	0xFEA
 33858                           fsr0l	equ	0xFE9
 33859                           wreg	equ	0xFE8
 33860                           postinc1	equ	0xFE6
 33861                           postdec1	equ	0xFE5
 33862                           plusw1	equ	0xFE3
 33863                           fsr1h	equ	0xFE2
 33864                           fsr1l	equ	0xFE1
 33865                           indf2	equ	0xFDF
 33866                           postinc2	equ	0xFDE
 33867                           postdec2	equ	0xFDD
 33868                           plusw2	equ	0xFDB
 33869                           fsr2h	equ	0xFDA
 33870                           fsr2l	equ	0xFD9
 33871                           status	equ	0xFD8
 33872                           
 33873 ;; *************** function _HALResetPinMakeInput *****************
 33874 ;; Defined at:
 33875 ;;		line 50 in file "mcc_generated_files/LoRaWAN/radio_driver_hal.c"
 33876 ;; Parameters:    Size  Location     Type
 33877 ;;		None
 33878 ;; Auto vars:     Size  Location     Type
 33879 ;;		None
 33880 ;; Return value:  Size  Location     Type
 33881 ;;                  1    wreg      void 
 33882 ;; Registers used:
 33883 ;;		None
 33884 ;; Tracked objects:
 33885 ;;		On entry : F/0
 33886 ;;		On exit  : F/0
 33887 ;;		Unchanged: F/0
 33888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33889 ;;      Params:         0       0       0       0       0       0       0       0       0
 33890 ;;      Locals:         0       0       0       0       0       0       0       0       0
 33891 ;;      Temps:          0       0       0       0       0       0       0       0       0
 33892 ;;      Totals:         0       0       0       0       0       0       0       0       0
 33893 ;;Total ram usage:        0 bytes
 33894 ;; Hardware stack levels used:    1
 33895 ;; Hardware stack levels required when called:    7
 33896 ;; This function calls:
 33897 ;;		Nothing
 33898 ;; This function is called by:
 33899 ;;		_RADIO_Reset
 33900 ;; This function uses a non-reentrant model
 33901 ;;
 33902                           
 33903                           	psect	text176
 33904  0078EC                     __ptext176:
 33905                           	opt stack 0
 33906  0078EC                     _HALResetPinMakeInput:
 33907                           	opt stack 20
 33908                           
 33909                           ; BSR set to: 0
 33910                           
 33911                           ;incstack = 0
 33912                           ;radio_driver_hal.c: 52: do { TRISC0 = 1; } while(0);
 33913  0078EC  8083               	bsf	3971,0,c	;volatile
 33914                           
 33915                           ; BSR set to: 0
 33916  0078EE  0012               	return		;funcret
 33917  0078F0                     __end_of_HALResetPinMakeInput:
 33918                           	opt stack 0
 33919                           tosu	equ	0xFFF
 33920                           tosh	equ	0xFFE
 33921                           tosl	equ	0xFFD
 33922                           pclath	equ	0xFFA
 33923                           tblptru	equ	0xFF8
 33924                           tblptrh	equ	0xFF7
 33925                           tblptrl	equ	0xFF6
 33926                           tablat	equ	0xFF5
 33927                           prodh	equ	0xFF4
 33928                           prodl	equ	0xFF3
 33929                           intcon	equ	0xFF2
 33930                           indf0	equ	0xFEF
 33931                           postinc0	equ	0xFEE
 33932                           plusw0	equ	0xFEB
 33933                           fsr0h	equ	0xFEA
 33934                           fsr0l	equ	0xFE9
 33935                           wreg	equ	0xFE8
 33936                           postinc1	equ	0xFE6
 33937                           postdec1	equ	0xFE5
 33938                           plusw1	equ	0xFE3
 33939                           fsr1h	equ	0xFE2
 33940                           fsr1l	equ	0xFE1
 33941                           indf2	equ	0xFDF
 33942                           postinc2	equ	0xFDE
 33943                           postdec2	equ	0xFDD
 33944                           plusw2	equ	0xFDB
 33945                           fsr2h	equ	0xFDA
 33946                           fsr2l	equ	0xFD9
 33947                           status	equ	0xFD8
 33948                           
 33949 ;; *************** function _LORAWAN_LinkCheckConfigure *****************
 33950 ;; Defined at:
 33951 ;;		line 755 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 33952 ;; Parameters:    Size  Location     Type
 33953 ;;  period          2   52[BANK0 ] unsigned int 
 33954 ;; Auto vars:     Size  Location     Type
 33955 ;;  iCtr            1   66[BANK0 ] unsigned char 
 33956 ;; Return value:  Size  Location     Type
 33957 ;;                  1    wreg      void 
 33958 ;; Registers used:
 33959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33960 ;; Tracked objects:
 33961 ;;		On entry : F/0
 33962 ;;		On exit  : D/0
 33963 ;;		Unchanged: 0/0
 33964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 33965 ;;      Params:         0       2       0       0       0       0       0       0       0
 33966 ;;      Locals:         0       5       0       0       0       0       0       0       0
 33967 ;;      Temps:          0       8       0       0       0       0       0       0       0
 33968 ;;      Totals:         0      15       0       0       0       0       0       0       0
 33969 ;;Total ram usage:       15 bytes
 33970 ;; Hardware stack levels used:    1
 33971 ;; Hardware stack levels required when called:   11
 33972 ;; This function calls:
 33973 ;;		_SwTimerSetTimeout
 33974 ;;		_SwTimerStart
 33975 ;;		_SwTimerStop
 33976 ;;		___lldiv
 33977 ;; This function is called by:
 33978 ;;		_LORAWAN_Reset
 33979 ;; This function uses a non-reentrant model
 33980 ;;
 33981                           
 33982                           	psect	text177
 33983  00371E                     __ptext177:
 33984                           	opt stack 0
 33985  00371E                     _LORAWAN_LinkCheckConfigure:
 33986                           	opt stack 18
 33987                           
 33988                           ; BSR set to: 0
 33989                           ;lorawan.c: 757: uint8_t iCtr;
 33990                           ;lorawan.c: 759: loRa.periodForLinkCheck = period * 1000UL;
 33991                           
 33992                           ; BSR set to: 0
 33993                           ;incstack = 0
 33994  00371E  5194               	movf	LORAWAN_LinkCheckConfigure@period& (0+255),w,b
 33995  003720  6F96               	movwf	??_LORAWAN_LinkCheckConfigure& (0+255),b
 33996  003722  5195               	movf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),w,b
 33997  003724  6F97               	movwf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),b
 33998  003726  6B98               	clrf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),b
 33999  003728  6B99               	clrf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),b
 34000  00372A  0EE8               	movlw	232
 34001  00372C  0396               	mulwf	??_LORAWAN_LinkCheckConfigure& (0+255),b
 34002  00372E  CFF3 F09A          	movff	prodl,??_LORAWAN_LinkCheckConfigure+4
 34003  003732  CFF4 F09B          	movff	prodh,??_LORAWAN_LinkCheckConfigure+5
 34004  003736  6B9C               	clrf	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),b
 34005  003738  6B9D               	clrf	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),b
 34006  00373A  0397               	mulwf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),b
 34007  00373C  50F3               	movf	prodl,w,c
 34008  00373E  279B               	addwf	(??_LORAWAN_LinkCheckConfigure+5)& (0+255),f,b
 34009  003740  50F4               	movf	prodh,w,c
 34010  003742  239C               	addwfc	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),f,b
 34011  003744  0E00               	movlw	0
 34012  003746  239D               	addwfc	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34013  003748  0E03               	movlw	3
 34014  00374A  0396               	mulwf	??_LORAWAN_LinkCheckConfigure& (0+255),b
 34015  00374C  50F3               	movf	prodl,w,c
 34016  00374E  279B               	addwf	(??_LORAWAN_LinkCheckConfigure+5)& (0+255),f,b
 34017  003750  50F4               	movf	prodh,w,c
 34018  003752  239C               	addwfc	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),f,b
 34019  003754  0E00               	movlw	0
 34020  003756  239D               	addwfc	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34021  003758  0EE8               	movlw	232
 34022  00375A  0398               	mulwf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),b
 34023  00375C  50F3               	movf	prodl,w,c
 34024  00375E  279C               	addwf	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),f,b
 34025  003760  50F4               	movf	prodh,w,c
 34026  003762  239D               	addwfc	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34027  003764  0E03               	movlw	3
 34028  003766  0397               	mulwf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),b
 34029  003768  50F3               	movf	prodl,w,c
 34030  00376A  279C               	addwf	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),f,b
 34031  00376C  50F4               	movf	prodh,w,c
 34032  00376E  239D               	addwfc	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34033  003770  0E00               	movlw	0
 34034  003772  0396               	mulwf	??_LORAWAN_LinkCheckConfigure& (0+255),b
 34035  003774  50F3               	movf	prodl,w,c
 34036  003776  279C               	addwf	(??_LORAWAN_LinkCheckConfigure+6)& (0+255),f,b
 34037  003778  50F4               	movf	prodh,w,c
 34038  00377A  239D               	addwfc	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34039  00377C  0EE8               	movlw	232
 34040  00377E  0399               	mulwf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),b
 34041  003780  50F3               	movf	prodl,w,c
 34042  003782  279D               	addwf	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34043  003784  0E03               	movlw	3
 34044  003786  0398               	mulwf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),b
 34045  003788  50F3               	movf	prodl,w,c
 34046  00378A  279D               	addwf	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34047  00378C  0E00               	movlw	0
 34048  00378E  0397               	mulwf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),b
 34049  003790  50F3               	movf	prodl,w,c
 34050  003792  279D               	addwf	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34051  003794  0E00               	movlw	0
 34052  003796  0396               	mulwf	??_LORAWAN_LinkCheckConfigure& (0+255),b
 34053  003798  50F3               	movf	prodl,w,c
 34054  00379A  279D               	addwf	(??_LORAWAN_LinkCheckConfigure+7)& (0+255),f,b
 34055  00379C  C09A  F2CC         	movff	??_LORAWAN_LinkCheckConfigure+4,_loRa+204
 34056  0037A0  C09B  F2CD         	movff	??_LORAWAN_LinkCheckConfigure+5,_loRa+205
 34057  0037A4  C09C  F2CE         	movff	??_LORAWAN_LinkCheckConfigure+6,_loRa+206
 34058  0037A8  C09D  F2CF         	movff	??_LORAWAN_LinkCheckConfigure+7,_loRa+207
 34059                           
 34060                           ; BSR set to: 0
 34061                           ;lorawan.c: 761: if (period == 0)
 34062  0037AC  5194               	movf	LORAWAN_LinkCheckConfigure@period& (0+255),w,b
 34063  0037AE  1195               	iorwf	(LORAWAN_LinkCheckConfigure@period+1)& (0+255),w,b
 34064  0037B0  E127               	bnz	l2014
 34065                           
 34066                           ; BSR set to: 0
 34067                           ;lorawan.c: 762: {
 34068                           ;lorawan.c: 763: SwTimerStop(loRa.linkCheckTimerId);
 34069  0037B2  0102               	movlb	2	; () banked
 34070  0037B4  51E7               	movf	(_loRa+231)& (0+255),w,b
 34071  0037B6  ECF3  F03A         	call	_SwTimerStop
 34072                           
 34073                           ; BSR set to: 0
 34074                           ;lorawan.c: 764: loRa.macStatus.linkCheck = 0;
 34075  0037BA  0102               	movlb	2	; () banked
 34076  0037BC  9503               	bcf	(_loRa+3)& (0+255),2,b
 34077                           
 34078                           ; BSR set to: 2
 34079                           ;lorawan.c: 765: for(iCtr = 0; iCtr < loRa.crtMacCmdIndex; iCtr ++)
 34080  0037BE  0100               	movlb	0	; () banked
 34081  0037C0  6BA2               	clrf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),b
 34082  0037C2  D018               	goto	l15072
 34083  0037C4                     l15064:
 34084                           
 34085                           ; BSR set to: 0
 34086                           ;lorawan.c: 766: {
 34087                           ;lorawan.c: 767: if(loRa.macCommands[iCtr].receivedCid == LINK_CHECK_CID)
 34088  0037C4  51A2               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 34089  0037C6  0D02               	mullw	2
 34090  0037C8  0EA8               	movlw	low (_loRa+168)
 34091  0037CA  24F3               	addwf	prodl,w,c
 34092  0037CC  6ED9               	movwf	fsr2l,c
 34093  0037CE  0E02               	movlw	high (_loRa+168)
 34094  0037D0  20F4               	addwfc	prodh,w,c
 34095  0037D2  6EDA               	movwf	fsr2h,c
 34096  0037D4  0E02               	movlw	2
 34097  0037D6  18DE               	xorwf	postinc2,w,c
 34098  0037D8  E10B               	bnz	l15070
 34099                           
 34100                           ; BSR set to: 0
 34101                           ;lorawan.c: 768: {
 34102                           ;lorawan.c: 771: loRa.macCommands[iCtr].receivedCid = 0xFF;
 34103  0037DA  51A2               	movf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 34104  0037DC  0D02               	mullw	2
 34105  0037DE  0EA8               	movlw	low (_loRa+168)
 34106  0037E0  24F3               	addwf	prodl,w,c
 34107  0037E2  6ED9               	movwf	fsr2l,c
 34108  0037E4  0E02               	movlw	high (_loRa+168)
 34109  0037E6  20F4               	addwfc	prodh,w,c
 34110  0037E8  6EDA               	movwf	fsr2h,c
 34111  0037EA  68DF               	setf	indf2,c
 34112                           
 34113                           ; BSR set to: 0
 34114                           ;lorawan.c: 772: loRa.crtMacCmdIndex --;
 34115  0037EC  0102               	movlb	2	; () banked
 34116  0037EE  07A7               	decf	(_loRa+167)& (0+255),f,b
 34117  0037F0                     l15070:
 34118  0037F0  0100               	movlb	0	; () banked
 34119  0037F2  2BA2               	incf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),f,b
 34120  0037F4                     l15072:
 34121                           
 34122                           ; BSR set to: 0
 34123  0037F4  0102               	movlb	2	; () banked
 34124  0037F6  51A7               	movf	(_loRa+167)& (0+255),w,b
 34125  0037F8  0100               	movlb	0	; () banked
 34126  0037FA  5DA2               	subwf	LORAWAN_LinkCheckConfigure@iCtr& (0+255),w,b
 34127  0037FC  E3E3               	bnc	l15064
 34128  0037FE  0012               	return	
 34129  003800                     l2014:
 34130                           
 34131                           ; BSR set to: 0
 34132                           ;lorawan.c: 776: else
 34133                           ;lorawan.c: 777: {
 34134                           ;lorawan.c: 778: loRa.macStatus.linkCheck = 1;
 34135  003800  0102               	movlb	2	; () banked
 34136  003802  8503               	bsf	(_loRa+3)& (0+255),2,b
 34137                           
 34138                           ;lorawan.c: 781: if (loRa.macStatus.networkJoined == 1)
 34139  003804  A902               	btfss	(_loRa+2)& (0+255),4,b
 34140  003806  0012               	return	
 34141                           
 34142                           ; BSR set to: 2
 34143                           ;lorawan.c: 782: {
 34144                           ;lorawan.c: 783: SwTimerSetTimeout(loRa.linkCheckTimerId, ((loRa.periodForLinkCheck) < 0
      +                          x000FFFFFUL ? ( (((uint32_t)(loRa.periodForLinkCheck)) << (12)) / 125UL ) : ( (((uint32_
      +                          t)(loRa.periodForLinkCheck)) / 125UL) << (12) ) ));
 34145  003808  51CF               	movf	(_loRa+207)& (0+255),w,b
 34146  00380A  E106               	bnz	u17640
 34147  00380C  29CC               	incf	(_loRa+204)& (0+255),w,b
 34148  00380E  0EFF               	movlw	255
 34149  003810  59CD               	subwfb	(_loRa+205)& (0+255),w,b
 34150  003812  0E0F               	movlw	15
 34151  003814  59CE               	subwfb	(_loRa+206)& (0+255),w,b
 34152  003816  E319               	bnc	l15078
 34153  003818                     u17640:
 34154                           
 34155                           ; BSR set to: 2
 34156  003818  C2CC  F064         	movff	_loRa+204,___lldiv@dividend
 34157  00381C  C2CD  F065         	movff	_loRa+205,___lldiv@dividend+1
 34158  003820  C2CE  F066         	movff	_loRa+206,___lldiv@dividend+2
 34159  003824  C2CF  F067         	movff	_loRa+207,___lldiv@dividend+3
 34160  003828  0E7D               	movlw	125
 34161  00382A  0100               	movlb	0	; () banked
 34162  00382C  6F68               	movwf	___lldiv@divisor& (0+255),b
 34163  00382E  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 34164  003830  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 34165  003832  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 34166  003834  ECB3  F030         	call	___lldiv	;wreg free
 34167  003838  0E0C               	movlw	12
 34168  00383A                     u17655:
 34169  00383A  90D8               	bcf	status,0,c
 34170  00383C  3764               	rlcf	?___lldiv& (0+255),f,b
 34171  00383E  3765               	rlcf	(?___lldiv+1)& (0+255),f,b
 34172  003840  3766               	rlcf	(?___lldiv+2)& (0+255),f,b
 34173  003842  3767               	rlcf	(?___lldiv+3)& (0+255),f,b
 34174  003844  2EE8               	decfsz	wreg,f,c
 34175  003846  D7F9               	goto	u17655
 34176  003848  D020               	goto	L21
 34177  00384A                     l15078:
 34178                           
 34179                           ; BSR set to: 2
 34180  00384A  C2CC  F096         	movff	_loRa+204,??_LORAWAN_LinkCheckConfigure
 34181  00384E  C2CD  F097         	movff	_loRa+205,??_LORAWAN_LinkCheckConfigure+1
 34182  003852  C2CE  F098         	movff	_loRa+206,??_LORAWAN_LinkCheckConfigure+2
 34183  003856  C2CF  F099         	movff	_loRa+207,??_LORAWAN_LinkCheckConfigure+3
 34184  00385A  0E0C               	movlw	12
 34185  00385C                     u17665:
 34186  00385C  90D8               	bcf	status,0,c
 34187  00385E  0100               	movlb	0	; () banked
 34188  003860  3796               	rlcf	??_LORAWAN_LinkCheckConfigure& (0+255),f,b
 34189  003862  3797               	rlcf	(??_LORAWAN_LinkCheckConfigure+1)& (0+255),f,b
 34190  003864  3798               	rlcf	(??_LORAWAN_LinkCheckConfigure+2)& (0+255),f,b
 34191  003866  3799               	rlcf	(??_LORAWAN_LinkCheckConfigure+3)& (0+255),f,b
 34192  003868  2EE8               	decfsz	wreg,f,c
 34193  00386A  D7F8               	goto	u17665
 34194  00386C  C096  F064         	movff	??_LORAWAN_LinkCheckConfigure,___lldiv@dividend
 34195  003870  C097  F065         	movff	??_LORAWAN_LinkCheckConfigure+1,___lldiv@dividend+1
 34196  003874  C098  F066         	movff	??_LORAWAN_LinkCheckConfigure+2,___lldiv@dividend+2
 34197  003878  C099  F067         	movff	??_LORAWAN_LinkCheckConfigure+3,___lldiv@dividend+3
 34198  00387C  0E7D               	movlw	125
 34199  00387E  6F68               	movwf	___lldiv@divisor& (0+255),b
 34200  003880  6B69               	clrf	(___lldiv@divisor+1)& (0+255),b
 34201  003882  6B6A               	clrf	(___lldiv@divisor+2)& (0+255),b
 34202  003884  6B6B               	clrf	(___lldiv@divisor+3)& (0+255),b
 34203  003886  ECB3  F030         	call	___lldiv	;wreg free
 34204  00388A                     L21:
 34205  00388A  C064  F09E         	movff	?___lldiv,_LORAWAN_LinkCheckConfigure$3285
 34206  00388E  C065  F09F         	movff	?___lldiv+1,_LORAWAN_LinkCheckConfigure$3285+1
 34207  003892  C066  F0A0         	movff	?___lldiv+2,_LORAWAN_LinkCheckConfigure$3285+2
 34208  003896  C067  F0A1         	movff	?___lldiv+3,_LORAWAN_LinkCheckConfigure$3285+3
 34209                           
 34210                           ; BSR set to: 0
 34211  00389A  C09E  F071         	movff	_LORAWAN_LinkCheckConfigure$3285,SwTimerSetTimeout@timeout
 34212  00389E  C09F  F072         	movff	_LORAWAN_LinkCheckConfigure$3285+1,SwTimerSetTimeout@timeout+1
 34213  0038A2  C0A0  F073         	movff	_LORAWAN_LinkCheckConfigure$3285+2,SwTimerSetTimeout@timeout+2
 34214  0038A6  C0A1  F074         	movff	_LORAWAN_LinkCheckConfigure$3285+3,SwTimerSetTimeout@timeout+3
 34215  0038AA  0102               	movlb	2	; () banked
 34216  0038AC  51E7               	movf	(_loRa+231)& (0+255),w,b
 34217  0038AE  ECCA  F036         	call	_SwTimerSetTimeout
 34218                           
 34219                           ; BSR set to: 0
 34220                           ;lorawan.c: 784: SwTimerStart(loRa.linkCheckTimerId);
 34221  0038B2  0102               	movlb	2	; () banked
 34222  0038B4  51E7               	movf	(_loRa+231)& (0+255),w,b
 34223  0038B6  EFB3  F02E         	goto	_SwTimerStart
 34224  0038BA                     __end_of_LORAWAN_LinkCheckConfigure:
 34225                           	opt stack 0
 34226                           tosu	equ	0xFFF
 34227                           tosh	equ	0xFFE
 34228                           tosl	equ	0xFFD
 34229                           pclath	equ	0xFFA
 34230                           tblptru	equ	0xFF8
 34231                           tblptrh	equ	0xFF7
 34232                           tblptrl	equ	0xFF6
 34233                           tablat	equ	0xFF5
 34234                           prodh	equ	0xFF4
 34235                           prodl	equ	0xFF3
 34236                           intcon	equ	0xFF2
 34237                           indf0	equ	0xFEF
 34238                           postinc0	equ	0xFEE
 34239                           plusw0	equ	0xFEB
 34240                           fsr0h	equ	0xFEA
 34241                           fsr0l	equ	0xFE9
 34242                           wreg	equ	0xFE8
 34243                           postinc1	equ	0xFE6
 34244                           postdec1	equ	0xFE5
 34245                           plusw1	equ	0xFE3
 34246                           fsr1h	equ	0xFE2
 34247                           fsr1l	equ	0xFE1
 34248                           indf2	equ	0xFDF
 34249                           postinc2	equ	0xFDE
 34250                           postdec2	equ	0xFDD
 34251                           plusw2	equ	0xFDB
 34252                           fsr2h	equ	0xFDA
 34253                           fsr2l	equ	0xFD9
 34254                           status	equ	0xFD8
 34255                           
 34256 ;; *************** function ___lldiv *****************
 34257 ;; Defined at:
 34258 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 34259 ;; Parameters:    Size  Location     Type
 34260 ;;  dividend        4    4[BANK0 ] unsigned long 
 34261 ;;  divisor         4    8[BANK0 ] unsigned long 
 34262 ;; Auto vars:     Size  Location     Type
 34263 ;;  quotient        4   12[BANK0 ] unsigned long 
 34264 ;;  counter         1   16[BANK0 ] unsigned char 
 34265 ;; Return value:  Size  Location     Type
 34266 ;;                  4    4[BANK0 ] unsigned long 
 34267 ;; Registers used:
 34268 ;;		wreg, status,2, status,0
 34269 ;; Tracked objects:
 34270 ;;		On entry : F/0
 34271 ;;		On exit  : F/0
 34272 ;;		Unchanged: 0/0
 34273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34274 ;;      Params:         0       8       0       0       0       0       0       0       0
 34275 ;;      Locals:         0       5       0       0       0       0       0       0       0
 34276 ;;      Temps:          0       0       0       0       0       0       0       0       0
 34277 ;;      Totals:         0      13       0       0       0       0       0       0       0
 34278 ;;Total ram usage:       13 bytes
 34279 ;; Hardware stack levels used:    1
 34280 ;; Hardware stack levels required when called:    7
 34281 ;; This function calls:
 34282 ;;		Nothing
 34283 ;; This function is called by:
 34284 ;;		_RADIO_WriteFrequency
 34285 ;;		_RADIO_WriteFSKFrequencyDeviation
 34286 ;;		_RADIO_WriteFSKBitRate
 34287 ;;		_RADIO_Transmit
 34288 ;;		_RADIO_ReceiveStart
 34289 ;;		_LORAWAN_TxDone
 34290 ;;		_LORAWAN_RxTimeout
 34291 ;;		_StartReTxTimer
 34292 ;;		_DutyCycleCallback
 34293 ;;		_LORAWAN_LinkCheckConfigure
 34294 ;;		_LORAWAN_LinkCheckCallback
 34295 ;;		_UpdateRetransmissionAckTimeoutState
 34296 ;;		_UpdateJoinSuccessState
 34297 ;; This function uses a non-reentrant model
 34298 ;;
 34299                           
 34300                           	psect	text178
 34301  006166                     __ptext178:
 34302                           	opt stack 0
 34303  006166                     ___lldiv:
 34304                           	opt stack 20
 34305                           
 34306                           ; BSR set to: 0
 34307                           
 34308                           ;incstack = 0
 34309  006166  6B6C               	clrf	___lldiv@quotient& (0+255),b
 34310  006168  6B6D               	clrf	(___lldiv@quotient+1)& (0+255),b
 34311  00616A  6B6E               	clrf	(___lldiv@quotient+2)& (0+255),b
 34312  00616C  6B6F               	clrf	(___lldiv@quotient+3)& (0+255),b
 34313                           
 34314                           ; BSR set to: 0
 34315  00616E  5168               	movf	___lldiv@divisor& (0+255),w,b
 34316  006170  1169               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 34317  006172  116A               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 34318  006174  116B               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 34319  006176  E029               	bz	l2998
 34320                           
 34321                           ; BSR set to: 0
 34322  006178  0E01               	movlw	1
 34323  00617A  6F70               	movwf	___lldiv@counter& (0+255),b
 34324  00617C  D006               	goto	l12078
 34325  00617E                     l12076:
 34326                           
 34327                           ; BSR set to: 0
 34328  00617E  90D8               	bcf	status,0,c
 34329  006180  3768               	rlcf	___lldiv@divisor& (0+255),f,b
 34330  006182  3769               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 34331  006184  376A               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 34332  006186  376B               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 34333  006188  2B70               	incf	___lldiv@counter& (0+255),f,b
 34334  00618A                     l12078:
 34335                           
 34336                           ; BSR set to: 0
 34337  00618A  AF6B               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 34338  00618C  D7F8               	goto	l12076
 34339  00618E                     l12080:
 34340                           
 34341                           ; BSR set to: 0
 34342  00618E  90D8               	bcf	status,0,c
 34343  006190  376C               	rlcf	___lldiv@quotient& (0+255),f,b
 34344  006192  376D               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 34345  006194  376E               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 34346  006196  376F               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 34347                           
 34348                           ; BSR set to: 0
 34349  006198  5168               	movf	___lldiv@divisor& (0+255),w,b
 34350  00619A  5D64               	subwf	___lldiv@dividend& (0+255),w,b
 34351  00619C  5169               	movf	(___lldiv@divisor+1)& (0+255),w,b
 34352  00619E  5965               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 34353  0061A0  516A               	movf	(___lldiv@divisor+2)& (0+255),w,b
 34354  0061A2  5966               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 34355  0061A4  516B               	movf	(___lldiv@divisor+3)& (0+255),w,b
 34356  0061A6  5967               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 34357  0061A8  E309               	bnc	l12088
 34358                           
 34359                           ; BSR set to: 0
 34360  0061AA  5168               	movf	___lldiv@divisor& (0+255),w,b
 34361  0061AC  5F64               	subwf	___lldiv@dividend& (0+255),f,b
 34362  0061AE  5169               	movf	(___lldiv@divisor+1)& (0+255),w,b
 34363  0061B0  5B65               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 34364  0061B2  516A               	movf	(___lldiv@divisor+2)& (0+255),w,b
 34365  0061B4  5B66               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 34366  0061B6  516B               	movf	(___lldiv@divisor+3)& (0+255),w,b
 34367  0061B8  5B67               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 34368                           
 34369                           ; BSR set to: 0
 34370  0061BA  816C               	bsf	___lldiv@quotient& (0+255),0,b
 34371  0061BC                     l12088:
 34372                           
 34373                           ; BSR set to: 0
 34374  0061BC  90D8               	bcf	status,0,c
 34375  0061BE  336B               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 34376  0061C0  336A               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 34377  0061C2  3369               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 34378  0061C4  3368               	rrcf	___lldiv@divisor& (0+255),f,b
 34379                           
 34380                           ; BSR set to: 0
 34381  0061C6  2F70               	decfsz	___lldiv@counter& (0+255),f,b
 34382  0061C8  D7E2               	goto	l12080
 34383  0061CA                     l2998:
 34384                           
 34385                           ; BSR set to: 0
 34386  0061CA  C06C  F064         	movff	___lldiv@quotient,?___lldiv
 34387  0061CE  C06D  F065         	movff	___lldiv@quotient+1,?___lldiv+1
 34388  0061D2  C06E  F066         	movff	___lldiv@quotient+2,?___lldiv+2
 34389  0061D6  C06F  F067         	movff	___lldiv@quotient+3,?___lldiv+3
 34390                           
 34391                           ; BSR set to: 0
 34392  0061DA  0012               	return		;funcret
 34393  0061DC                     __end_of___lldiv:
 34394                           	opt stack 0
 34395                           tosu	equ	0xFFF
 34396                           tosh	equ	0xFFE
 34397                           tosl	equ	0xFFD
 34398                           pclath	equ	0xFFA
 34399                           tblptru	equ	0xFF8
 34400                           tblptrh	equ	0xFF7
 34401                           tblptrl	equ	0xFF6
 34402                           tablat	equ	0xFF5
 34403                           prodh	equ	0xFF4
 34404                           prodl	equ	0xFF3
 34405                           intcon	equ	0xFF2
 34406                           indf0	equ	0xFEF
 34407                           postinc0	equ	0xFEE
 34408                           plusw0	equ	0xFEB
 34409                           fsr0h	equ	0xFEA
 34410                           fsr0l	equ	0xFE9
 34411                           wreg	equ	0xFE8
 34412                           postinc1	equ	0xFE6
 34413                           postdec1	equ	0xFE5
 34414                           plusw1	equ	0xFE3
 34415                           fsr1h	equ	0xFE2
 34416                           fsr1l	equ	0xFE1
 34417                           indf2	equ	0xFDF
 34418                           postinc2	equ	0xFDE
 34419                           postdec2	equ	0xFDD
 34420                           plusw2	equ	0xFDB
 34421                           fsr2h	equ	0xFDA
 34422                           fsr2l	equ	0xFD9
 34423                           status	equ	0xFD8
 34424                           
 34425 ;; *************** function _SwTimerStop *****************
 34426 ;; Defined at:
 34427 ;;		line 233 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34428 ;; Parameters:    Size  Location     Type
 34429 ;;  timerId         1    wreg     unsigned char 
 34430 ;; Auto vars:     Size  Location     Type
 34431 ;;  timerId         1    4[BANK0 ] unsigned char 
 34432 ;; Return value:  Size  Location     Type
 34433 ;;                  1    wreg      void 
 34434 ;; Registers used:
 34435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 34436 ;; Tracked objects:
 34437 ;;		On entry : C/1
 34438 ;;		On exit  : F/0
 34439 ;;		Unchanged: 0/0
 34440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34441 ;;      Params:         0       0       0       0       0       0       0       0       0
 34442 ;;      Locals:         0       1       0       0       0       0       0       0       0
 34443 ;;      Temps:          0       0       0       0       0       0       0       0       0
 34444 ;;      Totals:         0       1       0       0       0       0       0       0       0
 34445 ;;Total ram usage:        1 bytes
 34446 ;; Hardware stack levels used:    1
 34447 ;; Hardware stack levels required when called:    7
 34448 ;; This function calls:
 34449 ;;		Nothing
 34450 ;; This function is called by:
 34451 ;;		_RADIO_Init
 34452 ;;		_RADIO_Transmit
 34453 ;;		_RADIO_RxDone
 34454 ;;		_RADIO_FSKPayloadReady
 34455 ;;		_RADIO_RxTimeout
 34456 ;;		_RADIO_TxDone
 34457 ;;		_RADIO_FSKPacketSent
 34458 ;;		_RADIO_RxFSKTimeout
 34459 ;;		_LORAWAN_TxDone
 34460 ;;		_StopAllSoftwareTimers
 34461 ;;		_LORAWAN_LinkCheckConfigure
 34462 ;;		_LORAWAN_RxDone
 34463 ;; This function uses a non-reentrant model
 34464 ;;
 34465                           
 34466                           	psect	text179
 34467  0075E6                     __ptext179:
 34468                           	opt stack 0
 34469  0075E6                     _SwTimerStop:
 34470                           	opt stack 20
 34471                           
 34472                           ; BSR set to: 0
 34473                           ;incstack = 0
 34474                           ;SwTimerStop@timerId stored from wreg
 34475  0075E6  0100               	movlb	0	; () banked
 34476  0075E8  6F64               	movwf	SwTimerStop@timerId& (0+255),b
 34477                           
 34478                           ;sw_timer.c: 235: (INTCONbits.GIE = 0);
 34479  0075EA  9EF2               	bcf	intcon,7,c	;volatile
 34480                           
 34481                           ;sw_timer.c: 236: swTimers[timerId].running = 0;
 34482  0075EC  5164               	movf	SwTimerStop@timerId& (0+255),w,b
 34483  0075EE  0D08               	mullw	8
 34484  0075F0  0E04               	movlw	low (_swTimers+4)
 34485  0075F2  24F3               	addwf	prodl,w,c
 34486  0075F4  6ED9               	movwf	fsr2l,c
 34487  0075F6  0E03               	movlw	high (_swTimers+4)
 34488  0075F8  20F4               	addwfc	prodh,w,c
 34489  0075FA  6EDA               	movwf	fsr2h,c
 34490  0075FC  6ADF               	clrf	indf2,c
 34491                           
 34492                           ; BSR set to: 0
 34493                           ;sw_timer.c: 237: (INTCONbits.GIE = 1);
 34494  0075FE  8EF2               	bsf	intcon,7,c	;volatile
 34495                           
 34496                           ; BSR set to: 0
 34497  007600  0C00               	retlw	0	;funcret
 34498  007602                     __end_of_SwTimerStop:
 34499                           	opt stack 0
 34500                           tosu	equ	0xFFF
 34501                           tosh	equ	0xFFE
 34502                           tosl	equ	0xFFD
 34503                           pclath	equ	0xFFA
 34504                           tblptru	equ	0xFF8
 34505                           tblptrh	equ	0xFF7
 34506                           tblptrl	equ	0xFF6
 34507                           tablat	equ	0xFF5
 34508                           prodh	equ	0xFF4
 34509                           prodl	equ	0xFF3
 34510                           intcon	equ	0xFF2
 34511                           indf0	equ	0xFEF
 34512                           postinc0	equ	0xFEE
 34513                           plusw0	equ	0xFEB
 34514                           fsr0h	equ	0xFEA
 34515                           fsr0l	equ	0xFE9
 34516                           wreg	equ	0xFE8
 34517                           postinc1	equ	0xFE6
 34518                           postdec1	equ	0xFE5
 34519                           plusw1	equ	0xFE3
 34520                           fsr1h	equ	0xFE2
 34521                           fsr1l	equ	0xFE1
 34522                           indf2	equ	0xFDF
 34523                           postinc2	equ	0xFDE
 34524                           postdec2	equ	0xFDD
 34525                           plusw2	equ	0xFDB
 34526                           fsr2h	equ	0xFDA
 34527                           fsr2l	equ	0xFD9
 34528                           status	equ	0xFD8
 34529                           
 34530 ;; *************** function _SwTimerStart *****************
 34531 ;; Defined at:
 34532 ;;		line 218 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34533 ;; Parameters:    Size  Location     Type
 34534 ;;  timerId         1    wreg     unsigned char 
 34535 ;; Auto vars:     Size  Location     Type
 34536 ;;  timerId         1   51[BANK0 ] unsigned char 
 34537 ;;  ticksRemaini    4   47[BANK0 ] unsigned long 
 34538 ;; Return value:  Size  Location     Type
 34539 ;;                  1    wreg      void 
 34540 ;; Registers used:
 34541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34542 ;; Tracked objects:
 34543 ;;		On entry : C/2
 34544 ;;		On exit  : F/0
 34545 ;;		Unchanged: 0/0
 34546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34547 ;;      Params:         0       0       0       0       0       0       0       0       0
 34548 ;;      Locals:         0       5       0       0       0       0       0       0       0
 34549 ;;      Temps:          0       4       0       0       0       0       0       0       0
 34550 ;;      Totals:         0       9       0       0       0       0       0       0       0
 34551 ;;Total ram usage:        9 bytes
 34552 ;; Hardware stack levels used:    1
 34553 ;; Hardware stack levels required when called:   10
 34554 ;; This function calls:
 34555 ;;		_SwTimersInterrupt
 34556 ;;		_TMR_OverrideRemaining
 34557 ;; This function is called by:
 34558 ;;		_RADIO_Transmit
 34559 ;;		_RADIO_ReceiveStart
 34560 ;;		_LORAWAN_TxDone
 34561 ;;		_LORAWAN_RxTimeout
 34562 ;;		_StartReTxTimer
 34563 ;;		_DutyCycleCallback
 34564 ;;		_LORAWAN_Join
 34565 ;;		_LORAWAN_LinkCheckConfigure
 34566 ;;		_LORAWAN_LinkCheckCallback
 34567 ;;		_UpdateRetransmissionAckTimeoutState
 34568 ;;		_UpdateJoinSuccessState
 34569 ;; This function uses a non-reentrant model
 34570 ;;
 34571                           
 34572                           	psect	text180
 34573  005D66                     __ptext180:
 34574                           	opt stack 0
 34575  005D66                     _SwTimerStart:
 34576                           	opt stack 17
 34577                           
 34578                           ; BSR set to: 0
 34579                           ;incstack = 0
 34580                           ;SwTimerStart@timerId stored from wreg
 34581  005D66  0100               	movlb	0	; () banked
 34582  005D68  6F93               	movwf	SwTimerStart@timerId& (0+255),b
 34583                           
 34584                           ;sw_timer.c: 220: uint32_t ticksRemaining;
 34585                           ;sw_timer.c: 222: (INTCONbits.GIE = 0);
 34586  005D6A  9EF2               	bcf	intcon,7,c	;volatile
 34587                           
 34588                           ;sw_timer.c: 223: ticksRemaining = SwTimersInterrupt();
 34589  005D6C  ECD6  F025         	call	_SwTimersInterrupt	;wreg free
 34590  005D70  C07A  F08F         	movff	?_SwTimersInterrupt,SwTimerStart@ticksRemaining
 34591  005D74  C07B  F090         	movff	?_SwTimersInterrupt+1,SwTimerStart@ticksRemaining+1
 34592  005D78  C07C  F091         	movff	?_SwTimersInterrupt+2,SwTimerStart@ticksRemaining+2
 34593  005D7C  C07D  F092         	movff	?_SwTimersInterrupt+3,SwTimerStart@ticksRemaining+3
 34594                           
 34595                           ; BSR set to: 0
 34596                           ;sw_timer.c: 224: if (swTimers[timerId].ticksRemaining < ticksRemaining)
 34597  005D80  5193               	movf	SwTimerStart@timerId& (0+255),w,b
 34598  005D82  0D08               	mullw	8
 34599  005D84  0E00               	movlw	low _swTimers
 34600  005D86  24F3               	addwf	prodl,w,c
 34601  005D88  6ED9               	movwf	fsr2l,c
 34602  005D8A  0E03               	movlw	high _swTimers
 34603  005D8C  20F4               	addwfc	prodh,w,c
 34604  005D8E  6EDA               	movwf	fsr2h,c
 34605  005D90  518F               	movf	SwTimerStart@ticksRemaining& (0+255),w,b
 34606  005D92  5CDE               	subwf	postinc2,w,c
 34607  005D94  5190               	movf	(SwTimerStart@ticksRemaining+1)& (0+255),w,b
 34608  005D96  58DE               	subwfb	postinc2,w,c
 34609  005D98  5191               	movf	(SwTimerStart@ticksRemaining+2)& (0+255),w,b
 34610  005D9A  58DE               	subwfb	postinc2,w,c
 34611  005D9C  5192               	movf	(SwTimerStart@ticksRemaining+3)& (0+255),w,b
 34612  005D9E  58DE               	subwfb	postinc2,w,c
 34613  005DA0  E210               	bc	l12414
 34614                           
 34615                           ; BSR set to: 0
 34616                           ;sw_timer.c: 225: {
 34617                           ;sw_timer.c: 226: ticksRemaining = swTimers[timerId].ticksRemaining;
 34618  005DA2  5193               	movf	SwTimerStart@timerId& (0+255),w,b
 34619  005DA4  0D08               	mullw	8
 34620  005DA6  0E00               	movlw	low _swTimers
 34621  005DA8  24F3               	addwf	prodl,w,c
 34622  005DAA  6ED9               	movwf	fsr2l,c
 34623  005DAC  0E03               	movlw	high _swTimers
 34624  005DAE  20F4               	addwfc	prodh,w,c
 34625  005DB0  6EDA               	movwf	fsr2h,c
 34626  005DB2  CFDE F08F          	movff	postinc2,SwTimerStart@ticksRemaining
 34627  005DB6  CFDE F090          	movff	postinc2,SwTimerStart@ticksRemaining+1
 34628  005DBA  CFDE F091          	movff	postinc2,SwTimerStart@ticksRemaining+2
 34629  005DBE  CFDE F092          	movff	postinc2,SwTimerStart@ticksRemaining+3
 34630  005DC2                     l12414:
 34631                           
 34632                           ; BSR set to: 0
 34633                           ;sw_timer.c: 227: }
 34634                           ;sw_timer.c: 228: TMR_OverrideRemaining(ticksRemaining);
 34635  005DC2  C08F  F06C         	movff	SwTimerStart@ticksRemaining,TMR_OverrideRemaining@ticksRemaining
 34636  005DC6  C090  F06D         	movff	SwTimerStart@ticksRemaining+1,TMR_OverrideRemaining@ticksRemaining+1
 34637  005DCA  C091  F06E         	movff	SwTimerStart@ticksRemaining+2,TMR_OverrideRemaining@ticksRemaining+2
 34638  005DCE  C092  F06F         	movff	SwTimerStart@ticksRemaining+3,TMR_OverrideRemaining@ticksRemaining+3
 34639  005DD2  EC75  F030         	call	_TMR_OverrideRemaining	;wreg free
 34640                           
 34641                           ; BSR set to: 0
 34642                           ;sw_timer.c: 229: swTimers[timerId].running = 1;
 34643  005DD6  5193               	movf	SwTimerStart@timerId& (0+255),w,b
 34644  005DD8  0D08               	mullw	8
 34645  005DDA  0E04               	movlw	low (_swTimers+4)
 34646  005DDC  24F3               	addwf	prodl,w,c
 34647  005DDE  6ED9               	movwf	fsr2l,c
 34648  005DE0  0E03               	movlw	high (_swTimers+4)
 34649  005DE2  20F4               	addwfc	prodh,w,c
 34650  005DE4  6EDA               	movwf	fsr2h,c
 34651  005DE6  0E01               	movlw	1
 34652  005DE8  6EDF               	movwf	indf2,c
 34653                           
 34654                           ; BSR set to: 0
 34655                           ;sw_timer.c: 230: (INTCONbits.GIE = 1);
 34656  005DEA  8EF2               	bsf	intcon,7,c	;volatile
 34657                           
 34658                           ; BSR set to: 0
 34659  005DEC  0C01               	retlw	1	;funcret
 34660  005DEE                     __end_of_SwTimerStart:
 34661                           	opt stack 0
 34662                           tosu	equ	0xFFF
 34663                           tosh	equ	0xFFE
 34664                           tosl	equ	0xFFD
 34665                           pclath	equ	0xFFA
 34666                           tblptru	equ	0xFF8
 34667                           tblptrh	equ	0xFF7
 34668                           tblptrl	equ	0xFF6
 34669                           tablat	equ	0xFF5
 34670                           prodh	equ	0xFF4
 34671                           prodl	equ	0xFF3
 34672                           intcon	equ	0xFF2
 34673                           indf0	equ	0xFEF
 34674                           postinc0	equ	0xFEE
 34675                           plusw0	equ	0xFEB
 34676                           fsr0h	equ	0xFEA
 34677                           fsr0l	equ	0xFE9
 34678                           wreg	equ	0xFE8
 34679                           postinc1	equ	0xFE6
 34680                           postdec1	equ	0xFE5
 34681                           plusw1	equ	0xFE3
 34682                           fsr1h	equ	0xFE2
 34683                           fsr1l	equ	0xFE1
 34684                           indf2	equ	0xFDF
 34685                           postinc2	equ	0xFDE
 34686                           postdec2	equ	0xFDD
 34687                           plusw2	equ	0xFDB
 34688                           fsr2h	equ	0xFDA
 34689                           fsr2l	equ	0xFD9
 34690                           status	equ	0xFD8
 34691                           
 34692 ;; *************** function _TMR_OverrideRemaining *****************
 34693 ;; Defined at:
 34694 ;;		line 65 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34695 ;; Parameters:    Size  Location     Type
 34696 ;;  ticksRemaini    4   12[BANK0 ] unsigned long 
 34697 ;; Auto vars:     Size  Location     Type
 34698 ;;  oldReloadVal    2   20[BANK0 ] unsigned int 
 34699 ;;  tmrVal          2   18[BANK0 ] unsigned int 
 34700 ;; Return value:  Size  Location     Type
 34701 ;;                  1    wreg      void 
 34702 ;; Registers used:
 34703 ;;		wreg, status,2, status,0, cstack
 34704 ;; Tracked objects:
 34705 ;;		On entry : F/0
 34706 ;;		On exit  : F/0
 34707 ;;		Unchanged: 0/0
 34708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34709 ;;      Params:         0       4       0       0       0       0       0       0       0
 34710 ;;      Locals:         0       4       0       0       0       0       0       0       0
 34711 ;;      Temps:          0       2       0       0       0       0       0       0       0
 34712 ;;      Totals:         0      10       0       0       0       0       0       0       0
 34713 ;;Total ram usage:       10 bytes
 34714 ;; Hardware stack levels used:    1
 34715 ;; Hardware stack levels required when called:    9
 34716 ;; This function calls:
 34717 ;;		_TMR_SwapTimer
 34718 ;; This function is called by:
 34719 ;;		_SwTimerStart
 34720 ;; This function uses a non-reentrant model
 34721 ;;
 34722                           
 34723                           	psect	text181
 34724  0060EA                     __ptext181:
 34725                           	opt stack 0
 34726  0060EA                     _TMR_OverrideRemaining:
 34727                           	opt stack 17
 34728                           
 34729                           ; BSR set to: 0
 34730                           ;sw_timer.c: 67: uint16_t tmrVal;
 34731                           ;sw_timer.c: 68: uint16_t oldReloadVal;
 34732                           ;sw_timer.c: 71: if (ticksToScheduledInterrupt > 10)
 34733                           
 34734                           ; BSR set to: 0
 34735                           ;incstack = 0
 34736  0060EA  505D               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 34737  0060EC  105C               	iorwf	_ticksToScheduledInterrupt+2,w,c	;volatile
 34738  0060EE  105B               	iorwf	_ticksToScheduledInterrupt+1,w,c	;volatile
 34739  0060F0  E104               	bnz	u12840
 34740  0060F2  0E0B               	movlw	11
 34741  0060F4  5C5A               	subwf	_ticksToScheduledInterrupt,w,c	;volatile
 34742  0060F6  A0D8               	btfss	status,0,c
 34743  0060F8  0012               	return	
 34744  0060FA                     u12840:
 34745                           
 34746                           ; BSR set to: 0
 34747                           ;sw_timer.c: 72: {
 34748                           ;sw_timer.c: 73: if (ticksRemaining < ticksToScheduledInterrupt)
 34749  0060FA  505A               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 34750  0060FC  5D6C               	subwf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 34751  0060FE  505B               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 34752  006100  596D               	subwfb	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 34753  006102  505C               	movf	_ticksToScheduledInterrupt+2,w,c	;volatile
 34754  006104  596E               	subwfb	(TMR_OverrideRemaining@ticksRemaining+2)& (0+255),w,b
 34755  006106  505D               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 34756  006108  596F               	subwfb	(TMR_OverrideRemaining@ticksRemaining+3)& (0+255),w,b
 34757  00610A  B0D8               	btfsc	status,0,c
 34758  00610C  0012               	return	
 34759                           
 34760                           ; BSR set to: 0
 34761                           ;sw_timer.c: 74: {
 34762                           ;sw_timer.c: 75: ticksToScheduledInterrupt = ticksRemaining;
 34763  00610E  C06C  F05A         	movff	TMR_OverrideRemaining@ticksRemaining,_ticksToScheduledInterrupt	;volatile
 34764  006112  C06D  F05B         	movff	TMR_OverrideRemaining@ticksRemaining+1,_ticksToScheduledInterrupt+1	;volatile
 34765  006116  C06E  F05C         	movff	TMR_OverrideRemaining@ticksRemaining+2,_ticksToScheduledInterrupt+2	;volatile
 34766  00611A  C06F  F05D         	movff	TMR_OverrideRemaining@ticksRemaining+3,_ticksToScheduledInterrupt+3	;volatile
 34767                           
 34768                           ;sw_timer.c: 76: oldReloadVal = reloadVal;
 34769  00611E  C044  F074         	movff	_reloadVal,TMR_OverrideRemaining@oldReloadVal	;volatile
 34770  006122  C045  F075         	movff	_reloadVal+1,TMR_OverrideRemaining@oldReloadVal+1	;volatile
 34771                           
 34772                           ; BSR set to: 0
 34773                           ;sw_timer.c: 78: reloadVal = ((uint32_t)0x10000) - ticksRemaining;
 34774  006126  516C               	movf	TMR_OverrideRemaining@ticksRemaining& (0+255),w,b
 34775  006128  0800               	sublw	0
 34776  00612A  6E44               	movwf	_reloadVal,c	;volatile
 34777  00612C  516D               	movf	(TMR_OverrideRemaining@ticksRemaining+1)& (0+255),w,b
 34778  00612E  A0D8               	btfss	status,0,c
 34779  006130  2AE8               	incf	wreg,f,c
 34780  006132  0800               	sublw	0
 34781  006134  6E45               	movwf	_reloadVal+1,c	;volatile
 34782                           
 34783                           ; BSR set to: 0
 34784                           ;sw_timer.c: 79: tmrVal = TMR_SwapTimer(reloadVal);
 34785  006136  C044  F06A         	movff	_reloadVal,TMR_SwapTimer@timerVal	;volatile
 34786  00613A  C045  F06B         	movff	_reloadVal+1,TMR_SwapTimer@timerVal+1	;volatile
 34787  00613E  EC49  F037         	call	_TMR_SwapTimer	;wreg free
 34788  006142  C06A  F072         	movff	?_TMR_SwapTimer,TMR_OverrideRemaining@tmrVal
 34789  006146  C06B  F073         	movff	?_TMR_SwapTimer+1,TMR_OverrideRemaining@tmrVal+1
 34790                           
 34791                           ; BSR set to: 0
 34792                           ;sw_timer.c: 80: ticksAdded += tmrVal - oldReloadVal;
 34793  00614A  5174               	movf	TMR_OverrideRemaining@oldReloadVal& (0+255),w,b
 34794  00614C  5D72               	subwf	TMR_OverrideRemaining@tmrVal& (0+255),w,b
 34795  00614E  6F70               	movwf	??_TMR_OverrideRemaining& (0+255),b
 34796  006150  5175               	movf	(TMR_OverrideRemaining@oldReloadVal+1)& (0+255),w,b
 34797  006152  5973               	subwfb	(TMR_OverrideRemaining@tmrVal+1)& (0+255),w,b
 34798  006154  6F71               	movwf	(??_TMR_OverrideRemaining+1)& (0+255),b
 34799  006156  5170               	movf	??_TMR_OverrideRemaining& (0+255),w,b
 34800  006158  2638               	addwf	_ticksAdded,f,c	;volatile
 34801  00615A  5171               	movf	(??_TMR_OverrideRemaining+1)& (0+255),w,b
 34802  00615C  2239               	addwfc	_ticksAdded+1,f,c	;volatile
 34803  00615E  0E00               	movlw	0
 34804  006160  223A               	addwfc	_ticksAdded+2,f,c	;volatile
 34805  006162  223B               	addwfc	_ticksAdded+3,f,c	;volatile
 34806                           
 34807                           ; BSR set to: 0
 34808  006164  0C00               	retlw	0	;funcret
 34809  006166                     __end_of_TMR_OverrideRemaining:
 34810                           	opt stack 0
 34811                           tosu	equ	0xFFF
 34812                           tosh	equ	0xFFE
 34813                           tosl	equ	0xFFD
 34814                           pclath	equ	0xFFA
 34815                           tblptru	equ	0xFF8
 34816                           tblptrh	equ	0xFF7
 34817                           tblptrl	equ	0xFF6
 34818                           tablat	equ	0xFF5
 34819                           prodh	equ	0xFF4
 34820                           prodl	equ	0xFF3
 34821                           intcon	equ	0xFF2
 34822                           indf0	equ	0xFEF
 34823                           postinc0	equ	0xFEE
 34824                           plusw0	equ	0xFEB
 34825                           fsr0h	equ	0xFEA
 34826                           fsr0l	equ	0xFE9
 34827                           wreg	equ	0xFE8
 34828                           postinc1	equ	0xFE6
 34829                           postdec1	equ	0xFE5
 34830                           plusw1	equ	0xFE3
 34831                           fsr1h	equ	0xFE2
 34832                           fsr1l	equ	0xFE1
 34833                           indf2	equ	0xFDF
 34834                           postinc2	equ	0xFDE
 34835                           postdec2	equ	0xFDD
 34836                           plusw2	equ	0xFDB
 34837                           fsr2h	equ	0xFDA
 34838                           fsr2l	equ	0xFD9
 34839                           status	equ	0xFD8
 34840                           
 34841 ;; *************** function _TMR_SwapTimer *****************
 34842 ;; Defined at:
 34843 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 34844 ;; Parameters:    Size  Location     Type
 34845 ;;  timerVal        2   10[BANK0 ] unsigned int 
 34846 ;; Auto vars:     Size  Location     Type
 34847 ;;		None
 34848 ;; Return value:  Size  Location     Type
 34849 ;;                  2   10[BANK0 ] unsigned int 
 34850 ;; Registers used:
 34851 ;;		wreg, status,2, status,0, cstack
 34852 ;; Tracked objects:
 34853 ;;		On entry : F/0
 34854 ;;		On exit  : F/0
 34855 ;;		Unchanged: 0/0
 34856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34857 ;;      Params:         0       2       0       0       0       0       0       0       0
 34858 ;;      Locals:         0       0       0       0       0       0       0       0       0
 34859 ;;      Temps:          0       0       0       0       0       0       0       0       0
 34860 ;;      Totals:         0       2       0       0       0       0       0       0       0
 34861 ;;Total ram usage:        2 bytes
 34862 ;; Hardware stack levels used:    1
 34863 ;; Hardware stack levels required when called:    8
 34864 ;; This function calls:
 34865 ;;		_TMR1_ReadTimer
 34866 ;;		_TMR1_WriteTimer
 34867 ;; This function is called by:
 34868 ;;		_TMR_OverrideRemaining
 34869 ;; This function uses a non-reentrant model
 34870 ;;
 34871                           
 34872                           	psect	text182
 34873  006E92                     __ptext182:
 34874                           	opt stack 0
 34875  006E92                     _TMR_SwapTimer:
 34876                           	opt stack 17
 34877                           
 34878                           ; BSR set to: 0
 34879                           ;sw_timer.c: 114: static uint16_t oldVal;
 34880                           ;sw_timer.c: 115: static uint16_t retVal;
 34881                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 34882                           
 34883                           ; BSR set to: 0
 34884                           ;incstack = 0
 34885  006E92  EC4D  F03A         	call	_TMR1_ReadTimer	;wreg free
 34886  006E96  C064  F040         	movff	?_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 34887  006E9A  C065  F041         	movff	?_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 34888  006E9E                     l11892:
 34889                           
 34890                           ; BSR set to: 0
 34891  006E9E  EC4D  F03A         	call	_TMR1_ReadTimer	;wreg free
 34892  006EA2  5040               	movf	TMR_SwapTimer@oldVal,w,c
 34893  006EA4  1964               	xorwf	?_TMR1_ReadTimer& (0+255),w,b
 34894  006EA6  E103               	bnz	u12620
 34895  006EA8  5041               	movf	TMR_SwapTimer@oldVal+1,w,c
 34896  006EAA  1965               	xorwf	(?_TMR1_ReadTimer+1)& (0+255),w,b
 34897  006EAC  E0F8               	bz	l11892
 34898  006EAE                     u12620:
 34899                           
 34900                           ; BSR set to: 0
 34901                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 34902  006EAE  C06A  F064         	movff	TMR_SwapTimer@timerVal,TMR1_WriteTimer@timerVal
 34903  006EB2  C06B  F065         	movff	TMR_SwapTimer@timerVal+1,TMR1_WriteTimer@timerVal+1
 34904  006EB6  EC01  F03B         	call	_TMR1_WriteTimer	;wreg free
 34905                           
 34906                           ; BSR set to: 0
 34907                           ;sw_timer.c: 128: oldVal++;
 34908  006EBA  4A40               	infsnz	TMR_SwapTimer@oldVal,f,c
 34909  006EBC  2A41               	incf	TMR_SwapTimer@oldVal+1,f,c
 34910                           
 34911                           ; BSR set to: 0
 34912                           ;sw_timer.c: 130: retVal = oldVal;
 34913  006EBE  C040  F042         	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 34914  006EC2  C041  F043         	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 34915                           
 34916                           ; BSR set to: 0
 34917                           ;sw_timer.c: 132: return retVal;
 34918  006EC6  C042  F06A         	movff	TMR_SwapTimer@retVal,?_TMR_SwapTimer
 34919  006ECA  C043  F06B         	movff	TMR_SwapTimer@retVal+1,?_TMR_SwapTimer+1
 34920                           
 34921                           ; BSR set to: 0
 34922  006ECE  0012               	return		;funcret
 34923  006ED0                     __end_of_TMR_SwapTimer:
 34924                           	opt stack 0
 34925                           tosu	equ	0xFFF
 34926                           tosh	equ	0xFFE
 34927                           tosl	equ	0xFFD
 34928                           pclath	equ	0xFFA
 34929                           tblptru	equ	0xFF8
 34930                           tblptrh	equ	0xFF7
 34931                           tblptrl	equ	0xFF6
 34932                           tablat	equ	0xFF5
 34933                           prodh	equ	0xFF4
 34934                           prodl	equ	0xFF3
 34935                           intcon	equ	0xFF2
 34936                           indf0	equ	0xFEF
 34937                           postinc0	equ	0xFEE
 34938                           plusw0	equ	0xFEB
 34939                           fsr0h	equ	0xFEA
 34940                           fsr0l	equ	0xFE9
 34941                           wreg	equ	0xFE8
 34942                           postinc1	equ	0xFE6
 34943                           postdec1	equ	0xFE5
 34944                           plusw1	equ	0xFE3
 34945                           fsr1h	equ	0xFE2
 34946                           fsr1l	equ	0xFE1
 34947                           indf2	equ	0xFDF
 34948                           postinc2	equ	0xFDE
 34949                           postdec2	equ	0xFDD
 34950                           plusw2	equ	0xFDB
 34951                           fsr2h	equ	0xFDA
 34952                           fsr2l	equ	0xFD9
 34953                           status	equ	0xFD8
 34954                           
 34955 ;; *************** function _TMR1_WriteTimer *****************
 34956 ;; Defined at:
 34957 ;;		line 122 in file "mcc_generated_files/tmr1.c"
 34958 ;; Parameters:    Size  Location     Type
 34959 ;;  timerVal        2    4[BANK0 ] unsigned int 
 34960 ;; Auto vars:     Size  Location     Type
 34961 ;;		None
 34962 ;; Return value:  Size  Location     Type
 34963 ;;                  1    wreg      void 
 34964 ;; Registers used:
 34965 ;;		None
 34966 ;; Tracked objects:
 34967 ;;		On entry : F/0
 34968 ;;		On exit  : F/0
 34969 ;;		Unchanged: F/0
 34970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 34971 ;;      Params:         0       2       0       0       0       0       0       0       0
 34972 ;;      Locals:         0       0       0       0       0       0       0       0       0
 34973 ;;      Temps:          0       0       0       0       0       0       0       0       0
 34974 ;;      Totals:         0       2       0       0       0       0       0       0       0
 34975 ;;Total ram usage:        2 bytes
 34976 ;; Hardware stack levels used:    1
 34977 ;; Hardware stack levels required when called:    7
 34978 ;; This function calls:
 34979 ;;		Nothing
 34980 ;; This function is called by:
 34981 ;;		_TMR_SwapTimer
 34982 ;; This function uses a non-reentrant model
 34983 ;;
 34984                           
 34985                           	psect	text183
 34986  007602                     __ptext183:
 34987                           	opt stack 0
 34988  007602                     _TMR1_WriteTimer:
 34989                           	opt stack 17
 34990                           
 34991                           ; BSR set to: 0
 34992                           ;tmr1.c: 124: if (T1CONbits.nT1SYNC == 1)
 34993                           
 34994                           ; BSR set to: 0
 34995                           ;incstack = 0
 34996  007602  A4CF               	btfss	4047,2,c	;volatile
 34997  007604  D007               	goto	l1368
 34998                           
 34999                           ; BSR set to: 0
 35000                           ;tmr1.c: 125: {
 35001                           ;tmr1.c: 127: T1CONbits.TMR1ON = 0;
 35002  007606  90CF               	bcf	4047,0,c	;volatile
 35003                           
 35004                           ;tmr1.c: 130: TMR1H = (timerVal >> 8);
 35005  007608  C065  FFCE         	movff	TMR1_WriteTimer@timerVal+1,4046	;volatile
 35006                           
 35007                           ;tmr1.c: 131: TMR1L = timerVal;
 35008  00760C  C064  FFCD         	movff	TMR1_WriteTimer@timerVal,4045	;volatile
 35009                           
 35010                           ;tmr1.c: 134: T1CONbits.TMR1ON =1;
 35011  007610  80CF               	bsf	4047,0,c	;volatile
 35012                           
 35013                           ;tmr1.c: 135: }
 35014  007612  0012               	return	
 35015  007614                     l1368:
 35016                           
 35017                           ; BSR set to: 0
 35018                           ;tmr1.c: 136: else
 35019                           ;tmr1.c: 137: {
 35020                           ;tmr1.c: 139: TMR1H = (timerVal >> 8);
 35021  007614  C065  FFCE         	movff	TMR1_WriteTimer@timerVal+1,4046	;volatile
 35022                           
 35023                           ;tmr1.c: 140: TMR1L = timerVal;
 35024  007618  C064  FFCD         	movff	TMR1_WriteTimer@timerVal,4045	;volatile
 35025                           
 35026                           ; BSR set to: 0
 35027  00761C  0012               	return		;funcret
 35028  00761E                     __end_of_TMR1_WriteTimer:
 35029                           	opt stack 0
 35030                           tosu	equ	0xFFF
 35031                           tosh	equ	0xFFE
 35032                           tosl	equ	0xFFD
 35033                           pclath	equ	0xFFA
 35034                           tblptru	equ	0xFF8
 35035                           tblptrh	equ	0xFF7
 35036                           tblptrl	equ	0xFF6
 35037                           tablat	equ	0xFF5
 35038                           prodh	equ	0xFF4
 35039                           prodl	equ	0xFF3
 35040                           intcon	equ	0xFF2
 35041                           indf0	equ	0xFEF
 35042                           postinc0	equ	0xFEE
 35043                           plusw0	equ	0xFEB
 35044                           fsr0h	equ	0xFEA
 35045                           fsr0l	equ	0xFE9
 35046                           wreg	equ	0xFE8
 35047                           postinc1	equ	0xFE6
 35048                           postdec1	equ	0xFE5
 35049                           plusw1	equ	0xFE3
 35050                           fsr1h	equ	0xFE2
 35051                           fsr1l	equ	0xFE1
 35052                           indf2	equ	0xFDF
 35053                           postinc2	equ	0xFDE
 35054                           postdec2	equ	0xFDD
 35055                           plusw2	equ	0xFDB
 35056                           fsr2h	equ	0xFDA
 35057                           fsr2l	equ	0xFD9
 35058                           status	equ	0xFD8
 35059                           
 35060 ;; *************** function _SwTimersInterrupt *****************
 35061 ;; Defined at:
 35062 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35063 ;; Parameters:    Size  Location     Type
 35064 ;;		None
 35065 ;; Auto vars:     Size  Location     Type
 35066 ;;  ticksToNextT    4   38[BANK0 ] unsigned long 
 35067 ;;  timeElapsed     4   34[BANK0 ] unsigned long 
 35068 ;;  i               1   42[BANK0 ] unsigned char 
 35069 ;; Return value:  Size  Location     Type
 35070 ;;                  4   26[BANK0 ] unsigned long 
 35071 ;; Registers used:
 35072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 35073 ;; Tracked objects:
 35074 ;;		On entry : 0/0
 35075 ;;		On exit  : F/0
 35076 ;;		Unchanged: 0/0
 35077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35078 ;;      Params:         0       4       0       0       0       0       0       0       0
 35079 ;;      Locals:         0       9       0       0       0       0       0       0       0
 35080 ;;      Temps:          0       4       0       0       0       0       0       0       0
 35081 ;;      Totals:         0      17       0       0       0       0       0       0       0
 35082 ;;Total ram usage:       17 bytes
 35083 ;; Hardware stack levels used:    1
 35084 ;; Hardware stack levels required when called:    9
 35085 ;; This function calls:
 35086 ;;		_TMR_GetDeltaTime
 35087 ;; This function is called by:
 35088 ;;		_SwTimerReadValue
 35089 ;;		_SwTimerStart
 35090 ;; This function uses a non-reentrant model
 35091 ;;
 35092                           
 35093                           	psect	text184
 35094  004BAC                     __ptext184:
 35095                           	opt stack 0
 35096  004BAC                     _SwTimersInterrupt:
 35097                           	opt stack 17
 35098                           
 35099                           ;sw_timer.c: 289: uint8_t i;
 35100                           ;sw_timer.c: 290: uint32_t timeElapsed;
 35101                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 35102                           
 35103                           ; BSR set to: 0
 35104                           ;incstack = 0
 35105  004BAC  0100               	movlb	0	; () banked
 35106  004BAE  6986               	setf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),b
 35107  004BB0  6987               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),b
 35108  004BB2  6988               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),b
 35109  004BB4  6989               	setf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),b
 35110                           
 35111                           ; BSR set to: 0
 35112                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 35113  004BB6  ECC6  F026         	call	_TMR_GetDeltaTime	;wreg free
 35114  004BBA  C06A  F082         	movff	?_TMR_GetDeltaTime,SwTimersInterrupt@timeElapsed
 35115  004BBE  C06B  F083         	movff	?_TMR_GetDeltaTime+1,SwTimersInterrupt@timeElapsed+1
 35116  004BC2  C06C  F084         	movff	?_TMR_GetDeltaTime+2,SwTimersInterrupt@timeElapsed+2
 35117  004BC6  C06D  F085         	movff	?_TMR_GetDeltaTime+3,SwTimersInterrupt@timeElapsed+3
 35118                           
 35119                           ; BSR set to: 0
 35120                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 35121  004BCA  6B8A               	clrf	SwTimersInterrupt@i& (0+255),b
 35122  004BCC  D05A               	goto	l12138
 35123  004BCE                     l12126:
 35124                           
 35125                           ; BSR set to: 0
 35126                           ;sw_timer.c: 298: {
 35127                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 35128  004BCE  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35129  004BD0  0D08               	mullw	8
 35130  004BD2  0E04               	movlw	low (_swTimers+4)
 35131  004BD4  24F3               	addwf	prodl,w,c
 35132  004BD6  6ED9               	movwf	fsr2l,c
 35133  004BD8  0E03               	movlw	high (_swTimers+4)
 35134  004BDA  20F4               	addwfc	prodh,w,c
 35135  004BDC  6EDA               	movwf	fsr2h,c
 35136  004BDE  04DE               	decf	postinc2,w,c
 35137  004BE0  E14F               	bnz	l12136
 35138                           
 35139                           ; BSR set to: 0
 35140                           ;sw_timer.c: 302: {
 35141                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 35142  004BE2  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35143  004BE4  0D08               	mullw	8
 35144  004BE6  0E00               	movlw	low _swTimers
 35145  004BE8  24F3               	addwf	prodl,w,c
 35146  004BEA  6ED9               	movwf	fsr2l,c
 35147  004BEC  0E03               	movlw	high _swTimers
 35148  004BEE  20F4               	addwfc	prodh,w,c
 35149  004BF0  6EDA               	movwf	fsr2h,c
 35150  004BF2  50DE               	movf	postinc2,w,c
 35151  004BF4  5D82               	subwf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 35152  004BF6  50DE               	movf	postinc2,w,c
 35153  004BF8  5983               	subwfb	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 35154  004BFA  50DE               	movf	postinc2,w,c
 35155  004BFC  5984               	subwfb	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 35156  004BFE  50DE               	movf	postinc2,w,c
 35157  004C00  5985               	subwfb	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 35158  004C02  E30D               	bnc	l12132
 35159                           
 35160                           ; BSR set to: 0
 35161                           ;sw_timer.c: 304: {
 35162                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 35163  004C04  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35164  004C06  0D08               	mullw	8
 35165  004C08  0E00               	movlw	low _swTimers
 35166  004C0A  24F3               	addwf	prodl,w,c
 35167  004C0C  6ED9               	movwf	fsr2l,c
 35168  004C0E  0E03               	movlw	high _swTimers
 35169  004C10  20F4               	addwfc	prodh,w,c
 35170  004C12  6EDA               	movwf	fsr2h,c
 35171  004C14  6ADE               	clrf	postinc2,c
 35172  004C16  6ADE               	clrf	postinc2,c
 35173  004C18  6ADE               	clrf	postinc2,c
 35174  004C1A  6ADD               	clrf	postdec2,c
 35175                           
 35176                           ;sw_timer.c: 306: }
 35177  004C1C  D031               	goto	l12136
 35178  004C1E                     l12132:
 35179                           
 35180                           ; BSR set to: 0
 35181                           ;sw_timer.c: 307: else
 35182                           ;sw_timer.c: 308: {
 35183                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 35184  004C1E  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35185  004C20  0D08               	mullw	8
 35186  004C22  0E00               	movlw	low _swTimers
 35187  004C24  24F3               	addwf	prodl,w,c
 35188  004C26  6ED9               	movwf	fsr2l,c
 35189  004C28  0E03               	movlw	high _swTimers
 35190  004C2A  20F4               	addwfc	prodh,w,c
 35191  004C2C  6EDA               	movwf	fsr2h,c
 35192  004C2E  5182               	movf	SwTimersInterrupt@timeElapsed& (0+255),w,b
 35193  004C30  5EDE               	subwf	postinc2,f,c
 35194  004C32  5183               	movf	(SwTimersInterrupt@timeElapsed+1)& (0+255),w,b
 35195  004C34  5ADE               	subwfb	postinc2,f,c
 35196  004C36  5184               	movf	(SwTimersInterrupt@timeElapsed+2)& (0+255),w,b
 35197  004C38  5ADE               	subwfb	postinc2,f,c
 35198  004C3A  5185               	movf	(SwTimersInterrupt@timeElapsed+3)& (0+255),w,b
 35199  004C3C  5ADE               	subwfb	postinc2,f,c
 35200                           
 35201                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 35202  004C3E  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35203  004C40  0D08               	mullw	8
 35204  004C42  0E00               	movlw	low _swTimers
 35205  004C44  24F3               	addwf	prodl,w,c
 35206  004C46  6ED9               	movwf	fsr2l,c
 35207  004C48  0E03               	movlw	high _swTimers
 35208  004C4A  20F4               	addwfc	prodh,w,c
 35209  004C4C  6EDA               	movwf	fsr2h,c
 35210  004C4E  5186               	movf	SwTimersInterrupt@ticksToNextTimerEvent& (0+255),w,b
 35211  004C50  5CDE               	subwf	postinc2,w,c
 35212  004C52  5187               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+1)& (0+255),w,b
 35213  004C54  58DE               	subwfb	postinc2,w,c
 35214  004C56  5188               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+2)& (0+255),w,b
 35215  004C58  58DE               	subwfb	postinc2,w,c
 35216  004C5A  5189               	movf	(SwTimersInterrupt@ticksToNextTimerEvent+3)& (0+255),w,b
 35217  004C5C  58DE               	subwfb	postinc2,w,c
 35218  004C5E  E210               	bc	l12136
 35219                           
 35220                           ; BSR set to: 0
 35221                           ;sw_timer.c: 313: {
 35222                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 35223  004C60  518A               	movf	SwTimersInterrupt@i& (0+255),w,b
 35224  004C62  0D08               	mullw	8
 35225  004C64  0E00               	movlw	low _swTimers
 35226  004C66  24F3               	addwf	prodl,w,c
 35227  004C68  6ED9               	movwf	fsr2l,c
 35228  004C6A  0E03               	movlw	high _swTimers
 35229  004C6C  20F4               	addwfc	prodh,w,c
 35230  004C6E  6EDA               	movwf	fsr2h,c
 35231  004C70  CFDE F086          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent
 35232  004C74  CFDE F087          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+1
 35233  004C78  CFDE F088          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+2
 35234  004C7C  CFDE F089          	movff	postinc2,SwTimersInterrupt@ticksToNextTimerEvent+3
 35235  004C80                     l12136:
 35236                           
 35237                           ; BSR set to: 0
 35238  004C80  2B8A               	incf	SwTimersInterrupt@i& (0+255),f,b
 35239  004C82                     l12138:
 35240                           
 35241                           ; BSR set to: 0
 35242  004C82  0101               	movlb	1	; () banked
 35243  004C84  5173               	movf	_allocatedTimers& (0+255),w,b	;volatile
 35244  004C86  0100               	movlb	0	; () banked
 35245  004C88  5D8A               	subwf	SwTimersInterrupt@i& (0+255),w,b
 35246  004C8A  E3A1               	bnc	l12126
 35247                           
 35248                           ; BSR set to: 0
 35249                           ;sw_timer.c: 315: }
 35250                           ;sw_timer.c: 316: }
 35251                           ;sw_timer.c: 317: }
 35252                           ;sw_timer.c: 318: }
 35253                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 35254  004C8C  C086  F07A         	movff	SwTimersInterrupt@ticksToNextTimerEvent,?_SwTimersInterrupt
 35255  004C90  C087  F07B         	movff	SwTimersInterrupt@ticksToNextTimerEvent+1,?_SwTimersInterrupt+1
 35256  004C94  C088  F07C         	movff	SwTimersInterrupt@ticksToNextTimerEvent+2,?_SwTimersInterrupt+2
 35257  004C98  C089  F07D         	movff	SwTimersInterrupt@ticksToNextTimerEvent+3,?_SwTimersInterrupt+3
 35258                           
 35259                           ; BSR set to: 0
 35260  004C9C  0012               	return		;funcret
 35261  004C9E                     __end_of_SwTimersInterrupt:
 35262                           	opt stack 0
 35263                           tosu	equ	0xFFF
 35264                           tosh	equ	0xFFE
 35265                           tosl	equ	0xFFD
 35266                           pclath	equ	0xFFA
 35267                           tblptru	equ	0xFF8
 35268                           tblptrh	equ	0xFF7
 35269                           tblptrl	equ	0xFF6
 35270                           tablat	equ	0xFF5
 35271                           prodh	equ	0xFF4
 35272                           prodl	equ	0xFF3
 35273                           intcon	equ	0xFF2
 35274                           indf0	equ	0xFEF
 35275                           postinc0	equ	0xFEE
 35276                           plusw0	equ	0xFEB
 35277                           fsr0h	equ	0xFEA
 35278                           fsr0l	equ	0xFE9
 35279                           wreg	equ	0xFE8
 35280                           postinc1	equ	0xFE6
 35281                           postdec1	equ	0xFE5
 35282                           plusw1	equ	0xFE3
 35283                           fsr1h	equ	0xFE2
 35284                           fsr1l	equ	0xFE1
 35285                           indf2	equ	0xFDF
 35286                           postinc2	equ	0xFDE
 35287                           postdec2	equ	0xFDD
 35288                           plusw2	equ	0xFDB
 35289                           fsr2h	equ	0xFDA
 35290                           fsr2l	equ	0xFD9
 35291                           status	equ	0xFD8
 35292                           
 35293 ;; *************** function _TMR_GetDeltaTime *****************
 35294 ;; Defined at:
 35295 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35296 ;; Parameters:    Size  Location     Type
 35297 ;;		None
 35298 ;; Auto vars:     Size  Location     Type
 35299 ;;		None
 35300 ;; Return value:  Size  Location     Type
 35301 ;;                  4   10[BANK0 ] unsigned long 
 35302 ;; Registers used:
 35303 ;;		wreg, status,2, status,0, cstack
 35304 ;; Tracked objects:
 35305 ;;		On entry : F/0
 35306 ;;		On exit  : F/0
 35307 ;;		Unchanged: 0/0
 35308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35309 ;;      Params:         0       4       0       0       0       0       0       0       0
 35310 ;;      Locals:         0       0       0       0       0       0       0       0       0
 35311 ;;      Temps:          0      12       0       0       0       0       0       0       0
 35312 ;;      Totals:         0      16       0       0       0       0       0       0       0
 35313 ;;Total ram usage:       16 bytes
 35314 ;; Hardware stack levels used:    1
 35315 ;; Hardware stack levels required when called:    8
 35316 ;; This function calls:
 35317 ;;		_TMR1_ReadTimer
 35318 ;; This function is called by:
 35319 ;;		_SwTimersInterrupt
 35320 ;; This function uses a non-reentrant model
 35321 ;;
 35322                           
 35323                           	psect	text185
 35324  004D8C                     __ptext185:
 35325                           	opt stack 0
 35326  004D8C                     _TMR_GetDeltaTime:
 35327                           	opt stack 17
 35328                           
 35329                           ; BSR set to: 0
 35330                           ;sw_timer.c: 90: static uint32_t retVal;
 35331                           ;sw_timer.c: 91: static uint16_t tmrVal;
 35332                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 35333                           
 35334                           ; BSR set to: 0
 35335                           ;incstack = 0
 35336  004D8C  EC4D  F03A         	call	_TMR1_ReadTimer	;wreg free
 35337  004D90  C064  F03E         	movff	?_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 35338  004D94  C065  F03F         	movff	?_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 35339                           
 35340                           ; BSR set to: 0
 35341                           ;sw_timer.c: 95: if (timerOverflow == 1)
 35342  004D98  0449               	decf	_timerOverflow,w,c	;volatile
 35343  004D9A  E13D               	bnz	l11918
 35344                           
 35345                           ; BSR set to: 0
 35346                           ;sw_timer.c: 96: {
 35347                           ;sw_timer.c: 97: timerOverflow = 0;
 35348  004D9C  6A49               	clrf	_timerOverflow,c	;volatile
 35349                           
 35350                           ; BSR set to: 0
 35351                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 35352  004D9E  5044               	movf	_reloadVal,w,c	;volatile
 35353  004DA0  5C3E               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 35354  004DA2  6F6E               	movwf	??_TMR_GetDeltaTime& (0+255),b
 35355  004DA4  5045               	movf	_reloadVal+1,w,c	;volatile
 35356  004DA6  583F               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 35357  004DA8  6F6F               	movwf	(??_TMR_GetDeltaTime+1)& (0+255),b
 35358  004DAA  6B70               	clrf	(??_TMR_GetDeltaTime+2)& (0+255),b
 35359  004DAC  A0D8               	btfss	status,0,c
 35360  004DAE  0770               	decf	(??_TMR_GetDeltaTime+2)& (0+255),f,b
 35361  004DB0  5170               	movf	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 35362  004DB2  6F71               	movwf	(??_TMR_GetDeltaTime+3)& (0+255),b
 35363  004DB4  5034               	movf	_ticksAccounted,w,c	;volatile
 35364  004DB6  5D6E               	subwf	??_TMR_GetDeltaTime& (0+255),w,b
 35365  004DB8  6F72               	movwf	(??_TMR_GetDeltaTime+4)& (0+255),b
 35366  004DBA  5035               	movf	_ticksAccounted+1,w,c	;volatile
 35367  004DBC  596F               	subwfb	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 35368  004DBE  6F73               	movwf	(??_TMR_GetDeltaTime+5)& (0+255),b
 35369  004DC0  5036               	movf	_ticksAccounted+2,w,c	;volatile
 35370  004DC2  5970               	subwfb	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 35371  004DC4  6F74               	movwf	(??_TMR_GetDeltaTime+6)& (0+255),b
 35372  004DC6  5037               	movf	_ticksAccounted+3,w,c	;volatile
 35373  004DC8  5971               	subwfb	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 35374  004DCA  6F75               	movwf	(??_TMR_GetDeltaTime+7)& (0+255),b
 35375  004DCC  5038               	movf	_ticksAdded,w,c	;volatile
 35376  004DCE  2572               	addwf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 35377  004DD0  6F76               	movwf	(??_TMR_GetDeltaTime+8)& (0+255),b
 35378  004DD2  5039               	movf	_ticksAdded+1,w,c	;volatile
 35379  004DD4  2173               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 35380  004DD6  6F77               	movwf	(??_TMR_GetDeltaTime+9)& (0+255),b
 35381  004DD8  503A               	movf	_ticksAdded+2,w,c	;volatile
 35382  004DDA  2174               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 35383  004DDC  6F78               	movwf	(??_TMR_GetDeltaTime+10)& (0+255),b
 35384  004DDE  503B               	movf	_ticksAdded+3,w,c	;volatile
 35385  004DE0  2175               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 35386  004DE2  6F79               	movwf	(??_TMR_GetDeltaTime+11)& (0+255),b
 35387  004DE4  0E00               	movlw	0
 35388  004DE6  2576               	addwf	(??_TMR_GetDeltaTime+8)& (0+255),w,b
 35389  004DE8  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 35390  004DEA  0E00               	movlw	0
 35391  004DEC  2177               	addwfc	(??_TMR_GetDeltaTime+9)& (0+255),w,b
 35392  004DEE  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 35393  004DF0  0E01               	movlw	1
 35394  004DF2  2178               	addwfc	(??_TMR_GetDeltaTime+10)& (0+255),w,b
 35395  004DF4  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 35396  004DF6  0E00               	movlw	0
 35397  004DF8  2179               	addwfc	(??_TMR_GetDeltaTime+11)& (0+255),w,b
 35398  004DFA  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 35399                           
 35400                           ; BSR set to: 0
 35401                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 35402  004DFC  C03E  F034         	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 35403  004E00  C03F  F035         	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 35404  004E04  6A36               	clrf	_ticksAccounted+2,c	;volatile
 35405  004E06  6A37               	clrf	_ticksAccounted+3,c	;volatile
 35406                           
 35407                           ; BSR set to: 0
 35408                           ;sw_timer.c: 100: ticksAdded = 0;
 35409  004E08  6A38               	clrf	_ticksAdded,c	;volatile
 35410  004E0A  6A39               	clrf	_ticksAdded+1,c	;volatile
 35411  004E0C  6A3A               	clrf	_ticksAdded+2,c	;volatile
 35412  004E0E  6A3B               	clrf	_ticksAdded+3,c	;volatile
 35413                           
 35414                           ; BSR set to: 0
 35415                           ;sw_timer.c: 101: reloadVal = 0;
 35416  004E10  6A44               	clrf	_reloadVal,c	;volatile
 35417  004E12  6A45               	clrf	_reloadVal+1,c	;volatile
 35418                           
 35419                           ;sw_timer.c: 102: }
 35420  004E14  D028               	goto	l11920
 35421  004E16                     l11918:
 35422                           
 35423                           ; BSR set to: 0
 35424                           ;sw_timer.c: 103: else
 35425                           ;sw_timer.c: 104: {
 35426                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 35427  004E16  5044               	movf	_reloadVal,w,c	;volatile
 35428  004E18  5C3E               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 35429  004E1A  6F6E               	movwf	??_TMR_GetDeltaTime& (0+255),b
 35430  004E1C  5045               	movf	_reloadVal+1,w,c	;volatile
 35431  004E1E  583F               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 35432  004E20  6F6F               	movwf	(??_TMR_GetDeltaTime+1)& (0+255),b
 35433  004E22  6B70               	clrf	(??_TMR_GetDeltaTime+2)& (0+255),b
 35434  004E24  6B71               	clrf	(??_TMR_GetDeltaTime+3)& (0+255),b
 35435  004E26  5034               	movf	_ticksAccounted,w,c	;volatile
 35436  004E28  5D6E               	subwf	??_TMR_GetDeltaTime& (0+255),w,b
 35437  004E2A  6F72               	movwf	(??_TMR_GetDeltaTime+4)& (0+255),b
 35438  004E2C  5035               	movf	_ticksAccounted+1,w,c	;volatile
 35439  004E2E  596F               	subwfb	(??_TMR_GetDeltaTime+1)& (0+255),w,b
 35440  004E30  6F73               	movwf	(??_TMR_GetDeltaTime+5)& (0+255),b
 35441  004E32  5036               	movf	_ticksAccounted+2,w,c	;volatile
 35442  004E34  5970               	subwfb	(??_TMR_GetDeltaTime+2)& (0+255),w,b
 35443  004E36  6F74               	movwf	(??_TMR_GetDeltaTime+6)& (0+255),b
 35444  004E38  5037               	movf	_ticksAccounted+3,w,c	;volatile
 35445  004E3A  5971               	subwfb	(??_TMR_GetDeltaTime+3)& (0+255),w,b
 35446  004E3C  6F75               	movwf	(??_TMR_GetDeltaTime+7)& (0+255),b
 35447  004E3E  5038               	movf	_ticksAdded,w,c	;volatile
 35448  004E40  2572               	addwf	(??_TMR_GetDeltaTime+4)& (0+255),w,b
 35449  004E42  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 35450  004E44  5039               	movf	_ticksAdded+1,w,c	;volatile
 35451  004E46  2173               	addwfc	(??_TMR_GetDeltaTime+5)& (0+255),w,b
 35452  004E48  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 35453  004E4A  503A               	movf	_ticksAdded+2,w,c	;volatile
 35454  004E4C  2174               	addwfc	(??_TMR_GetDeltaTime+6)& (0+255),w,b
 35455  004E4E  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 35456  004E50  503B               	movf	_ticksAdded+3,w,c	;volatile
 35457  004E52  2175               	addwfc	(??_TMR_GetDeltaTime+7)& (0+255),w,b
 35458  004E54  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 35459                           
 35460                           ;sw_timer.c: 106: ticksAccounted += retVal;
 35461  004E56  5030               	movf	TMR_GetDeltaTime@retVal,w,c
 35462  004E58  2634               	addwf	_ticksAccounted,f,c	;volatile
 35463  004E5A  5031               	movf	TMR_GetDeltaTime@retVal+1,w,c
 35464  004E5C  2235               	addwfc	_ticksAccounted+1,f,c	;volatile
 35465  004E5E  5032               	movf	TMR_GetDeltaTime@retVal+2,w,c
 35466  004E60  2236               	addwfc	_ticksAccounted+2,f,c	;volatile
 35467  004E62  5033               	movf	TMR_GetDeltaTime@retVal+3,w,c
 35468  004E64  2237               	addwfc	_ticksAccounted+3,f,c	;volatile
 35469  004E66                     l11920:
 35470                           
 35471                           ; BSR set to: 0
 35472                           ;sw_timer.c: 107: }
 35473                           ;sw_timer.c: 109: return retVal;
 35474  004E66  C030  F06A         	movff	TMR_GetDeltaTime@retVal,?_TMR_GetDeltaTime
 35475  004E6A  C031  F06B         	movff	TMR_GetDeltaTime@retVal+1,?_TMR_GetDeltaTime+1
 35476  004E6E  C032  F06C         	movff	TMR_GetDeltaTime@retVal+2,?_TMR_GetDeltaTime+2
 35477  004E72  C033  F06D         	movff	TMR_GetDeltaTime@retVal+3,?_TMR_GetDeltaTime+3
 35478                           
 35479                           ; BSR set to: 0
 35480  004E76  0012               	return		;funcret
 35481  004E78                     __end_of_TMR_GetDeltaTime:
 35482                           	opt stack 0
 35483                           tosu	equ	0xFFF
 35484                           tosh	equ	0xFFE
 35485                           tosl	equ	0xFFD
 35486                           pclath	equ	0xFFA
 35487                           tblptru	equ	0xFF8
 35488                           tblptrh	equ	0xFF7
 35489                           tblptrl	equ	0xFF6
 35490                           tablat	equ	0xFF5
 35491                           prodh	equ	0xFF4
 35492                           prodl	equ	0xFF3
 35493                           intcon	equ	0xFF2
 35494                           indf0	equ	0xFEF
 35495                           postinc0	equ	0xFEE
 35496                           plusw0	equ	0xFEB
 35497                           fsr0h	equ	0xFEA
 35498                           fsr0l	equ	0xFE9
 35499                           wreg	equ	0xFE8
 35500                           postinc1	equ	0xFE6
 35501                           postdec1	equ	0xFE5
 35502                           plusw1	equ	0xFE3
 35503                           fsr1h	equ	0xFE2
 35504                           fsr1l	equ	0xFE1
 35505                           indf2	equ	0xFDF
 35506                           postinc2	equ	0xFDE
 35507                           postdec2	equ	0xFDD
 35508                           plusw2	equ	0xFDB
 35509                           fsr2h	equ	0xFDA
 35510                           fsr2l	equ	0xFD9
 35511                           status	equ	0xFD8
 35512                           
 35513 ;; *************** function _TMR1_ReadTimer *****************
 35514 ;; Defined at:
 35515 ;;		line 113 in file "mcc_generated_files/tmr1.c"
 35516 ;; Parameters:    Size  Location     Type
 35517 ;;		None
 35518 ;; Auto vars:     Size  Location     Type
 35519 ;;  readVal         2    8[BANK0 ] unsigned int 
 35520 ;; Return value:  Size  Location     Type
 35521 ;;                  2    4[BANK0 ] unsigned int 
 35522 ;; Registers used:
 35523 ;;		wreg, status,2, status,0
 35524 ;; Tracked objects:
 35525 ;;		On entry : F/0
 35526 ;;		On exit  : F/0
 35527 ;;		Unchanged: 0/0
 35528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35529 ;;      Params:         0       2       0       0       0       0       0       0       0
 35530 ;;      Locals:         0       2       0       0       0       0       0       0       0
 35531 ;;      Temps:          0       2       0       0       0       0       0       0       0
 35532 ;;      Totals:         0       6       0       0       0       0       0       0       0
 35533 ;;Total ram usage:        6 bytes
 35534 ;; Hardware stack levels used:    1
 35535 ;; Hardware stack levels required when called:    7
 35536 ;; This function calls:
 35537 ;;		Nothing
 35538 ;; This function is called by:
 35539 ;;		_TMR_GetDeltaTime
 35540 ;;		_TMR_SwapTimer
 35541 ;; This function uses a non-reentrant model
 35542 ;;
 35543                           
 35544                           	psect	text186
 35545  00749A                     __ptext186:
 35546                           	opt stack 0
 35547  00749A                     _TMR1_ReadTimer:
 35548                           	opt stack 17
 35549                           
 35550                           ; BSR set to: 0
 35551                           ;tmr1.c: 115: uint16_t readVal;
 35552                           ;tmr1.c: 117: readVal = (TMR1H << 8) | TMR1L;
 35553                           
 35554                           ; BSR set to: 0
 35555                           ;incstack = 0
 35556  00749A  50CD               	movf	4045,w,c	;volatile
 35557  00749C  CFCE F066          	movff	4046,??_TMR1_ReadTimer	;volatile
 35558  0074A0  6B67               	clrf	(??_TMR1_ReadTimer+1)& (0+255),b
 35559  0074A2  C066  F067         	movff	??_TMR1_ReadTimer,??_TMR1_ReadTimer+1
 35560  0074A6  6B66               	clrf	??_TMR1_ReadTimer& (0+255),b
 35561  0074A8  1166               	iorwf	??_TMR1_ReadTimer& (0+255),w,b
 35562  0074AA  6F68               	movwf	TMR1_ReadTimer@readVal& (0+255),b
 35563  0074AC  5167               	movf	(??_TMR1_ReadTimer+1)& (0+255),w,b
 35564  0074AE  6F69               	movwf	(TMR1_ReadTimer@readVal+1)& (0+255),b
 35565                           
 35566                           ; BSR set to: 0
 35567                           ;tmr1.c: 119: return readVal;
 35568  0074B0  C068  F064         	movff	TMR1_ReadTimer@readVal,?_TMR1_ReadTimer
 35569  0074B4  C069  F065         	movff	TMR1_ReadTimer@readVal+1,?_TMR1_ReadTimer+1
 35570                           
 35571                           ; BSR set to: 0
 35572  0074B8  0012               	return		;funcret
 35573  0074BA                     __end_of_TMR1_ReadTimer:
 35574                           	opt stack 0
 35575                           tosu	equ	0xFFF
 35576                           tosh	equ	0xFFE
 35577                           tosl	equ	0xFFD
 35578                           pclath	equ	0xFFA
 35579                           tblptru	equ	0xFF8
 35580                           tblptrh	equ	0xFF7
 35581                           tblptrl	equ	0xFF6
 35582                           tablat	equ	0xFF5
 35583                           prodh	equ	0xFF4
 35584                           prodl	equ	0xFF3
 35585                           intcon	equ	0xFF2
 35586                           indf0	equ	0xFEF
 35587                           postinc0	equ	0xFEE
 35588                           plusw0	equ	0xFEB
 35589                           fsr0h	equ	0xFEA
 35590                           fsr0l	equ	0xFE9
 35591                           wreg	equ	0xFE8
 35592                           postinc1	equ	0xFE6
 35593                           postdec1	equ	0xFE5
 35594                           plusw1	equ	0xFE3
 35595                           fsr1h	equ	0xFE2
 35596                           fsr1l	equ	0xFE1
 35597                           indf2	equ	0xFDF
 35598                           postinc2	equ	0xFDE
 35599                           postdec2	equ	0xFDD
 35600                           plusw2	equ	0xFDB
 35601                           fsr2h	equ	0xFDA
 35602                           fsr2l	equ	0xFD9
 35603                           status	equ	0xFD8
 35604                           
 35605 ;; *************** function _SwTimerSetTimeout *****************
 35606 ;; Defined at:
 35607 ;;		line 186 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 35608 ;; Parameters:    Size  Location     Type
 35609 ;;  timerId         1    wreg     unsigned char 
 35610 ;;  timeout         4   17[BANK0 ] unsigned long 
 35611 ;; Auto vars:     Size  Location     Type
 35612 ;;  timerId         1   25[BANK0 ] unsigned char 
 35613 ;; Return value:  Size  Location     Type
 35614 ;;                  1    wreg      void 
 35615 ;; Registers used:
 35616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 35617 ;; Tracked objects:
 35618 ;;		On entry : C/2
 35619 ;;		On exit  : F/0
 35620 ;;		Unchanged: 0/0
 35621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35622 ;;      Params:         0       4       0       0       0       0       0       0       0
 35623 ;;      Locals:         0       1       0       0       0       0       0       0       0
 35624 ;;      Temps:          0       4       0       0       0       0       0       0       0
 35625 ;;      Totals:         0       9       0       0       0       0       0       0       0
 35626 ;;Total ram usage:        9 bytes
 35627 ;; Hardware stack levels used:    1
 35628 ;; Hardware stack levels required when called:    7
 35629 ;; This function calls:
 35630 ;;		Nothing
 35631 ;; This function is called by:
 35632 ;;		_RADIO_Transmit
 35633 ;;		_RADIO_ReceiveStart
 35634 ;;		_LORAWAN_TxDone
 35635 ;;		_LORAWAN_RxTimeout
 35636 ;;		_StartReTxTimer
 35637 ;;		_DutyCycleCallback
 35638 ;;		_LORAWAN_Join
 35639 ;;		_LORAWAN_LinkCheckConfigure
 35640 ;;		_LORAWAN_LinkCheckCallback
 35641 ;;		_UpdateRetransmissionAckTimeoutState
 35642 ;;		_UpdateJoinSuccessState
 35643 ;; This function uses a non-reentrant model
 35644 ;;
 35645                           
 35646                           	psect	text187
 35647  006D94                     __ptext187:
 35648                           	opt stack 0
 35649  006D94                     _SwTimerSetTimeout:
 35650                           	opt stack 20
 35651                           
 35652                           ; BSR set to: 0
 35653                           ;incstack = 0
 35654                           ;SwTimerSetTimeout@timerId stored from wreg
 35655  006D94  0100               	movlb	0	; () banked
 35656  006D96  6F79               	movwf	SwTimerSetTimeout@timerId& (0+255),b
 35657                           
 35658                           ;sw_timer.c: 188: (INTCONbits.GIE = 0);
 35659  006D98  9EF2               	bcf	intcon,7,c	;volatile
 35660                           
 35661                           ;sw_timer.c: 189: swTimers[timerId].ticksRemaining = timeout - 32;
 35662  006D9A  0EE0               	movlw	224
 35663  006D9C  2571               	addwf	SwTimerSetTimeout@timeout& (0+255),w,b
 35664  006D9E  6F75               	movwf	??_SwTimerSetTimeout& (0+255),b
 35665  006DA0  0EFF               	movlw	255
 35666  006DA2  2172               	addwfc	(SwTimerSetTimeout@timeout+1)& (0+255),w,b
 35667  006DA4  6F76               	movwf	(??_SwTimerSetTimeout+1)& (0+255),b
 35668  006DA6  0EFF               	movlw	255
 35669  006DA8  2173               	addwfc	(SwTimerSetTimeout@timeout+2)& (0+255),w,b
 35670  006DAA  6F77               	movwf	(??_SwTimerSetTimeout+2)& (0+255),b
 35671  006DAC  0EFF               	movlw	255
 35672  006DAE  2174               	addwfc	(SwTimerSetTimeout@timeout+3)& (0+255),w,b
 35673  006DB0  6F78               	movwf	(??_SwTimerSetTimeout+3)& (0+255),b
 35674  006DB2  5179               	movf	SwTimerSetTimeout@timerId& (0+255),w,b
 35675  006DB4  0D08               	mullw	8
 35676  006DB6  0E00               	movlw	low _swTimers
 35677  006DB8  24F3               	addwf	prodl,w,c
 35678  006DBA  6ED9               	movwf	fsr2l,c
 35679  006DBC  0E03               	movlw	high _swTimers
 35680  006DBE  20F4               	addwfc	prodh,w,c
 35681  006DC0  6EDA               	movwf	fsr2h,c
 35682  006DC2  C075  FFDE         	movff	??_SwTimerSetTimeout,postinc2
 35683  006DC6  C076  FFDE         	movff	??_SwTimerSetTimeout+1,postinc2
 35684  006DCA  C077  FFDE         	movff	??_SwTimerSetTimeout+2,postinc2
 35685  006DCE  C078  FFDE         	movff	??_SwTimerSetTimeout+3,postinc2
 35686                           
 35687                           ; BSR set to: 0
 35688                           ;sw_timer.c: 190: (INTCONbits.GIE = 1);
 35689  006DD2  8EF2               	bsf	intcon,7,c	;volatile
 35690                           
 35691                           ; BSR set to: 0
 35692  006DD4  0012               	return		;funcret
 35693  006DD6                     __end_of_SwTimerSetTimeout:
 35694                           	opt stack 0
 35695                           tosu	equ	0xFFF
 35696                           tosh	equ	0xFFE
 35697                           tosl	equ	0xFFD
 35698                           pclath	equ	0xFFA
 35699                           tblptru	equ	0xFF8
 35700                           tblptrh	equ	0xFF7
 35701                           tblptrl	equ	0xFF6
 35702                           tablat	equ	0xFF5
 35703                           prodh	equ	0xFF4
 35704                           prodl	equ	0xFF3
 35705                           intcon	equ	0xFF2
 35706                           indf0	equ	0xFEF
 35707                           postinc0	equ	0xFEE
 35708                           plusw0	equ	0xFEB
 35709                           fsr0h	equ	0xFEA
 35710                           fsr0l	equ	0xFE9
 35711                           wreg	equ	0xFE8
 35712                           postinc1	equ	0xFE6
 35713                           postdec1	equ	0xFE5
 35714                           plusw1	equ	0xFE3
 35715                           fsr1h	equ	0xFE2
 35716                           fsr1l	equ	0xFE1
 35717                           indf2	equ	0xFDF
 35718                           postinc2	equ	0xFDE
 35719                           postdec2	equ	0xFDD
 35720                           plusw2	equ	0xFDB
 35721                           fsr2h	equ	0xFDA
 35722                           fsr2l	equ	0xFD9
 35723                           status	equ	0xFD8
 35724                           
 35725 ;; *************** function _InitDefault868Channels *****************
 35726 ;; Defined at:
 35727 ;;		line 979 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35728 ;; Parameters:    Size  Location     Type
 35729 ;;		None
 35730 ;; Auto vars:     Size  Location     Type
 35731 ;;  i               1   14[BANK0 ] unsigned char 
 35732 ;; Return value:  Size  Location     Type
 35733 ;;                  1    wreg      void 
 35734 ;; Registers used:
 35735 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35736 ;; Tracked objects:
 35737 ;;		On entry : F/1
 35738 ;;		On exit  : F/0
 35739 ;;		Unchanged: 0/0
 35740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35741 ;;      Params:         0       0       0       0       0       0       0       0       0
 35742 ;;      Locals:         0       1       0       0       0       0       0       0       0
 35743 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35744 ;;      Totals:         0       1       0       0       0       0       0       0       0
 35745 ;;Total ram usage:        1 bytes
 35746 ;; Hardware stack levels used:    1
 35747 ;; Hardware stack levels required when called:    8
 35748 ;; This function calls:
 35749 ;;		_memcpy
 35750 ;;		_memset
 35751 ;; This function is called by:
 35752 ;;		_LORAWAN_Reset
 35753 ;; This function uses a non-reentrant model
 35754 ;;
 35755                           
 35756                           	psect	text188
 35757  006468                     __ptext188:
 35758                           	opt stack 0
 35759  006468                     _InitDefault868Channels:
 35760                           	opt stack 21
 35761                           
 35762                           ; BSR set to: 1
 35763                           ;lorawan_eu.c: 981: uint8_t i;
 35764                           ;lorawan_eu.c: 983: memset (Channels, 0, sizeof(Channels) );
 35765                           
 35766                           ; BSR set to: 0
 35767                           ;incstack = 0
 35768  006468  0E00               	movlw	low _Channels
 35769  00646A  0100               	movlb	0	; () banked
 35770  00646C  6F64               	movwf	memset@p1& (0+255),b
 35771  00646E  0E04               	movlw	high _Channels
 35772  006470  6F65               	movwf	(memset@p1+1)& (0+255),b
 35773  006472  6B67               	clrf	(memset@c+1)& (0+255),b
 35774  006474  6B66               	clrf	memset@c& (0+255),b
 35775  006476  6B69               	clrf	(memset@n+1)& (0+255),b
 35776  006478  0EE0               	movlw	224
 35777  00647A  6F68               	movwf	memset@n& (0+255),b
 35778  00647C  EC60  F039         	call	_memset	;wreg free
 35779                           
 35780                           ; BSR set to: 0
 35781                           ;lorawan_eu.c: 984: memcpy (Channels, DefaultChannels868, sizeof(DefaultChannels868) );
 35782  006480  0E00               	movlw	low _Channels
 35783  006482  6F64               	movwf	memcpy@d1& (0+255),b
 35784  006484  0E04               	movlw	high _Channels
 35785  006486  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 35786  006488  0ED2               	movlw	low _DefaultChannels868
 35787  00648A  6F66               	movwf	memcpy@s1& (0+255),b
 35788  00648C  0E7F               	movlw	high _DefaultChannels868
 35789  00648E  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 35790  006490  6B69               	clrf	(memcpy@n+1)& (0+255),b
 35791  006492  0E2A               	movlw	42
 35792  006494  6F68               	movwf	memcpy@n& (0+255),b
 35793  006496  EC73  F034         	call	_memcpy	;wreg free
 35794                           
 35795                           ; BSR set to: 0
 35796                           ;lorawan_eu.c: 985: for (i = 3; i < 16; i++)
 35797  00649A  0E03               	movlw	3
 35798  00649C  6F6E               	movwf	InitDefault868Channels@i& (0+255),b
 35799  00649E                     l15012:
 35800                           
 35801                           ; BSR set to: 0
 35802                           ;lorawan_eu.c: 986: {
 35803                           ;lorawan_eu.c: 989: Channels[i].dutyCycle = (65535U);
 35804  00649E  516E               	movf	InitDefault868Channels@i& (0+255),w,b
 35805  0064A0  0D0E               	mullw	14
 35806  0064A2  0E06               	movlw	low (_Channels+6)
 35807  0064A4  24F3               	addwf	prodl,w,c
 35808  0064A6  6ED9               	movwf	fsr2l,c
 35809  0064A8  0E04               	movlw	high (_Channels+6)
 35810  0064AA  20F4               	addwfc	prodh,w,c
 35811  0064AC  6EDA               	movwf	fsr2h,c
 35812  0064AE  68DE               	setf	postinc2,c
 35813  0064B0  68DD               	setf	postdec2,c
 35814                           
 35815                           ;lorawan_eu.c: 990: Channels[i].dataRange.value = (255);
 35816  0064B2  516E               	movf	InitDefault868Channels@i& (0+255),w,b
 35817  0064B4  0D0E               	mullw	14
 35818  0064B6  0E05               	movlw	low (_Channels+5)
 35819  0064B8  24F3               	addwf	prodl,w,c
 35820  0064BA  6ED9               	movwf	fsr2l,c
 35821  0064BC  0E04               	movlw	high (_Channels+5)
 35822  0064BE  20F4               	addwfc	prodh,w,c
 35823  0064C0  6EDA               	movwf	fsr2h,c
 35824  0064C2  68DF               	setf	indf2,c
 35825                           
 35826                           ; BSR set to: 0
 35827  0064C4  2B6E               	incf	InitDefault868Channels@i& (0+255),f,b
 35828                           
 35829                           ; BSR set to: 0
 35830  0064C6  0E0F               	movlw	15
 35831  0064C8  656E               	cpfsgt	InitDefault868Channels@i& (0+255),b
 35832  0064CA  D7E9               	goto	l15012
 35833  0064CC  0C0F               	retlw	15
 35834  0064CE                     __end_of_InitDefault868Channels:
 35835                           	opt stack 0
 35836                           tosu	equ	0xFFF
 35837                           tosh	equ	0xFFE
 35838                           tosl	equ	0xFFD
 35839                           pclath	equ	0xFFA
 35840                           tblptru	equ	0xFF8
 35841                           tblptrh	equ	0xFF7
 35842                           tblptrl	equ	0xFF6
 35843                           tablat	equ	0xFF5
 35844                           prodh	equ	0xFF4
 35845                           prodl	equ	0xFF3
 35846                           intcon	equ	0xFF2
 35847                           indf0	equ	0xFEF
 35848                           postinc0	equ	0xFEE
 35849                           plusw0	equ	0xFEB
 35850                           fsr0h	equ	0xFEA
 35851                           fsr0l	equ	0xFE9
 35852                           wreg	equ	0xFE8
 35853                           postinc1	equ	0xFE6
 35854                           postdec1	equ	0xFE5
 35855                           plusw1	equ	0xFE3
 35856                           fsr1h	equ	0xFE2
 35857                           fsr1l	equ	0xFE1
 35858                           indf2	equ	0xFDF
 35859                           postinc2	equ	0xFDE
 35860                           postdec2	equ	0xFDD
 35861                           plusw2	equ	0xFDB
 35862                           fsr2h	equ	0xFDA
 35863                           fsr2l	equ	0xFD9
 35864                           status	equ	0xFD8
 35865                           
 35866 ;; *************** function _InitDefault433Channels *****************
 35867 ;; Defined at:
 35868 ;;		line 994 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 35869 ;; Parameters:    Size  Location     Type
 35870 ;;		None
 35871 ;; Auto vars:     Size  Location     Type
 35872 ;;  i               1   14[BANK0 ] unsigned char 
 35873 ;; Return value:  Size  Location     Type
 35874 ;;                  1    wreg      void 
 35875 ;; Registers used:
 35876 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35877 ;; Tracked objects:
 35878 ;;		On entry : F/1
 35879 ;;		On exit  : F/0
 35880 ;;		Unchanged: 0/0
 35881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 35882 ;;      Params:         0       0       0       0       0       0       0       0       0
 35883 ;;      Locals:         0       1       0       0       0       0       0       0       0
 35884 ;;      Temps:          0       0       0       0       0       0       0       0       0
 35885 ;;      Totals:         0       1       0       0       0       0       0       0       0
 35886 ;;Total ram usage:        1 bytes
 35887 ;; Hardware stack levels used:    1
 35888 ;; Hardware stack levels required when called:    8
 35889 ;; This function calls:
 35890 ;;		_memcpy
 35891 ;;		_memset
 35892 ;; This function is called by:
 35893 ;;		_LORAWAN_Reset
 35894 ;; This function uses a non-reentrant model
 35895 ;;
 35896                           
 35897                           	psect	text189
 35898  0064CE                     __ptext189:
 35899                           	opt stack 0
 35900  0064CE                     _InitDefault433Channels:
 35901                           	opt stack 21
 35902                           
 35903                           ; BSR set to: 1
 35904                           ;lorawan_eu.c: 996: uint8_t i;
 35905                           ;lorawan_eu.c: 998: memset (Channels, 0, sizeof(Channels) );
 35906                           
 35907                           ; BSR set to: 0
 35908                           ;incstack = 0
 35909  0064CE  0E00               	movlw	low _Channels
 35910  0064D0  0100               	movlb	0	; () banked
 35911  0064D2  6F64               	movwf	memset@p1& (0+255),b
 35912  0064D4  0E04               	movlw	high _Channels
 35913  0064D6  6F65               	movwf	(memset@p1+1)& (0+255),b
 35914  0064D8  6B67               	clrf	(memset@c+1)& (0+255),b
 35915  0064DA  6B66               	clrf	memset@c& (0+255),b
 35916  0064DC  6B69               	clrf	(memset@n+1)& (0+255),b
 35917  0064DE  0EE0               	movlw	224
 35918  0064E0  6F68               	movwf	memset@n& (0+255),b
 35919  0064E2  EC60  F039         	call	_memset	;wreg free
 35920                           
 35921                           ; BSR set to: 0
 35922                           ;lorawan_eu.c: 999: memcpy (Channels, DefaultChannels433, sizeof(DefaultChannels433) );
 35923  0064E6  0E00               	movlw	low _Channels
 35924  0064E8  6F64               	movwf	memcpy@d1& (0+255),b
 35925  0064EA  0E04               	movlw	high _Channels
 35926  0064EC  6F65               	movwf	(memcpy@d1+1)& (0+255),b
 35927  0064EE  0EA8               	movlw	low _DefaultChannels433
 35928  0064F0  6F66               	movwf	memcpy@s1& (0+255),b
 35929  0064F2  0E7F               	movlw	high _DefaultChannels433
 35930  0064F4  6F67               	movwf	(memcpy@s1+1)& (0+255),b
 35931  0064F6  6B69               	clrf	(memcpy@n+1)& (0+255),b
 35932  0064F8  0E2A               	movlw	42
 35933  0064FA  6F68               	movwf	memcpy@n& (0+255),b
 35934  0064FC  EC73  F034         	call	_memcpy	;wreg free
 35935                           
 35936                           ; BSR set to: 0
 35937                           ;lorawan_eu.c: 1000: for (i = 3; i < 16; i++)
 35938  006500  0E03               	movlw	3
 35939  006502  6F6E               	movwf	InitDefault433Channels@i& (0+255),b
 35940  006504                     l15028:
 35941                           
 35942                           ; BSR set to: 0
 35943                           ;lorawan_eu.c: 1001: {
 35944                           ;lorawan_eu.c: 1004: Channels[i].dutyCycle = (65535U);
 35945  006504  516E               	movf	InitDefault433Channels@i& (0+255),w,b
 35946  006506  0D0E               	mullw	14
 35947  006508  0E06               	movlw	low (_Channels+6)
 35948  00650A  24F3               	addwf	prodl,w,c
 35949  00650C  6ED9               	movwf	fsr2l,c
 35950  00650E  0E04               	movlw	high (_Channels+6)
 35951  006510  20F4               	addwfc	prodh,w,c
 35952  006512  6EDA               	movwf	fsr2h,c
 35953  006514  68DE               	setf	postinc2,c
 35954  006516  68DD               	setf	postdec2,c
 35955                           
 35956                           ;lorawan_eu.c: 1005: Channels[i].dataRange.value = (255);
 35957  006518  516E               	movf	InitDefault433Channels@i& (0+255),w,b
 35958  00651A  0D0E               	mullw	14
 35959  00651C  0E05               	movlw	low (_Channels+5)
 35960  00651E  24F3               	addwf	prodl,w,c
 35961  006520  6ED9               	movwf	fsr2l,c
 35962  006522  0E04               	movlw	high (_Channels+5)
 35963  006524  20F4               	addwfc	prodh,w,c
 35964  006526  6EDA               	movwf	fsr2h,c
 35965  006528  68DF               	setf	indf2,c
 35966                           
 35967                           ; BSR set to: 0
 35968  00652A  2B6E               	incf	InitDefault433Channels@i& (0+255),f,b
 35969                           
 35970                           ; BSR set to: 0
 35971  00652C  0E0F               	movlw	15
 35972  00652E  656E               	cpfsgt	InitDefault433Channels@i& (0+255),b
 35973  006530  D7E9               	goto	l15028
 35974  006532  0C0F               	retlw	15
 35975  006534                     __end_of_InitDefault433Channels:
 35976                           	opt stack 0
 35977                           tosu	equ	0xFFF
 35978                           tosh	equ	0xFFE
 35979                           tosl	equ	0xFFD
 35980                           pclath	equ	0xFFA
 35981                           tblptru	equ	0xFF8
 35982                           tblptrh	equ	0xFF7
 35983                           tblptrl	equ	0xFF6
 35984                           tablat	equ	0xFF5
 35985                           prodh	equ	0xFF4
 35986                           prodl	equ	0xFF3
 35987                           intcon	equ	0xFF2
 35988                           indf0	equ	0xFEF
 35989                           postinc0	equ	0xFEE
 35990                           plusw0	equ	0xFEB
 35991                           fsr0h	equ	0xFEA
 35992                           fsr0l	equ	0xFE9
 35993                           wreg	equ	0xFE8
 35994                           postinc1	equ	0xFE6
 35995                           postdec1	equ	0xFE5
 35996                           plusw1	equ	0xFE3
 35997                           fsr1h	equ	0xFE2
 35998                           fsr1l	equ	0xFE1
 35999                           indf2	equ	0xFDF
 36000                           postinc2	equ	0xFDE
 36001                           postdec2	equ	0xFDD
 36002                           plusw2	equ	0xFDB
 36003                           fsr2h	equ	0xFDA
 36004                           fsr2l	equ	0xFD9
 36005                           status	equ	0xFD8
 36006                           
 36007 ;; *************** function _memset *****************
 36008 ;; Defined at:
 36009 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memset.c"
 36010 ;; Parameters:    Size  Location     Type
 36011 ;;  p1              2    4[BANK0 ] PTR void 
 36012 ;;		 -> AssemblePacket@mhdr(1), aesBuffer(16), GenerateSubkey@l(16), AESCmac@x(16), 
 36013 ;;		 -> macBuffer(271), Channels(224), loRa.activationParameters(105), loRa(245), 
 36014 ;;  c               2    6[BANK0 ] int 
 36015 ;;  n               2    8[BANK0 ] unsigned int 
 36016 ;; Auto vars:     Size  Location     Type
 36017 ;;  p               2   10[BANK0 ] PTR unsigned char 
 36018 ;;		 -> AssemblePacket@mhdr(1), aesBuffer(16), GenerateSubkey@l(16), AESCmac@x(16), 
 36019 ;;		 -> macBuffer(271), Channels(224), loRa.activationParameters(105), loRa(245), 
 36020 ;; Return value:  Size  Location     Type
 36021 ;;                  2    4[BANK0 ] PTR void 
 36022 ;; Registers used:
 36023 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 36024 ;; Tracked objects:
 36025 ;;		On entry : F/0
 36026 ;;		On exit  : F/0
 36027 ;;		Unchanged: 0/0
 36028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36029 ;;      Params:         0       6       0       0       0       0       0       0       0
 36030 ;;      Locals:         0       2       0       0       0       0       0       0       0
 36031 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36032 ;;      Totals:         0       8       0       0       0       0       0       0       0
 36033 ;;Total ram usage:        8 bytes
 36034 ;; Hardware stack levels used:    1
 36035 ;; Hardware stack levels required when called:    7
 36036 ;; This function calls:
 36037 ;;		Nothing
 36038 ;; This function is called by:
 36039 ;;		_LORAWAN_Reset
 36040 ;;		_InitDefault868Channels
 36041 ;;		_InitDefault433Channels
 36042 ;;		_AESCmac
 36043 ;;		_GenerateSubkey
 36044 ;;		_AssemblePacket
 36045 ;;		_PrepareJoinRequestFrame
 36046 ;;		_PrepareSessionKeys
 36047 ;;		_AssembleEncryptionBlock
 36048 ;; This function uses a non-reentrant model
 36049 ;;
 36050                           
 36051                           	psect	text190
 36052  0072C0                     __ptext190:
 36053                           	opt stack 0
 36054  0072C0                     _memset:
 36055                           	opt stack 20
 36056                           
 36057                           ; BSR set to: 0
 36058                           
 36059                           ; BSR set to: 0
 36060                           ;incstack = 0
 36061  0072C0  C064  F06A         	movff	memset@p1,memset@p
 36062  0072C4  C065  F06B         	movff	memset@p1+1,memset@p+1
 36063  0072C8  D008               	goto	l12336
 36064  0072CA                     l12332:
 36065                           
 36066                           ; BSR set to: 0
 36067  0072CA  C06A  FFD9         	movff	memset@p,fsr2l
 36068  0072CE  C06B  FFDA         	movff	memset@p+1,fsr2h
 36069  0072D2  C066  FFDF         	movff	memset@c,indf2
 36070                           
 36071                           ; BSR set to: 0
 36072  0072D6  4B6A               	infsnz	memset@p& (0+255),f,b
 36073  0072D8  2B6B               	incf	(memset@p+1)& (0+255),f,b
 36074  0072DA                     l12336:
 36075                           
 36076                           ; BSR set to: 0
 36077  0072DA  0768               	decf	memset@n& (0+255),f,b
 36078  0072DC  A0D8               	btfss	status,0,c
 36079  0072DE  0769               	decf	(memset@n+1)& (0+255),f,b
 36080  0072E0  2968               	incf	memset@n& (0+255),w,b
 36081  0072E2  E1F3               	bnz	l12332
 36082  0072E4  2969               	incf	(memset@n+1)& (0+255),w,b
 36083  0072E6  E1F1               	bnz	l12332
 36084                           
 36085                           ; BSR set to: 0
 36086  0072E8  0012               	return		;funcret
 36087  0072EA                     __end_of_memset:
 36088                           	opt stack 0
 36089                           tosu	equ	0xFFF
 36090                           tosh	equ	0xFFE
 36091                           tosl	equ	0xFFD
 36092                           pclath	equ	0xFFA
 36093                           tblptru	equ	0xFF8
 36094                           tblptrh	equ	0xFF7
 36095                           tblptrl	equ	0xFF6
 36096                           tablat	equ	0xFF5
 36097                           prodh	equ	0xFF4
 36098                           prodl	equ	0xFF3
 36099                           intcon	equ	0xFF2
 36100                           indf0	equ	0xFEF
 36101                           postinc0	equ	0xFEE
 36102                           plusw0	equ	0xFEB
 36103                           fsr0h	equ	0xFEA
 36104                           fsr0l	equ	0xFE9
 36105                           wreg	equ	0xFE8
 36106                           postinc1	equ	0xFE6
 36107                           postdec1	equ	0xFE5
 36108                           plusw1	equ	0xFE3
 36109                           fsr1h	equ	0xFE2
 36110                           fsr1l	equ	0xFE1
 36111                           indf2	equ	0xFDF
 36112                           postinc2	equ	0xFDE
 36113                           postdec2	equ	0xFDD
 36114                           plusw2	equ	0xFDB
 36115                           fsr2h	equ	0xFDA
 36116                           fsr2l	equ	0xFD9
 36117                           status	equ	0xFD8
 36118                           
 36119 ;; *************** function _memcpy *****************
 36120 ;; Defined at:
 36121 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\memcpy.c"
 36122 ;; Parameters:    Size  Location     Type
 36123 ;;  d1              2    4[BANK0 ] PTR void 
 36124 ;;		 -> AESEncodeLoRa@useKey(16), ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), 
 36125 ;;		 -> LORAWAN_RxDone@computedMic(4), loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(
      +8), AESCmac@x(16), 
 36126 ;;		 -> UpdateCfList@frequency(4), macBuffer(271), Channels(224), loRa.activationParameters(105), 
 36127 ;;		 -> radioBuffer(271), loRa(245), RadioConfiguration(54), 
 36128 ;;  s1              2    6[BANK0 ] PTR const void 
 36129 ;;		 -> radioBuffer.cfList(16), LORAWAN_RxDone@hdr.cfList(16), payload(2), appSKey(16), 
 36130 ;;		 -> nwkSKey(16), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinRequest
      +Frame@mic(4), 
 36131 ;;		 -> loRa.fCntUp.valueLow(2), aesBuffer(16), LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), 
 36132 ;;		 -> loRa.activationParameters.applicationSessionKey(16), loRa.activationParameters.networkSessionKey(16), loRa.activ
      +ationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), 
 36133 ;;		 -> loRa.activationParameters.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), loRa.activatio
      +nParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), 
 36134 ;;		 -> AESCmac@y(16), FskSyncWordBuff(3), UpdateCfList@joinAccept(2), loRa.activationParameters(105), 
 36135 ;;		 -> loRa.devNonce(2), loRa.fCntUp(4), radioBuffer(271), loRa(245), 
 36136 ;;		 -> DefaultChannels433(42), DefaultChannels868(42), RadioConfiguration.syncWord(8), RadioConfiguration(54), 
 36137 ;;		 -> NULL(0), 
 36138 ;;  n               2    8[BANK0 ] unsigned int 
 36139 ;; Auto vars:     Size  Location     Type
 36140 ;;  s               2   12[BANK0 ] PTR const unsigned char 
 36141 ;;		 -> radioBuffer.cfList(16), LORAWAN_RxDone@hdr.cfList(16), payload(2), appSKey(16), 
 36142 ;;		 -> nwkSKey(16), AssembleEncryptionBlock@frameCounter(4), ComputeSessionKeys@joinAcceptBuffer(2), PrepareJoinRequest
      +Frame@mic(4), 
 36143 ;;		 -> loRa.fCntUp.valueLow(2), aesBuffer(16), LORAWAN_RxDone@hdr(2), loRa.activationParameters.applicationKey(16), 
 36144 ;;		 -> loRa.activationParameters.applicationSessionKey(16), loRa.activationParameters.networkSessionKey(16), loRa.activ
      +ationParameters.deviceAddress(4), loRa.activationParameters.applicationEui(8), 
 36145 ;;		 -> loRa.activationParameters.deviceEui(8), loRa.activationParameters.mcastApplicationSessionKey(16), loRa.activatio
      +nParameters.mcastNetworkSessionKey(16), loRa.activationParameters.mcastDeviceAddress(4), 
 36146 ;;		 -> AESCmac@y(16), FskSyncWordBuff(3), UpdateCfList@joinAccept(2), loRa.activationParameters(105), 
 36147 ;;		 -> loRa.devNonce(2), loRa.fCntUp(4), radioBuffer(271), loRa(245), 
 36148 ;;		 -> DefaultChannels433(42), DefaultChannels868(42), RadioConfiguration.syncWord(8), RadioConfiguration(54), 
 36149 ;;		 -> NULL(0), 
 36150 ;;  d               2   10[BANK0 ] PTR unsigned char 
 36151 ;;		 -> AESEncodeLoRa@useKey(16), ComputeMic@mic(4), ExtractMic@mic(4), aesBuffer(16), 
 36152 ;;		 -> LORAWAN_RxDone@computedMic(4), loRa.activationParameters.applicationEui(8), loRa.activationParameters.deviceEui(
      +8), AESCmac@x(16), 
 36153 ;;		 -> UpdateCfList@frequency(4), macBuffer(271), Channels(224), loRa.activationParameters(105), 
 36154 ;;		 -> radioBuffer(271), loRa(245), RadioConfiguration(54), 
 36155 ;; Return value:  Size  Location     Type
 36156 ;;                  2    4[BANK0 ] PTR void 
 36157 ;; Registers used:
 36158 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 36159 ;; Tracked objects:
 36160 ;;		On entry : F/0
 36161 ;;		On exit  : F/0
 36162 ;;		Unchanged: 0/0
 36163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36164 ;;      Params:         0       6       0       0       0       0       0       0       0
 36165 ;;      Locals:         0       4       0       0       0       0       0       0       0
 36166 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36167 ;;      Totals:         0      10       0       0       0       0       0       0       0
 36168 ;;Total ram usage:       10 bytes
 36169 ;; Hardware stack levels used:    1
 36170 ;; Hardware stack levels required when called:    7
 36171 ;; This function calls:
 36172 ;;		Nothing
 36173 ;; This function is called by:
 36174 ;;		_RADIO_SetFSKSyncWord
 36175 ;;		_UpdateCfList
 36176 ;;		_InitDefault868Channels
 36177 ;;		_InitDefault433Channels
 36178 ;;		_AESCmac
 36179 ;;		_LORAWAN_SetNetworkSessionKey
 36180 ;;		_LORAWAN_SetApplicationSessionKey
 36181 ;;		_LORAWAN_RxDone
 36182 ;;		_AssemblePacket
 36183 ;;		_PrepareJoinRequestFrame
 36184 ;;		_PrepareSessionKeys
 36185 ;;		_AssembleEncryptionBlock
 36186 ;;		_ExtractMic
 36187 ;;		_ComputeMic
 36188 ;;		_AESEncodeLoRa
 36189 ;; This function uses a non-reentrant model
 36190 ;;
 36191                           
 36192                           	psect	text191
 36193  0068E6                     __ptext191:
 36194                           	opt stack 0
 36195  0068E6                     _memcpy:
 36196                           	opt stack 17
 36197                           
 36198                           ; BSR set to: 0
 36199                           
 36200                           ; BSR set to: 0
 36201                           ;incstack = 0
 36202  0068E6  C066  F06C         	movff	memcpy@s1,memcpy@s
 36203  0068EA  C067  F06D         	movff	memcpy@s1+1,memcpy@s+1
 36204  0068EE  C064  F06A         	movff	memcpy@d1,memcpy@d
 36205  0068F2  C065  F06B         	movff	memcpy@d1+1,memcpy@d+1
 36206  0068F6  D01A               	goto	l11966
 36207  0068F8                     l11960:
 36208                           
 36209                           ; BSR set to: 0
 36210  0068F8  C06C  FFF6         	movff	memcpy@s,tblptrl
 36211  0068FC  C06D  FFF7         	movff	memcpy@s+1,tblptrh
 36212  006900  6AF8               	clrf	tblptru,c
 36213  006902  C06A  FFD9         	movff	memcpy@d,fsr2l
 36214  006906  C06B  FFDA         	movff	memcpy@d+1,fsr2h
 36215  00690A  0E07               	movlw	(high __ramtop+-1)
 36216  00690C  64F7               	cpfsgt	tblptrh,c
 36217  00690E  D003               	bra	u12667
 36218  006910  0008               	tblrd		*
 36219  006912  50F5               	movf	tablat,w,c
 36220  006914  D005               	bra	u12660
 36221  006916                     u12667:
 36222  006916  CFF6 FFE9          	movff	tblptrl,fsr0l
 36223  00691A  CFF7 FFEA          	movff	tblptrh,fsr0h
 36224  00691E  50EF               	movf	indf0,w,c
 36225  006920                     u12660:
 36226  006920  6EDF               	movwf	indf2,c
 36227  006922  0100               	movlb	0	; () banked
 36228  006924  4B6C               	infsnz	memcpy@s& (0+255),f,b
 36229  006926  2B6D               	incf	(memcpy@s+1)& (0+255),f,b
 36230                           
 36231                           ; BSR set to: 0
 36232  006928  4B6A               	infsnz	memcpy@d& (0+255),f,b
 36233  00692A  2B6B               	incf	(memcpy@d+1)& (0+255),f,b
 36234  00692C                     l11966:
 36235                           
 36236                           ; BSR set to: 0
 36237  00692C  0768               	decf	memcpy@n& (0+255),f,b
 36238  00692E  A0D8               	btfss	status,0,c
 36239  006930  0769               	decf	(memcpy@n+1)& (0+255),f,b
 36240  006932  2968               	incf	memcpy@n& (0+255),w,b
 36241  006934  E1E1               	bnz	l11960
 36242  006936  2969               	incf	(memcpy@n+1)& (0+255),w,b
 36243  006938  E1DF               	bnz	l11960
 36244                           
 36245                           ; BSR set to: 0
 36246  00693A  0012               	return		;funcret
 36247  00693C                     __end_of_memcpy:
 36248                           	opt stack 0
 36249                           tosu	equ	0xFFF
 36250                           tosh	equ	0xFFE
 36251                           tosl	equ	0xFFD
 36252                           pclath	equ	0xFFA
 36253                           tblptru	equ	0xFF8
 36254                           tblptrh	equ	0xFF7
 36255                           tblptrl	equ	0xFF6
 36256                           tablat	equ	0xFF5
 36257                           prodh	equ	0xFF4
 36258                           prodl	equ	0xFF3
 36259                           intcon	equ	0xFF2
 36260                           indf0	equ	0xFEF
 36261                           postinc0	equ	0xFEE
 36262                           plusw0	equ	0xFEB
 36263                           fsr0h	equ	0xFEA
 36264                           fsr0l	equ	0xFE9
 36265                           wreg	equ	0xFE8
 36266                           postinc1	equ	0xFE6
 36267                           postdec1	equ	0xFE5
 36268                           plusw1	equ	0xFE3
 36269                           fsr1h	equ	0xFE2
 36270                           fsr1l	equ	0xFE1
 36271                           indf2	equ	0xFDF
 36272                           postinc2	equ	0xFDE
 36273                           postdec2	equ	0xFDD
 36274                           plusw2	equ	0xFDB
 36275                           fsr2h	equ	0xFDA
 36276                           fsr2l	equ	0xFD9
 36277                           status	equ	0xFD8
 36278                           
 36279 ;; *************** function _CreateAllSoftwareTimers *****************
 36280 ;; Defined at:
 36281 ;;		line 937 in file "mcc_generated_files/LoRaWAN/lorawan_eu.c"
 36282 ;; Parameters:    Size  Location     Type
 36283 ;;		None
 36284 ;; Auto vars:     Size  Location     Type
 36285 ;;		None
 36286 ;; Return value:  Size  Location     Type
 36287 ;;                  1    wreg      void 
 36288 ;; Registers used:
 36289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 36290 ;; Tracked objects:
 36291 ;;		On entry : F/2
 36292 ;;		On exit  : F/2
 36293 ;;		Unchanged: 0/0
 36294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36295 ;;      Params:         0       0       0       0       0       0       0       0       0
 36296 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36297 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36298 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36299 ;;Total ram usage:        0 bytes
 36300 ;; Hardware stack levels used:    1
 36301 ;; Hardware stack levels required when called:    8
 36302 ;; This function calls:
 36303 ;;		_SwTimerCreate
 36304 ;; This function is called by:
 36305 ;;		_LORAWAN_Init
 36306 ;; This function uses a non-reentrant model
 36307 ;;
 36308                           
 36309                           	psect	text192
 36310  0069E0                     __ptext192:
 36311                           	opt stack 0
 36312  0069E0                     _CreateAllSoftwareTimers:
 36313                           	opt stack 21
 36314                           
 36315                           ; BSR set to: 2
 36316                           ;lorawan_eu.c: 939: loRa.joinAccept1TimerId = SwTimerCreate();
 36317                           
 36318                           ; BSR set to: 0
 36319                           ;incstack = 0
 36320  0069E0  EC27  F031         	call	_SwTimerCreate	;wreg free
 36321  0069E4  0102               	movlb	2	; () banked
 36322  0069E6  6FE2               	movwf	(_loRa+226)& (0+255),b
 36323                           
 36324                           ;lorawan_eu.c: 940: loRa.joinAccept2TimerId = SwTimerCreate();
 36325  0069E8  EC27  F031         	call	_SwTimerCreate	;wreg free
 36326  0069EC  0102               	movlb	2	; () banked
 36327  0069EE  6FE3               	movwf	(_loRa+227)& (0+255),b
 36328                           
 36329                           ;lorawan_eu.c: 941: loRa.receiveWindow1TimerId = SwTimerCreate();
 36330  0069F0  EC27  F031         	call	_SwTimerCreate	;wreg free
 36331  0069F4  0102               	movlb	2	; () banked
 36332  0069F6  6FE4               	movwf	(_loRa+228)& (0+255),b
 36333                           
 36334                           ;lorawan_eu.c: 942: loRa.receiveWindow2TimerId = SwTimerCreate();
 36335  0069F8  EC27  F031         	call	_SwTimerCreate	;wreg free
 36336  0069FC  0102               	movlb	2	; () banked
 36337  0069FE  6FE5               	movwf	(_loRa+229)& (0+255),b
 36338                           
 36339                           ;lorawan_eu.c: 943: loRa.linkCheckTimerId = SwTimerCreate();
 36340  006A00  EC27  F031         	call	_SwTimerCreate	;wreg free
 36341  006A04  0102               	movlb	2	; () banked
 36342  006A06  6FE7               	movwf	(_loRa+231)& (0+255),b
 36343                           
 36344                           ;lorawan_eu.c: 944: loRa.ackTimeoutTimerId = SwTimerCreate();
 36345  006A08  EC27  F031         	call	_SwTimerCreate	;wreg free
 36346  006A0C  0102               	movlb	2	; () banked
 36347  006A0E  6FE8               	movwf	(_loRa+232)& (0+255),b
 36348                           
 36349                           ;lorawan_eu.c: 945: loRa.automaticReplyTimerId = SwTimerCreate();
 36350  006A10  EC27  F031         	call	_SwTimerCreate	;wreg free
 36351  006A14  0102               	movlb	2	; () banked
 36352  006A16  6FE6               	movwf	(_loRa+230)& (0+255),b
 36353                           
 36354                           ;lorawan_eu.c: 946: loRa.unconfirmedRetransmisionTimerId = SwTimerCreate();
 36355  006A18  EC27  F031         	call	_SwTimerCreate	;wreg free
 36356  006A1C  0102               	movlb	2	; () banked
 36357  006A1E  6FEA               	movwf	(_loRa+234)& (0+255),b
 36358                           
 36359                           ;lorawan_eu.c: 947: loRa.abpJoinTimerId = SwTimerCreate();
 36360  006A20  EC27  F031         	call	_SwTimerCreate	;wreg free
 36361  006A24  0102               	movlb	2	; () banked
 36362  006A26  6FF3               	movwf	(_loRa+243)& (0+255),b
 36363                           
 36364                           ;lorawan_eu.c: 948: loRa.dutyCycleTimerId = SwTimerCreate();
 36365  006A28  EC27  F031         	call	_SwTimerCreate	;wreg free
 36366  006A2C  0102               	movlb	2	; () banked
 36367  006A2E  6FE9               	movwf	(_loRa+233)& (0+255),b
 36368                           
 36369                           ; BSR set to: 2
 36370  006A30  0012               	return		;funcret
 36371  006A32                     __end_of_CreateAllSoftwareTimers:
 36372                           	opt stack 0
 36373                           tosu	equ	0xFFF
 36374                           tosh	equ	0xFFE
 36375                           tosl	equ	0xFFD
 36376                           pclath	equ	0xFFA
 36377                           tblptru	equ	0xFF8
 36378                           tblptrh	equ	0xFF7
 36379                           tblptrl	equ	0xFF6
 36380                           tablat	equ	0xFF5
 36381                           prodh	equ	0xFF4
 36382                           prodl	equ	0xFF3
 36383                           intcon	equ	0xFF2
 36384                           indf0	equ	0xFEF
 36385                           postinc0	equ	0xFEE
 36386                           plusw0	equ	0xFEB
 36387                           fsr0h	equ	0xFEA
 36388                           fsr0l	equ	0xFE9
 36389                           wreg	equ	0xFE8
 36390                           postinc1	equ	0xFE6
 36391                           postdec1	equ	0xFE5
 36392                           plusw1	equ	0xFE3
 36393                           fsr1h	equ	0xFE2
 36394                           fsr1l	equ	0xFE1
 36395                           indf2	equ	0xFDF
 36396                           postinc2	equ	0xFDE
 36397                           postdec2	equ	0xFDD
 36398                           plusw2	equ	0xFDB
 36399                           fsr2h	equ	0xFDA
 36400                           fsr2l	equ	0xFD9
 36401                           status	equ	0xFD8
 36402                           
 36403 ;; *************** function _SwTimerCreate *****************
 36404 ;; Defined at:
 36405 ;;		line 154 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 36406 ;; Parameters:    Size  Location     Type
 36407 ;;		None
 36408 ;; Auto vars:     Size  Location     Type
 36409 ;;  retVal          1    4[BANK0 ] unsigned char 
 36410 ;; Return value:  Size  Location     Type
 36411 ;;                  1    wreg      unsigned char 
 36412 ;; Registers used:
 36413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 36414 ;; Tracked objects:
 36415 ;;		On entry : C/1
 36416 ;;		On exit  : F/0
 36417 ;;		Unchanged: 0/0
 36418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36419 ;;      Params:         0       0       0       0       0       0       0       0       0
 36420 ;;      Locals:         0       1       0       0       0       0       0       0       0
 36421 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36422 ;;      Totals:         0       1       0       0       0       0       0       0       0
 36423 ;;Total ram usage:        1 bytes
 36424 ;; Hardware stack levels used:    1
 36425 ;; Hardware stack levels required when called:    7
 36426 ;; This function calls:
 36427 ;;		Nothing
 36428 ;; This function is called by:
 36429 ;;		_RADIO_Init
 36430 ;;		_CreateAllSoftwareTimers
 36431 ;; This function uses a non-reentrant model
 36432 ;;
 36433                           
 36434                           	psect	text193
 36435  00624E                     __ptext193:
 36436                           	opt stack 0
 36437  00624E                     _SwTimerCreate:
 36438                           	opt stack 21
 36439                           
 36440                           ;sw_timer.c: 156: uint8_t retVal;
 36441                           ;sw_timer.c: 157: if (allocatedTimers < 20)
 36442                           
 36443                           ; BSR set to: 2
 36444                           ;incstack = 0
 36445  00624E  0E14               	movlw	20
 36446  006250  0101               	movlb	1	; () banked
 36447  006252  6173               	cpfslt	_allocatedTimers& (0+255),b	;volatile
 36448  006254  D030               	goto	l143
 36449                           
 36450                           ; BSR set to: 1
 36451                           ;sw_timer.c: 158: {
 36452                           ;sw_timer.c: 159: (INTCONbits.GIE = 0);
 36453  006256  9EF2               	bcf	intcon,7,c	;volatile
 36454                           
 36455                           ;sw_timer.c: 160: retVal = allocatedTimers;
 36456  006258  C173  F064         	movff	_allocatedTimers,SwTimerCreate@retVal	;volatile
 36457                           
 36458                           ; BSR set to: 1
 36459                           ;sw_timer.c: 161: swTimers[retVal].running = 0;
 36460  00625C  0100               	movlb	0	; () banked
 36461  00625E  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36462  006260  0D08               	mullw	8
 36463  006262  0E04               	movlw	low (_swTimers+4)
 36464  006264  24F3               	addwf	prodl,w,c
 36465  006266  6ED9               	movwf	fsr2l,c
 36466  006268  0E03               	movlw	high (_swTimers+4)
 36467  00626A  20F4               	addwfc	prodh,w,c
 36468  00626C  6EDA               	movwf	fsr2h,c
 36469  00626E  6ADF               	clrf	indf2,c
 36470                           
 36471                           ;sw_timer.c: 162: swTimers[retVal].ticksRemaining = 0;
 36472  006270  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36473  006272  0D08               	mullw	8
 36474  006274  0E00               	movlw	low _swTimers
 36475  006276  24F3               	addwf	prodl,w,c
 36476  006278  6ED9               	movwf	fsr2l,c
 36477  00627A  0E03               	movlw	high _swTimers
 36478  00627C  20F4               	addwfc	prodh,w,c
 36479  00627E  6EDA               	movwf	fsr2h,c
 36480  006280  6ADE               	clrf	postinc2,c
 36481  006282  6ADE               	clrf	postinc2,c
 36482  006284  6ADE               	clrf	postinc2,c
 36483  006286  6ADD               	clrf	postdec2,c
 36484                           
 36485                           ;sw_timer.c: 163: swTimers[retVal].callbackParameter = 0;
 36486  006288  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36487  00628A  0D08               	mullw	8
 36488  00628C  0E05               	movlw	low (_swTimers+5)
 36489  00628E  24F3               	addwf	prodl,w,c
 36490  006290  6ED9               	movwf	fsr2l,c
 36491  006292  0E03               	movlw	high (_swTimers+5)
 36492  006294  20F4               	addwfc	prodh,w,c
 36493  006296  6EDA               	movwf	fsr2h,c
 36494  006298  6ADF               	clrf	indf2,c
 36495                           
 36496                           ;sw_timer.c: 164: swTimers[retVal].callback = (0);
 36497  00629A  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36498  00629C  0D08               	mullw	8
 36499  00629E  0E06               	movlw	low (_swTimers+6)
 36500  0062A0  24F3               	addwf	prodl,w,c
 36501  0062A2  6ED9               	movwf	fsr2l,c
 36502  0062A4  0E03               	movlw	high (_swTimers+6)
 36503  0062A6  20F4               	addwfc	prodh,w,c
 36504  0062A8  6EDA               	movwf	fsr2h,c
 36505  0062AA  6ADE               	clrf	postinc2,c
 36506  0062AC  6ADD               	clrf	postdec2,c
 36507                           
 36508                           ; BSR set to: 0
 36509                           ;sw_timer.c: 165: allocatedTimers++;
 36510  0062AE  0101               	movlb	1	; () banked
 36511  0062B0  2B73               	incf	_allocatedTimers& (0+255),f,b	;volatile
 36512                           
 36513                           ; BSR set to: 1
 36514                           ;sw_timer.c: 166: (INTCONbits.GIE = 1);
 36515  0062B2  8EF2               	bsf	intcon,7,c	;volatile
 36516                           
 36517                           ;sw_timer.c: 167: }
 36518  0062B4  D001               	goto	l14122
 36519  0062B6                     l143:
 36520  0062B6  D7FF               	goto	l143
 36521  0062B8                     l14122:
 36522                           
 36523                           ; BSR set to: 1
 36524                           ;sw_timer.c: 175: }
 36525                           ;sw_timer.c: 176: }
 36526                           ;sw_timer.c: 177: return retVal;
 36527  0062B8  0100               	movlb	0	; () banked
 36528  0062BA  5164               	movf	SwTimerCreate@retVal& (0+255),w,b
 36529                           
 36530                           ; BSR set to: 0
 36531  0062BC  0012               	return		;funcret
 36532  0062BE                     __end_of_SwTimerCreate:
 36533                           	opt stack 0
 36534                           tosu	equ	0xFFF
 36535                           tosh	equ	0xFFE
 36536                           tosl	equ	0xFFD
 36537                           pclath	equ	0xFFA
 36538                           tblptru	equ	0xFF8
 36539                           tblptrh	equ	0xFF7
 36540                           tblptrl	equ	0xFF6
 36541                           tablat	equ	0xFF5
 36542                           prodh	equ	0xFF4
 36543                           prodl	equ	0xFF3
 36544                           intcon	equ	0xFF2
 36545                           indf0	equ	0xFEF
 36546                           postinc0	equ	0xFEE
 36547                           plusw0	equ	0xFEB
 36548                           fsr0h	equ	0xFEA
 36549                           fsr0l	equ	0xFE9
 36550                           wreg	equ	0xFE8
 36551                           postinc1	equ	0xFE6
 36552                           postdec1	equ	0xFE5
 36553                           plusw1	equ	0xFE3
 36554                           fsr1h	equ	0xFE2
 36555                           fsr1l	equ	0xFE1
 36556                           indf2	equ	0xFDF
 36557                           postinc2	equ	0xFDE
 36558                           postdec2	equ	0xFDD
 36559                           plusw2	equ	0xFDB
 36560                           fsr2h	equ	0xFDA
 36561                           fsr2l	equ	0xFD9
 36562                           status	equ	0xFD8
 36563                           
 36564 ;; *************** function _LORAWAN_GetState *****************
 36565 ;; Defined at:
 36566 ;;		line 2233 in file "mcc_generated_files/LoRaWAN/lorawan.c"
 36567 ;; Parameters:    Size  Location     Type
 36568 ;;		None
 36569 ;; Auto vars:     Size  Location     Type
 36570 ;;		None
 36571 ;; Return value:  Size  Location     Type
 36572 ;;                  1    wreg      unsigned char 
 36573 ;; Registers used:
 36574 ;;		wreg, status,2, status,0
 36575 ;; Tracked objects:
 36576 ;;		On entry : E/0
 36577 ;;		On exit  : F/2
 36578 ;;		Unchanged: 0/0
 36579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36580 ;;      Params:         0       0       0       0       0       0       0       0       0
 36581 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36582 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36583 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36584 ;;Total ram usage:        0 bytes
 36585 ;; Hardware stack levels used:    1
 36586 ;; Hardware stack levels required when called:    7
 36587 ;; This function calls:
 36588 ;;		Nothing
 36589 ;; This function is called by:
 36590 ;;		_main
 36591 ;; This function uses a non-reentrant model
 36592 ;;
 36593                           
 36594                           	psect	text194
 36595  00787A                     __ptext194:
 36596                           	opt stack 0
 36597  00787A                     _LORAWAN_GetState:
 36598                           	opt stack 23
 36599                           
 36600                           ;lorawan.c: 2235: return loRa.macStatus.macState;
 36601                           
 36602                           ; BSR set to: 0
 36603                           ;incstack = 0
 36604  00787A  0102               	movlb	2	; () banked
 36605  00787C  5102               	movf	(_loRa+2)& (0+255),w,b
 36606  00787E  0B0F               	andlw	15
 36607                           
 36608                           ; BSR set to: 2
 36609  007880  0012               	return		;funcret
 36610  007882                     __end_of_LORAWAN_GetState:
 36611                           	opt stack 0
 36612                           tosu	equ	0xFFF
 36613                           tosh	equ	0xFFE
 36614                           tosl	equ	0xFFD
 36615                           pclath	equ	0xFFA
 36616                           tblptru	equ	0xFF8
 36617                           tblptrh	equ	0xFF7
 36618                           tblptrl	equ	0xFF6
 36619                           tablat	equ	0xFF5
 36620                           prodh	equ	0xFF4
 36621                           prodl	equ	0xFF3
 36622                           intcon	equ	0xFF2
 36623                           indf0	equ	0xFEF
 36624                           postinc0	equ	0xFEE
 36625                           plusw0	equ	0xFEB
 36626                           fsr0h	equ	0xFEA
 36627                           fsr0l	equ	0xFE9
 36628                           wreg	equ	0xFE8
 36629                           postinc1	equ	0xFE6
 36630                           postdec1	equ	0xFE5
 36631                           plusw1	equ	0xFE3
 36632                           fsr1h	equ	0xFE2
 36633                           fsr1l	equ	0xFE1
 36634                           indf2	equ	0xFDF
 36635                           postinc2	equ	0xFDE
 36636                           postdec2	equ	0xFDD
 36637                           plusw2	equ	0xFDB
 36638                           fsr2h	equ	0xFDA
 36639                           fsr2l	equ	0xFD9
 36640                           status	equ	0xFD8
 36641                           
 36642 ;; *************** function _INTERRUPT_InterruptManager *****************
 36643 ;; Defined at:
 36644 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 36645 ;; Parameters:    Size  Location     Type
 36646 ;;		None
 36647 ;; Auto vars:     Size  Location     Type
 36648 ;;		None
 36649 ;; Return value:  Size  Location     Type
 36650 ;;                  1    wreg      void 
 36651 ;; Registers used:
 36652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 36653 ;; Tracked objects:
 36654 ;;		On entry : 0/0
 36655 ;;		On exit  : 0/0
 36656 ;;		Unchanged: 0/0
 36657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36658 ;;      Params:         0       0       0       0       0       0       0       0       0
 36659 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36660 ;;      Temps:          8       0       0       0       0       0       0       0       0
 36661 ;;      Totals:         8       0       0       0       0       0       0       0       0
 36662 ;;Total ram usage:        8 bytes
 36663 ;; Hardware stack levels used:    1
 36664 ;; Hardware stack levels required when called:    6
 36665 ;; This function calls:
 36666 ;;		_INT1_ISR
 36667 ;;		_INT2_ISR
 36668 ;;		_INT3_ISR
 36669 ;;		_PIN_MANAGER_IOC
 36670 ;;		_TMR1_ISR
 36671 ;; This function is called by:
 36672 ;;		Interrupt level 2
 36673 ;; This function uses a non-reentrant model
 36674 ;;
 36675                           
 36676                           	psect	intcode
 36677  000008                     __pintcode:
 36678                           	opt stack 0
 36679  000008                     _INTERRUPT_InterruptManager:
 36680                           	opt stack 12
 36681                           
 36682                           ; BSR set to: 2
 36683                           ;incstack = 0
 36684  000008  CFFA F028          	movff	pclath,??_INTERRUPT_InterruptManager
 36685  00000C  CFFB F029          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 36686  000010  CFE1 F02A          	movff	fsr1l,??_INTERRUPT_InterruptManager+2
 36687  000014  CFE2 F02B          	movff	fsr1h,??_INTERRUPT_InterruptManager+3
 36688  000018  CFD9 F02C          	movff	fsr2l,??_INTERRUPT_InterruptManager+4
 36689  00001C  CFDA F02D          	movff	fsr2h,??_INTERRUPT_InterruptManager+5
 36690  000020  CFF3 F02E          	movff	prodl,??_INTERRUPT_InterruptManager+6
 36691  000024  CFF4 F02F          	movff	prodh,??_INTERRUPT_InterruptManager+7
 36692  000028  EE17  F054         	lfsr	1,___inthi_sp
 36693                           
 36694                           ;interrupt_manager.c: 60: if(PIE0bits.INT3IE == 1 && PIR0bits.INT3IF == 1)
 36695  00002C  010E               	movlb	14	; () banked
 36696  00002E  B729               	btfsc	41,3,b	;volatile
 36697                           
 36698                           ; BSR set to: 14
 36699  000030  A733               	btfss	51,3,b	;volatile
 36700  000032  D003               	goto	i2l2508
 36701                           
 36702                           ; BSR set to: 14
 36703                           ;interrupt_manager.c: 61: {
 36704                           ;interrupt_manager.c: 62: INT3_ISR();
 36705  000034  EC63  F03C         	call	_INT3_ISR	;wreg free
 36706                           
 36707                           ;interrupt_manager.c: 63: }
 36708  000038  D019               	goto	i2l2518
 36709  00003A                     i2l2508:
 36710                           
 36711                           ; BSR set to: 14
 36712                           ;interrupt_manager.c: 64: else if(PIE0bits.INT1IE == 1 && PIR0bits.INT1IF == 1)
 36713  00003A  B329               	btfsc	41,1,b	;volatile
 36714                           
 36715                           ; BSR set to: 14
 36716  00003C  A333               	btfss	51,1,b	;volatile
 36717  00003E  D003               	goto	i2l2510
 36718                           
 36719                           ; BSR set to: 14
 36720                           ;interrupt_manager.c: 65: {
 36721                           ;interrupt_manager.c: 66: INT1_ISR();
 36722  000040  EC69  F03C         	call	_INT1_ISR	;wreg free
 36723                           
 36724                           ;interrupt_manager.c: 67: }
 36725  000044  D013               	goto	i2l2518
 36726  000046                     i2l2510:
 36727                           
 36728                           ; BSR set to: 14
 36729                           ;interrupt_manager.c: 68: else if(PIE0bits.INT2IE == 1 && PIR0bits.INT2IF == 1)
 36730  000046  B529               	btfsc	41,2,b	;volatile
 36731                           
 36732                           ; BSR set to: 14
 36733  000048  A533               	btfss	51,2,b	;volatile
 36734  00004A  D003               	goto	i2l2512
 36735                           
 36736                           ; BSR set to: 14
 36737                           ;interrupt_manager.c: 69: {
 36738                           ;interrupt_manager.c: 70: INT2_ISR();
 36739  00004C  EC66  F03C         	call	_INT2_ISR	;wreg free
 36740                           
 36741                           ;interrupt_manager.c: 71: }
 36742  000050  D00D               	goto	i2l2518
 36743  000052                     i2l2512:
 36744                           
 36745                           ; BSR set to: 14
 36746                           ;interrupt_manager.c: 72: else if(INTCONbits.PEIE == 1 && PIE5bits.TMR1IE == 1 && PIR5bi
      +                          ts.TMR1IF == 1)
 36747  000052  BCF2               	btfsc	intcon,6,c	;volatile
 36748                           
 36749                           ; BSR set to: 14
 36750  000054  A12E               	btfss	46,0,b	;volatile
 36751  000056  D005               	goto	i2l2514
 36752                           
 36753                           ; BSR set to: 14
 36754  000058  A138               	btfss	56,0,b	;volatile
 36755  00005A  D003               	goto	i2l2514
 36756                           
 36757                           ; BSR set to: 14
 36758                           ;interrupt_manager.c: 73: {
 36759                           ;interrupt_manager.c: 74: TMR1_ISR();
 36760  00005C  ECE8  F039         	call	_TMR1_ISR	;wreg free
 36761                           
 36762                           ;interrupt_manager.c: 75: }
 36763  000060  D005               	goto	i2l2518
 36764  000062                     i2l2514:
 36765                           
 36766                           ; BSR set to: 14
 36767                           ;interrupt_manager.c: 76: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
 36768  000062  B929               	btfsc	41,4,b	;volatile
 36769                           
 36770                           ; BSR set to: 14
 36771  000064  A933               	btfss	51,4,b	;volatile
 36772  000066  D002               	goto	i2l2518
 36773                           
 36774                           ; BSR set to: 14
 36775                           ;interrupt_manager.c: 77: {
 36776                           ;interrupt_manager.c: 78: PIN_MANAGER_IOC();
 36777  000068  EC41  F03C         	call	_PIN_MANAGER_IOC	;wreg free
 36778  00006C                     i2l2518:
 36779  00006C  C02F  FFF4         	movff	??_INTERRUPT_InterruptManager+7,prodh
 36780  000070  C02E  FFF3         	movff	??_INTERRUPT_InterruptManager+6,prodl
 36781  000074  C02D  FFDA         	movff	??_INTERRUPT_InterruptManager+5,fsr2h
 36782  000078  C02C  FFD9         	movff	??_INTERRUPT_InterruptManager+4,fsr2l
 36783  00007C  C02B  FFE2         	movff	??_INTERRUPT_InterruptManager+3,fsr1h
 36784  000080  C02A  FFE1         	movff	??_INTERRUPT_InterruptManager+2,fsr1l
 36785  000084  C029  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 36786  000088  C028  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 36787  00008C  0011               	retfie		f
 36788  00008E                     __end_of_INTERRUPT_InterruptManager:
 36789                           	opt stack 0
 36790                           tosu	equ	0xFFF
 36791                           tosh	equ	0xFFE
 36792                           tosl	equ	0xFFD
 36793                           pclatu	equ	0xFFB
 36794                           pclath	equ	0xFFA
 36795                           tblptru	equ	0xFF8
 36796                           tblptrh	equ	0xFF7
 36797                           tblptrl	equ	0xFF6
 36798                           tablat	equ	0xFF5
 36799                           prodh	equ	0xFF4
 36800                           prodl	equ	0xFF3
 36801                           intcon	equ	0xFF2
 36802                           indf0	equ	0xFEF
 36803                           postinc0	equ	0xFEE
 36804                           plusw0	equ	0xFEB
 36805                           fsr0h	equ	0xFEA
 36806                           fsr0l	equ	0xFE9
 36807                           wreg	equ	0xFE8
 36808                           postinc1	equ	0xFE6
 36809                           postdec1	equ	0xFE5
 36810                           plusw1	equ	0xFE3
 36811                           fsr1h	equ	0xFE2
 36812                           fsr1l	equ	0xFE1
 36813                           indf2	equ	0xFDF
 36814                           postinc2	equ	0xFDE
 36815                           postdec2	equ	0xFDD
 36816                           plusw2	equ	0xFDB
 36817                           fsr2h	equ	0xFDA
 36818                           fsr2l	equ	0xFD9
 36819                           status	equ	0xFD8
 36820                           
 36821 ;; *************** function _TMR1_ISR *****************
 36822 ;; Defined at:
 36823 ;;		line 161 in file "mcc_generated_files/tmr1.c"
 36824 ;; Parameters:    Size  Location     Type
 36825 ;;		None
 36826 ;; Auto vars:     Size  Location     Type
 36827 ;;		None
 36828 ;; Return value:  Size  Location     Type
 36829 ;;                  1    wreg      void 
 36830 ;; Registers used:
 36831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 36832 ;; Tracked objects:
 36833 ;;		On entry : F/E
 36834 ;;		On exit  : 0/0
 36835 ;;		Unchanged: 0/0
 36836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36837 ;;      Params:         0       0       0       0       0       0       0       0       0
 36838 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36839 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36840 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36841 ;;Total ram usage:        0 bytes
 36842 ;; Hardware stack levels used:    1
 36843 ;; Hardware stack levels required when called:    5
 36844 ;; This function calls:
 36845 ;;		_TMR1_CallBack
 36846 ;; This function is called by:
 36847 ;;		_INTERRUPT_InterruptManager
 36848 ;; This function uses a non-reentrant model
 36849 ;;
 36850                           
 36851                           	psect	text196
 36852  0073D0                     __ptext196:
 36853                           	opt stack 0
 36854  0073D0                     _TMR1_ISR:
 36855                           	opt stack 12
 36856                           
 36857                           ; BSR set to: 14
 36858                           ;tmr1.c: 163: static volatile unsigned int CountCallBack = 0;
 36859                           ;tmr1.c: 166: PIR5bits.TMR1IF = 0;
 36860                           
 36861                           ;incstack = 0
 36862  0073D0  9138               	bcf	56,0,b	;volatile
 36863                           
 36864                           ;tmr1.c: 168: TMR1H = (timer1ReloadVal >> 8);
 36865  0073D2  C05F  FFCE         	movff	_timer1ReloadVal+1,4046	;volatile
 36866                           
 36867                           ;tmr1.c: 169: TMR1L = timer1ReloadVal;
 36868  0073D6  C05E  FFCD         	movff	_timer1ReloadVal,4045	;volatile
 36869                           
 36870                           ; BSR set to: 14
 36871                           ;tmr1.c: 172: if (++CountCallBack >= 16)
 36872  0073DA  4A3C               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
 36873  0073DC  2A3D               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
 36874  0073DE  503D               	movf	TMR1_ISR@CountCallBack+1,w,c	;volatile
 36875  0073E0  E104               	bnz	i2u1973_40
 36876  0073E2  0E10               	movlw	16
 36877  0073E4  5C3C               	subwf	TMR1_ISR@CountCallBack,w,c	;volatile
 36878  0073E6  A0D8               	btfss	status,0,c
 36879  0073E8  0012               	return	
 36880  0073EA                     i2u1973_40:
 36881                           
 36882                           ; BSR set to: 14
 36883                           ;tmr1.c: 173: {
 36884                           ;tmr1.c: 175: TMR1_CallBack();
 36885  0073EA  ECA9  F03A         	call	_TMR1_CallBack	;wreg free
 36886                           
 36887                           ;tmr1.c: 178: CountCallBack = 0;
 36888  0073EE  6A3C               	clrf	TMR1_ISR@CountCallBack,c	;volatile
 36889  0073F0  6A3D               	clrf	TMR1_ISR@CountCallBack+1,c	;volatile
 36890  0073F2  0012               	return		;funcret
 36891  0073F4                     __end_of_TMR1_ISR:
 36892                           	opt stack 0
 36893                           tosu	equ	0xFFF
 36894                           tosh	equ	0xFFE
 36895                           tosl	equ	0xFFD
 36896                           pclatu	equ	0xFFB
 36897                           pclath	equ	0xFFA
 36898                           tblptru	equ	0xFF8
 36899                           tblptrh	equ	0xFF7
 36900                           tblptrl	equ	0xFF6
 36901                           tablat	equ	0xFF5
 36902                           prodh	equ	0xFF4
 36903                           prodl	equ	0xFF3
 36904                           intcon	equ	0xFF2
 36905                           indf0	equ	0xFEF
 36906                           postinc0	equ	0xFEE
 36907                           plusw0	equ	0xFEB
 36908                           fsr0h	equ	0xFEA
 36909                           fsr0l	equ	0xFE9
 36910                           wreg	equ	0xFE8
 36911                           postinc1	equ	0xFE6
 36912                           postdec1	equ	0xFE5
 36913                           plusw1	equ	0xFE3
 36914                           fsr1h	equ	0xFE2
 36915                           fsr1l	equ	0xFE1
 36916                           indf2	equ	0xFDF
 36917                           postinc2	equ	0xFDE
 36918                           postdec2	equ	0xFDD
 36919                           plusw2	equ	0xFDB
 36920                           fsr2h	equ	0xFDA
 36921                           fsr2l	equ	0xFD9
 36922                           status	equ	0xFD8
 36923                           
 36924 ;; *************** function _TMR1_CallBack *****************
 36925 ;; Defined at:
 36926 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 36927 ;; Parameters:    Size  Location     Type
 36928 ;;		None
 36929 ;; Auto vars:     Size  Location     Type
 36930 ;;		None
 36931 ;; Return value:  Size  Location     Type
 36932 ;;                  1    wreg      void 
 36933 ;; Registers used:
 36934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
 36935 ;; Tracked objects:
 36936 ;;		On entry : F/E
 36937 ;;		On exit  : 0/0
 36938 ;;		Unchanged: 0/0
 36939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 36940 ;;      Params:         0       0       0       0       0       0       0       0       0
 36941 ;;      Locals:         0       0       0       0       0       0       0       0       0
 36942 ;;      Temps:          0       0       0       0       0       0       0       0       0
 36943 ;;      Totals:         0       0       0       0       0       0       0       0       0
 36944 ;;Total ram usage:        0 bytes
 36945 ;; Hardware stack levels used:    1
 36946 ;; Hardware stack levels required when called:    4
 36947 ;; This function calls:
 36948 ;;		Absolute function
 36949 ;;		_TMR1_DefaultInterruptHandler
 36950 ;;		_TMR_ISR_lora
 36951 ;; This function is called by:
 36952 ;;		_TMR1_ISR
 36953 ;; This function uses a non-reentrant model
 36954 ;;
 36955                           
 36956                           	psect	text197
 36957  007552                     __ptext197:
 36958                           	opt stack 0
 36959  007552                     _TMR1_CallBack:
 36960                           	opt stack 12
 36961                           
 36962                           ; BSR set to: 14
 36963                           ;tmr1.c: 185: if(TMR1_InterruptHandler)
 36964                           
 36965                           ;incstack = 0
 36966  007552  0101               	movlb	1	; () banked
 36967  007554  51F7               	movf	_TMR1_InterruptHandler& (0+255),w,b
 36968  007556  11F8               	iorwf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 36969  007558  B4D8               	btfsc	status,2,c
 36970  00755A  0012               	return	
 36971                           
 36972                           ; BSR set to: 1
 36973                           ;tmr1.c: 186: {
 36974                           ;tmr1.c: 187: TMR1_InterruptHandler();
 36975  00755C  0005               	push	
 36976  00755E  6EFA               	movwf	pclath,c
 36977  007560  51F7               	movf	_TMR1_InterruptHandler& (0+255),w,b
 36978  007562  6EFD               	movwf	tosl,c
 36979  007564  51F8               	movf	(_TMR1_InterruptHandler+1)& (0+255),w,b
 36980  007566  6EFE               	movwf	tosh,c
 36981  007568  50F8               	movf	tblptru,w,c
 36982  00756A  6EFF               	movwf	tosu,c
 36983  00756C  50FA               	movf	pclath,w,c
 36984  00756E  0012               	return		;indir
 36985  007570                     __end_of_TMR1_CallBack:
 36986                           	opt stack 0
 36987                           tosu	equ	0xFFF
 36988                           tosh	equ	0xFFE
 36989                           tosl	equ	0xFFD
 36990                           pclatu	equ	0xFFB
 36991                           pclath	equ	0xFFA
 36992                           tblptru	equ	0xFF8
 36993                           tblptrh	equ	0xFF7
 36994                           tblptrl	equ	0xFF6
 36995                           tablat	equ	0xFF5
 36996                           prodh	equ	0xFF4
 36997                           prodl	equ	0xFF3
 36998                           intcon	equ	0xFF2
 36999                           indf0	equ	0xFEF
 37000                           postinc0	equ	0xFEE
 37001                           plusw0	equ	0xFEB
 37002                           fsr0h	equ	0xFEA
 37003                           fsr0l	equ	0xFE9
 37004                           wreg	equ	0xFE8
 37005                           postinc1	equ	0xFE6
 37006                           postdec1	equ	0xFE5
 37007                           plusw1	equ	0xFE3
 37008                           fsr1h	equ	0xFE2
 37009                           fsr1l	equ	0xFE1
 37010                           indf2	equ	0xFDF
 37011                           postinc2	equ	0xFDE
 37012                           postdec2	equ	0xFDD
 37013                           plusw2	equ	0xFDB
 37014                           fsr2h	equ	0xFDA
 37015                           fsr2l	equ	0xFD9
 37016                           status	equ	0xFD8
 37017                           
 37018 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 37019 ;; Defined at:
 37020 ;;		line 195 in file "mcc_generated_files/tmr1.c"
 37021 ;; Parameters:    Size  Location     Type
 37022 ;;		None
 37023 ;; Auto vars:     Size  Location     Type
 37024 ;;		None
 37025 ;; Return value:  Size  Location     Type
 37026 ;;                  1    wreg      void 
 37027 ;; Registers used:
 37028 ;;		None
 37029 ;; Tracked objects:
 37030 ;;		On entry : F/1
 37031 ;;		On exit  : F/1
 37032 ;;		Unchanged: F/0
 37033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37034 ;;      Params:         0       0       0       0       0       0       0       0       0
 37035 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37036 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37037 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37038 ;;Total ram usage:        0 bytes
 37039 ;; Hardware stack levels used:    1
 37040 ;; This function calls:
 37041 ;;		Nothing
 37042 ;; This function is called by:
 37043 ;;		_TMR1_Initialize
 37044 ;;		_TMR1_CallBack
 37045 ;; This function uses a non-reentrant model
 37046 ;;
 37047                           
 37048                           	psect	text198
 37049  0078F8                     __ptext198:
 37050                           	opt stack 0
 37051  0078F8                     _TMR1_DefaultInterruptHandler:
 37052                           	opt stack 15
 37053                           
 37054                           ; BSR set to: 1
 37055                           
 37056                           ;incstack = 0
 37057  0078F8  0012               	return		;funcret
 37058  0078FA                     __end_of_TMR1_DefaultInterruptHandler:
 37059                           	opt stack 0
 37060                           tosu	equ	0xFFF
 37061                           tosh	equ	0xFFE
 37062                           tosl	equ	0xFFD
 37063                           pclatu	equ	0xFFB
 37064                           pclath	equ	0xFFA
 37065                           tblptru	equ	0xFF8
 37066                           tblptrh	equ	0xFF7
 37067                           tblptrl	equ	0xFF6
 37068                           tablat	equ	0xFF5
 37069                           prodh	equ	0xFF4
 37070                           prodl	equ	0xFF3
 37071                           intcon	equ	0xFF2
 37072                           indf0	equ	0xFEF
 37073                           postinc0	equ	0xFEE
 37074                           plusw0	equ	0xFEB
 37075                           fsr0h	equ	0xFEA
 37076                           fsr0l	equ	0xFE9
 37077                           wreg	equ	0xFE8
 37078                           postinc1	equ	0xFE6
 37079                           postdec1	equ	0xFE5
 37080                           plusw1	equ	0xFE3
 37081                           fsr1h	equ	0xFE2
 37082                           fsr1l	equ	0xFE1
 37083                           indf2	equ	0xFDF
 37084                           postinc2	equ	0xFDE
 37085                           postdec2	equ	0xFDD
 37086                           plusw2	equ	0xFDB
 37087                           fsr2h	equ	0xFDA
 37088                           fsr2l	equ	0xFD9
 37089                           status	equ	0xFD8
 37090                           
 37091 ;; *************** function _TMR_ISR_lora *****************
 37092 ;; Defined at:
 37093 ;;		line 59 in file "mcc_generated_files/LoRaWAN/tmr_lora_addons.c"
 37094 ;; Parameters:    Size  Location     Type
 37095 ;;		None
 37096 ;; Auto vars:     Size  Location     Type
 37097 ;;		None
 37098 ;; Return value:  Size  Location     Type
 37099 ;;                  1    wreg      void 
 37100 ;; Registers used:
 37101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37102 ;; Tracked objects:
 37103 ;;		On entry : F/1
 37104 ;;		On exit  : 0/0
 37105 ;;		Unchanged: 0/0
 37106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37107 ;;      Params:         0       0       0       0       0       0       0       0       0
 37108 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37109 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37110 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37111 ;;Total ram usage:        0 bytes
 37112 ;; Hardware stack levels used:    1
 37113 ;; Hardware stack levels required when called:    3
 37114 ;; This function calls:
 37115 ;;		i2_SwTimersInterrupt
 37116 ;;		i2_TMR_SwapTimer
 37117 ;; This function is called by:
 37118 ;;		_TMR_ISR_Lora_Init
 37119 ;;		_TMR1_CallBack
 37120 ;; This function uses a non-reentrant model
 37121 ;;
 37122                           
 37123                           	psect	text199
 37124  006B1C                     __ptext199:
 37125                           	opt stack 0
 37126  006B1C                     _TMR_ISR_lora:
 37127                           	opt stack 12
 37128                           
 37129                           ; BSR set to: 1
 37130                           ;tmr_lora_addons.c: 61: timerOverflow = 1;
 37131                           
 37132                           ; BSR set to: 1
 37133                           ;incstack = 0
 37134  006B1C  0E01               	movlw	1
 37135  006B1E  6E49               	movwf	_timerOverflow,c	;volatile
 37136                           
 37137                           ; BSR set to: 1
 37138                           ;tmr_lora_addons.c: 63: ticksToScheduledInterrupt = SwTimersInterrupt();
 37139  006B20  EC4F  F026         	call	i2_SwTimersInterrupt	;wreg free
 37140  006B24  C017  F05A         	movff	?i2_SwTimersInterrupt,_ticksToScheduledInterrupt	;volatile
 37141  006B28  C018  F05B         	movff	?i2_SwTimersInterrupt+1,_ticksToScheduledInterrupt+1	;volatile
 37142  006B2C  C019  F05C         	movff	?i2_SwTimersInterrupt+2,_ticksToScheduledInterrupt+2	;volatile
 37143  006B30  C01A  F05D         	movff	?i2_SwTimersInterrupt+3,_ticksToScheduledInterrupt+3	;volatile
 37144                           
 37145                           ; BSR set to: 1
 37146                           ;tmr_lora_addons.c: 65: if (ticksToScheduledInterrupt < ((uint32_t)0x10000))
 37147  006B34  505D               	movf	_ticksToScheduledInterrupt+3,w,c	;volatile
 37148  006B36  E117               	bnz	i2l259
 37149  006B38  045C               	decf	_ticksToScheduledInterrupt+2,w,c	;volatile
 37150  006B3A  B0D8               	btfsc	status,0,c
 37151  006B3C  0012               	return	
 37152                           
 37153                           ; BSR set to: 1
 37154                           ;tmr_lora_addons.c: 66: {
 37155                           ;tmr_lora_addons.c: 67: reloadVal = ((uint32_t)0x10000) - ticksToScheduledInterrupt;
 37156  006B3E  505A               	movf	_ticksToScheduledInterrupt,w,c	;volatile
 37157  006B40  0800               	sublw	0
 37158  006B42  6E44               	movwf	_reloadVal,c	;volatile
 37159  006B44  505B               	movf	_ticksToScheduledInterrupt+1,w,c	;volatile
 37160  006B46  A0D8               	btfss	status,0,c
 37161  006B48  2AE8               	incf	wreg,f,c
 37162  006B4A  0800               	sublw	0
 37163  006B4C  6E45               	movwf	_reloadVal+1,c	;volatile
 37164                           
 37165                           ; BSR set to: 1
 37166                           ;tmr_lora_addons.c: 68: ticksAdded = TMR_SwapTimer(reloadVal);
 37167  006B4E  C044  F007         	movff	_reloadVal,i2TMR_SwapTimer@timerVal	;volatile
 37168  006B52  C045  F008         	movff	_reloadVal+1,i2TMR_SwapTimer@timerVal+1	;volatile
 37169  006B56  EC68  F037         	call	i2_TMR_SwapTimer	;wreg free
 37170  006B5A  C007  F038         	movff	?i2_TMR_SwapTimer,_ticksAdded	;volatile
 37171  006B5E  C008  F039         	movff	?i2_TMR_SwapTimer+1,_ticksAdded+1	;volatile
 37172  006B62  6A3A               	clrf	_ticksAdded+2,c	;volatile
 37173  006B64  6A3B               	clrf	_ticksAdded+3,c	;volatile
 37174  006B66                     i2l259:
 37175  006B66  0012               	return		;funcret
 37176  006B68                     __end_of_TMR_ISR_lora:
 37177                           	opt stack 0
 37178                           tosu	equ	0xFFF
 37179                           tosh	equ	0xFFE
 37180                           tosl	equ	0xFFD
 37181                           pclatu	equ	0xFFB
 37182                           pclath	equ	0xFFA
 37183                           tblptru	equ	0xFF8
 37184                           tblptrh	equ	0xFF7
 37185                           tblptrl	equ	0xFF6
 37186                           tablat	equ	0xFF5
 37187                           prodh	equ	0xFF4
 37188                           prodl	equ	0xFF3
 37189                           intcon	equ	0xFF2
 37190                           indf0	equ	0xFEF
 37191                           postinc0	equ	0xFEE
 37192                           plusw0	equ	0xFEB
 37193                           fsr0h	equ	0xFEA
 37194                           fsr0l	equ	0xFE9
 37195                           wreg	equ	0xFE8
 37196                           postinc1	equ	0xFE6
 37197                           postdec1	equ	0xFE5
 37198                           plusw1	equ	0xFE3
 37199                           fsr1h	equ	0xFE2
 37200                           fsr1l	equ	0xFE1
 37201                           indf2	equ	0xFDF
 37202                           postinc2	equ	0xFDE
 37203                           postdec2	equ	0xFDD
 37204                           plusw2	equ	0xFDB
 37205                           fsr2h	equ	0xFDA
 37206                           fsr2l	equ	0xFD9
 37207                           status	equ	0xFD8
 37208                           
 37209 ;; *************** function i2_TMR_SwapTimer *****************
 37210 ;; Defined at:
 37211 ;;		line 112 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 37212 ;; Parameters:    Size  Location     Type
 37213 ;;  timerVal        2    6[COMRAM] unsigned int 
 37214 ;; Auto vars:     Size  Location     Type
 37215 ;;		None
 37216 ;; Return value:  Size  Location     Type
 37217 ;;                  2    6[COMRAM] unsigned int 
 37218 ;; Registers used:
 37219 ;;		wreg, status,2, status,0, cstack
 37220 ;; Tracked objects:
 37221 ;;		On entry : F/1
 37222 ;;		On exit  : 0/0
 37223 ;;		Unchanged: 0/0
 37224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37225 ;;      Params:         2       0       0       0       0       0       0       0       0
 37226 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37227 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37228 ;;      Totals:         2       0       0       0       0       0       0       0       0
 37229 ;;Total ram usage:        2 bytes
 37230 ;; Hardware stack levels used:    1
 37231 ;; Hardware stack levels required when called:    1
 37232 ;; This function calls:
 37233 ;;		i2_TMR1_ReadTimer
 37234 ;;		i2_TMR1_WriteTimer
 37235 ;; This function is called by:
 37236 ;;		_TMR_ISR_lora
 37237 ;; This function uses a non-reentrant model
 37238 ;;
 37239                           
 37240                           	psect	text200
 37241  006ED0                     __ptext200:
 37242                           	opt stack 0
 37243  006ED0                     i2_TMR_SwapTimer:
 37244                           	opt stack 13
 37245                           
 37246                           ; BSR set to: 1
 37247                           ;sw_timer.c: 114: static uint16_t oldVal;
 37248                           ;sw_timer.c: 115: static uint16_t retVal;
 37249                           ;sw_timer.c: 117: oldVal = TMR1_ReadTimer();
 37250                           
 37251                           ;incstack = 0
 37252  006ED0  EC5D  F03A         	call	i2_TMR1_ReadTimer	;wreg free
 37253  006ED4  C001  F040         	movff	?i2_TMR1_ReadTimer,TMR_SwapTimer@oldVal
 37254  006ED8  C002  F041         	movff	?i2_TMR1_ReadTimer+1,TMR_SwapTimer@oldVal+1
 37255  006EDC                     i2l10534:
 37256  006EDC  EC5D  F03A         	call	i2_TMR1_ReadTimer	;wreg free
 37257  006EE0  5040               	movf	TMR_SwapTimer@oldVal,w,c
 37258  006EE2  1801               	xorwf	?i2_TMR1_ReadTimer,w,c
 37259  006EE4  E103               	bnz	i2u1099_40
 37260  006EE6  5041               	movf	TMR_SwapTimer@oldVal+1,w,c
 37261  006EE8  1802               	xorwf	?i2_TMR1_ReadTimer+1,w,c
 37262  006EEA  E0F8               	bz	i2l10534
 37263  006EEC                     i2u1099_40:
 37264                           
 37265                           ;sw_timer.c: 125: TMR1_WriteTimer(timerVal);
 37266  006EEC  C007  F001         	movff	i2TMR_SwapTimer@timerVal,i2TMR1_WriteTimer@timerVal
 37267  006EF0  C008  F002         	movff	i2TMR_SwapTimer@timerVal+1,i2TMR1_WriteTimer@timerVal+1
 37268  006EF4  EC0F  F03B         	call	i2_TMR1_WriteTimer	;wreg free
 37269                           
 37270                           ;sw_timer.c: 128: oldVal++;
 37271  006EF8  4A40               	infsnz	TMR_SwapTimer@oldVal,f,c
 37272  006EFA  2A41               	incf	TMR_SwapTimer@oldVal+1,f,c
 37273                           
 37274                           ;sw_timer.c: 130: retVal = oldVal;
 37275  006EFC  C040  F042         	movff	TMR_SwapTimer@oldVal,TMR_SwapTimer@retVal
 37276  006F00  C041  F043         	movff	TMR_SwapTimer@oldVal+1,TMR_SwapTimer@retVal+1
 37277                           
 37278                           ;sw_timer.c: 132: return retVal;
 37279  006F04  C042  F007         	movff	TMR_SwapTimer@retVal,?i2_TMR_SwapTimer
 37280  006F08  C043  F008         	movff	TMR_SwapTimer@retVal+1,?i2_TMR_SwapTimer+1
 37281  006F0C  0012               	return		;funcret
 37282  006F0E                     __end_ofi2_TMR_SwapTimer:
 37283                           	opt stack 0
 37284                           tosu	equ	0xFFF
 37285                           tosh	equ	0xFFE
 37286                           tosl	equ	0xFFD
 37287                           pclatu	equ	0xFFB
 37288                           pclath	equ	0xFFA
 37289                           tblptru	equ	0xFF8
 37290                           tblptrh	equ	0xFF7
 37291                           tblptrl	equ	0xFF6
 37292                           tablat	equ	0xFF5
 37293                           prodh	equ	0xFF4
 37294                           prodl	equ	0xFF3
 37295                           intcon	equ	0xFF2
 37296                           indf0	equ	0xFEF
 37297                           postinc0	equ	0xFEE
 37298                           plusw0	equ	0xFEB
 37299                           fsr0h	equ	0xFEA
 37300                           fsr0l	equ	0xFE9
 37301                           wreg	equ	0xFE8
 37302                           postinc1	equ	0xFE6
 37303                           postdec1	equ	0xFE5
 37304                           plusw1	equ	0xFE3
 37305                           fsr1h	equ	0xFE2
 37306                           fsr1l	equ	0xFE1
 37307                           indf2	equ	0xFDF
 37308                           postinc2	equ	0xFDE
 37309                           postdec2	equ	0xFDD
 37310                           plusw2	equ	0xFDB
 37311                           fsr2h	equ	0xFDA
 37312                           fsr2l	equ	0xFD9
 37313                           status	equ	0xFD8
 37314                           
 37315 ;; *************** function i2_TMR1_WriteTimer *****************
 37316 ;; Defined at:
 37317 ;;		line 122 in file "mcc_generated_files/tmr1.c"
 37318 ;; Parameters:    Size  Location     Type
 37319 ;;  timerVal        2    0[COMRAM] unsigned int 
 37320 ;; Auto vars:     Size  Location     Type
 37321 ;;		None
 37322 ;; Return value:  Size  Location     Type
 37323 ;;                  1    wreg      void 
 37324 ;; Registers used:
 37325 ;;		None
 37326 ;; Tracked objects:
 37327 ;;		On entry : 0/1
 37328 ;;		On exit  : 0/0
 37329 ;;		Unchanged: 0/0
 37330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37331 ;;      Params:         2       0       0       0       0       0       0       0       0
 37332 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37333 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37334 ;;      Totals:         2       0       0       0       0       0       0       0       0
 37335 ;;Total ram usage:        2 bytes
 37336 ;; Hardware stack levels used:    1
 37337 ;; This function calls:
 37338 ;;		Nothing
 37339 ;; This function is called by:
 37340 ;;		i2_TMR_SwapTimer
 37341 ;; This function uses a non-reentrant model
 37342 ;;
 37343                           
 37344                           	psect	text201
 37345  00761E                     __ptext201:
 37346                           	opt stack 0
 37347  00761E                     i2_TMR1_WriteTimer:
 37348                           	opt stack 13
 37349                           
 37350                           ;tmr1.c: 124: if (T1CONbits.nT1SYNC == 1)
 37351                           
 37352                           ;incstack = 0
 37353  00761E  A4CF               	btfss	4047,2,c	;volatile
 37354  007620  D007               	goto	i2l1368
 37355                           
 37356                           ;tmr1.c: 125: {
 37357                           ;tmr1.c: 127: T1CONbits.TMR1ON = 0;
 37358  007622  90CF               	bcf	4047,0,c	;volatile
 37359                           
 37360                           ;tmr1.c: 130: TMR1H = (timerVal >> 8);
 37361  007624  C002  FFCE         	movff	i2TMR1_WriteTimer@timerVal+1,4046	;volatile
 37362                           
 37363                           ;tmr1.c: 131: TMR1L = timerVal;
 37364  007628  C001  FFCD         	movff	i2TMR1_WriteTimer@timerVal,4045	;volatile
 37365                           
 37366                           ;tmr1.c: 134: T1CONbits.TMR1ON =1;
 37367  00762C  80CF               	bsf	4047,0,c	;volatile
 37368                           
 37369                           ;tmr1.c: 135: }
 37370  00762E  0012               	return	
 37371  007630                     i2l1368:
 37372                           
 37373                           ;tmr1.c: 136: else
 37374                           ;tmr1.c: 137: {
 37375                           ;tmr1.c: 139: TMR1H = (timerVal >> 8);
 37376  007630  C002  FFCE         	movff	i2TMR1_WriteTimer@timerVal+1,4046	;volatile
 37377                           
 37378                           ;tmr1.c: 140: TMR1L = timerVal;
 37379  007634  C001  FFCD         	movff	i2TMR1_WriteTimer@timerVal,4045	;volatile
 37380  007638  0012               	return		;funcret
 37381  00763A                     __end_ofi2_TMR1_WriteTimer:
 37382                           	opt stack 0
 37383                           tosu	equ	0xFFF
 37384                           tosh	equ	0xFFE
 37385                           tosl	equ	0xFFD
 37386                           pclatu	equ	0xFFB
 37387                           pclath	equ	0xFFA
 37388                           tblptru	equ	0xFF8
 37389                           tblptrh	equ	0xFF7
 37390                           tblptrl	equ	0xFF6
 37391                           tablat	equ	0xFF5
 37392                           prodh	equ	0xFF4
 37393                           prodl	equ	0xFF3
 37394                           intcon	equ	0xFF2
 37395                           indf0	equ	0xFEF
 37396                           postinc0	equ	0xFEE
 37397                           plusw0	equ	0xFEB
 37398                           fsr0h	equ	0xFEA
 37399                           fsr0l	equ	0xFE9
 37400                           wreg	equ	0xFE8
 37401                           postinc1	equ	0xFE6
 37402                           postdec1	equ	0xFE5
 37403                           plusw1	equ	0xFE3
 37404                           fsr1h	equ	0xFE2
 37405                           fsr1l	equ	0xFE1
 37406                           indf2	equ	0xFDF
 37407                           postinc2	equ	0xFDE
 37408                           postdec2	equ	0xFDD
 37409                           plusw2	equ	0xFDB
 37410                           fsr2h	equ	0xFDA
 37411                           fsr2l	equ	0xFD9
 37412                           status	equ	0xFD8
 37413                           
 37414 ;; *************** function i2_SwTimersInterrupt *****************
 37415 ;; Defined at:
 37416 ;;		line 287 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 37417 ;; Parameters:    Size  Location     Type
 37418 ;;		None
 37419 ;; Auto vars:     Size  Location     Type
 37420 ;;  SwTimersInte    4   34[COMRAM] unsigned long 
 37421 ;;  SwTimersInte    4   30[COMRAM] unsigned long 
 37422 ;;  SwTimersInte    1   38[COMRAM] unsigned char 
 37423 ;; Return value:  Size  Location     Type
 37424 ;;                  4   22[COMRAM] unsigned long 
 37425 ;; Registers used:
 37426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 37427 ;; Tracked objects:
 37428 ;;		On entry : F/1
 37429 ;;		On exit  : F/1
 37430 ;;		Unchanged: 0/0
 37431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37432 ;;      Params:         4       0       0       0       0       0       0       0       0
 37433 ;;      Locals:         9       0       0       0       0       0       0       0       0
 37434 ;;      Temps:          4       0       0       0       0       0       0       0       0
 37435 ;;      Totals:        17       0       0       0       0       0       0       0       0
 37436 ;;Total ram usage:       17 bytes
 37437 ;; Hardware stack levels used:    1
 37438 ;; Hardware stack levels required when called:    2
 37439 ;; This function calls:
 37440 ;;		i2_TMR_GetDeltaTime
 37441 ;; This function is called by:
 37442 ;;		_TMR_ISR_lora
 37443 ;; This function uses a non-reentrant model
 37444 ;;
 37445                           
 37446                           	psect	text202
 37447  004C9E                     __ptext202:
 37448                           	opt stack 0
 37449  004C9E                     i2_SwTimersInterrupt:
 37450                           	opt stack 12
 37451                           
 37452                           ; BSR set to: 1
 37453                           ;sw_timer.c: 289: uint8_t i;
 37454                           ;sw_timer.c: 290: uint32_t timeElapsed;
 37455                           ;sw_timer.c: 291: uint32_t ticksToNextTimerEvent = 0xFFFFFFFF;
 37456                           
 37457                           ;incstack = 0
 37458  004C9E  6823               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent,c
 37459  004CA0  6824               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,c
 37460  004CA2  6825               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,c
 37461  004CA4  6826               	setf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,c
 37462                           
 37463                           ; BSR set to: 1
 37464                           ;sw_timer.c: 295: timeElapsed = TMR_GetDeltaTime();
 37465  004CA6  EC3C  F027         	call	i2_TMR_GetDeltaTime	;wreg free
 37466  004CAA  C007  F01F         	movff	?i2_TMR_GetDeltaTime,i2SwTimersInterrupt@timeElapsed
 37467  004CAE  C008  F020         	movff	?i2_TMR_GetDeltaTime+1,i2SwTimersInterrupt@timeElapsed+1
 37468  004CB2  C009  F021         	movff	?i2_TMR_GetDeltaTime+2,i2SwTimersInterrupt@timeElapsed+2
 37469  004CB6  C00A  F022         	movff	?i2_TMR_GetDeltaTime+3,i2SwTimersInterrupt@timeElapsed+3
 37470                           
 37471                           ;sw_timer.c: 297: for (i = 0; i < allocatedTimers; i++)
 37472  004CBA  6A27               	clrf	i2SwTimersInterrupt@i,c
 37473  004CBC  D05A               	goto	i2l10564
 37474  004CBE                     i2l10552:
 37475                           
 37476                           ; BSR set to: 1
 37477                           ;sw_timer.c: 298: {
 37478                           ;sw_timer.c: 301: if (swTimers[i].running == 1)
 37479  004CBE  5027               	movf	i2SwTimersInterrupt@i,w,c
 37480  004CC0  0D08               	mullw	8
 37481  004CC2  0E04               	movlw	low (_swTimers+4)
 37482  004CC4  24F3               	addwf	prodl,w,c
 37483  004CC6  6ED9               	movwf	fsr2l,c
 37484  004CC8  0E03               	movlw	high (_swTimers+4)
 37485  004CCA  20F4               	addwfc	prodh,w,c
 37486  004CCC  6EDA               	movwf	fsr2h,c
 37487  004CCE  04DE               	decf	postinc2,w,c
 37488  004CD0  E14F               	bnz	i2l10562
 37489                           
 37490                           ; BSR set to: 1
 37491                           ;sw_timer.c: 302: {
 37492                           ;sw_timer.c: 303: if (swTimers[i].ticksRemaining <= timeElapsed)
 37493  004CD2  5027               	movf	i2SwTimersInterrupt@i,w,c
 37494  004CD4  0D08               	mullw	8
 37495  004CD6  0E00               	movlw	low _swTimers
 37496  004CD8  24F3               	addwf	prodl,w,c
 37497  004CDA  6ED9               	movwf	fsr2l,c
 37498  004CDC  0E03               	movlw	high _swTimers
 37499  004CDE  20F4               	addwfc	prodh,w,c
 37500  004CE0  6EDA               	movwf	fsr2h,c
 37501  004CE2  50DE               	movf	postinc2,w,c
 37502  004CE4  5C1F               	subwf	i2SwTimersInterrupt@timeElapsed,w,c
 37503  004CE6  50DE               	movf	postinc2,w,c
 37504  004CE8  5820               	subwfb	i2SwTimersInterrupt@timeElapsed+1,w,c
 37505  004CEA  50DE               	movf	postinc2,w,c
 37506  004CEC  5821               	subwfb	i2SwTimersInterrupt@timeElapsed+2,w,c
 37507  004CEE  50DE               	movf	postinc2,w,c
 37508  004CF0  5822               	subwfb	i2SwTimersInterrupt@timeElapsed+3,w,c
 37509  004CF2  E30D               	bnc	i2l10558
 37510                           
 37511                           ; BSR set to: 1
 37512                           ;sw_timer.c: 304: {
 37513                           ;sw_timer.c: 305: swTimers[i].ticksRemaining = 0;
 37514  004CF4  5027               	movf	i2SwTimersInterrupt@i,w,c
 37515  004CF6  0D08               	mullw	8
 37516  004CF8  0E00               	movlw	low _swTimers
 37517  004CFA  24F3               	addwf	prodl,w,c
 37518  004CFC  6ED9               	movwf	fsr2l,c
 37519  004CFE  0E03               	movlw	high _swTimers
 37520  004D00  20F4               	addwfc	prodh,w,c
 37521  004D02  6EDA               	movwf	fsr2h,c
 37522  004D04  6ADE               	clrf	postinc2,c
 37523  004D06  6ADE               	clrf	postinc2,c
 37524  004D08  6ADE               	clrf	postinc2,c
 37525  004D0A  6ADD               	clrf	postdec2,c
 37526                           
 37527                           ;sw_timer.c: 306: }
 37528  004D0C  D031               	goto	i2l10562
 37529  004D0E                     i2l10558:
 37530                           
 37531                           ; BSR set to: 1
 37532                           ;sw_timer.c: 307: else
 37533                           ;sw_timer.c: 308: {
 37534                           ;sw_timer.c: 309: swTimers[i].ticksRemaining -= timeElapsed;
 37535  004D0E  5027               	movf	i2SwTimersInterrupt@i,w,c
 37536  004D10  0D08               	mullw	8
 37537  004D12  0E00               	movlw	low _swTimers
 37538  004D14  24F3               	addwf	prodl,w,c
 37539  004D16  6ED9               	movwf	fsr2l,c
 37540  004D18  0E03               	movlw	high _swTimers
 37541  004D1A  20F4               	addwfc	prodh,w,c
 37542  004D1C  6EDA               	movwf	fsr2h,c
 37543  004D1E  501F               	movf	i2SwTimersInterrupt@timeElapsed,w,c
 37544  004D20  5EDE               	subwf	postinc2,f,c
 37545  004D22  5020               	movf	i2SwTimersInterrupt@timeElapsed+1,w,c
 37546  004D24  5ADE               	subwfb	postinc2,f,c
 37547  004D26  5021               	movf	i2SwTimersInterrupt@timeElapsed+2,w,c
 37548  004D28  5ADE               	subwfb	postinc2,f,c
 37549  004D2A  5022               	movf	i2SwTimersInterrupt@timeElapsed+3,w,c
 37550  004D2C  5ADE               	subwfb	postinc2,f,c
 37551                           
 37552                           ;sw_timer.c: 312: if (swTimers[i].ticksRemaining < ticksToNextTimerEvent)
 37553  004D2E  5027               	movf	i2SwTimersInterrupt@i,w,c
 37554  004D30  0D08               	mullw	8
 37555  004D32  0E00               	movlw	low _swTimers
 37556  004D34  24F3               	addwf	prodl,w,c
 37557  004D36  6ED9               	movwf	fsr2l,c
 37558  004D38  0E03               	movlw	high _swTimers
 37559  004D3A  20F4               	addwfc	prodh,w,c
 37560  004D3C  6EDA               	movwf	fsr2h,c
 37561  004D3E  5023               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent,w,c
 37562  004D40  5CDE               	subwf	postinc2,w,c
 37563  004D42  5024               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+1,w,c
 37564  004D44  58DE               	subwfb	postinc2,w,c
 37565  004D46  5025               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+2,w,c
 37566  004D48  58DE               	subwfb	postinc2,w,c
 37567  004D4A  5026               	movf	i2SwTimersInterrupt@ticksToNextTimerEvent+3,w,c
 37568  004D4C  58DE               	subwfb	postinc2,w,c
 37569  004D4E  E210               	bc	i2l10562
 37570                           
 37571                           ; BSR set to: 1
 37572                           ;sw_timer.c: 313: {
 37573                           ;sw_timer.c: 314: ticksToNextTimerEvent = swTimers[i].ticksRemaining;
 37574  004D50  5027               	movf	i2SwTimersInterrupt@i,w,c
 37575  004D52  0D08               	mullw	8
 37576  004D54  0E00               	movlw	low _swTimers
 37577  004D56  24F3               	addwf	prodl,w,c
 37578  004D58  6ED9               	movwf	fsr2l,c
 37579  004D5A  0E03               	movlw	high _swTimers
 37580  004D5C  20F4               	addwfc	prodh,w,c
 37581  004D5E  6EDA               	movwf	fsr2h,c
 37582  004D60  CFDE F023          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent
 37583  004D64  CFDE F024          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+1
 37584  004D68  CFDE F025          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+2
 37585  004D6C  CFDE F026          	movff	postinc2,i2SwTimersInterrupt@ticksToNextTimerEvent+3
 37586  004D70                     i2l10562:
 37587                           
 37588                           ; BSR set to: 1
 37589  004D70  2A27               	incf	i2SwTimersInterrupt@i,f,c
 37590  004D72                     i2l10564:
 37591  004D72  0101               	movlb	1	; () banked
 37592  004D74  5173               	movf	_allocatedTimers& (0+255),w,b	;volatile
 37593  004D76  5C27               	subwf	i2SwTimersInterrupt@i,w,c
 37594  004D78  E3A2               	bnc	i2l10552
 37595                           
 37596                           ; BSR set to: 1
 37597                           ;sw_timer.c: 315: }
 37598                           ;sw_timer.c: 316: }
 37599                           ;sw_timer.c: 317: }
 37600                           ;sw_timer.c: 318: }
 37601                           ;sw_timer.c: 320: return ticksToNextTimerEvent;
 37602  004D7A  C023  F017         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent,?i2_SwTimersInterrupt
 37603  004D7E  C024  F018         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+1,?i2_SwTimersInterrupt+1
 37604  004D82  C025  F019         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+2,?i2_SwTimersInterrupt+2
 37605  004D86  C026  F01A         	movff	i2SwTimersInterrupt@ticksToNextTimerEvent+3,?i2_SwTimersInterrupt+3
 37606                           
 37607                           ; BSR set to: 1
 37608  004D8A  0012               	return		;funcret
 37609  004D8C                     __end_ofi2_SwTimersInterrupt:
 37610                           	opt stack 0
 37611                           tosu	equ	0xFFF
 37612                           tosh	equ	0xFFE
 37613                           tosl	equ	0xFFD
 37614                           pclatu	equ	0xFFB
 37615                           pclath	equ	0xFFA
 37616                           tblptru	equ	0xFF8
 37617                           tblptrh	equ	0xFF7
 37618                           tblptrl	equ	0xFF6
 37619                           tablat	equ	0xFF5
 37620                           prodh	equ	0xFF4
 37621                           prodl	equ	0xFF3
 37622                           intcon	equ	0xFF2
 37623                           indf0	equ	0xFEF
 37624                           postinc0	equ	0xFEE
 37625                           plusw0	equ	0xFEB
 37626                           fsr0h	equ	0xFEA
 37627                           fsr0l	equ	0xFE9
 37628                           wreg	equ	0xFE8
 37629                           postinc1	equ	0xFE6
 37630                           postdec1	equ	0xFE5
 37631                           plusw1	equ	0xFE3
 37632                           fsr1h	equ	0xFE2
 37633                           fsr1l	equ	0xFE1
 37634                           indf2	equ	0xFDF
 37635                           postinc2	equ	0xFDE
 37636                           postdec2	equ	0xFDD
 37637                           plusw2	equ	0xFDB
 37638                           fsr2h	equ	0xFDA
 37639                           fsr2l	equ	0xFD9
 37640                           status	equ	0xFD8
 37641                           
 37642 ;; *************** function i2_TMR_GetDeltaTime *****************
 37643 ;; Defined at:
 37644 ;;		line 88 in file "mcc_generated_files/LoRaWAN/sw_timer.c"
 37645 ;; Parameters:    Size  Location     Type
 37646 ;;		None
 37647 ;; Auto vars:     Size  Location     Type
 37648 ;;		None
 37649 ;; Return value:  Size  Location     Type
 37650 ;;                  4    6[COMRAM] unsigned long 
 37651 ;; Registers used:
 37652 ;;		wreg, status,2, status,0, cstack
 37653 ;; Tracked objects:
 37654 ;;		On entry : F/1
 37655 ;;		On exit  : 0/0
 37656 ;;		Unchanged: 0/0
 37657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37658 ;;      Params:         4       0       0       0       0       0       0       0       0
 37659 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37660 ;;      Temps:         12       0       0       0       0       0       0       0       0
 37661 ;;      Totals:        16       0       0       0       0       0       0       0       0
 37662 ;;Total ram usage:       16 bytes
 37663 ;; Hardware stack levels used:    1
 37664 ;; Hardware stack levels required when called:    1
 37665 ;; This function calls:
 37666 ;;		i2_TMR1_ReadTimer
 37667 ;; This function is called by:
 37668 ;;		i2_SwTimersInterrupt
 37669 ;; This function uses a non-reentrant model
 37670 ;;
 37671                           
 37672                           	psect	text203
 37673  004E78                     __ptext203:
 37674                           	opt stack 0
 37675  004E78                     i2_TMR_GetDeltaTime:
 37676                           	opt stack 12
 37677                           
 37678                           ; BSR set to: 1
 37679                           ;sw_timer.c: 90: static uint32_t retVal;
 37680                           ;sw_timer.c: 91: static uint16_t tmrVal;
 37681                           ;sw_timer.c: 93: tmrVal = TMR1_ReadTimer();
 37682                           
 37683                           ; BSR set to: 1
 37684                           ;incstack = 0
 37685  004E78  EC5D  F03A         	call	i2_TMR1_ReadTimer	;wreg free
 37686  004E7C  C001  F03E         	movff	?i2_TMR1_ReadTimer,TMR_GetDeltaTime@tmrVal
 37687  004E80  C002  F03F         	movff	?i2_TMR1_ReadTimer+1,TMR_GetDeltaTime@tmrVal+1
 37688                           
 37689                           ;sw_timer.c: 95: if (timerOverflow == 1)
 37690  004E84  0449               	decf	_timerOverflow,w,c	;volatile
 37691  004E86  E13D               	bnz	i2l9876
 37692                           
 37693                           ;sw_timer.c: 96: {
 37694                           ;sw_timer.c: 97: timerOverflow = 0;
 37695  004E88  6A49               	clrf	_timerOverflow,c	;volatile
 37696                           
 37697                           ;sw_timer.c: 98: retVal = ((uint32_t)0x10000) - reloadVal + tmrVal - ticksAccounted + ti
      +                          cksAdded;
 37698  004E8A  5044               	movf	_reloadVal,w,c	;volatile
 37699  004E8C  5C3E               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 37700  004E8E  6E0B               	movwf	??i2_TMR_GetDeltaTime& (0+255),c
 37701  004E90  5045               	movf	_reloadVal+1,w,c	;volatile
 37702  004E92  583F               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 37703  004E94  6E0C               	movwf	(??i2_TMR_GetDeltaTime+1)& (0+255),c
 37704  004E96  6A0D               	clrf	(??i2_TMR_GetDeltaTime+2)& (0+255),c
 37705  004E98  A0D8               	btfss	status,0,c
 37706  004E9A  060D               	decf	(??i2_TMR_GetDeltaTime+2)& (0+255),f,c
 37707  004E9C  500D               	movf	(??i2_TMR_GetDeltaTime+2)& (0+255),w,c
 37708  004E9E  6E0E               	movwf	(??i2_TMR_GetDeltaTime+3)& (0+255),c
 37709  004EA0  5034               	movf	_ticksAccounted,w,c	;volatile
 37710  004EA2  5C0B               	subwf	??i2_TMR_GetDeltaTime,w,c
 37711  004EA4  6E0F               	movwf	(??i2_TMR_GetDeltaTime+4)& (0+255),c
 37712  004EA6  5035               	movf	_ticksAccounted+1,w,c	;volatile
 37713  004EA8  580C               	subwfb	??i2_TMR_GetDeltaTime+1,w,c
 37714  004EAA  6E10               	movwf	(??i2_TMR_GetDeltaTime+5)& (0+255),c
 37715  004EAC  5036               	movf	_ticksAccounted+2,w,c	;volatile
 37716  004EAE  580D               	subwfb	??i2_TMR_GetDeltaTime+2,w,c
 37717  004EB0  6E11               	movwf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 37718  004EB2  5037               	movf	_ticksAccounted+3,w,c	;volatile
 37719  004EB4  580E               	subwfb	??i2_TMR_GetDeltaTime+3,w,c
 37720  004EB6  6E12               	movwf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 37721  004EB8  5038               	movf	_ticksAdded,w,c	;volatile
 37722  004EBA  240F               	addwf	??i2_TMR_GetDeltaTime+4,w,c
 37723  004EBC  6E13               	movwf	(??i2_TMR_GetDeltaTime+8)& (0+255),c
 37724  004EBE  5039               	movf	_ticksAdded+1,w,c	;volatile
 37725  004EC0  2010               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 37726  004EC2  6E14               	movwf	(??i2_TMR_GetDeltaTime+9)& (0+255),c
 37727  004EC4  503A               	movf	_ticksAdded+2,w,c	;volatile
 37728  004EC6  2011               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 37729  004EC8  6E15               	movwf	(??i2_TMR_GetDeltaTime+10)& (0+255),c
 37730  004ECA  503B               	movf	_ticksAdded+3,w,c	;volatile
 37731  004ECC  2012               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 37732  004ECE  6E16               	movwf	(??i2_TMR_GetDeltaTime+11)& (0+255),c
 37733  004ED0  0E00               	movlw	0
 37734  004ED2  2413               	addwf	??i2_TMR_GetDeltaTime+8,w,c
 37735  004ED4  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 37736  004ED6  0E00               	movlw	0
 37737  004ED8  2014               	addwfc	??i2_TMR_GetDeltaTime+9,w,c
 37738  004EDA  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 37739  004EDC  0E01               	movlw	1
 37740  004EDE  2015               	addwfc	??i2_TMR_GetDeltaTime+10,w,c
 37741  004EE0  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 37742  004EE2  0E00               	movlw	0
 37743  004EE4  2016               	addwfc	??i2_TMR_GetDeltaTime+11,w,c
 37744  004EE6  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 37745                           
 37746                           ;sw_timer.c: 99: ticksAccounted = tmrVal;
 37747  004EE8  C03E  F034         	movff	TMR_GetDeltaTime@tmrVal,_ticksAccounted	;volatile
 37748  004EEC  C03F  F035         	movff	TMR_GetDeltaTime@tmrVal+1,_ticksAccounted+1	;volatile
 37749  004EF0  6A36               	clrf	_ticksAccounted+2,c	;volatile
 37750  004EF2  6A37               	clrf	_ticksAccounted+3,c	;volatile
 37751                           
 37752                           ;sw_timer.c: 100: ticksAdded = 0;
 37753  004EF4  6A38               	clrf	_ticksAdded,c	;volatile
 37754  004EF6  6A39               	clrf	_ticksAdded+1,c	;volatile
 37755  004EF8  6A3A               	clrf	_ticksAdded+2,c	;volatile
 37756  004EFA  6A3B               	clrf	_ticksAdded+3,c	;volatile
 37757                           
 37758                           ;sw_timer.c: 101: reloadVal = 0;
 37759  004EFC  6A44               	clrf	_reloadVal,c	;volatile
 37760  004EFE  6A45               	clrf	_reloadVal+1,c	;volatile
 37761                           
 37762                           ;sw_timer.c: 102: }
 37763  004F00  D028               	goto	i2l9878
 37764  004F02                     i2l9876:
 37765                           
 37766                           ;sw_timer.c: 103: else
 37767                           ;sw_timer.c: 104: {
 37768                           ;sw_timer.c: 105: retVal = tmrVal - reloadVal - ticksAccounted + ticksAdded;
 37769  004F02  5044               	movf	_reloadVal,w,c	;volatile
 37770  004F04  5C3E               	subwf	TMR_GetDeltaTime@tmrVal,w,c
 37771  004F06  6E0B               	movwf	??i2_TMR_GetDeltaTime& (0+255),c
 37772  004F08  5045               	movf	_reloadVal+1,w,c	;volatile
 37773  004F0A  583F               	subwfb	TMR_GetDeltaTime@tmrVal+1,w,c
 37774  004F0C  6E0C               	movwf	(??i2_TMR_GetDeltaTime+1)& (0+255),c
 37775  004F0E  6A0D               	clrf	(??i2_TMR_GetDeltaTime+2)& (0+255),c
 37776  004F10  6A0E               	clrf	(??i2_TMR_GetDeltaTime+3)& (0+255),c
 37777  004F12  5034               	movf	_ticksAccounted,w,c	;volatile
 37778  004F14  5C0B               	subwf	??i2_TMR_GetDeltaTime,w,c
 37779  004F16  6E0F               	movwf	(??i2_TMR_GetDeltaTime+4)& (0+255),c
 37780  004F18  5035               	movf	_ticksAccounted+1,w,c	;volatile
 37781  004F1A  580C               	subwfb	??i2_TMR_GetDeltaTime+1,w,c
 37782  004F1C  6E10               	movwf	(??i2_TMR_GetDeltaTime+5)& (0+255),c
 37783  004F1E  5036               	movf	_ticksAccounted+2,w,c	;volatile
 37784  004F20  580D               	subwfb	??i2_TMR_GetDeltaTime+2,w,c
 37785  004F22  6E11               	movwf	(??i2_TMR_GetDeltaTime+6)& (0+255),c
 37786  004F24  5037               	movf	_ticksAccounted+3,w,c	;volatile
 37787  004F26  580E               	subwfb	??i2_TMR_GetDeltaTime+3,w,c
 37788  004F28  6E12               	movwf	(??i2_TMR_GetDeltaTime+7)& (0+255),c
 37789  004F2A  5038               	movf	_ticksAdded,w,c	;volatile
 37790  004F2C  240F               	addwf	??i2_TMR_GetDeltaTime+4,w,c
 37791  004F2E  6E30               	movwf	TMR_GetDeltaTime@retVal,c
 37792  004F30  5039               	movf	_ticksAdded+1,w,c	;volatile
 37793  004F32  2010               	addwfc	??i2_TMR_GetDeltaTime+5,w,c
 37794  004F34  6E31               	movwf	TMR_GetDeltaTime@retVal+1,c
 37795  004F36  503A               	movf	_ticksAdded+2,w,c	;volatile
 37796  004F38  2011               	addwfc	??i2_TMR_GetDeltaTime+6,w,c
 37797  004F3A  6E32               	movwf	TMR_GetDeltaTime@retVal+2,c
 37798  004F3C  503B               	movf	_ticksAdded+3,w,c	;volatile
 37799  004F3E  2012               	addwfc	??i2_TMR_GetDeltaTime+7,w,c
 37800  004F40  6E33               	movwf	TMR_GetDeltaTime@retVal+3,c
 37801                           
 37802                           ;sw_timer.c: 106: ticksAccounted += retVal;
 37803  004F42  5030               	movf	TMR_GetDeltaTime@retVal,w,c
 37804  004F44  2634               	addwf	_ticksAccounted,f,c	;volatile
 37805  004F46  5031               	movf	TMR_GetDeltaTime@retVal+1,w,c
 37806  004F48  2235               	addwfc	_ticksAccounted+1,f,c	;volatile
 37807  004F4A  5032               	movf	TMR_GetDeltaTime@retVal+2,w,c
 37808  004F4C  2236               	addwfc	_ticksAccounted+2,f,c	;volatile
 37809  004F4E  5033               	movf	TMR_GetDeltaTime@retVal+3,w,c
 37810  004F50  2237               	addwfc	_ticksAccounted+3,f,c	;volatile
 37811  004F52                     i2l9878:
 37812                           
 37813                           ;sw_timer.c: 107: }
 37814                           ;sw_timer.c: 109: return retVal;
 37815  004F52  C030  F007         	movff	TMR_GetDeltaTime@retVal,?i2_TMR_GetDeltaTime
 37816  004F56  C031  F008         	movff	TMR_GetDeltaTime@retVal+1,?i2_TMR_GetDeltaTime+1
 37817  004F5A  C032  F009         	movff	TMR_GetDeltaTime@retVal+2,?i2_TMR_GetDeltaTime+2
 37818  004F5E  C033  F00A         	movff	TMR_GetDeltaTime@retVal+3,?i2_TMR_GetDeltaTime+3
 37819  004F62  0012               	return		;funcret
 37820  004F64                     __end_ofi2_TMR_GetDeltaTime:
 37821                           	opt stack 0
 37822                           tosu	equ	0xFFF
 37823                           tosh	equ	0xFFE
 37824                           tosl	equ	0xFFD
 37825                           pclatu	equ	0xFFB
 37826                           pclath	equ	0xFFA
 37827                           tblptru	equ	0xFF8
 37828                           tblptrh	equ	0xFF7
 37829                           tblptrl	equ	0xFF6
 37830                           tablat	equ	0xFF5
 37831                           prodh	equ	0xFF4
 37832                           prodl	equ	0xFF3
 37833                           intcon	equ	0xFF2
 37834                           indf0	equ	0xFEF
 37835                           postinc0	equ	0xFEE
 37836                           plusw0	equ	0xFEB
 37837                           fsr0h	equ	0xFEA
 37838                           fsr0l	equ	0xFE9
 37839                           wreg	equ	0xFE8
 37840                           postinc1	equ	0xFE6
 37841                           postdec1	equ	0xFE5
 37842                           plusw1	equ	0xFE3
 37843                           fsr1h	equ	0xFE2
 37844                           fsr1l	equ	0xFE1
 37845                           indf2	equ	0xFDF
 37846                           postinc2	equ	0xFDE
 37847                           postdec2	equ	0xFDD
 37848                           plusw2	equ	0xFDB
 37849                           fsr2h	equ	0xFDA
 37850                           fsr2l	equ	0xFD9
 37851                           status	equ	0xFD8
 37852                           
 37853 ;; *************** function i2_TMR1_ReadTimer *****************
 37854 ;; Defined at:
 37855 ;;		line 113 in file "mcc_generated_files/tmr1.c"
 37856 ;; Parameters:    Size  Location     Type
 37857 ;;		None
 37858 ;; Auto vars:     Size  Location     Type
 37859 ;;  TMR1_ReadTim    2    4[COMRAM] unsigned int 
 37860 ;; Return value:  Size  Location     Type
 37861 ;;                  2    0[COMRAM] unsigned int 
 37862 ;; Registers used:
 37863 ;;		wreg, status,2, status,0
 37864 ;; Tracked objects:
 37865 ;;		On entry : 0/1
 37866 ;;		On exit  : 0/0
 37867 ;;		Unchanged: 0/0
 37868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37869 ;;      Params:         2       0       0       0       0       0       0       0       0
 37870 ;;      Locals:         2       0       0       0       0       0       0       0       0
 37871 ;;      Temps:          2       0       0       0       0       0       0       0       0
 37872 ;;      Totals:         6       0       0       0       0       0       0       0       0
 37873 ;;Total ram usage:        6 bytes
 37874 ;; Hardware stack levels used:    1
 37875 ;; This function calls:
 37876 ;;		Nothing
 37877 ;; This function is called by:
 37878 ;;		i2_TMR_GetDeltaTime
 37879 ;;		i2_TMR_SwapTimer
 37880 ;; This function uses a non-reentrant model
 37881 ;;
 37882                           
 37883                           	psect	text204
 37884  0074BA                     __ptext204:
 37885                           	opt stack 0
 37886  0074BA                     i2_TMR1_ReadTimer:
 37887                           	opt stack 13
 37888                           
 37889                           ;tmr1.c: 115: uint16_t readVal;
 37890                           ;tmr1.c: 117: readVal = (TMR1H << 8) | TMR1L;
 37891                           
 37892                           ;incstack = 0
 37893  0074BA  50CD               	movf	4045,w,c	;volatile
 37894  0074BC  CFCE F003          	movff	4046,??i2_TMR1_ReadTimer	;volatile
 37895  0074C0  6A04               	clrf	(??i2_TMR1_ReadTimer+1)& (0+255),c
 37896  0074C2  C003  F004         	movff	??i2_TMR1_ReadTimer,??i2_TMR1_ReadTimer+1
 37897  0074C6  6A03               	clrf	??i2_TMR1_ReadTimer,c
 37898  0074C8  1003               	iorwf	??i2_TMR1_ReadTimer,w,c
 37899  0074CA  6E05               	movwf	i2TMR1_ReadTimer@readVal,c
 37900  0074CC  5004               	movf	??i2_TMR1_ReadTimer+1,w,c
 37901  0074CE  6E06               	movwf	i2TMR1_ReadTimer@readVal+1,c
 37902                           
 37903                           ;tmr1.c: 119: return readVal;
 37904  0074D0  C005  F001         	movff	i2TMR1_ReadTimer@readVal,?i2_TMR1_ReadTimer
 37905  0074D4  C006  F002         	movff	i2TMR1_ReadTimer@readVal+1,?i2_TMR1_ReadTimer+1
 37906  0074D8  0012               	return		;funcret
 37907  0074DA                     __end_ofi2_TMR1_ReadTimer:
 37908                           	opt stack 0
 37909                           tosu	equ	0xFFF
 37910                           tosh	equ	0xFFE
 37911                           tosl	equ	0xFFD
 37912                           pclatu	equ	0xFFB
 37913                           pclath	equ	0xFFA
 37914                           tblptru	equ	0xFF8
 37915                           tblptrh	equ	0xFF7
 37916                           tblptrl	equ	0xFF6
 37917                           tablat	equ	0xFF5
 37918                           prodh	equ	0xFF4
 37919                           prodl	equ	0xFF3
 37920                           intcon	equ	0xFF2
 37921                           indf0	equ	0xFEF
 37922                           postinc0	equ	0xFEE
 37923                           plusw0	equ	0xFEB
 37924                           fsr0h	equ	0xFEA
 37925                           fsr0l	equ	0xFE9
 37926                           wreg	equ	0xFE8
 37927                           postinc1	equ	0xFE6
 37928                           postdec1	equ	0xFE5
 37929                           plusw1	equ	0xFE3
 37930                           fsr1h	equ	0xFE2
 37931                           fsr1l	equ	0xFE1
 37932                           indf2	equ	0xFDF
 37933                           postinc2	equ	0xFDE
 37934                           postdec2	equ	0xFDD
 37935                           plusw2	equ	0xFDB
 37936                           fsr2h	equ	0xFDA
 37937                           fsr2l	equ	0xFD9
 37938                           status	equ	0xFD8
 37939                           
 37940 ;; *************** function _PIN_MANAGER_IOC *****************
 37941 ;; Defined at:
 37942 ;;		line 151 in file "mcc_generated_files/pin_manager.c"
 37943 ;; Parameters:    Size  Location     Type
 37944 ;;		None
 37945 ;; Auto vars:     Size  Location     Type
 37946 ;;		None
 37947 ;; Return value:  Size  Location     Type
 37948 ;;                  1    wreg      void 
 37949 ;; Registers used:
 37950 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 37951 ;; Tracked objects:
 37952 ;;		On entry : F/E
 37953 ;;		On exit  : F/E
 37954 ;;		Unchanged: 0/0
 37955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 37956 ;;      Params:         0       0       0       0       0       0       0       0       0
 37957 ;;      Locals:         0       0       0       0       0       0       0       0       0
 37958 ;;      Temps:          0       0       0       0       0       0       0       0       0
 37959 ;;      Totals:         0       0       0       0       0       0       0       0       0
 37960 ;;Total ram usage:        0 bytes
 37961 ;; Hardware stack levels used:    1
 37962 ;; Hardware stack levels required when called:    2
 37963 ;; This function calls:
 37964 ;;		_IOCBF4_ISR
 37965 ;; This function is called by:
 37966 ;;		_INTERRUPT_InterruptManager
 37967 ;; This function uses a non-reentrant model
 37968 ;;
 37969                           
 37970                           	psect	text205
 37971  007882                     __ptext205:
 37972                           	opt stack 0
 37973  007882                     _PIN_MANAGER_IOC:
 37974                           	opt stack 15
 37975                           
 37976                           ; BSR set to: 14
 37977                           ;pin_manager.c: 154: if(IOCBFbits.IOCBF4 == 1)
 37978                           
 37979                           ;incstack = 0
 37980  007882  B993               	btfsc	147,4,b	;volatile
 37981                           
 37982                           ; BSR set to: 14
 37983                           ;pin_manager.c: 155: {
 37984                           ;pin_manager.c: 156: IOCBF4_ISR();
 37985  007884  ECC3  F039         	call	_IOCBF4_ISR	;wreg free
 37986                           
 37987                           ; BSR set to: 14
 37988  007888  0012               	return		;funcret
 37989  00788A                     __end_of_PIN_MANAGER_IOC:
 37990                           	opt stack 0
 37991                           tosu	equ	0xFFF
 37992                           tosh	equ	0xFFE
 37993                           tosl	equ	0xFFD
 37994                           pclatu	equ	0xFFB
 37995                           pclath	equ	0xFFA
 37996                           tblptru	equ	0xFF8
 37997                           tblptrh	equ	0xFF7
 37998                           tblptrl	equ	0xFF6
 37999                           tablat	equ	0xFF5
 38000                           prodh	equ	0xFF4
 38001                           prodl	equ	0xFF3
 38002                           intcon	equ	0xFF2
 38003                           indf0	equ	0xFEF
 38004                           postinc0	equ	0xFEE
 38005                           plusw0	equ	0xFEB
 38006                           fsr0h	equ	0xFEA
 38007                           fsr0l	equ	0xFE9
 38008                           wreg	equ	0xFE8
 38009                           postinc1	equ	0xFE6
 38010                           postdec1	equ	0xFE5
 38011                           plusw1	equ	0xFE3
 38012                           fsr1h	equ	0xFE2
 38013                           fsr1l	equ	0xFE1
 38014                           indf2	equ	0xFDF
 38015                           postinc2	equ	0xFDE
 38016                           postdec2	equ	0xFDD
 38017                           plusw2	equ	0xFDB
 38018                           fsr2h	equ	0xFDA
 38019                           fsr2l	equ	0xFD9
 38020                           status	equ	0xFD8
 38021                           
 38022 ;; *************** function _IOCBF4_ISR *****************
 38023 ;; Defined at:
 38024 ;;		line 165 in file "mcc_generated_files/pin_manager.c"
 38025 ;; Parameters:    Size  Location     Type
 38026 ;;		None
 38027 ;; Auto vars:     Size  Location     Type
 38028 ;;		None
 38029 ;; Return value:  Size  Location     Type
 38030 ;;                  1    wreg      void 
 38031 ;; Registers used:
 38032 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38033 ;; Tracked objects:
 38034 ;;		On entry : F/E
 38035 ;;		On exit  : F/E
 38036 ;;		Unchanged: 0/0
 38037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38038 ;;      Params:         0       0       0       0       0       0       0       0       0
 38039 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38040 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38041 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38042 ;;Total ram usage:        0 bytes
 38043 ;; Hardware stack levels used:    1
 38044 ;; Hardware stack levels required when called:    1
 38045 ;; This function calls:
 38046 ;;		Absolute function
 38047 ;;		_IOCBF4_DefaultInterruptHandler
 38048 ;; This function is called by:
 38049 ;;		_PIN_MANAGER_IOC
 38050 ;; This function uses a non-reentrant model
 38051 ;;
 38052                           
 38053                           	psect	text206
 38054  007386                     __ptext206:
 38055                           	opt stack 0
 38056  007386                     _IOCBF4_ISR:
 38057                           	opt stack 15
 38058                           
 38059                           ; BSR set to: 14
 38060                           ;pin_manager.c: 170: if(IOCBF4_InterruptHandler)
 38061                           
 38062                           ; BSR set to: 14
 38063                           ;incstack = 0
 38064  007386  0101               	movlb	1	; () banked
 38065  007388  51F5               	movf	_IOCBF4_InterruptHandler& (0+255),w,b
 38066  00738A  11F6               	iorwf	(_IOCBF4_InterruptHandler+1)& (0+255),w,b
 38067  00738C  E00C               	bz	i2l16382
 38068                           
 38069                           ; BSR set to: 1
 38070                           ;pin_manager.c: 171: {
 38071                           ;pin_manager.c: 172: IOCBF4_InterruptHandler();
 38072  00738E  D801               	call	i2u1972_48
 38073  007390  D00A               	goto	i2l16382
 38074  007392                     i2u1972_48:
 38075  007392  0005               	push	
 38076  007394  6EFA               	movwf	pclath,c
 38077  007396  51F5               	movf	_IOCBF4_InterruptHandler& (0+255),w,b
 38078  007398  6EFD               	movwf	tosl,c
 38079  00739A  51F6               	movf	(_IOCBF4_InterruptHandler+1)& (0+255),w,b
 38080  00739C  6EFE               	movwf	tosh,c
 38081  00739E  50F8               	movf	tblptru,w,c
 38082  0073A0  6EFF               	movwf	tosu,c
 38083  0073A2  50FA               	movf	pclath,w,c
 38084  0073A4  0012               	return		;indir
 38085  0073A6                     i2l16382:
 38086                           
 38087                           ;pin_manager.c: 173: }
 38088                           ;pin_manager.c: 174: IOCBFbits.IOCBF4 = 0;
 38089  0073A6  010E               	movlb	14	; () banked
 38090  0073A8  9993               	bcf	147,4,b	;volatile
 38091                           
 38092                           ; BSR set to: 14
 38093  0073AA  0012               	return		;funcret
 38094  0073AC                     __end_of_IOCBF4_ISR:
 38095                           	opt stack 0
 38096                           tosu	equ	0xFFF
 38097                           tosh	equ	0xFFE
 38098                           tosl	equ	0xFFD
 38099                           pclatu	equ	0xFFB
 38100                           pclath	equ	0xFFA
 38101                           tblptru	equ	0xFF8
 38102                           tblptrh	equ	0xFF7
 38103                           tblptrl	equ	0xFF6
 38104                           tablat	equ	0xFF5
 38105                           prodh	equ	0xFF4
 38106                           prodl	equ	0xFF3
 38107                           intcon	equ	0xFF2
 38108                           indf0	equ	0xFEF
 38109                           postinc0	equ	0xFEE
 38110                           plusw0	equ	0xFEB
 38111                           fsr0h	equ	0xFEA
 38112                           fsr0l	equ	0xFE9
 38113                           wreg	equ	0xFE8
 38114                           postinc1	equ	0xFE6
 38115                           postdec1	equ	0xFE5
 38116                           plusw1	equ	0xFE3
 38117                           fsr1h	equ	0xFE2
 38118                           fsr1l	equ	0xFE1
 38119                           indf2	equ	0xFDF
 38120                           postinc2	equ	0xFDE
 38121                           postdec2	equ	0xFDD
 38122                           plusw2	equ	0xFDB
 38123                           fsr2h	equ	0xFDA
 38124                           fsr2l	equ	0xFD9
 38125                           status	equ	0xFD8
 38126                           
 38127 ;; *************** function _IOCBF4_DefaultInterruptHandler *****************
 38128 ;; Defined at:
 38129 ;;		line 187 in file "mcc_generated_files/pin_manager.c"
 38130 ;; Parameters:    Size  Location     Type
 38131 ;;		None
 38132 ;; Auto vars:     Size  Location     Type
 38133 ;;		None
 38134 ;; Return value:  Size  Location     Type
 38135 ;;                  1    wreg      void 
 38136 ;; Registers used:
 38137 ;;		None
 38138 ;; Tracked objects:
 38139 ;;		On entry : F/1
 38140 ;;		On exit  : F/1
 38141 ;;		Unchanged: F/0
 38142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38143 ;;      Params:         0       0       0       0       0       0       0       0       0
 38144 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38145 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38146 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38147 ;;Total ram usage:        0 bytes
 38148 ;; Hardware stack levels used:    1
 38149 ;; This function calls:
 38150 ;;		Nothing
 38151 ;; This function is called by:
 38152 ;;		_PIN_MANAGER_Initialize
 38153 ;;		_IOCBF4_ISR
 38154 ;; This function uses a non-reentrant model
 38155 ;;
 38156                           
 38157                           	psect	text207
 38158  0078FA                     __ptext207:
 38159                           	opt stack 0
 38160  0078FA                     _IOCBF4_DefaultInterruptHandler:
 38161                           	opt stack 15
 38162                           
 38163                           ; BSR set to: 1
 38164                           
 38165                           ; BSR set to: 14
 38166                           ;incstack = 0
 38167  0078FA  0012               	return		;funcret
 38168  0078FC                     __end_of_IOCBF4_DefaultInterruptHandler:
 38169                           	opt stack 0
 38170                           tosu	equ	0xFFF
 38171                           tosh	equ	0xFFE
 38172                           tosl	equ	0xFFD
 38173                           pclatu	equ	0xFFB
 38174                           pclath	equ	0xFFA
 38175                           tblptru	equ	0xFF8
 38176                           tblptrh	equ	0xFF7
 38177                           tblptrl	equ	0xFF6
 38178                           tablat	equ	0xFF5
 38179                           prodh	equ	0xFF4
 38180                           prodl	equ	0xFF3
 38181                           intcon	equ	0xFF2
 38182                           indf0	equ	0xFEF
 38183                           postinc0	equ	0xFEE
 38184                           plusw0	equ	0xFEB
 38185                           fsr0h	equ	0xFEA
 38186                           fsr0l	equ	0xFE9
 38187                           wreg	equ	0xFE8
 38188                           postinc1	equ	0xFE6
 38189                           postdec1	equ	0xFE5
 38190                           plusw1	equ	0xFE3
 38191                           fsr1h	equ	0xFE2
 38192                           fsr1l	equ	0xFE1
 38193                           indf2	equ	0xFDF
 38194                           postinc2	equ	0xFDE
 38195                           postdec2	equ	0xFDD
 38196                           plusw2	equ	0xFDB
 38197                           fsr2h	equ	0xFDA
 38198                           fsr2l	equ	0xFD9
 38199                           status	equ	0xFD8
 38200                           
 38201 ;; *************** function _INT3_ISR *****************
 38202 ;; Defined at:
 38203 ;;		line 169 in file "mcc_generated_files/ext_int.c"
 38204 ;; Parameters:    Size  Location     Type
 38205 ;;		None
 38206 ;; Auto vars:     Size  Location     Type
 38207 ;;		None
 38208 ;; Return value:  Size  Location     Type
 38209 ;;                  1    wreg      void 
 38210 ;; Registers used:
 38211 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38212 ;; Tracked objects:
 38213 ;;		On entry : F/E
 38214 ;;		On exit  : 0/0
 38215 ;;		Unchanged: 0/0
 38216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38217 ;;      Params:         0       0       0       0       0       0       0       0       0
 38218 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38219 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38220 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38221 ;;Total ram usage:        0 bytes
 38222 ;; Hardware stack levels used:    1
 38223 ;; Hardware stack levels required when called:    2
 38224 ;; This function calls:
 38225 ;;		_INT3_CallBack
 38226 ;; This function is called by:
 38227 ;;		_INTERRUPT_InterruptManager
 38228 ;; This function uses a non-reentrant model
 38229 ;;
 38230                           
 38231                           	psect	text208
 38232  0078C6                     __ptext208:
 38233                           	opt stack 0
 38234  0078C6                     _INT3_ISR:
 38235                           	opt stack 15
 38236                           
 38237                           ; BSR set to: 14
 38238                           ;ext_int.c: 175: (PIR0bits.INT3IF = 0);
 38239                           
 38240                           ; BSR set to: 1
 38241                           ;incstack = 0
 38242  0078C6  9733               	bcf	51,3,b	;volatile
 38243                           
 38244                           ; BSR set to: 14
 38245                           ;ext_int.c: 178: INT3_CallBack();
 38246  0078C8  EFB8  F03A         	goto	_INT3_CallBack	;wreg free
 38247  0078CC                     __end_of_INT3_ISR:
 38248                           	opt stack 0
 38249                           tosu	equ	0xFFF
 38250                           tosh	equ	0xFFE
 38251                           tosl	equ	0xFFD
 38252                           pclatu	equ	0xFFB
 38253                           pclath	equ	0xFFA
 38254                           tblptru	equ	0xFF8
 38255                           tblptrh	equ	0xFF7
 38256                           tblptrl	equ	0xFF6
 38257                           tablat	equ	0xFF5
 38258                           prodh	equ	0xFF4
 38259                           prodl	equ	0xFF3
 38260                           intcon	equ	0xFF2
 38261                           indf0	equ	0xFEF
 38262                           postinc0	equ	0xFEE
 38263                           plusw0	equ	0xFEB
 38264                           fsr0h	equ	0xFEA
 38265                           fsr0l	equ	0xFE9
 38266                           wreg	equ	0xFE8
 38267                           postinc1	equ	0xFE6
 38268                           postdec1	equ	0xFE5
 38269                           plusw1	equ	0xFE3
 38270                           fsr1h	equ	0xFE2
 38271                           fsr1l	equ	0xFE1
 38272                           indf2	equ	0xFDF
 38273                           postinc2	equ	0xFDE
 38274                           postdec2	equ	0xFDD
 38275                           plusw2	equ	0xFDB
 38276                           fsr2h	equ	0xFDA
 38277                           fsr2l	equ	0xFD9
 38278                           status	equ	0xFD8
 38279                           
 38280 ;; *************** function _INT3_CallBack *****************
 38281 ;; Defined at:
 38282 ;;		line 184 in file "mcc_generated_files/ext_int.c"
 38283 ;; Parameters:    Size  Location     Type
 38284 ;;		None
 38285 ;; Auto vars:     Size  Location     Type
 38286 ;;		None
 38287 ;; Return value:  Size  Location     Type
 38288 ;;                  1    wreg      void 
 38289 ;; Registers used:
 38290 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38291 ;; Tracked objects:
 38292 ;;		On entry : F/E
 38293 ;;		On exit  : 0/0
 38294 ;;		Unchanged: 0/0
 38295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38296 ;;      Params:         0       0       0       0       0       0       0       0       0
 38297 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38298 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38299 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38300 ;;Total ram usage:        0 bytes
 38301 ;; Hardware stack levels used:    1
 38302 ;; Hardware stack levels required when called:    1
 38303 ;; This function calls:
 38304 ;;		Absolute function
 38305 ;;		_INT3_DefaultInterruptHandler
 38306 ;; This function is called by:
 38307 ;;		_INT3_ISR
 38308 ;; This function uses a non-reentrant model
 38309 ;;
 38310                           
 38311                           	psect	text209
 38312  007570                     __ptext209:
 38313                           	opt stack 0
 38314  007570                     _INT3_CallBack:
 38315                           	opt stack 15
 38316                           
 38317                           ; BSR set to: 14
 38318                           ;ext_int.c: 187: if(INT3_InterruptHandler)
 38319                           
 38320                           ;incstack = 0
 38321  007570  0101               	movlb	1	; () banked
 38322  007572  51F3               	movf	_INT3_InterruptHandler& (0+255),w,b
 38323  007574  11F4               	iorwf	(_INT3_InterruptHandler+1)& (0+255),w,b
 38324  007576  B4D8               	btfsc	status,2,c
 38325  007578  0012               	return	
 38326                           
 38327                           ; BSR set to: 1
 38328                           ;ext_int.c: 188: {
 38329                           ;ext_int.c: 189: INT3_InterruptHandler();
 38330  00757A  0005               	push	
 38331  00757C  6EFA               	movwf	pclath,c
 38332  00757E  51F3               	movf	_INT3_InterruptHandler& (0+255),w,b
 38333  007580  6EFD               	movwf	tosl,c
 38334  007582  51F4               	movf	(_INT3_InterruptHandler+1)& (0+255),w,b
 38335  007584  6EFE               	movwf	tosh,c
 38336  007586  50F8               	movf	tblptru,w,c
 38337  007588  6EFF               	movwf	tosu,c
 38338  00758A  50FA               	movf	pclath,w,c
 38339  00758C  0012               	return		;indir
 38340  00758E                     __end_of_INT3_CallBack:
 38341                           	opt stack 0
 38342                           tosu	equ	0xFFF
 38343                           tosh	equ	0xFFE
 38344                           tosl	equ	0xFFD
 38345                           pclatu	equ	0xFFB
 38346                           pclath	equ	0xFFA
 38347                           tblptru	equ	0xFF8
 38348                           tblptrh	equ	0xFF7
 38349                           tblptrl	equ	0xFF6
 38350                           tablat	equ	0xFF5
 38351                           prodh	equ	0xFF4
 38352                           prodl	equ	0xFF3
 38353                           intcon	equ	0xFF2
 38354                           indf0	equ	0xFEF
 38355                           postinc0	equ	0xFEE
 38356                           plusw0	equ	0xFEB
 38357                           fsr0h	equ	0xFEA
 38358                           fsr0l	equ	0xFE9
 38359                           wreg	equ	0xFE8
 38360                           postinc1	equ	0xFE6
 38361                           postdec1	equ	0xFE5
 38362                           plusw1	equ	0xFE3
 38363                           fsr1h	equ	0xFE2
 38364                           fsr1l	equ	0xFE1
 38365                           indf2	equ	0xFDF
 38366                           postinc2	equ	0xFDE
 38367                           postdec2	equ	0xFDD
 38368                           plusw2	equ	0xFDB
 38369                           fsr2h	equ	0xFDA
 38370                           fsr2l	equ	0xFD9
 38371                           status	equ	0xFD8
 38372                           
 38373 ;; *************** function _INT3_DefaultInterruptHandler *****************
 38374 ;; Defined at:
 38375 ;;		line 203 in file "mcc_generated_files/ext_int.c"
 38376 ;; Parameters:    Size  Location     Type
 38377 ;;		None
 38378 ;; Auto vars:     Size  Location     Type
 38379 ;;		None
 38380 ;; Return value:  Size  Location     Type
 38381 ;;                  1    wreg      void 
 38382 ;; Registers used:
 38383 ;;		None
 38384 ;; Tracked objects:
 38385 ;;		On entry : F/1
 38386 ;;		On exit  : F/1
 38387 ;;		Unchanged: F/0
 38388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38389 ;;      Params:         0       0       0       0       0       0       0       0       0
 38390 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38391 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38392 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38393 ;;Total ram usage:        0 bytes
 38394 ;; Hardware stack levels used:    1
 38395 ;; This function calls:
 38396 ;;		Nothing
 38397 ;; This function is called by:
 38398 ;;		_EXT_INT_Initialize
 38399 ;;		_INT3_CallBack
 38400 ;; This function uses a non-reentrant model
 38401 ;;
 38402                           
 38403                           	psect	text210
 38404  0078FC                     __ptext210:
 38405                           	opt stack 0
 38406  0078FC                     _INT3_DefaultInterruptHandler:
 38407                           	opt stack 15
 38408                           
 38409                           ; BSR set to: 1
 38410                           
 38411                           ;incstack = 0
 38412  0078FC  0012               	return		;funcret
 38413  0078FE                     __end_of_INT3_DefaultInterruptHandler:
 38414                           	opt stack 0
 38415                           tosu	equ	0xFFF
 38416                           tosh	equ	0xFFE
 38417                           tosl	equ	0xFFD
 38418                           pclatu	equ	0xFFB
 38419                           pclath	equ	0xFFA
 38420                           tblptru	equ	0xFF8
 38421                           tblptrh	equ	0xFF7
 38422                           tblptrl	equ	0xFF6
 38423                           tablat	equ	0xFF5
 38424                           prodh	equ	0xFF4
 38425                           prodl	equ	0xFF3
 38426                           intcon	equ	0xFF2
 38427                           indf0	equ	0xFEF
 38428                           postinc0	equ	0xFEE
 38429                           plusw0	equ	0xFEB
 38430                           fsr0h	equ	0xFEA
 38431                           fsr0l	equ	0xFE9
 38432                           wreg	equ	0xFE8
 38433                           postinc1	equ	0xFE6
 38434                           postdec1	equ	0xFE5
 38435                           plusw1	equ	0xFE3
 38436                           fsr1h	equ	0xFE2
 38437                           fsr1l	equ	0xFE1
 38438                           indf2	equ	0xFDF
 38439                           postinc2	equ	0xFDE
 38440                           postdec2	equ	0xFDD
 38441                           plusw2	equ	0xFDB
 38442                           fsr2h	equ	0xFDA
 38443                           fsr2l	equ	0xFD9
 38444                           status	equ	0xFD8
 38445                           
 38446 ;; *************** function _INT2_ISR *****************
 38447 ;; Defined at:
 38448 ;;		line 87 in file "mcc_generated_files/ext_int.c"
 38449 ;; Parameters:    Size  Location     Type
 38450 ;;		None
 38451 ;; Auto vars:     Size  Location     Type
 38452 ;;		None
 38453 ;; Return value:  Size  Location     Type
 38454 ;;                  1    wreg      void 
 38455 ;; Registers used:
 38456 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38457 ;; Tracked objects:
 38458 ;;		On entry : F/E
 38459 ;;		On exit  : 0/0
 38460 ;;		Unchanged: 0/0
 38461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38462 ;;      Params:         0       0       0       0       0       0       0       0       0
 38463 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38464 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38465 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38466 ;;Total ram usage:        0 bytes
 38467 ;; Hardware stack levels used:    1
 38468 ;; Hardware stack levels required when called:    2
 38469 ;; This function calls:
 38470 ;;		_INT2_CallBack
 38471 ;; This function is called by:
 38472 ;;		_INTERRUPT_InterruptManager
 38473 ;; This function uses a non-reentrant model
 38474 ;;
 38475                           
 38476                           	psect	text211
 38477  0078CC                     __ptext211:
 38478                           	opt stack 0
 38479  0078CC                     _INT2_ISR:
 38480                           	opt stack 15
 38481                           
 38482                           ; BSR set to: 14
 38483                           ;ext_int.c: 93: (PIR0bits.INT2IF = 0);
 38484                           
 38485                           ; BSR set to: 1
 38486                           ;incstack = 0
 38487  0078CC  9533               	bcf	51,2,b	;volatile
 38488                           
 38489                           ; BSR set to: 14
 38490                           ;ext_int.c: 96: INT2_CallBack();
 38491  0078CE  EFC7  F03A         	goto	_INT2_CallBack	;wreg free
 38492  0078D2                     __end_of_INT2_ISR:
 38493                           	opt stack 0
 38494                           tosu	equ	0xFFF
 38495                           tosh	equ	0xFFE
 38496                           tosl	equ	0xFFD
 38497                           pclatu	equ	0xFFB
 38498                           pclath	equ	0xFFA
 38499                           tblptru	equ	0xFF8
 38500                           tblptrh	equ	0xFF7
 38501                           tblptrl	equ	0xFF6
 38502                           tablat	equ	0xFF5
 38503                           prodh	equ	0xFF4
 38504                           prodl	equ	0xFF3
 38505                           intcon	equ	0xFF2
 38506                           indf0	equ	0xFEF
 38507                           postinc0	equ	0xFEE
 38508                           plusw0	equ	0xFEB
 38509                           fsr0h	equ	0xFEA
 38510                           fsr0l	equ	0xFE9
 38511                           wreg	equ	0xFE8
 38512                           postinc1	equ	0xFE6
 38513                           postdec1	equ	0xFE5
 38514                           plusw1	equ	0xFE3
 38515                           fsr1h	equ	0xFE2
 38516                           fsr1l	equ	0xFE1
 38517                           indf2	equ	0xFDF
 38518                           postinc2	equ	0xFDE
 38519                           postdec2	equ	0xFDD
 38520                           plusw2	equ	0xFDB
 38521                           fsr2h	equ	0xFDA
 38522                           fsr2l	equ	0xFD9
 38523                           status	equ	0xFD8
 38524                           
 38525 ;; *************** function _INT2_CallBack *****************
 38526 ;; Defined at:
 38527 ;;		line 102 in file "mcc_generated_files/ext_int.c"
 38528 ;; Parameters:    Size  Location     Type
 38529 ;;		None
 38530 ;; Auto vars:     Size  Location     Type
 38531 ;;		None
 38532 ;; Return value:  Size  Location     Type
 38533 ;;                  1    wreg      void 
 38534 ;; Registers used:
 38535 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38536 ;; Tracked objects:
 38537 ;;		On entry : F/E
 38538 ;;		On exit  : 0/0
 38539 ;;		Unchanged: 0/0
 38540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38541 ;;      Params:         0       0       0       0       0       0       0       0       0
 38542 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38543 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38544 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38545 ;;Total ram usage:        0 bytes
 38546 ;; Hardware stack levels used:    1
 38547 ;; Hardware stack levels required when called:    1
 38548 ;; This function calls:
 38549 ;;		Absolute function
 38550 ;;		_INT2_DefaultInterruptHandler
 38551 ;; This function is called by:
 38552 ;;		_INT2_ISR
 38553 ;; This function uses a non-reentrant model
 38554 ;;
 38555                           
 38556                           	psect	text212
 38557  00758E                     __ptext212:
 38558                           	opt stack 0
 38559  00758E                     _INT2_CallBack:
 38560                           	opt stack 15
 38561                           
 38562                           ; BSR set to: 14
 38563                           ;ext_int.c: 105: if(INT2_InterruptHandler)
 38564                           
 38565                           ;incstack = 0
 38566  00758E  0101               	movlb	1	; () banked
 38567  007590  51F1               	movf	_INT2_InterruptHandler& (0+255),w,b
 38568  007592  11F2               	iorwf	(_INT2_InterruptHandler+1)& (0+255),w,b
 38569  007594  B4D8               	btfsc	status,2,c
 38570  007596  0012               	return	
 38571                           
 38572                           ; BSR set to: 1
 38573                           ;ext_int.c: 106: {
 38574                           ;ext_int.c: 107: INT2_InterruptHandler();
 38575  007598  0005               	push	
 38576  00759A  6EFA               	movwf	pclath,c
 38577  00759C  51F1               	movf	_INT2_InterruptHandler& (0+255),w,b
 38578  00759E  6EFD               	movwf	tosl,c
 38579  0075A0  51F2               	movf	(_INT2_InterruptHandler+1)& (0+255),w,b
 38580  0075A2  6EFE               	movwf	tosh,c
 38581  0075A4  50F8               	movf	tblptru,w,c
 38582  0075A6  6EFF               	movwf	tosu,c
 38583  0075A8  50FA               	movf	pclath,w,c
 38584  0075AA  0012               	return		;indir
 38585  0075AC                     __end_of_INT2_CallBack:
 38586                           	opt stack 0
 38587                           tosu	equ	0xFFF
 38588                           tosh	equ	0xFFE
 38589                           tosl	equ	0xFFD
 38590                           pclatu	equ	0xFFB
 38591                           pclath	equ	0xFFA
 38592                           tblptru	equ	0xFF8
 38593                           tblptrh	equ	0xFF7
 38594                           tblptrl	equ	0xFF6
 38595                           tablat	equ	0xFF5
 38596                           prodh	equ	0xFF4
 38597                           prodl	equ	0xFF3
 38598                           intcon	equ	0xFF2
 38599                           indf0	equ	0xFEF
 38600                           postinc0	equ	0xFEE
 38601                           plusw0	equ	0xFEB
 38602                           fsr0h	equ	0xFEA
 38603                           fsr0l	equ	0xFE9
 38604                           wreg	equ	0xFE8
 38605                           postinc1	equ	0xFE6
 38606                           postdec1	equ	0xFE5
 38607                           plusw1	equ	0xFE3
 38608                           fsr1h	equ	0xFE2
 38609                           fsr1l	equ	0xFE1
 38610                           indf2	equ	0xFDF
 38611                           postinc2	equ	0xFDE
 38612                           postdec2	equ	0xFDD
 38613                           plusw2	equ	0xFDB
 38614                           fsr2h	equ	0xFDA
 38615                           fsr2l	equ	0xFD9
 38616                           status	equ	0xFD8
 38617                           
 38618 ;; *************** function _INT2_DefaultInterruptHandler *****************
 38619 ;; Defined at:
 38620 ;;		line 121 in file "mcc_generated_files/ext_int.c"
 38621 ;; Parameters:    Size  Location     Type
 38622 ;;		None
 38623 ;; Auto vars:     Size  Location     Type
 38624 ;;		None
 38625 ;; Return value:  Size  Location     Type
 38626 ;;                  1    wreg      void 
 38627 ;; Registers used:
 38628 ;;		None
 38629 ;; Tracked objects:
 38630 ;;		On entry : F/1
 38631 ;;		On exit  : F/1
 38632 ;;		Unchanged: F/0
 38633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38634 ;;      Params:         0       0       0       0       0       0       0       0       0
 38635 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38636 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38637 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38638 ;;Total ram usage:        0 bytes
 38639 ;; Hardware stack levels used:    1
 38640 ;; This function calls:
 38641 ;;		Nothing
 38642 ;; This function is called by:
 38643 ;;		_EXT_INT_Initialize
 38644 ;;		_INT2_CallBack
 38645 ;; This function uses a non-reentrant model
 38646 ;;
 38647                           
 38648                           	psect	text213
 38649  0078FE                     __ptext213:
 38650                           	opt stack 0
 38651  0078FE                     _INT2_DefaultInterruptHandler:
 38652                           	opt stack 15
 38653                           
 38654                           ; BSR set to: 1
 38655                           
 38656                           ;incstack = 0
 38657  0078FE  0012               	return		;funcret
 38658  007900                     __end_of_INT2_DefaultInterruptHandler:
 38659                           	opt stack 0
 38660                           tosu	equ	0xFFF
 38661                           tosh	equ	0xFFE
 38662                           tosl	equ	0xFFD
 38663                           pclatu	equ	0xFFB
 38664                           pclath	equ	0xFFA
 38665                           tblptru	equ	0xFF8
 38666                           tblptrh	equ	0xFF7
 38667                           tblptrl	equ	0xFF6
 38668                           tablat	equ	0xFF5
 38669                           prodh	equ	0xFF4
 38670                           prodl	equ	0xFF3
 38671                           intcon	equ	0xFF2
 38672                           indf0	equ	0xFEF
 38673                           postinc0	equ	0xFEE
 38674                           plusw0	equ	0xFEB
 38675                           fsr0h	equ	0xFEA
 38676                           fsr0l	equ	0xFE9
 38677                           wreg	equ	0xFE8
 38678                           postinc1	equ	0xFE6
 38679                           postdec1	equ	0xFE5
 38680                           plusw1	equ	0xFE3
 38681                           fsr1h	equ	0xFE2
 38682                           fsr1l	equ	0xFE1
 38683                           indf2	equ	0xFDF
 38684                           postinc2	equ	0xFDE
 38685                           postdec2	equ	0xFDD
 38686                           plusw2	equ	0xFDB
 38687                           fsr2h	equ	0xFDA
 38688                           fsr2l	equ	0xFD9
 38689                           status	equ	0xFD8
 38690                           
 38691 ;; *************** function _INT1_ISR *****************
 38692 ;; Defined at:
 38693 ;;		line 46 in file "mcc_generated_files/ext_int.c"
 38694 ;; Parameters:    Size  Location     Type
 38695 ;;		None
 38696 ;; Auto vars:     Size  Location     Type
 38697 ;;		None
 38698 ;; Return value:  Size  Location     Type
 38699 ;;                  1    wreg      void 
 38700 ;; Registers used:
 38701 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38702 ;; Tracked objects:
 38703 ;;		On entry : F/E
 38704 ;;		On exit  : 0/0
 38705 ;;		Unchanged: 0/0
 38706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38707 ;;      Params:         0       0       0       0       0       0       0       0       0
 38708 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38709 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38710 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38711 ;;Total ram usage:        0 bytes
 38712 ;; Hardware stack levels used:    1
 38713 ;; Hardware stack levels required when called:    2
 38714 ;; This function calls:
 38715 ;;		_INT1_CallBack
 38716 ;; This function is called by:
 38717 ;;		_INTERRUPT_InterruptManager
 38718 ;; This function uses a non-reentrant model
 38719 ;;
 38720                           
 38721                           	psect	text214
 38722  0078D2                     __ptext214:
 38723                           	opt stack 0
 38724  0078D2                     _INT1_ISR:
 38725                           	opt stack 15
 38726                           
 38727                           ; BSR set to: 14
 38728                           ;ext_int.c: 52: (PIR0bits.INT1IF = 0);
 38729                           
 38730                           ; BSR set to: 1
 38731                           ;incstack = 0
 38732  0078D2  9333               	bcf	51,1,b	;volatile
 38733                           
 38734                           ; BSR set to: 14
 38735                           ;ext_int.c: 55: INT1_CallBack();
 38736  0078D4  EFD6  F03A         	goto	_INT1_CallBack	;wreg free
 38737  0078D8                     __end_of_INT1_ISR:
 38738                           	opt stack 0
 38739                           tosu	equ	0xFFF
 38740                           tosh	equ	0xFFE
 38741                           tosl	equ	0xFFD
 38742                           pclatu	equ	0xFFB
 38743                           pclath	equ	0xFFA
 38744                           tblptru	equ	0xFF8
 38745                           tblptrh	equ	0xFF7
 38746                           tblptrl	equ	0xFF6
 38747                           tablat	equ	0xFF5
 38748                           prodh	equ	0xFF4
 38749                           prodl	equ	0xFF3
 38750                           intcon	equ	0xFF2
 38751                           indf0	equ	0xFEF
 38752                           postinc0	equ	0xFEE
 38753                           plusw0	equ	0xFEB
 38754                           fsr0h	equ	0xFEA
 38755                           fsr0l	equ	0xFE9
 38756                           wreg	equ	0xFE8
 38757                           postinc1	equ	0xFE6
 38758                           postdec1	equ	0xFE5
 38759                           plusw1	equ	0xFE3
 38760                           fsr1h	equ	0xFE2
 38761                           fsr1l	equ	0xFE1
 38762                           indf2	equ	0xFDF
 38763                           postinc2	equ	0xFDE
 38764                           postdec2	equ	0xFDD
 38765                           plusw2	equ	0xFDB
 38766                           fsr2h	equ	0xFDA
 38767                           fsr2l	equ	0xFD9
 38768                           status	equ	0xFD8
 38769                           
 38770 ;; *************** function _INT1_CallBack *****************
 38771 ;; Defined at:
 38772 ;;		line 61 in file "mcc_generated_files/ext_int.c"
 38773 ;; Parameters:    Size  Location     Type
 38774 ;;		None
 38775 ;; Auto vars:     Size  Location     Type
 38776 ;;		None
 38777 ;; Return value:  Size  Location     Type
 38778 ;;                  1    wreg      void 
 38779 ;; Registers used:
 38780 ;;		wreg, status,2, status,0, pclat, tosl, cstack
 38781 ;; Tracked objects:
 38782 ;;		On entry : F/E
 38783 ;;		On exit  : 0/0
 38784 ;;		Unchanged: 0/0
 38785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38786 ;;      Params:         0       0       0       0       0       0       0       0       0
 38787 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38788 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38789 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38790 ;;Total ram usage:        0 bytes
 38791 ;; Hardware stack levels used:    1
 38792 ;; Hardware stack levels required when called:    1
 38793 ;; This function calls:
 38794 ;;		Absolute function
 38795 ;;		_INT1_DefaultInterruptHandler
 38796 ;; This function is called by:
 38797 ;;		_INT1_ISR
 38798 ;; This function uses a non-reentrant model
 38799 ;;
 38800                           
 38801                           	psect	text215
 38802  0075AC                     __ptext215:
 38803                           	opt stack 0
 38804  0075AC                     _INT1_CallBack:
 38805                           	opt stack 15
 38806                           
 38807                           ; BSR set to: 14
 38808                           ;ext_int.c: 64: if(INT1_InterruptHandler)
 38809                           
 38810                           ;incstack = 0
 38811  0075AC  0101               	movlb	1	; () banked
 38812  0075AE  51EF               	movf	_INT1_InterruptHandler& (0+255),w,b
 38813  0075B0  11F0               	iorwf	(_INT1_InterruptHandler+1)& (0+255),w,b
 38814  0075B2  B4D8               	btfsc	status,2,c
 38815  0075B4  0012               	return	
 38816                           
 38817                           ; BSR set to: 1
 38818                           ;ext_int.c: 65: {
 38819                           ;ext_int.c: 66: INT1_InterruptHandler();
 38820  0075B6  0005               	push	
 38821  0075B8  6EFA               	movwf	pclath,c
 38822  0075BA  51EF               	movf	_INT1_InterruptHandler& (0+255),w,b
 38823  0075BC  6EFD               	movwf	tosl,c
 38824  0075BE  51F0               	movf	(_INT1_InterruptHandler+1)& (0+255),w,b
 38825  0075C0  6EFE               	movwf	tosh,c
 38826  0075C2  50F8               	movf	tblptru,w,c
 38827  0075C4  6EFF               	movwf	tosu,c
 38828  0075C6  50FA               	movf	pclath,w,c
 38829  0075C8  0012               	return		;indir
 38830  0075CA                     __end_of_INT1_CallBack:
 38831                           	opt stack 0
 38832                           tosu	equ	0xFFF
 38833                           tosh	equ	0xFFE
 38834                           tosl	equ	0xFFD
 38835                           pclatu	equ	0xFFB
 38836                           pclath	equ	0xFFA
 38837                           tblptru	equ	0xFF8
 38838                           tblptrh	equ	0xFF7
 38839                           tblptrl	equ	0xFF6
 38840                           tablat	equ	0xFF5
 38841                           prodh	equ	0xFF4
 38842                           prodl	equ	0xFF3
 38843                           intcon	equ	0xFF2
 38844                           indf0	equ	0xFEF
 38845                           postinc0	equ	0xFEE
 38846                           plusw0	equ	0xFEB
 38847                           fsr0h	equ	0xFEA
 38848                           fsr0l	equ	0xFE9
 38849                           wreg	equ	0xFE8
 38850                           postinc1	equ	0xFE6
 38851                           postdec1	equ	0xFE5
 38852                           plusw1	equ	0xFE3
 38853                           fsr1h	equ	0xFE2
 38854                           fsr1l	equ	0xFE1
 38855                           indf2	equ	0xFDF
 38856                           postinc2	equ	0xFDE
 38857                           postdec2	equ	0xFDD
 38858                           plusw2	equ	0xFDB
 38859                           fsr2h	equ	0xFDA
 38860                           fsr2l	equ	0xFD9
 38861                           status	equ	0xFD8
 38862                           
 38863 ;; *************** function _INT1_DefaultInterruptHandler *****************
 38864 ;; Defined at:
 38865 ;;		line 80 in file "mcc_generated_files/ext_int.c"
 38866 ;; Parameters:    Size  Location     Type
 38867 ;;		None
 38868 ;; Auto vars:     Size  Location     Type
 38869 ;;		None
 38870 ;; Return value:  Size  Location     Type
 38871 ;;                  1    wreg      void 
 38872 ;; Registers used:
 38873 ;;		None
 38874 ;; Tracked objects:
 38875 ;;		On entry : F/1
 38876 ;;		On exit  : F/1
 38877 ;;		Unchanged: F/0
 38878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 38879 ;;      Params:         0       0       0       0       0       0       0       0       0
 38880 ;;      Locals:         0       0       0       0       0       0       0       0       0
 38881 ;;      Temps:          0       0       0       0       0       0       0       0       0
 38882 ;;      Totals:         0       0       0       0       0       0       0       0       0
 38883 ;;Total ram usage:        0 bytes
 38884 ;; Hardware stack levels used:    1
 38885 ;; This function calls:
 38886 ;;		Nothing
 38887 ;; This function is called by:
 38888 ;;		_EXT_INT_Initialize
 38889 ;;		_INT1_CallBack
 38890 ;; This function uses a non-reentrant model
 38891 ;;
 38892                           
 38893                           	psect	text216
 38894  007900                     __ptext216:
 38895                           	opt stack 0
 38896  007900                     _INT1_DefaultInterruptHandler:
 38897                           	opt stack 15
 38898                           
 38899                           ; BSR set to: 1
 38900                           
 38901                           ;incstack = 0
 38902  007900  0012               	return		;funcret
 38903  007902                     __end_of_INT1_DefaultInterruptHandler:
 38904                           	opt stack 0
 38905                           tosu	equ	0xFFF
 38906                           tosh	equ	0xFFE
 38907                           tosl	equ	0xFFD
 38908                           pclatu	equ	0xFFB
 38909                           pclath	equ	0xFFA
 38910                           tblptru	equ	0xFF8
 38911                           tblptrh	equ	0xFF7
 38912                           tblptrl	equ	0xFF6
 38913                           tablat	equ	0xFF5
 38914                           prodh	equ	0xFF4
 38915                           prodl	equ	0xFF3
 38916                           intcon	equ	0xFF2
 38917                           indf0	equ	0xFEF
 38918                           postinc0	equ	0xFEE
 38919                           plusw0	equ	0xFEB
 38920                           fsr0h	equ	0xFEA
 38921                           fsr0l	equ	0xFE9
 38922                           wreg	equ	0xFE8
 38923                           postinc1	equ	0xFE6
 38924                           postdec1	equ	0xFE5
 38925                           plusw1	equ	0xFE3
 38926                           fsr1h	equ	0xFE2
 38927                           fsr1l	equ	0xFE1
 38928                           indf2	equ	0xFDF
 38929                           postinc2	equ	0xFDE
 38930                           postdec2	equ	0xFDD
 38931                           plusw2	equ	0xFDB
 38932                           fsr2h	equ	0xFDA
 38933                           fsr2l	equ	0xFD9
 38934                           status	equ	0xFD8
 38935                           tosu	equ	0xFFF
 38936                           tosh	equ	0xFFE
 38937                           tosl	equ	0xFFD
 38938                           pclatu	equ	0xFFB
 38939                           pclath	equ	0xFFA
 38940                           tblptru	equ	0xFF8
 38941                           tblptrh	equ	0xFF7
 38942                           tblptrl	equ	0xFF6
 38943                           tablat	equ	0xFF5
 38944                           prodh	equ	0xFF4
 38945                           prodl	equ	0xFF3
 38946                           intcon	equ	0xFF2
 38947                           indf0	equ	0xFEF
 38948                           postinc0	equ	0xFEE
 38949                           plusw0	equ	0xFEB
 38950                           fsr0h	equ	0xFEA
 38951                           fsr0l	equ	0xFE9
 38952                           wreg	equ	0xFE8
 38953                           postinc1	equ	0xFE6
 38954                           postdec1	equ	0xFE5
 38955                           plusw1	equ	0xFE3
 38956                           fsr1h	equ	0xFE2
 38957                           fsr1l	equ	0xFE1
 38958                           indf2	equ	0xFDF
 38959                           postinc2	equ	0xFDE
 38960                           postdec2	equ	0xFDD
 38961                           plusw2	equ	0xFDB
 38962                           fsr2h	equ	0xFDA
 38963                           fsr2l	equ	0xFD9
 38964                           status	equ	0xFD8
 38965                           
 38966                           	psect	text217
 38967  000000                     __ptext217:
 38968                           	opt stack 0
 38969                           tosu	equ	0xFFF
 38970                           tosh	equ	0xFFE
 38971                           tosl	equ	0xFFD
 38972                           pclatu	equ	0xFFB
 38973                           pclath	equ	0xFFA
 38974                           tblptru	equ	0xFF8
 38975                           tblptrh	equ	0xFF7
 38976                           tblptrl	equ	0xFF6
 38977                           tablat	equ	0xFF5
 38978                           prodh	equ	0xFF4
 38979                           prodl	equ	0xFF3
 38980                           intcon	equ	0xFF2
 38981                           indf0	equ	0xFEF
 38982                           postinc0	equ	0xFEE
 38983                           plusw0	equ	0xFEB
 38984                           fsr0h	equ	0xFEA
 38985                           fsr0l	equ	0xFE9
 38986                           wreg	equ	0xFE8
 38987                           postinc1	equ	0xFE6
 38988                           postdec1	equ	0xFE5
 38989                           plusw1	equ	0xFE3
 38990                           fsr1h	equ	0xFE2
 38991                           fsr1l	equ	0xFE1
 38992                           indf2	equ	0xFDF
 38993                           postinc2	equ	0xFDE
 38994                           postdec2	equ	0xFDD
 38995                           plusw2	equ	0xFDB
 38996                           fsr2h	equ	0xFDA
 38997                           fsr2l	equ	0xFD9
 38998                           status	equ	0xFD8
 38999                           
 39000                           	psect	rparam
 39001  0000                     tosu	equ	0xFFF
 39002                           tosh	equ	0xFFE
 39003                           tosl	equ	0xFFD
 39004                           pclatu	equ	0xFFB
 39005                           pclath	equ	0xFFA
 39006                           tblptru	equ	0xFF8
 39007                           tblptrh	equ	0xFF7
 39008                           tblptrl	equ	0xFF6
 39009                           tablat	equ	0xFF5
 39010                           prodh	equ	0xFF4
 39011                           prodl	equ	0xFF3
 39012                           intcon	equ	0xFF2
 39013                           indf0	equ	0xFEF
 39014                           postinc0	equ	0xFEE
 39015                           plusw0	equ	0xFEB
 39016                           fsr0h	equ	0xFEA
 39017                           fsr0l	equ	0xFE9
 39018                           wreg	equ	0xFE8
 39019                           postinc1	equ	0xFE6
 39020                           postdec1	equ	0xFE5
 39021                           plusw1	equ	0xFE3
 39022                           fsr1h	equ	0xFE2
 39023                           fsr1l	equ	0xFE1
 39024                           indf2	equ	0xFDF
 39025                           postinc2	equ	0xFDE
 39026                           postdec2	equ	0xFDD
 39027                           plusw2	equ	0xFDB
 39028                           fsr2h	equ	0xFDA
 39029                           fsr2l	equ	0xFD9
 39030                           status	equ	0xFD8
 39031                           
 39032                           	psect	temp
 39033  00004A                     btemp:
 39034                           	opt stack 0
 39035  00004A                     	ds	12
 39036                           tosu	equ	0xFFF
 39037                           tosh	equ	0xFFE
 39038                           tosl	equ	0xFFD
 39039                           pclatu	equ	0xFFB
 39040                           pclath	equ	0xFFA
 39041                           tblptru	equ	0xFF8
 39042                           tblptrh	equ	0xFF7
 39043                           tblptrl	equ	0xFF6
 39044                           tablat	equ	0xFF5
 39045                           prodh	equ	0xFF4
 39046                           prodl	equ	0xFF3
 39047                           intcon	equ	0xFF2
 39048                           indf0	equ	0xFEF
 39049                           postinc0	equ	0xFEE
 39050                           plusw0	equ	0xFEB
 39051                           fsr0h	equ	0xFEA
 39052                           fsr0l	equ	0xFE9
 39053                           wreg	equ	0xFE8
 39054                           postinc1	equ	0xFE6
 39055                           postdec1	equ	0xFE5
 39056                           plusw1	equ	0xFE3
 39057                           fsr1h	equ	0xFE2
 39058                           fsr1l	equ	0xFE1
 39059                           indf2	equ	0xFDF
 39060                           postinc2	equ	0xFDE
 39061                           postdec2	equ	0xFDD
 39062                           plusw2	equ	0xFDB
 39063                           fsr2h	equ	0xFDA
 39064                           fsr2l	equ	0xFD9
 39065                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    402
    Data        58
    BSS         1276
    Persistent  12
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     47      83
    BANK0           160    151     151
    BANK1           256    110     249
    BANK2           256      0     245
    BANK3           256     20     180
    BANK4           256      0     224
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    RxDataDone@pData	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    RxPayload$0	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    S1514$0$0	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 
		 -> macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memset@p	PTR unsigned char  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 
		 -> macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    memcpy@d1	PTR void  size(2) Largest target is 271
		 -> AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), 
		 -> LORAWAN_RxDone@computedMic(BANK3[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), AESCmac@x(BANK1[16]), 
		 -> UpdateCfList@frequency(BANK0[4]), macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), 
		 -> radioBuffer(BIGRAM[271]), loRa(BANK2[245]), RadioConfiguration(BANK1[54]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 271
		 -> AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), 
		 -> LORAWAN_RxDone@computedMic(BANK3[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), AESCmac@x(BANK1[16]), 
		 -> UpdateCfList@frequency(BANK0[4]), macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), 
		 -> radioBuffer(BIGRAM[271]), loRa(BANK2[245]), RadioConfiguration(BANK1[54]), 

    memcpy@s1	PTR const void  size(2) Largest target is 271
		 -> radioBuffer.cfList(COMRAM[16]), LORAWAN_RxDone@hdr.cfList(COMRAM[16]), payload(BANK1[2]), appSKey(BANK1[16]), 
		 -> nwkSKey(BANK1[16]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), loRa.activationParameters.applicationKey(BANK2[16]), 
		 -> loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), 
		 -> AESCmac@y(BANK1[16]), FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp(BANK2[4]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 
		 -> DefaultChannels433(CODE[42]), DefaultChannels868(CODE[42]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), 
		 -> NULL(NULL[0]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 271
		 -> radioBuffer.cfList(COMRAM[16]), LORAWAN_RxDone@hdr.cfList(COMRAM[16]), payload(BANK1[2]), appSKey(BANK1[16]), 
		 -> nwkSKey(BANK1[16]), AssembleEncryptionBlock@frameCounter(BANK0[4]), ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), PrepareJoinRequestFrame@mic(BANK0[4]), 
		 -> loRa.fCntUp.valueLow(BANK2[2]), aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), loRa.activationParameters.applicationKey(BANK2[16]), 
		 -> loRa.activationParameters.applicationSessionKey(BANK2[16]), loRa.activationParameters.networkSessionKey(BANK2[16]), loRa.activationParameters.deviceAddress(BANK2[4]), loRa.activationParameters.applicationEui(BANK2[8]), 
		 -> loRa.activationParameters.deviceEui(BANK2[8]), loRa.activationParameters.mcastApplicationSessionKey(BANK2[16]), loRa.activationParameters.mcastNetworkSessionKey(BANK2[16]), loRa.activationParameters.mcastDeviceAddress(BANK2[4]), 
		 -> AESCmac@y(BANK1[16]), FskSyncWordBuff(CODE[3]), UpdateCfList@joinAccept(BANK0[2]), loRa.activationParameters(BANK2[105]), 
		 -> loRa.devNonce(BANK2[2]), loRa.fCntUp(BANK2[4]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 
		 -> DefaultChannels433(CODE[42]), DefaultChannels868(CODE[42]), RadioConfiguration.syncWord(BANK1[8]), RadioConfiguration(BANK1[54]), 
		 -> NULL(NULL[0]), 

    AESEncode@block	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), 
		 -> AESCmac@x(BANK1[16]), loRa.activationParameters(BANK2[105]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 

    AESEncode@masterKey	PTR unsigned char  size(1) Largest target is 16
		 -> AESEncodeLoRa@useKey(BANK0[16]), 

    EncodeShiftRow@stateTable	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), 
		 -> AESCmac@x(BANK1[16]), loRa.activationParameters(BANK2[105]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 

    EncKeySchedule@key	PTR unsigned char  size(1) Largest target is 16
		 -> AESEncode@key(BANK0[16]), 

    AESEncodeLoRa@block	PTR unsigned char  size(2) Largest target is 271
		 -> aesBuffer(BANK1[16]), LORAWAN_RxDone@hdr(BANK3[2]), GenerateSubkey@l(BANK0[16]), AESCmac@y(BANK1[16]), 
		 -> AESCmac@x(BANK1[16]), loRa.activationParameters(BANK2[105]), radioBuffer(BIGRAM[271]), loRa(BANK2[245]), 

    AESEncodeLoRa@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    EncryptFRMPayload@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> payload(BANK1[2]), LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    EncryptFRMPayload@bufferToBeEncrypted	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    EncryptFRMPayload@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ComputeMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    ComputeMic@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    ExtractMic@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    CheckMcastFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    CheckFlags@hdr	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ComputeSessionKeys@joinAcceptBuffer	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    PrepareSessionKeys@networkId	PTR unsigned char  size(2) Largest target is 1
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    PrepareSessionKeys@appNonce	PTR unsigned char  size(2) Largest target is 1
		 -> ComputeSessionKeys@joinAcceptBuffer(BANK0[2]), LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    PrepareSessionKeys@sessionKey	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    IncludeMacCommandsResponse@macBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    IncludeMacCommandsResponse@pBufferIndex	PTR unsigned char  size(1) Largest target is 1
		 -> AssemblePacket@macCmdIdx(BANK0[1]), AssemblePacket@bufferIndex(BANK0[1]), 

    AssemblePacket@buffer	PTR unsigned char  size(2) Largest target is 2
		 -> payload(BANK1[2]), NULL(NULL[0]), 

    ExecuteRxTimingSetup@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteLinkCheck@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteRxTimingSetup	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteLinkCheck	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    MacExecuteCommands@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    MacExecuteCommands@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__MacExecuteCommands	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_RxDone@packet	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    LORAWAN_RxDone@hdr	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_RxDone@joinAccept	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_RxDone@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> appSKey(BANK1[16]), 

    LORAWAN_SetNetworkSessionKey@networkSessionKeyNew	PTR unsigned char  size(2) Largest target is 16
		 -> nwkSKey(BANK1[16]), 

    LORAWAN_Send@buffer	PTR void  size(2) Largest target is 2
		 -> payload(BANK1[2]), NULL(NULL[0]), 

    IOCBF4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCBF4_DefaultInterruptHandler(), 

    IOCBF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCBF4_DefaultInterruptHandler(), Absolute function(), 

    FillSubKey@source	PTR unsigned char  size(2) Largest target is 16
		 -> GenerateSubkey@l(BANK0[16]), AESCmac@k1(BANK1[16]), 

    FillSubKey@key	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), AESCmac@k1(BANK1[16]), 

    GenerateSubkey@k2	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k2(BANK1[16]), 

    GenerateSubkey@k1	PTR unsigned char  size(2) Largest target is 16
		 -> AESCmac@k1(BANK1[16]), 

    GenerateSubkey@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@output	PTR unsigned char  size(2) Largest target is 16
		 -> aesBuffer(BANK1[16]), 

    AESCmac@input	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), 

    AESCmac@key	PTR unsigned char  size(2) Largest target is 245
		 -> loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    AESCmac@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), macBuffer(BIGRAM[271]), radioBuffer(BIGRAM[271]), NULL(NULL[0]), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), TMR_ISR_lora(), Absolute function(), 

    UpdateCfList@joinAccept	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    SearchAvailableChannel@channelIndex	PTR unsigned char  size(2) Largest target is 1
		 -> LORAWAN_RxDone@channelIndex(BANK3[1]), SelectChannelForTransmission@channelIndex(BANK0[1]), 

    sp__ExecuteRxParamSetupReq	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteRxParamSetupReq@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteNewChannel	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteNewChannel@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteDevStatus	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteDevStatus@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteLinkAdr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteLinkAdr@redundancy	PTR struct . size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteLinkAdr@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__ExecuteDutyCycle	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    ExecuteDutyCycle@ptr	PTR unsigned char  size(2) Largest target is 271
		 -> LORAWAN_RxDone@hdr(BANK3[2]), radioBuffer(BIGRAM[271]), 

    sp__memset	PTR void  size(2) Largest target is 271
		 -> AssemblePacket@mhdr(BANK0[1]), aesBuffer(BANK1[16]), GenerateSubkey@l(BANK0[16]), AESCmac@x(BANK1[16]), 
		 -> macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), loRa(BANK2[245]), 

    LORAWAN_Init@RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    LORAWAN_Init@RxPayload	PTR FTN(PTR unsigned char ,unsigned char ,enum E17205,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    S1514$RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    rxPayload.RxJoinResponse	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> RxJoinResponse(), 

    S1514$RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E17205,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    rxPayload.RxAppData	PTR FTN(PTR unsigned char ,unsigned char ,enum E17205,)void  size(2) Largest target is 1
		 -> RxDataDone(), 

    RADIO_SetFSKSyncWord@syncWord	PTR unsigned char  size(2) Largest target is 3
		 -> FskSyncWordBuff(CODE[3]), 

    sp__memcpy	PTR void  size(2) Largest target is 271
		 -> AESEncodeLoRa@useKey(BANK0[16]), ComputeMic@mic(BANK0[4]), ExtractMic@mic(BANK0[4]), aesBuffer(BANK1[16]), 
		 -> LORAWAN_RxDone@computedMic(BANK3[4]), loRa.activationParameters.applicationEui(BANK2[8]), loRa.activationParameters.deviceEui(BANK2[8]), AESCmac@x(BANK1[16]), 
		 -> UpdateCfList@frequency(BANK0[4]), macBuffer(BIGRAM[271]), Channels(BANK4[224]), loRa.activationParameters(BANK2[105]), 
		 -> radioBuffer(BIGRAM[271]), loRa(BANK2[245]), RadioConfiguration(BANK1[54]), 

    RADIO_Transmit@buffer	PTR unsigned char  size(2) Largest target is 271
		 -> macBuffer(BIGRAM[271]), 

    RADIO_Init@radioBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    S839$fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    RadioConfiguration.fhssNextFrequency	PTR FTN()unsigned long  size(2) Largest target is 1
		 -> Absolute function(), 

    S839$dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    RadioConfiguration.dataBuffer	PTR unsigned char  size(2) Largest target is 271
		 -> radioBuffer(BIGRAM[271]), 

    SwTimerSetCallback@callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), UnconfirmedTransmissionCallback(), AutomaticReplyCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow1Callback(), LORAWAN_ReceiveWindow2Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), 

    S172$callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), UnconfirmedTransmissionCallback(), AutomaticReplyCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow1Callback(), LORAWAN_ReceiveWindow2Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), Absolute function(), 

    swTimers.callback	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> DutyCycleCallback(), UpdateJoinSuccessState(), UnconfirmedTransmissionCallback(), AutomaticReplyCallback(), 
		 -> AckRetransmissionCallback(), LORAWAN_LinkCheckCallback(), LORAWAN_ReceiveWindow1Callback(), LORAWAN_ReceiveWindow2Callback(), 
		 -> RADIO_WatchdogTimeout(), RADIO_RxFSKTimeout(), Absolute function(), 

    INT3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), 

    INT3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT3_DefaultInterruptHandler(), Absolute function(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> DIO5_ISR_Lora(), DIO2_ISR_Lora(), DIO1_ISR_Lora(), DIO0_ISR_Lora(), 
		 -> INT0_DefaultInterruptHandler(), 

    INT0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> DIO5_ISR_Lora(), DIO2_ISR_Lora(), DIO1_ISR_Lora(), DIO0_ISR_Lora(), 
		 -> INT0_DefaultInterruptHandler(), Absolute function(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), 

    INT2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), Absolute function(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), 

    INT1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR_ISR_lora->i2_SwTimersInterrupt
    i2_TMR_SwapTimer->i2_TMR1_ReadTimer
    i2_SwTimersInterrupt->i2_TMR_GetDeltaTime
    i2_TMR_GetDeltaTime->i2_TMR1_ReadTimer

Critical Paths under _main in BANK0

    _sendPacket->_LORAWAN_Send
    _SYSTEM_Initialize->_TMR1_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCBF4_SetInterruptHandler
    _TMR_ISR_Lora_Init->_TMR1_SetInterruptHandler
    _DIO5_ISR_Lora_Init->_INT0_SetInterruptHandler
    _DIO2_ISR_Lora_Init->_INT0_SetInterruptHandler
    _DIO1_ISR_Lora_Init->_INT0_SetInterruptHandler
    _DIO0_ISR_Lora_Init->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT0_SetInterruptHandler
    _EXT_INT_Initialize->_INT1_SetInterruptHandler
    _EXT_INT_Initialize->_INT2_SetInterruptHandler
    _EXT_INT_Initialize->_INT3_SetInterruptHandler
    _LORAWAN_SetNetworkSessionKey->_memcpy
    _LORAWAN_SetApplicationSessionKey->_memcpy
    _LORAWAN_Mainloop->_RADIO_DIO0
    _UnconfirmedTransmissionCallback->_RADIO_Transmit
    _RADIO_WatchdogTimeout->_RADIO_WriteMode
    _RADIO_RxFSKTimeout->_RADIO_WriteMode
    _LORAWAN_ReceiveWindow1Callback->_RADIO_ReceiveStart
    _LORAWAN_LinkCheckCallback->_SwTimerStart
    _DutyCycleCallback->_SwTimerStart
    _AutomaticReplyCallback->_LORAWAN_Send
    _AckRetransmissionCallback->_RADIO_Transmit
    _RADIO_DIO5->_RADIO_UnhandledInterrupt
    _RADIO_DIO4->_RADIO_UnhandledInterrupt
    _RADIO_DIO3->_RADIO_UnhandledInterrupt
    _RADIO_RxTimeout->_LORAWAN_RxTimeout
    _RADIO_FHSSChangeChannel->_RADIO_WriteFrequency
    _RADIO_DIO0->_RADIO_FSKPayloadReady
    _RADIO_DIO0->_RADIO_RxDone
    _RADIO_UnhandledInterrupt->_RADIO_RegisterWrite
    _RADIO_TxDone->_LORAWAN_TxDone
    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_RxTimeout->_RADIO_Transmit
    _LORAWAN_ReceiveWindow2Callback->_RADIO_ReceiveStart
    _LORAWAN_RxDone->_LORAWAN_Send
    _UpdateRetransmissionAckTimeoutState->_SwTimerStart
    _UpdateJoinSuccessState->_SwTimerStart
    _UpdateCfList->___lmul
    _StartReTxTimer->_SwTimerStart
    _MacExecuteCommands->_ExecuteLinkAdr
    _ExecuteRxTimingSetup->_UpdateReceiveDelays
    _ExecuteRxParamSetupReq->___lmul
    _ExecuteNewChannel->___lmul
    _ValidateDataRange->_ValidateDataRate
    _LORAWAN_SetChannelIdStatus->_UpdateChannelIdStatus
    _ExecuteLinkAdr->_EnableChannels
    _EnableChannels->_EnableChannels1
    _EnableChannels1->_UpdateChannelIdStatus
    _LORAWAN_Send->_AssemblePacket
    _LORAWAN_GetMaxPayloadSize->_CountfOptsLength
    _AssemblePacket->_AESCmac
    _EncryptFRMPayload->_AESEncodeLoRa
    _AssembleEncryptionBlock->_memcpy
    _ExtractMic->_memcpy
    _ComputeSessionKeys->_AESEncodeLoRa
    _PrepareSessionKeys->_memcpy
    _RADIO_FSKPacketSent->_LORAWAN_TxDone
    _SwTimerReadValue->_SwTimersInterrupt
    _LORAWAN_EnterContinuousReceive->_RADIO_ReceiveStart
    _RADIO_ReceiveStop->_RADIO_WriteMode
    _RADIO_ReceiveStart->_SwTimerStart
    _ConfigureRadioRx->_ConfigureRadio
    _LORAWAN_Join->_PrepareJoinRequestFrame
    _SelectChannelForTransmission->_SearchAvailableChannel
    _SearchAvailableChannel->_Random
    _ConfigureRadioTx->_ConfigureRadio
    _ConfigureRadio->_RADIO_SetFSKSyncWord
    _RADIO_SetFSKSyncWord->_memcpy
    _RADIO_Transmit->_SwTimerStart
    _RADIO_WriteConfiguration->_RADIO_WriteFrequency
    _RADIO_WritePower->_RADIO_RegisterRead
    _RADIO_WritePower->_RADIO_RegisterWrite
    _RADIO_WriteFSKFrequencyDeviation->___lldiv
    _RADIO_WriteFSKBitRate->___lldiv
    _PrepareJoinRequestFrame->_ComputeMic
    _Random->___lwmod
    _rand->___lmul
    ___lwmod->_rand
    _ComputeMic->_AESCmac
    _AESCmac->_GenerateSubkey
    _GenerateSubkey->_AESEncodeLoRa
    _AESEncodeLoRa->_AESEncode
    _AESEncode->_EncKeySchedule
    _LORAWAN_Init->_LORAWAN_Reset
    _srand->_RADIO_ReadRandom
    _SetCallbackSoftwareTimers->_SwTimerSetCallback
    _RADIO_ReadRandom->_RADIO_WriteMode
    _LORAWAN_Reset->_LORAWAN_LinkCheckConfigure
    _StopAllSoftwareTimers->_SwTimerStop
    _RADIO_Init->_RADIO_WriteFrequency
    _RADIO_WriteMode->_SystemBlockingWaitMs
    _RADIO_RegisterRead->_HALSPISend
    _RADIO_WriteFrequency->___lldiv
    _RADIO_RegisterWrite->_HALSPISend
    _HALSPISend->_SPI2_Exchange8bit
    _RADIO_Reset->_SystemBlockingWaitMs
    _LORAWAN_LinkCheckConfigure->_SwTimerStart
    _SwTimerStart->_SwTimersInterrupt
    _TMR_OverrideRemaining->_TMR_SwapTimer
    _TMR_SwapTimer->_TMR1_ReadTimer
    _SwTimersInterrupt->_TMR_GetDeltaTime
    _TMR_GetDeltaTime->_TMR1_ReadTimer
    _SwTimerSetTimeout->___lldiv
    _InitDefault868Channels->_memcpy
    _InitDefault433Channels->_memcpy
    _CreateAllSoftwareTimers->_SwTimerCreate

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone
    _LORAWAN_Send->_AssemblePacket
    _AssemblePacket->_AESCmac
    _ComputeMic->_AESCmac

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _RADIO_RxDone->_LORAWAN_RxDone
    _RADIO_FSKPayloadReady->_LORAWAN_RxDone

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0 6655359
                                            147 BANK0      4     4      0
                   _LORAWAN_GetState
                       _LORAWAN_Init
                       _LORAWAN_Join
                   _LORAWAN_Mainloop
                      _LORAWAN_Reset
   _LORAWAN_SetApplicationSessionKey
           _LORAWAN_SetDeviceAddress
       _LORAWAN_SetNetworkSessionKey
                  _SYSTEM_Initialize
                              _flash
                         _sendPacket
 ---------------------------------------------------------------------------------
 (1) _sendPacket                                           0     0      0  312252
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (1) _flash                                                2     2      0      68
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    3717
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
               _LORAWAN_PlatformInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _SPI2_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      2     2      0     239
                                              6 BANK0      2     2      0
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0     169
                                              6 BANK0      1     1      0
         _IOCBF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCBF4_SetInterruptHandler                           2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_PlatformInit                                 0     0      0    2371
                 _DIO0_ISR_Lora_Init
                 _DIO1_ISR_Lora_Init
                 _DIO2_ISR_Lora_Init
                 _DIO3_ISR_Lora_Init
                 _DIO4_ISR_Lora_Init
                 _DIO5_ISR_Lora_Init
                    _SystemTimerInit
                  _TMR_ISR_Lora_Init
 ---------------------------------------------------------------------------------
 (3) _TMR_ISR_Lora_Init                                    0     0      0     239
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2     239
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _SystemTimerInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO5_ISR_Lora_Init                                   0     0      0     533
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO4_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO3_ISR_Lora_Init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DIO2_ISR_Lora_Init                                   0     0      0     533
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO1_ISR_Lora_Init                                   0     0      0     533
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _DIO0_ISR_Lora_Init                                   0     0      0     533
           _INT0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0     938
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
           _INT3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT3_SetInterruptHandler                             2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT2_SetInterruptHandler                             2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _INT1_SetInterruptHandler                             2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _INT0_SetInterruptHandler                             2     0      2     533
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetNetworkSessionKey                         2     0      2   13228
                                             14 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetDeviceAddress                             4     0      4     135
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_SetApplicationSessionKey                     2     0      2   13228
                                             14 BANK0      2     0      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Mainloop                                     0     0      0 5802250
             _INTERRUPT_GetDioStatus
                         _RADIO_DIO0
                         _RADIO_DIO1
                         _RADIO_DIO2
                         _RADIO_DIO3
                         _RADIO_DIO4
                         _RADIO_DIO5
                    _SwTimersExecute
 ---------------------------------------------------------------------------------
 (2) _SwTimersExecute                                      5     5      0 2266213
                                            136 BANK0      5     5      0
                   Absolute function *
          _AckRetransmissionCallback *
             _AutomaticReplyCallback *
                  _DutyCycleCallback *
          _LORAWAN_LinkCheckCallback *
     _LORAWAN_ReceiveWindow1Callback *
     _LORAWAN_ReceiveWindow2Callback *
                 _RADIO_RxFSKTimeout *
              _RADIO_WatchdogTimeout *
    _UnconfirmedTransmissionCallback *
             _UpdateJoinSuccessState *
 ---------------------------------------------------------------------------------
 (3) _UnconfirmedTransmissionCallback                      1     0      1  147886
                     _RADIO_Transmit
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _RADIO_WatchdogTimeout                                1     0      1  662267
                  _LORAWAN_RxTimeout
                     _LORAWAN_TxDone
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxFSKTimeout                                   2     1      1  488841
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_ReceiveWindow1Callback                       5     4      1  153033
                   _ConfigureRadioRx
                         _GetRx1Freq
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
 ---------------------------------------------------------------------------------
 (4) _GetRx1Freq                                           4     0      4       0
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_LinkCheckCallback                            6     5      1    9224
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _DutyCycleCallback                                   11    10      1    9667
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _AutomaticReplyCallback                               1     0      1  312252
                       _LORAWAN_Send
 ---------------------------------------------------------------------------------
 (3) _AckRetransmissionCallback                            2     1      1  157701
               _FindSmallestDataRate
          _LORAWAN_GetMaxPayloadSize
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
                         _RxDataDone *
       _SelectChannelForTransmission
_UpdateRetransmissionAckTimeoutState
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO5                                           2     2      0    9877
                                              9 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO4                                           2     2      0    9877
                                              9 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO3                                           2     2      0    9877
                                              9 BANK0      1     1      0
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO2                                           3     3      0   36323
                                             29 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO1                                           2     2      0  534747
                                             78 BANK0      2     2      0
            _RADIO_FHSSChangeChannel
                 _RADIO_RegisterRead
                    _RADIO_RxTimeout
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxTimeout                                      0     0      0  498393
                  _LORAWAN_RxTimeout
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _RADIO_FHSSChangeChannel                              1     1      0   26412
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _RADIO_WriteFrequency
 ---------------------------------------------------------------------------------
 (2) _RADIO_DIO0                                           4     4      0 2935302
                                            143 BANK0      4     4      0
                _RADIO_FSKPacketSent
              _RADIO_FSKPayloadReady
                 _RADIO_RegisterRead
                       _RADIO_RxDone
                       _RADIO_TxDone
           _RADIO_UnhandledInterrupt
 ---------------------------------------------------------------------------------
 (3) _RADIO_UnhandledInterrupt                             1     1      0    9747
                                              8 BANK0      1     1      0
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (3) _RADIO_TxDone                                        12    12      0  199578
                                            112 BANK0     12    12      0
                     _LORAWAN_TxDone
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _RADIO_RxDone                                         2     2      0 1036497
                                            141 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
                        _SwTimerStop
                            ___abdiv
 ---------------------------------------------------------------------------------
 (4) ___abdiv                                              5     4      1     549
                                              4 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPayloadReady                                2     2      0 1499160
                                            141 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                     _LORAWAN_RxDone
                  _LORAWAN_RxTimeout
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxTimeout                                    9     9      0  472962
                                             69 BANK0      9     9      0
     _LORAWAN_ReceiveWindow2Callback
                     _RADIO_Transmit
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
       _SelectChannelForTransmission
                   _SetJoinFailState
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_ReceiveWindow2Callback                       1     0      1  315700
                   _ConfigureRadioRx
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_RxDone                                      28    25      3 1010158
                                            136 BANK0      5     5      0
                                            107 BANK1      3     0      3
                                              0 BANK3     20    20      0
                            _AESCmac
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
                         _CheckFlags
                    _CheckMcastFlags
                         _ComputeMic
                 _ComputeSessionKeys
                  _EncryptFRMPayload
                         _ExtractMic
     _LORAWAN_EnterContinuousReceive
                       _LORAWAN_Send
                 _MacExecuteCommands
                    _RADIO_GetStatus
                  _RADIO_ReleaseData
                         _RxDataDone *
             _SearchAvailableChannel
                   _SetJoinFailState
             _SetReceptionNotOkState
                     _StartReTxTimer
                        _SwTimerStop
                       _UpdateCfList
                   _UpdateDLSettings
             _UpdateJoinSuccessState
                _UpdateReceiveDelays
_UpdateRetransmissionAckTimeoutState
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _UpdateRetransmissionAckTimeoutState                  4     4      0    9085
                                             52 BANK0      4     4      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _UpdateJoinSuccessState                               5     4      1    9122
                     _RxJoinResponse *
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _UpdateDLSettings                                     2     1      1     228
                                              4 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _UpdateCfList                                        11     9      2   19594
                                             16 BANK0     11     9      2
         _LORAWAN_SetChannelIdStatus
                  _ValidateFrequency
                             ___lmul
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _StartReTxTimer                                       9     9      0    9376
                                             52 BANK0      9     9      0
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _SetReceptionNotOkState                               0     0      0  162701
     _LORAWAN_EnterContinuousReceive
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (5) _SetJoinFailState                                     0     0      0       0
                     _RxJoinResponse *
 ---------------------------------------------------------------------------------
 (4) _RxJoinResponse                                       1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _MacExecuteCommands                                   8     5      3   19487
                                             26 BANK0      8     5      3
                   _ExecuteDevStatus
                   _ExecuteDutyCycle
                     _ExecuteLinkAdr
                   _ExecuteLinkCheck
                  _ExecuteNewChannel
             _ExecuteRxParamSetupReq
               _ExecuteRxTimingSetup
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxTimingSetup                                 3     1      2     265
                                              9 BANK0      3     1      2
                _UpdateReceiveDelays
 ---------------------------------------------------------------------------------
 (5) _UpdateReceiveDelays                                  5     5      0      62
                                              4 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (6) _ExecuteRxParamSetupReq                               7     5      2    4297
                                             16 BANK0      7     5      2
     _UpdateReceiveWindow2Parameters
                   _ValidateDataRate
                  _ValidateFrequency
                   _ValidateRxOffset
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) _ValidateRxOffset                                     2     2      0      68
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _UpdateReceiveWindow2Parameters                       5     0      5     438
                                              4 BANK0      5     0      5
 ---------------------------------------------------------------------------------
 (6) _ExecuteNewChannel                                    8     6      2   10051
                                             16 BANK0      8     6      2
         _LORAWAN_SetChannelIdStatus
              _UpdateChannelIdStatus
                    _UpdateDataRange
                    _UpdateDutyCycle
                    _UpdateFrequency
                  _ValidateChannelId
                  _ValidateDataRange
                  _ValidateFrequency
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) _ValidateFrequency                                    5     1      4     644
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRange                                    4     4      0     297
                                              6 BANK0      4     4      0
                   _ValidateDataRate
 ---------------------------------------------------------------------------------
 (7) _UpdateFrequency                                      5     1      4     385
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) _UpdateDutyCycle                                      3     1      2     385
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateDataRange                                      4     3      1     608
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _LORAWAN_SetChannelIdStatus                           3     2      1    2369
                                              8 BANK0      3     2      1
              _UpdateChannelIdStatus
                  _ValidateChannelId
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelId                                    3     2      1     842
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkCheck                                     2     0      2     203
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteLinkAdr                                       9     7      2    3295
                                             17 BANK0      9     7      2
                     _EnableChannels
              _UpdateCurrentDataRate
                      _UpdateTxPower
                _ValidateChannelMask
            _ValidateChannelMaskCntl
                   _ValidateDataRate
                    _ValidateTxPower
 ---------------------------------------------------------------------------------
 (7) _ValidateTxPower                                      2     2      0      99
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateDataRate                                     2     2      0      68
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMaskCntl                              2     2      0      99
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _ValidateChannelMask                                  3     1      2     271
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _UpdateTxPower                                        1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _UpdateCurrentDataRate                                1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _EnableChannels                                       3     0      3    2044
                                             14 BANK0      3     0      3
                    _EnableChannels1
 ---------------------------------------------------------------------------------
 (8) _EnableChannels1                                      6     1      5    1774
                                              8 BANK0      6     1      5
              _UpdateChannelIdStatus
 ---------------------------------------------------------------------------------
 (7) _UpdateChannelIdStatus                                4     3      1     971
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) _ExecuteDutyCycle                                     6     4      2     265
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (6) _ExecuteDevStatus                                     2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_Send                                         7     3      4  312252
                                            129 BANK0      7     3      4
                     _AssemblePacket
          _LORAWAN_GetMaxPayloadSize
                  _RADIO_ReceiveStop
                     _RADIO_Transmit
       _SelectChannelForTransmission
 ---------------------------------------------------------------------------------
 (3) _LORAWAN_GetMaxPayloadSize                            3     3      0     272
                                             12 BANK0      3     3      0
                   _CountfOptsLength
 ---------------------------------------------------------------------------------
 (3) _AssemblePacket                                      12     7      5  151724
                                            122 BANK0      7     7      0
                                            102 BANK1      5     0      5
                            _AESCmac
            _AssembleEncryptionBlock
                   _CountfOptsLength
                  _EncryptFRMPayload
               _FindSmallestDataRate
         _IncludeMacCommandsResponse
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _IncludeMacCommandsResponse                          12     8      4    2532
                                              4 BANK0     12     8      4
                 _RADIO_GetPacketSnr
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetPacketSnr                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _FindSmallestDataRate                                 4     4      0     424
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _EncryptFRMPayload                                   22     8     14   44159
                                             68 BANK0     22     8     14
                      _AESEncodeLoRa
            _AssembleEncryptionBlock
 ---------------------------------------------------------------------------------
 (5) _AssembleEncryptionBlock                              9     2      7   19076
                                             14 BANK0      9     2      7
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _CountfOptsLength                                     8     8      0     198
                                              4 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _ExtractMic                                          10     6      4   13819
                                             14 BANK0     10     6      4
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _ComputeSessionKeys                                   2     0      2   37765
                                             68 BANK0      2     0      2
                      _AESEncodeLoRa
                 _PrepareSessionKeys
 ---------------------------------------------------------------------------------
 (6) _PrepareSessionKeys                                   7     1      6   17577
                                             14 BANK0      7     1      6
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _CheckMcastFlags                                      2     0      2     290
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _CheckFlags                                           2     0      2     228
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _RADIO_FSKPacketSent                                 13    13      0  190026
                                            112 BANK0     13    13      0
                     _LORAWAN_TxDone
                 _RADIO_RegisterRead
                    _RADIO_WriteMode
                   _SwTimerReadValue
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (4) _LORAWAN_TxDone                                      50    48      2  173621
                                             62 BANK0     50    48      2
     _LORAWAN_EnterContinuousReceive
                    _RADIO_GetStatus
                         _RxDataDone *
                   _SwTimerIsRunning
                   _SwTimerReadValue
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _SwTimerReadValue                                     9     5      4     455
                                             43 BANK0      9     5      4
                  _SwTimersInterrupt
 ---------------------------------------------------------------------------------
 (5) _SwTimerIsRunning                                     2     2      0      65
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_GetStatus                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _LORAWAN_EnterContinuousReceive                       0     0      0  157850
                   _ConfigureRadioRx
                 _RADIO_ReceiveStart
                  _RADIO_ReceiveStop
                  _RADIO_ReleaseData
_ResetParametersForConfirmedTransmis
_ResetParametersForUnconfirmedTransm
                         _RxDataDone *
 ---------------------------------------------------------------------------------
 (4) _RxDataDone                                           4     0      4    4851
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ResetParametersForUnconfirmedTransmission            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _ResetParametersForConfirmedTransmission              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReleaseData                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_ReceiveStop                                    0     0      0   15684
                    _RADIO_WriteMode
 ---------------------------------------------------------------------------------
 (6) _RADIO_ReceiveStart                                  10     8      2  122643
                                             52 BANK0     10     8      2
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _ConfigureRadioRx                                     5     1      4   14672
                                             22 BANK0      5     1      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_GetDioStatus                               1     1      0      34
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Join                                         3     3      0  248201
                                            140 BANK0      3     3      0
            _PrepareJoinRequestFrame
                     _RADIO_Transmit
       _SelectChannelForTransmission
                  _SwTimerSetTimeout
                       _SwTimerStart
               _UpdateJoinInProgress
 ---------------------------------------------------------------------------------
 (2) _UpdateJoinInProgress                                 1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SelectChannelForTransmission                         3     3      0   19265
                                             37 BANK0      3     3      0
                   _ConfigureRadioTx
             _SearchAvailableChannel
 ---------------------------------------------------------------------------------
 (4) _SearchAvailableChannel                              12     9      3    4535
                                             25 BANK0     12     9      3
                             _Random
 ---------------------------------------------------------------------------------
 (4) _ConfigureRadioTx                                     6     2      4   14532
                                             22 BANK0      6     2      4
                     _ConfigureRadio
                       _RADIO_SetCRC
                _RADIO_SetIQInverted
               _RADIO_SetOutputPower
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetOutputPower                                 1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetIQInverted                                  1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _RADIO_SetCRC                                         1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _ConfigureRadio                                       5     1      4   14236
                                             17 BANK0      5     1      4
                 _RADIO_SetBandwidth
          _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
        _RADIO_SetFrequencyHopPeriod
              _RADIO_SetLoRaSyncWord
                _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetSpreadingFactor                             1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetModulation                                  1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetFrequencyHopPeriod                          2     0      2     135
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetFSKSyncWord                                 3     1      2   13293
                                             14 BANK0      3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetChannelFrequency                            4     0      4     321
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetBandwidth                                   1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Transmit                                      17    14      3  123770
                                             52 BANK0     17    14      3
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
           _RADIO_WriteConfiguration
                    _RADIO_WriteMode
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteConfiguration                            10     8      2   87685
                                             29 BANK0     10     8      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
              _RADIO_WriteFSKBitRate
   _RADIO_WriteFSKFrequencyDeviation
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                   _RADIO_WritePower
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) _RADIO_WritePower                                     3     3      0   10303
                                              8 BANK0      3     3      0
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFSKFrequencyDeviation                     8     4      4   15813
                                             17 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFSKBitRate                                8     4      4   15810
                                             17 BANK0      8     4      4
                _RADIO_RegisterWrite
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _PrepareJoinRequestFrame                              9     9      0  101770
                                            131 BANK0      9     9      0
                         _ComputeMic
                             _Random
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _Random                                               2     0      2    3326
                                             23 BANK0      2     0      2
                            ___lwmod
                               _rand
 ---------------------------------------------------------------------------------
 (6) _rand                                                 2     0      2    2647
                                             16 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) ___lmul                                              12     4      8    2647
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     440
                                             18 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) _ComputeMic                                           9     4      5   81241
                                            122 BANK0      9     4      5
                            _AESCmac
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _AESCmac                                            116   109      7   67391
                                            108 BANK0     14     7      7
                                              0 BANK1    102   102      0
                      _AESEncodeLoRa
                     _GenerateSubkey
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (5) _GenerateSubkey                                      40    34      6   26439
                                             68 BANK0     40    34      6
                      _AESEncodeLoRa
                         _FillSubKey
                             _memset
 ---------------------------------------------------------------------------------
 (6) _FillSubKey                                           8     3      5    1539
                                              4 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _AESEncodeLoRa                                       20    16      4   19957
                                             48 BANK0     20    16      4
                          _AESEncode
                             _memcpy
 ---------------------------------------------------------------------------------
 (6) _AESEncode                                           38    35      3    5098
                                             10 BANK0     38    35      3
                     _EncKeySchedule
                     _EncodeShiftRow
 ---------------------------------------------------------------------------------
 (7) _EncodeShiftRow                                       3     1      2     984
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (7) _EncKeySchedule                                       6     5      1    1164
                                              4 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Init                                         4     0      4  168868
                                             68 BANK0      4     0      4
            _CreateAllSoftwareTimers
                      _LORAWAN_Reset
                         _RADIO_Init
                   _RADIO_ReadRandom
          _SetCallbackSoftwareTimers
              _StopAllSoftwareTimers
                              _srand
 ---------------------------------------------------------------------------------
 (2) _srand                                                2     0      2     135
                                             21 BANK0      2     0      2
                   _RADIO_ReadRandom (ARG)
 ---------------------------------------------------------------------------------
 (2) _SetCallbackSoftwareTimers                            0     0      0    2620
                 _SwTimerSetCallback
 ---------------------------------------------------------------------------------
 (2) _RADIO_ReadRandom                                     5     3      2   26256
                                             16 BANK0      5     3      2
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                    _RADIO_WriteMode
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_Reset                                        1     1      0   93127
                                             67 BANK0      1     1      0
             _InitDefault433Channels
             _InitDefault868Channels
         _LORAWAN_LinkCheckConfigure
                         _RADIO_Init
              _RADIO_SetLoRaSyncWord
              _StopAllSoftwareTimers
             _UpdateMinMaxChDataRate
                             _memset
 ---------------------------------------------------------------------------------
 (2) _UpdateMinMaxChDataRate                               2     2      0     223
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _StopAllSoftwareTimers                                0     0      0      31
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (6) _RADIO_SetLoRaSyncWord                                1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RADIO_Init                                           7     1      6   46271
                                             29 BANK0      7     1      6
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
                        _RADIO_Reset
               _RADIO_WriteFrequency
                    _RADIO_WriteMode
                      _SwTimerCreate
                 _SwTimerSetCallback
                        _SwTimerStop
 ---------------------------------------------------------------------------------
 (3) _SwTimerSetCallback                                   4     1      3    2620
                                              4 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _RADIO_WriteMode                                      7     5      2   15684
                                              9 BANK0      7     5      2
                    _HALDIO5PinValue
                 _RADIO_RegisterRead
                _RADIO_RegisterWrite
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (5) _RADIO_RegisterRead                                   2     2      0     130
                                              6 BANK0      2     2      0
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (5) _HALDIO5PinValue                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RADIO_WriteFrequency                                12     8      4   16566
                                             17 BANK0     12     8      4
                _RADIO_RegisterWrite
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (6) ___llmod                                              9     1      8     440
                                              4 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) _RADIO_RegisterWrite                                  2     1      1    9716
                                              6 BANK0      2     1      1
                     _HALSPICSAssert
                   _HALSPICSDeassert
                         _HALSPISend
 ---------------------------------------------------------------------------------
 (6) _HALSPISend                                           1     1      0      62
                                              5 BANK0      1     1      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (7) _SPI2_Exchange8bit                                    1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HALSPICSDeassert                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _HALSPICSAssert                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RADIO_Reset                                          0     0      0     680
               _HALResetPinMakeInput
              _HALResetPinMakeOutput
             _HALResetPinOutputValue
               _SystemBlockingWaitMs
 ---------------------------------------------------------------------------------
 (5) _SystemBlockingWaitMs                                 5     1      4     618
                                              4 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) _HALResetPinOutputValue                               1     1      0      62
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeOutput                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _HALResetPinMakeInput                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LORAWAN_LinkCheckConfigure                          15    13      2    9418
                                             52 BANK0     15    13      2
                  _SwTimerSetTimeout
                       _SwTimerStart
                        _SwTimerStop
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    5857
                                              4 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _SwTimerStop                                          1     1      0      31
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _SwTimerStart                                         9     9      0    1294
                                             43 BANK0      9     9      0
                  _SwTimersInterrupt
              _TMR_OverrideRemaining
 ---------------------------------------------------------------------------------
 (5) _TMR_OverrideRemaining                               10     6      4     743
                                             12 BANK0     10     6      4
                      _TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (6) _TMR_SwapTimer                                        2     0      2     478
                                             10 BANK0      2     0      2
                     _TMR1_ReadTimer
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     240
                                              4 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SwTimersInterrupt                                   17    13      4     390
                                             26 BANK0     17    13      4
                   _TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (6) _TMR_GetDeltaTime                                    16    12      4      34
                                             10 BANK0     16    12      4
                     _TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_ReadTimer                                       6     4      2      34
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _SwTimerSetTimeout                                    9     5      4    1934
                                             17 BANK0      9     5      4
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _InitDefault868Channels                               1     1      0   16761
                                             14 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (2) _InitDefault433Channels                               1     1      0   16761
                                             14 BANK0      1     1      0
                             _memcpy
                             _memset
 ---------------------------------------------------------------------------------
 (4) _memset                                               8     2      6    3569
                                              4 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (7) _memcpy                                              10     4      6   13062
                                              4 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _CreateAllSoftwareTimers                              0     0      0     158
                      _SwTimerCreate
 ---------------------------------------------------------------------------------
 (3) _SwTimerCreate                                        1     1      0     158
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LORAWAN_GetState                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _INTERRUPT_InterruptManager                          8     8      0     455
                                             39 COMRAM     8     8      0
                           _INT1_ISR
                           _INT2_ISR
                           _INT3_ISR
                    _PIN_MANAGER_IOC
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (14) _TMR1_ISR                                            0     0      0     455
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (15) _TMR1_CallBack                                       0     0      0     455
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                       _TMR_ISR_lora *
 ---------------------------------------------------------------------------------
 (16) _TMR_ISR_lora                                        0     0      0     455
                i2_SwTimersInterrupt
                    i2_TMR_SwapTimer
 ---------------------------------------------------------------------------------
 (17) i2_TMR_SwapTimer                                     2     0      2     185
                                              6 COMRAM     2     0      2
                   i2_TMR1_ReadTimer
                  i2_TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_WriteTimer                                   2     0      2     114
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (17) i2_SwTimersInterrupt                                17    13      4     270
                                             22 COMRAM    17    13      4
                 i2_TMR_GetDeltaTime
 ---------------------------------------------------------------------------------
 (18) i2_TMR_GetDeltaTime                                 16    12      4      23
                                              6 COMRAM    16    12      4
                   i2_TMR1_ReadTimer
 ---------------------------------------------------------------------------------
 (18) i2_TMR1_ReadTimer                                    6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (16) _TMR1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _PIN_MANAGER_IOC                                     0     0      0       0
                         _IOCBF4_ISR
 ---------------------------------------------------------------------------------
 (15) _IOCBF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCBF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _IOCBF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT3_ISR                                            0     0      0       0
                      _INT3_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT3_CallBack                                       0     0      0       0
                   Absolute function *
       _INT3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT3_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT2_ISR                                            0     0      0       0
                      _INT2_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT2_CallBack                                       0     0      0       0
                   Absolute function *
       _INT2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _INT1_ISR                                            0     0      0       0
                      _INT1_CallBack
 ---------------------------------------------------------------------------------
 (15) _INT1_CallBack                                       0     0      0       0
                   Absolute function *
       _INT1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (16) _INT1_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (16) Absolute function(Fake)                              4     0      4       0
                                              4 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LORAWAN_GetState
   _LORAWAN_Init
     _CreateAllSoftwareTimers
       _SwTimerCreate
     _LORAWAN_Reset
       _InitDefault433Channels
         _memcpy
         _memset
       _InitDefault868Channels
         _memcpy
         _memset
       _LORAWAN_LinkCheckConfigure
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
       _RADIO_Init
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_Reset
           _HALResetPinMakeInput
           _HALResetPinMakeOutput
           _HALResetPinOutputValue
           _SystemBlockingWaitMs
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerCreate
         _SwTimerSetCallback
         _SwTimerStop
       _RADIO_SetLoRaSyncWord
       _StopAllSoftwareTimers
         _SwTimerStop
       _UpdateMinMaxChDataRate
       _memset
     _RADIO_Init
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_Reset
         _HALResetPinMakeInput
         _HALResetPinMakeOutput
         _HALResetPinOutputValue
         _SystemBlockingWaitMs
       _RADIO_WriteFrequency
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         ___lldiv
         ___llmod
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerCreate
       _SwTimerSetCallback
       _SwTimerStop
     _RADIO_ReadRandom
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SystemBlockingWaitMs
     _SetCallbackSoftwareTimers
       _SwTimerSetCallback
     _StopAllSoftwareTimers
       _SwTimerStop
     _srand
       _RADIO_ReadRandom (ARG)
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SystemBlockingWaitMs
   _LORAWAN_Join
     _PrepareJoinRequestFrame
       _ComputeMic
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _memcpy
       _Random
         ___lwmod
           _rand (ARG)
             ___lmul
         _rand
           ___lmul
       _memcpy
       _memset
     _RADIO_Transmit
       _HALSPICSAssert
       _HALSPICSDeassert
       _HALSPISend
         _SPI2_Exchange8bit
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_WriteConfiguration
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFSKBitRate
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFSKFrequencyDeviation
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _RADIO_WritePower
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
         ___lmul
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _SelectChannelForTransmission
       _ConfigureRadioTx
         _ConfigureRadio
           _RADIO_SetBandwidth
           _RADIO_SetChannelFrequency
           _RADIO_SetFSKSyncWord
             _memcpy
           _RADIO_SetFrequencyHopPeriod
           _RADIO_SetLoRaSyncWord
           _RADIO_SetModulation
           _RADIO_SetSpreadingFactor
         _RADIO_SetCRC
         _RADIO_SetIQInverted
         _RADIO_SetOutputPower
       _SearchAvailableChannel
         _Random
           ___lwmod
             _rand (ARG)
               ___lmul
           _rand
             ___lmul
     _SwTimerSetTimeout
       ___lldiv (ARG)
     _SwTimerStart
       _SwTimersInterrupt
         _TMR_GetDeltaTime
           _TMR1_ReadTimer
       _TMR_OverrideRemaining
         _TMR_SwapTimer
           _TMR1_ReadTimer
           _TMR1_WriteTimer
     _UpdateJoinInProgress
   _LORAWAN_Mainloop
     _INTERRUPT_GetDioStatus
     _RADIO_DIO0
       _RADIO_FSKPacketSent
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
       _RADIO_FSKPayloadReady
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxDataDone *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RxDataDone *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxDone
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _LORAWAN_RxDone
           _AESCmac
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _GenerateSubkey
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _FillSubKey
               _memset
             _memcpy
             _memset
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
           _CheckFlags
           _CheckMcastFlags
           _ComputeMic
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _memcpy
           _ComputeSessionKeys
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _PrepareSessionKeys
               _memcpy
               _memset
           _EncryptFRMPayload
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _AssembleEncryptionBlock
               _memcpy
               _memset
           _ExtractMic
             _memcpy
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _LORAWAN_Send
             _AssemblePacket
               _AESCmac
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _GenerateSubkey
                   _AESEncodeLoRa
                     _AESEncode
                       _EncKeySchedule
                       _EncodeShiftRow
                     _memcpy
                   _FillSubKey
                   _memset
                 _memcpy
                 _memset
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
               _CountfOptsLength
               _EncryptFRMPayload
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _AssembleEncryptionBlock
                   _memcpy
                   _memset
               _FindSmallestDataRate
               _IncludeMacCommandsResponse
                 _RADIO_GetPacketSnr
               _memcpy
               _memset
             _LORAWAN_GetMaxPayloadSize
               _CountfOptsLength
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_Transmit
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               _SwTimerStop
               ___lldiv
             _SelectChannelForTransmission
               _ConfigureRadioTx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
                 _RADIO_SetOutputPower
               _SearchAvailableChannel
                 _Random
                   ___lwmod
                     _rand (ARG)
                       ___lmul
                   _rand
                     ___lmul
           _MacExecuteCommands
             _ExecuteDevStatus
             _ExecuteDutyCycle
             _ExecuteLinkAdr
               _EnableChannels
                 _EnableChannels1
                   _UpdateChannelIdStatus
               _UpdateCurrentDataRate
               _UpdateTxPower
               _ValidateChannelMask
               _ValidateChannelMaskCntl
               _ValidateDataRate
               _ValidateTxPower
             _ExecuteLinkCheck
             _ExecuteNewChannel
               _LORAWAN_SetChannelIdStatus
                 _UpdateChannelIdStatus
                 _ValidateChannelId
               _UpdateChannelIdStatus
               _UpdateDataRange
               _UpdateDutyCycle
               _UpdateFrequency
               _ValidateChannelId
               _ValidateDataRange
                 _ValidateDataRate
               _ValidateFrequency
               ___lmul
             _ExecuteRxParamSetupReq
               _UpdateReceiveWindow2Parameters
               _ValidateDataRate
               _ValidateFrequency
               _ValidateRxOffset
               ___lmul
             _ExecuteRxTimingSetup
               _UpdateReceiveDelays
           _RADIO_GetStatus
           _RADIO_ReleaseData
           _RxDataDone *
           _SearchAvailableChannel *
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SetReceptionNotOkState *
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RxDataDone *
           _StartReTxTimer *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _SwTimerStop *
           _UpdateCfList *
             _LORAWAN_SetChannelIdStatus
               _UpdateChannelIdStatus
               _ValidateChannelId
             _ValidateFrequency
             ___lmul
             _memcpy
           _UpdateDLSettings *
           _UpdateJoinSuccessState *
             _RxJoinResponse *
             _SwTimerSetTimeout *
               ___lldiv (ARG)
             _SwTimerStart *
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv *
           _UpdateReceiveDelays *
           _UpdateRetransmissionAckTimeoutState *
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _memcpy *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
         ___abdiv
       _RADIO_TxDone
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerReadValue
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
         _SwTimerStop
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO1
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RxTimeout
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO2
       _RADIO_FHSSChangeChannel
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteFrequency
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           ___lldiv
           ___llmod
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO3
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO4
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _RADIO_DIO5
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_UnhandledInterrupt
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
     _SwTimersExecute
       Absolute function(Fake) *
       _AckRetransmissionCallback *
         _FindSmallestDataRate
         _LORAWAN_GetMaxPayloadSize
           _CountfOptsLength
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForConfirmedTransmission
         _RxDataDone *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
         _UpdateRetransmissionAckTimeoutState *
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
       _AutomaticReplyCallback *
         _LORAWAN_Send
           _AssemblePacket
             _AESCmac
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _GenerateSubkey
                 _AESEncodeLoRa
                   _AESEncode
                     _EncKeySchedule
                     _EncodeShiftRow
                   _memcpy
                 _FillSubKey
                 _memset
               _memcpy
               _memset
             _AssembleEncryptionBlock
               _memcpy
               _memset
             _CountfOptsLength
             _EncryptFRMPayload
               _AESEncodeLoRa
                 _AESEncode
                   _EncKeySchedule
                   _EncodeShiftRow
                 _memcpy
               _AssembleEncryptionBlock
                 _memcpy
                 _memset
             _FindSmallestDataRate
             _IncludeMacCommandsResponse
               _RADIO_GetPacketSnr
             _memcpy
             _memset
           _LORAWAN_GetMaxPayloadSize
             _CountfOptsLength
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _SelectChannelForTransmission
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
       _DutyCycleCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_LinkCheckCallback *
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv
       _LORAWAN_ReceiveWindow1Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _GetRx1Freq
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
       _LORAWAN_ReceiveWindow2Callback *
         _ConfigureRadioRx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
         _LORAWAN_EnterContinuousReceive
           _ConfigureRadioRx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
           _RADIO_ReceiveStart
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             ___lldiv
           _RADIO_ReceiveStop
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
           _RADIO_ReleaseData
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
         _RADIO_GetStatus
         _RADIO_ReceiveStart
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv
         _RADIO_ReceiveStop
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
         _RADIO_ReleaseData
         _ResetParametersForConfirmedTransmission
         _ResetParametersForUnconfirmedTransmission
         _RxDataDone *
       _RADIO_RxFSKTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerStop
       _RADIO_WatchdogTimeout *
         _LORAWAN_RxTimeout
           _LORAWAN_ReceiveWindow2Callback
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _LORAWAN_EnterContinuousReceive
               _ConfigureRadioRx
                 _ConfigureRadio
                   _RADIO_SetBandwidth
                   _RADIO_SetChannelFrequency
                   _RADIO_SetFSKSyncWord
                     _memcpy
                   _RADIO_SetFrequencyHopPeriod
                   _RADIO_SetLoRaSyncWord
                   _RADIO_SetModulation
                   _RADIO_SetSpreadingFactor
                 _RADIO_SetCRC
                 _RADIO_SetIQInverted
               _RADIO_ReceiveStart
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteConfiguration
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_WriteFSKBitRate
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFSKFrequencyDeviation
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                   _RADIO_WriteFrequency
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     ___lldiv
                     ___llmod
                   _RADIO_WriteMode
                     _HALDIO5PinValue
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _SystemBlockingWaitMs
                   _RADIO_WritePower
                     _RADIO_RegisterRead
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                     _RADIO_RegisterWrite
                       _HALSPICSAssert
                       _HALSPICSDeassert
                       _HALSPISend
                         _SPI2_Exchange8bit
                   ___lmul
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _SwTimerSetTimeout
                   ___lldiv (ARG)
                 _SwTimerStart
                   _SwTimersInterrupt
                     _TMR_GetDeltaTime
                       _TMR1_ReadTimer
                   _TMR_OverrideRemaining
                     _TMR_SwapTimer
                       _TMR1_ReadTimer
                       _TMR1_WriteTimer
                 ___lldiv
               _RADIO_ReceiveStop
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
               _RADIO_ReleaseData
               _ResetParametersForConfirmedTransmission
               _ResetParametersForUnconfirmedTransmission
               _RxDataDone *
             _RADIO_GetStatus
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_Transmit
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteConfiguration
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteFSKBitRate
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFSKFrequencyDeviation
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
               _RADIO_WriteFrequency
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 ___lldiv
                 ___llmod
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _RADIO_WritePower
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
               ___lmul
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _SwTimerSetTimeout
               ___lldiv (ARG)
             _SwTimerStart
               _SwTimersInterrupt
                 _TMR_GetDeltaTime
                   _TMR1_ReadTimer
               _TMR_OverrideRemaining
                 _TMR_SwapTimer
                   _TMR1_ReadTimer
                   _TMR1_WriteTimer
             _SwTimerStop
             ___lldiv
           _ResetParametersForConfirmedTransmission
           _ResetParametersForUnconfirmedTransmission
           _RxDataDone *
           _SelectChannelForTransmission *
             _ConfigureRadioTx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
               _RADIO_SetOutputPower
             _SearchAvailableChannel
               _Random
                 ___lwmod
                   _rand (ARG)
                     ___lmul
                 _rand
                   ___lmul
           _SetJoinFailState *
             _RxJoinResponse *
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           ___lldiv *
         _LORAWAN_TxDone
           _LORAWAN_EnterContinuousReceive
             _ConfigureRadioRx
               _ConfigureRadio
                 _RADIO_SetBandwidth
                 _RADIO_SetChannelFrequency
                 _RADIO_SetFSKSyncWord
                   _memcpy
                 _RADIO_SetFrequencyHopPeriod
                 _RADIO_SetLoRaSyncWord
                 _RADIO_SetModulation
                 _RADIO_SetSpreadingFactor
               _RADIO_SetCRC
               _RADIO_SetIQInverted
             _RADIO_ReceiveStart
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_WriteConfiguration
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_WriteFSKBitRate
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFSKFrequencyDeviation
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                 _RADIO_WriteFrequency
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   ___lldiv
                   ___llmod
                 _RADIO_WriteMode
                   _HALDIO5PinValue
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _SystemBlockingWaitMs
                 _RADIO_WritePower
                   _RADIO_RegisterRead
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                   _RADIO_RegisterWrite
                     _HALSPICSAssert
                     _HALSPICSDeassert
                     _HALSPISend
                       _SPI2_Exchange8bit
                 ___lmul
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
               _SwTimerSetTimeout
                 ___lldiv (ARG)
               _SwTimerStart
                 _SwTimersInterrupt
                   _TMR_GetDeltaTime
                     _TMR1_ReadTimer
                 _TMR_OverrideRemaining
                   _TMR_SwapTimer
                     _TMR1_ReadTimer
                     _TMR1_WriteTimer
               ___lldiv
             _RADIO_ReceiveStop
               _RADIO_WriteMode
                 _HALDIO5PinValue
                 _RADIO_RegisterRead
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _RADIO_RegisterWrite
                   _HALSPICSAssert
                   _HALSPICSDeassert
                   _HALSPISend
                     _SPI2_Exchange8bit
                 _SystemBlockingWaitMs
             _RADIO_ReleaseData
             _ResetParametersForConfirmedTransmission
             _ResetParametersForUnconfirmedTransmission
             _RxDataDone *
           _RADIO_GetStatus
           _RxDataDone *
           _SwTimerIsRunning *
           _SwTimerReadValue *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
           _SwTimerSetTimeout *
             ___lldiv (ARG)
           _SwTimerStart *
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop *
           ___lldiv *
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
       _UnconfirmedTransmissionCallback *
         _RADIO_Transmit
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteConfiguration
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_WriteFSKBitRate
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFSKFrequencyDeviation
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
             _RADIO_WriteFrequency
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               ___lldiv
               ___llmod
             _RADIO_WriteMode
               _HALDIO5PinValue
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _SystemBlockingWaitMs
             _RADIO_WritePower
               _RADIO_RegisterRead
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
               _RADIO_RegisterWrite
                 _HALSPICSAssert
                 _HALSPICSDeassert
                 _HALSPISend
                   _SPI2_Exchange8bit
             ___lmul
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _SwTimerSetTimeout
             ___lldiv (ARG)
           _SwTimerStart
             _SwTimersInterrupt
               _TMR_GetDeltaTime
                 _TMR1_ReadTimer
             _TMR_OverrideRemaining
               _TMR_SwapTimer
                 _TMR1_ReadTimer
                 _TMR1_WriteTimer
           _SwTimerStop
           ___lldiv
         _ResetParametersForUnconfirmedTransmission
         _RxDataDone *
         _SelectChannelForTransmission *
           _ConfigureRadioTx
             _ConfigureRadio
               _RADIO_SetBandwidth
               _RADIO_SetChannelFrequency
               _RADIO_SetFSKSyncWord
                 _memcpy
               _RADIO_SetFrequencyHopPeriod
               _RADIO_SetLoRaSyncWord
               _RADIO_SetModulation
               _RADIO_SetSpreadingFactor
             _RADIO_SetCRC
             _RADIO_SetIQInverted
             _RADIO_SetOutputPower
           _SearchAvailableChannel
             _Random
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _rand
                 ___lmul
       _UpdateJoinSuccessState *
         _RxJoinResponse *
         _SwTimerSetTimeout *
           ___lldiv (ARG)
         _SwTimerStart *
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         ___lldiv *
   _LORAWAN_Reset
     _InitDefault433Channels
       _memcpy
       _memset
     _InitDefault868Channels
       _memcpy
       _memset
     _LORAWAN_LinkCheckConfigure
       _SwTimerSetTimeout
         ___lldiv (ARG)
       _SwTimerStart
         _SwTimersInterrupt
           _TMR_GetDeltaTime
             _TMR1_ReadTimer
         _TMR_OverrideRemaining
           _TMR_SwapTimer
             _TMR1_ReadTimer
             _TMR1_WriteTimer
       _SwTimerStop
       ___lldiv
     _RADIO_Init
       _RADIO_RegisterRead
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_RegisterWrite
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
       _RADIO_Reset
         _HALResetPinMakeInput
         _HALResetPinMakeOutput
         _HALResetPinOutputValue
         _SystemBlockingWaitMs
       _RADIO_WriteFrequency
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         ___lldiv
         ___llmod
       _RADIO_WriteMode
         _HALDIO5PinValue
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _SystemBlockingWaitMs
       _SwTimerCreate
       _SwTimerSetCallback
       _SwTimerStop
     _RADIO_SetLoRaSyncWord
     _StopAllSoftwareTimers
       _SwTimerStop
     _UpdateMinMaxChDataRate
     _memset
   _LORAWAN_SetApplicationSessionKey
     _memcpy
   _LORAWAN_SetDeviceAddress
   _LORAWAN_SetNetworkSessionKey
     _memcpy
   _SYSTEM_Initialize
     _EXT_INT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
       _INT3_SetInterruptHandler
     _INTERRUPT_Initialize
     _LORAWAN_PlatformInit
       _DIO0_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _DIO1_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _DIO2_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _DIO3_ISR_Lora_Init
       _DIO4_ISR_Lora_Init
       _DIO5_ISR_Lora_Init
         _INT0_SetInterruptHandler
       _SystemTimerInit
       _TMR_ISR_Lora_Init
         _TMR1_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCBF4_SetInterruptHandler
     _SPI2_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
       _TMR1_StartTimer
   _flash
   _sendPacket
     _LORAWAN_Send
       _AssemblePacket
         _AESCmac
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _GenerateSubkey
             _AESEncodeLoRa
               _AESEncode
                 _EncKeySchedule
                 _EncodeShiftRow
               _memcpy
             _FillSubKey
             _memset
           _memcpy
           _memset
         _AssembleEncryptionBlock
           _memcpy
           _memset
         _CountfOptsLength
         _EncryptFRMPayload
           _AESEncodeLoRa
             _AESEncode
               _EncKeySchedule
               _EncodeShiftRow
             _memcpy
           _AssembleEncryptionBlock
             _memcpy
             _memset
         _FindSmallestDataRate
         _IncludeMacCommandsResponse
           _RADIO_GetPacketSnr
         _memcpy
         _memset
       _LORAWAN_GetMaxPayloadSize
         _CountfOptsLength
       _RADIO_ReceiveStop
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
       _RADIO_Transmit
         _HALSPICSAssert
         _HALSPICSDeassert
         _HALSPISend
           _SPI2_Exchange8bit
         _RADIO_RegisterRead
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_RegisterWrite
           _HALSPICSAssert
           _HALSPICSDeassert
           _HALSPISend
             _SPI2_Exchange8bit
         _RADIO_WriteConfiguration
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_WriteFSKBitRate
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
           _RADIO_WriteFSKFrequencyDeviation
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
           _RADIO_WriteFrequency
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             ___lldiv
             ___llmod
           _RADIO_WriteMode
             _HALDIO5PinValue
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _SystemBlockingWaitMs
           _RADIO_WritePower
             _RADIO_RegisterRead
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
             _RADIO_RegisterWrite
               _HALSPICSAssert
               _HALSPICSDeassert
               _HALSPISend
                 _SPI2_Exchange8bit
           ___lmul
         _RADIO_WriteMode
           _HALDIO5PinValue
           _RADIO_RegisterRead
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _RADIO_RegisterWrite
             _HALSPICSAssert
             _HALSPICSDeassert
             _HALSPISend
               _SPI2_Exchange8bit
           _SystemBlockingWaitMs
         _SwTimerSetTimeout
           ___lldiv (ARG)
         _SwTimerStart
           _SwTimersInterrupt
             _TMR_GetDeltaTime
               _TMR1_ReadTimer
           _TMR_OverrideRemaining
             _TMR_SwapTimer
               _TMR1_ReadTimer
               _TMR1_WriteTimer
         _SwTimerStop
         ___lldiv
       _SelectChannelForTransmission
         _ConfigureRadioTx
           _ConfigureRadio
             _RADIO_SetBandwidth
             _RADIO_SetChannelFrequency
             _RADIO_SetFSKSyncWord
               _memcpy
             _RADIO_SetFrequencyHopPeriod
             _RADIO_SetLoRaSyncWord
             _RADIO_SetModulation
             _RADIO_SetSpreadingFactor
           _RADIO_SetCRC
           _RADIO_SetIQInverted
           _RADIO_SetOutputPower
         _SearchAvailableChannel
           _Random
             ___lwmod
               _rand (ARG)
                 ___lmul
             _rand
               ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _INT1_ISR
     _INT1_CallBack
       Absolute function(Fake) *
       _INT1_DefaultInterruptHandler *
   _INT2_ISR
     _INT2_CallBack
       Absolute function(Fake) *
       _INT2_DefaultInterruptHandler *
   _INT3_ISR
     _INT3_CallBack
       Absolute function(Fake) *
       _INT3_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
     _IOCBF4_ISR
       Absolute function(Fake) *
       _IOCBF4_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _TMR_ISR_lora *
         i2_SwTimersInterrupt
           i2_TMR_GetDeltaTime
             i2_TMR1_ReadTimer
         i2_TMR_SwapTimer
           i2_TMR1_ReadTimer
           i2_TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     21E      21       26.5%
EEDATA             400      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      E0      14       87.5%
BITBANK3           100      0       0      11        0.0%
BANK3              100     14      B4      12       70.3%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F5      10       95.7%
BITBANK1           100      0       0       7        0.0%
BANK1              100     6E      F9       8       97.3%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     97      97       6       94.4%
BITCOMRAM           53      0       0       0        0.0%
COMRAM              53     2F      53       1      100.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       2       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     46C       3        0.0%
DATA                 0      0     68C       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Fri May 19 11:04:16 2023

                                        ??_LORAWAN_TxDone 00A0  
                              __end_of_DIO3_ISR_Lora_Init 78F4  
                                      ?_LORAWAN_RxTimeout 0001  
                        __size_of_RADIO_FHSSChangeChannel 002E  
                                          HALSPISend@data 0065  
                                             __CFG_CP$OFF 000000  
                         __end_of_ValidateChannelMaskCntl 76E6  
                         __size_of_UpdateJoinSuccessState 0132  
                                            _TMR_ISR_lora 6B1C  
                                   __end_of_AESEncodeLoRa 733A  
                                             ?_RADIO_DIO0 0001  
                                             ?_RADIO_DIO1 0001  
                                             ?_RADIO_DIO2 0001  
                                             ?_RADIO_DIO3 0001  
                                             ?_RADIO_DIO4 0001  
                                             ?_RADIO_DIO5 0001  
                                             __CFG_LVP$ON 000000  
                                     ??_LORAWAN_RxTimeout 00A5  
                                                     l143 62B6  
                                                     l209 777C  
                                                     l401 5306  
                                                     l611 71B6  
                                                     l472 14D4  
                                                     l466 150C  
                                                     l485 1746  
                                                     l709 5EE4  
                                             ?_RADIO_Init 007D  
                                                     l479 155C  
                                                     l498 1818  
                                                     l692 6CFA  
                                                     l695 6D0C  
                                                     l689 705E  
                                         ??_UpdateTxPower 0064  
                                                     _GIE 007F97  
                                            __CFG_CPD$OFF 000000  
                    __end_of_SelectChannelForTransmission 6720  
                   __size_of_SelectChannelForTransmission 0060  
                            _SelectChannelForTransmission 66C0  
                                  _ExecuteRxParamSetupReq 42D8  
                              ??_INT0_SetInterruptHandler 0066  
                                      _DIO2_ISR_Lora_Init 7896  
                                      __size_of_AESEncode 02F2  
                                         _timer1ReloadVal 005E  
                              ??_INT3_SetInterruptHandler 0066  
                                         ?_EncKeySchedule 0064  
                                   _RADIO_SetLoRaSyncWord 782E  
                                                     prod 000FF3  
                                                     tosl 000FFD  
                                                     wreg 000FE8  
                                         __end_of_AESCmac 1B48  
                                 __end_of_SwTimersExecute 599E  
                                  SystemBlockingWaitMs@ms 0064  
                                 LORAWAN_Join@bufferIndex 00EC  
                                __size_of_RADIO_GetStatus 0006  
                                   ?_SystemBlockingWaitMs 0064  
                                    ??i2_TMR_GetDeltaTime 000B  
                      __end_of_IOCBF4_SetInterruptHandler 77DE  
                              _IOCBF4_SetInterruptHandler 77D4  
                                ??_SearchAvailableChannel 007C  
                            __end_of_FindSmallestDataRate 5BA2  
                     __end_of_RADIO_SetFrequencyHopPeriod 782E  
                             _RADIO_SetFrequencyHopPeriod 7824  
                                              _CheckFlags 6720  
                                  ?_TMR_OverrideRemaining 006C  
                                           _INT1_CallBack 75AC  
                                ?_AssembleEncryptionBlock 006E  
                                     ?_DIO2_ISR_Lora_Init 0001  
                                       ??_UpdateFrequency 0068  
                                            __CFG_ZCD$OFF 000000  
                                                    l1110 6A6C  
                                                    l1102 7434  
                                                    l1050 1216  
                                                    l2014 3800  
                                                    l1118 3644  
                                                    l1223 4B3C  
                                                    l2111 467C  
                                                    l1152 4F7E  
                                                    l1129 3482  
                                                    l2033 5A76  
                                                    l1234 4848  
                                                    l1250 6834  
                                                    l1242 7722  
                                                    l1146 43AE  
                                                    l1170 31F4  
                                                    l1082 283E  
                                                    l1155 500C  
                                                    l2035 5AF2  
                                                    l2116 57E2  
                                                    l1068 2746  
                                                    l1316 2708  
                                                    l1165 5040  
                                                    l2142 010C  
                                                    l2038 5600  
                                                    l2062 417A  
                                                    l1263 7512  
                                                    l2047 5610  
                                                    l3008 66AE  
                                                    l1424 1A00  
                                                    l2304 20C0  
                                                    l1409 1898  
                                                    l2313 5B10  
                                                    l1257 7094  
                                                    l1098 7736  
                                                    l2154 0264  
                                                    l2090 6326  
                                                    l1283 7000  
                                                    l2171 054C  
                                                    l2252 1BAE  
                                                    l2172 0554  
                                                    l2084 4AB0  
                                                    l3061 6E88  
                                                    l2253 1C54  
                                                    l1269 76E2  
                                                    l2262 1C62  
                                                    l2254 1C52  
                                                    l1368 7614  
                                                    l2328 63AA  
                                                    l2192 09A2  
                                                    l2257 1C4E  
                                                    l1298 6866  
                                                    l2541 2184  
                   RADIO_WriteConfiguration@symbolTimeout 007D  
                                                    l1738 5CEE  
                                                    l1739 5D36  
                                                    l1767 56C4  
                                                    l2998 61CA  
                                        _RADIO_WritePower 547E  
                            ??_LORAWAN_SetChannelIdStatus 0069  
                                 _PrepareJoinRequestFrame 4686  
                                     _RADIO_Transmit$1052 009F  
                                                    _LATA 000F79  
                                                    _LATB 000F7A  
                                                    _LATC 000F7B  
                                                    _LATD 000F7C  
                                                    _LATE 000F7D  
                                                    _LATF 000F7E  
                                                    _LATG 000F7F  
                                                    _LATH 000F80  
                                            ?_RADIO_Reset 0001  
                              __size_of_RADIO_ReceiveStop 001E  
                                       ??_UpdateDutyCycle 0066  
                                                    _WPUA 000E91  
                                                    _WPUB 000E99  
                                                    _WPUC 000EA1  
                                  ??_LORAWAN_PlatformInit 0066  
                                                    _WPUD 000EA6  
                                                    _WPUE 000EAE  
                                                    _WPUF 000EB3  
                                                    _WPUG 000EBB  
                                                    _WPUH 000EC0  
                                           _INT2_CallBack 758E  
                                           __CFG_FCMEN$ON 000000  
                                ??_InitDefault433Channels 006E  
                                ExecuteNewChannel@drRange 0072  
                                      _PrepareSessionKeys 5FF2  
                                                    _loRa 0200  
                                                    _main 51FC  
                                                    _rand 6A80  
                          __end_of_UpdateMinMaxChDataRate 583C  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                                    indf0 000FEF  
                                                    fsr0l 000FE9  
                                                    fsr2h 000FDA  
                                                    fsr1l 000FE1  
                                                    indf2 000FDF  
                                                    fsr2l 000FD9  
                                 __size_of_RADIO_Transmit 01EE  
                                                    btemp 004A  
                          __size_of_StopAllSoftwareTimers 004E  
                                           ComputeMic@mic 00DF  
                                           ComputeMic@key 00DA  
                               __end_of_LORAWAN_RxTimeout 29C8  
                               __size_of_ConfigureRadioRx 0026  
                                           _INT3_CallBack 7570  
                               __size_of_ConfigureRadioTx 0042  
                       __size_of_INT2_SetInterruptHandler 000A  
                                                    pclat 000FFA  
                           __end_of_StopAllSoftwareTimers 6B1C  
                               ?_INT2_SetInterruptHandler 0064  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                                                    start 008E  
                                __end_of_CountfOptsLength 5A4E  
                                   ExecuteLinkAdr@txPower 0076  
                                     __size_of_HALSPISend 000A  
                              ??_TMR1_SetInterruptHandler 0066  
                                           __CFG_CSWEN$ON 000000  
                              EnableChannels1@channelMask 0068  
                                        ??_AssemblePacket 00DA  
                                  ?_HALResetPinMakeOutput 0001  
                                     ?_PrepareSessionKeys 006E  
                                  __size_of_TMR_SwapTimer 003E  
                              __end_of_RADIO_GetPacketSnr 78B4  
                                            ___param_bank 000010  
                                              _GetRx1Freq 7760  
                              __size_of_RADIO_ReleaseData 0006  
                                           __CFG_SCANE$ON 000000  
                                    ??_DIO2_ISR_Lora_Init 0066  
                         __end_of_CreateAllSoftwareTimers 6A32  
                  SearchAvailableChannel@transmissionType 0079  
                         __size_of_HALResetPinOutputValue 0014  
                                   MacExecuteCommands@ptr 0080  
                                   _RADIO_WriteFSKBitRate 65FC  
                                __size_of_SystemTimerInit 0006  
                                        __end_of_INT1_ISR 78D8  
                                        __end_of_INT2_ISR 78D2  
                                        __end_of_INT3_ISR 78CC  
                          __size_of_OSCILLATOR_Initialize 0012  
                                  ExecuteLinkAdr@dataRate 0079  
                           __end_of_OSCILLATOR_Initialize 7760  
                                     __size_of_IOCBF4_ISR 0026  
                      __size_of_LORAWAN_LinkCheckCallback 0158  
                                                   l12100 667E  
                                                   l12030 22C8  
                                                   l12022 2292  
                                                   l12014 21D2  
                                                   l12104 66A0  
                                                   l12024 229C  
                                                   l12034 22EA  
                                                   l12132 4C1E  
                                                   l12036 22F4  
                                                   l12028 22BE  
                                                   l12126 4BCE  
                                                   l12054 23FC  
                                                   l12046 23F2  
                                                   l13022 18AA  
                                                   l13030 191E  
                                                   l12310 5EBE  
                                                   l12136 4C80  
                                                   l12080 618E  
                                                   l13040 196E  
                                                   l13016 1884  
                                                   l12240 5496  
                                                   l13112 5B68  
                                                   l13104 5B14  
                                                   l12138 4C82  
                                                   l12162 5328  
                                                   l12170 5344  
                                                   l12154 5308  
                                                   l12146 52EE  
                                                   l12306 5E9A  
                                                   l13114 5B6A  
                                                   l13122 5B84  
                                                   l13130 5B9C  
                                         __end_of___abdiv 698E  
                                                   l12332 72CA  
                                                   l12076 617E  
                                                   l13044 198C  
                                                   l13036 1944  
                                                   l13060 19E2  
                                                   l13028 18E6  
                                                   l12244 54A2  
                                                   l12260 54D6  
                                                   l14012 6226  
                                                   l14004 6212  
                                                   l13116 5B74  
                                                   l13212 1ED2  
                                                   l13204 1E54  
                                                   l13300 2120  
                                                   l13140 6BA2  
                                                   l12414 5DC2  
                                                   l12078 618A  
                                                   l12182 5368  
                                                   l12166 5332  
                                                   l13054 19A4  
                                                   l13046 199A  
                                                   l12430 145C  
                                                   l13310 3006  
                                                   l12326 71CE  
                                                   l13126 5B94  
                                                   l13230 1F66  
                                                   l13222 1F18  
                                                   l13302 212C  
                                                   l12342 47F6  
                                                   l12336 72DA  
                                                   l12088 61BC  
                                                   l12096 666E  
                                                   l12184 536C  
                                                   l12168 533A  
                                                   l12272 54FC  
                                                   l12264 54E4  
                                                   l12432 147E  
                                                   l12440 14F2  
                                                   l13232 1F6C  
                                                   l12344 47FA  
                                                   l12600 750E  
                                                   l14104 2FCC  
                                                   l14040 63E6  
                                                   l14122 62B8  
                                                   l12098 667A  
                                                   l12186 5376  
                                                   l12370 6BBC  
                                                   l12258 54CA  
                                                   l12450 1546  
                                                   l12442 1516  
                                                   l12434 14A0  
                                                   l14018 6238  
                                                   l13242 1FB2  
                                                   l13226 1F3E  
                                                   l12362 48AC  
                                                   l12354 4892  
                                                   l14042 63EA  
                                                   l14202 024A  
                                                   l15012 649E  
                                                   l12196 5396  
                                                   l13084 1ADA  
                                                   l13068 1A04  
                                                   l12292 552A  
                                                   l12268 54F0  
                                                   l13324 3034  
                                                   l13316 301C  
                                                   l12620 60DC  
                                                   l14060 6762  
                                                   l14052 6736  
                                                   l13180 42C8  
                                                   l13156 41CC  
                                                   l13148 4194  
                                                   l13252 1FF0  
                                                   l13228 1F54  
                                                   l12356 4896  
                                                   l13500 3714  
                                                   l14108 2FEA  
                                                   l14220 02C4  
                                                   l12198 53A0  
                                                   l12374 6BF4  
                                                   l13078 1AA2  
                                                   l12390 6E68  
                                                   l12286 5522  
                                                   l12454 1552  
                                                   l12438 14E0  
                                                   l13342 3094  
                                                   l13190 5A3E  
                                                   l13174 4282  
                                                   l13166 4236  
                                                   l13270 2052  
                                                   l13262 2028  
                                                   l13246 1FD8  
                                                   l12630 6852  
                                                   l14214 02B6  
                                                   l15102 2514  
                                                   l11920 4E66  
                                                   l15040 5794  
                                                   l12392 6E6C  
                                                   l12544 172E  
                                                   l12536 16FC  
                                                   l12528 16B8  
                                                   l12456 1558  
                                                   l13344 30A8  
                                                   l14056 674C  
                                                   l13184 59A6  
                                                   l13192 5A40  
                                                   l12712 58BA  
                                                   l13280 2098  
                                                   l12640 687E  
                                                   l12632 685A  
                                                   l12800 6810  
                                                   l14080 2F16  
                                                   l14072 2EC0  
                                                   l14400 07A8  
                                                   l14240 0404  
                                                   l14320 0592  
                                                   l14152 00CE  
                                                   l15104 252E  
                                                   l15112 25C6  
                                                   l11930 72B4  
                                                   l15050 582C  
                                                   l12562 17D2  
                                                   l12538 1708  
                                                   l12546 1750  
                                                   l13354 30C8  
                                                   l13426 671A  
                                                   l12730 2C16  
                                                   l13194 5A4A  
                                                   l12706 5894  
                                                   l13266 203A  
                                                   l13442 6A76  
                                                   l12626 6844  
                                                   l13530 344E  
                                                   l14082 2F2C  
                                                   l14074 2ED4  
                                                   l14402 07BA  
                                                   l15028 6504  
                                                   l15052 5830  
                                                   l11836 2AAA  
                                                   l12396 6E7E  
                                                   l12388 6E60  
                                                   l12572 180E  
                                                   l12476 15A2  
                                                   l13348 30B8  
                                                   l12740 2C40  
                                                   l13188 5A08  
                                                   l12708 589A  
                                                   l13700 1D60  
                                                   l13604 6DF6  
                                                   l12644 6888  
                                                   l12820 7090  
                                                   l13532 3462  
                                                   l14084 2F42  
                                                   l14076 2EEA  
                                                   l14068 2E10  
                                                   l14412 07C0  
                                                   l14324 05BE  
                                                   l14332 05CA  
                                                   l14252 0422  
                                                   l14180 01AE  
                                                   l15140 5A66  
                                                   l15124 266A  
                                                   l11918 4E16  
                                                   l15070 37F0  
                                                   l11926 7298  
                                                   l11838 2AB4  
                                                   l12566 17EE  
                                                   l12558 17C2  
                                                   l12486 15CC  
                                                   l12494 15E8  
                                                   l13382 316A  
                                                   l13358 30DE  
                                                   l12742 2C4C  
                                                   l13286 20C6  
                                                   l13606 6E10  
                                                   l12638 6876  
                                                   l13550 3554  
                                                   l14086 2F58  
                                                   l14078 2F00  
                                                   l14254 043A  
                                                   l14158 010E  
                                                   l15214 4A4A  
                                                   l11960 68F8  
                                                   l15064 37C4  
                                                   l15072 37F4  
                                                   l12672 4948  
                                                   l12760 2CD4  
                                                   l12736 2C2C  
                                                   l13296 20EA  
                                                   l13552 355E  
                                                   l13544 34FA  
                                                   l14088 2F6E  
                                                   l14096 2F80  
                                                   l14512 0AA8  
                                                   l14504 0A98  
                                                   l14424 082A  
                                                   l14416 07CE  
                                                   l14352 06C2  
                                                   l14272 0460  
                                                   l14176 019E  
                                                   l14600 28F4  
                                                   l15144 5A78  
                                                   l15224 4A70  
                                                   l12666 4924  
                                                   l12658 490C  
                                                   l12746 2C74  
                                                   l13298 211E  
                                                   l13706 1DB6  
                                                   l13626 1BA6  
                                                   l12922 701E  
                                                   l13474 3624  
                                                   l13466 35F4  
                                                   l12834 4AEE  
                                                   l13546 3504  
                                                   l13554 3562  
                                                   l14098 2FAE  
                                                   l14442 090C  
                                                   l14426 0834  
                                                   l14530 0AD2  
                                                   l14602 28F8  
                                                   l13810 55F8  
                                                   l15170 406A  
                                                   l15162 4042  
                                                   l15218 4A50  
                                                   l15234 4AAC  
                                                   l11892 6E9E  
                                                   l12684 4986  
                                                   l12676 496C  
                                                   l13388 31DA  
                                                   l12772 2D8C  
                                                   l12756 2CBC  
                                                   l12748 2C9C  
                                                   l13652 1C18  
                                                   l13900 562E  
                                                   l12852 4BA0  
                                                   l12844 4B86  
                                                   l14452 09AA  
                                                   l14380 074E  
                                                   l14292 049A  
                                                   l14284 0474  
                                                   l14612 299A  
                                                   l15500 6C2A  
                                                   l15244 62F4  
                                                   l11966 692C  
                                                   l15078 384A  
                                                   l11974 213A  
                                                   l12766 2D3E  
                                                   l13670 1C74  
                                                   l13494 36C6  
                                                   l12862 6FD2  
                                                   l12846 4B8A  
                                                   l13574 436A  
                                                   l14390 07A2  
                                                   l14366 0748  
                                                   l14382 0766  
                                                   l14606 2968  
                                                   l13814 5608  
                                                   l13806 55EA  
                                                   l15094 245A  
                                                   l14704 1358  
                                                   l13672 1C7C  
                                                   l13904 563C  
                                                   l13496 36DA  
                                                   l13592 4416  
                                                   l14536 0B0E  
                                                   l14288 048C  
                                                   l15184 40E4  
                                                   l15168 405E  
                                                   l12778 2DFC  
                                                   l14642 0E72  
                                                   l14634 0D78  
                                                   l13674 1C8A  
                                                   l13922 566C  
                                                   l13914 565E  
                                                   l12890 7430  
                                                   l13498 36DE  
                                                   l13578 438C  
                                                   l13850 339A  
                                                   l14490 0A4A  
                                                   l14570 27F2  
                                                   l14722 694C  
                                                   l15450 655C  
                                                   l15178 408E  
                                                   l14804 3994  
                                                   l11988 2160  
                                                   l12956 4F82  
                                                   l12972 5010  
                                                   l12980 5026  
                                                   l14708 1386  
                                                   l14652 107A  
                                                   l14644 0FA6  
                                                   l13908 5652  
                                                   l14492 0A50  
                                                   l14476 0A10  
                                                   l14564 27C2  
                                                   l14548 2738  
                                                   l14900 5C2A  
                                                   l14740 696C  
                                                   l15460 6582  
                                                   l16500 5286  
                                                   l13782 7746  
                                                   l14814 39DC  
                                                   l14806 39AA  
                                                   l15622 3F8C  
                                                   l11998 2186  
                                                   l15702 46F8  
                                                   l12982 502A  
                                                   l14662 1146  
                                                   l13926 5678  
                                                   l12798 680A  
                                                   l14486 0A22  
                                                   l14494 0A56  
                                                   l14582 2830  
                                                   l14734 6962  
                                                   l14750 6984  
                                                   l15454 6562  
                                                   l15470 6592  
                                                   l16510 52AA  
                                                   l16502 5290  
                                                   l15560 3EDC  
                                                   l15536 5FA2  
                                                   l12976 501A  
                                                   l12968 500A  
                                                   l14672 11FE  
                                                   l14680 1278  
                                                   l14656 1144  
                                                   l13688 1CE2  
                                                   l12888 7428  
                                                   l13864 442E  
                                                   l13848 3390  
                                                   l14496 0A5C  
                                                   l14568 27D0  
                                                   l14728 6956  
                                                   l14840 540E  
                                                   l14832 53EA  
                                                   l15456 6574  
                                                   l15480 6F68  
                                                   l12986 503C  
                                                   l13858 7648  
                                                   l14754 698A  
                                                   l14746 697C  
                                                   l14738 6968  
                                                   l14930 3CAE  
                                                   l15466 658C  
                                                   l13962 4658  
                                                   l16370 598C  
                                                   l14692 12D4  
                                                   l13876 44E0  
                                                   l14588 2842  
                                                   l14844 5428  
                                                   l15484 6F6E  
                                                   l13956 45C2  
                                                   l16372 5990  
                                                   l16516 52B0  
                                                   l13878 44E4  
                                                   l14854 5458  
                                                   l16358 58F6  
                                                   l14952 3B1C  
                                                   l14880 5BF2  
                                                   l14856 545C  
                                                   l15488 6F80  
                                                   l15496 6C24  
                                                   l16368 598A  
                                                   l15770 6798  
                                                   l15690 46BA  
                                                   l14698 1342  
                                                   l16482 525A  
                                                   l14876 5BD8  
                                                   l14964 7404  
                                                   l14894 5C20  
                                                   l16478 5254  
                                                   l15768 6794  
                                                   l14896 5C26  
                                                   l16488 526C  
                                                   l15892 6C46  
                                                   ?_main 0001  
                                                   ?_rand 0070  
                                           __CFG_WDTE$OFF 000000  
                                              _FillSubKey 6BB2  
                                         _TMR1_StartTimer 78D8  
                                           ?_RADIO_SetCRC 0001  
                                         __end_of___lldiv 61DC  
                                         RADIO_Transmit@i 00A4  
                                                   u20007 729E  
                                                   _T1CLK 000FD2  
                                                   _T1CON 000FCF  
                                         __end_of___llmod 66C0  
                                                   u12620 6EAE  
                                       ??_EnableChannels1 006D  
                                                   _LATC0 007BD8  
                                                   _LATC1 007BD9  
                                                   u13370 1506  
                                                   u16010 017C  
                                    RxJoinResponse@status 0001  
                                                   u12660 6920  
                                                   u13701 48C2  
                                                   u13375 14FC  
                                                   u12840 60FA  
                       __end_of_AckRetransmissionCallback 4AB6  
                  SearchAvailableChannel@randomNumberCopy 0080  
                                                   u14265 1868  
                                                   u17010 0FE6  
                                                   u12667 6916  
                                                   u13475 1600  
                                                   u17020 1004  
                                                   u17030 1108  
                                                   u13840 2D5A  
                                                   u17120 12A4  
                                                   u16240 04D8  
                                                   u13825 2CF2  
                                                   u17025 0FFA  
                                                   u17035 10FE  
                                                   u16091 02A0  
                                                   u14805 315A  
                                                   u14590 1ED0  
                                                   u16430 086C  
                                                   u16270 05BA  
                                                   u14815 317C  
                                                   u13855 2D7C  
                                                   u17135 12C4  
                                                   u15535 4506  
                                                   u16168 0420  
                                                   u17400 3C38  
                                                   u13865 2D9E  
                                                   u17145 12E6  
                                                   u15705 45B2  
                                                   u16290 06BC  
                                                   u17410 3D34  
                                                   u15378 55D4  
                                                   u15715 45D4  
                                                   u16348 0732  
                                                   u16268 057C  
                                                   u17405 3C2E  
                                                   u14790 3138  
                                                   u18038 4A96  
                                          __CFG_DEBUG$OFF 000000  
                                                   u17415 3D2A  
                                                   u18215 6540  
                                                   u17440 3A90  
                                                   u17450 3AA6  
                                                   u14874 6A5C  
                                                   u15738 4668  
                                                   u15690 4580  
                                                   u14875 6A56  
                                                   u15675 6348  
                                                   u17460 3BA2  
                                                   u17390 3C22  
                                                   u18078 6310  
                                                   u18190 511C  
                                                   u17455 3A9C  
                                                   u17640 3818  
                                                   u16568 0A82  
                                                   u17465 3B98  
                                                   u15858 63D0  
                                                   u16498 09FA  
                                                   u16755 2776  
                                                   u17740 261A  
                                                   u17655 383A  
                                                   u17665 385C  
                                                   u16955 0B92  
                                                   u17755 265A  
                                                   u16965 0C06  
                                                   u16885 2912  
                                                   u17765 2684  
                                                   u17870 40A2  
                                                   u16975 0DA6  
                                                   u16985 0E1A  
                                                   u17970 4A44  
                                                   u17885 40D4  
                                                   u17895 40F6  
                                                   u17998 4A6E  
                                                   u19678 5976  
                                         __end_of___lwmod 6E92  
                                                   u19977 52B6  
                                                   u19987 6C64  
                                                   u19997 6C74  
                                                   i2l259 6B66  
                                           ?_RADIO_RxDone 0001  
                             __size_of_RADIO_ReceiveStart 0200  
                                                   _OSCEN 000E47  
                     __size_of_LORAWAN_SetChannelIdStatus 0038  
                                           ?_RADIO_TxDone 0001  
                                                   _TMR1H 000FCE  
                                                   _TMR1L 000FCD  
                                                   _TRISA 000F81  
                                                   _TRISB 000F82  
                                                   _TRISC 000F83  
                                                   _TRISD 000F84  
                                                   _TRISE 000F85  
                                                   _TRISF 000F86  
                                                   _TRISG 000F87  
                                                   _TRISH 000F88  
                                __size_of_RADIO_RxTimeout 0028  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                           ?_SelectChannelForTransmission 0001  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0068  
                                           __CFG_WRT3$OFF 000000  
                                          _RxJoinResponse 78A8  
                                 ?_SetReceptionNotOkState 0001  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                    ??_PrepareSessionKeys 0074  
                                        __end_of_TMR1_ISR 73F4  
                               FindSmallestDataRate@found 0065  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          ?_INT1_CallBack 0001  
                                  LORAWAN_RxTimeout@minim 00A9  
                             __size_of_RADIO_SetBandwidth 0008  
                                          __CFG_EBTRB$OFF 000000  
                          __size_of_RADIO_WatchdogTimeout 0042  
                                                   __rcon 0046  
                                 __end_of_PIN_MANAGER_IOC 788A  
                                                   _flash 6C44  
                            ??_IncludeMacCommandsResponse 0068  
                           __end_of_RADIO_WatchdogTimeout 6D10  
                                                   _count 01CD  
      RADIO_WriteFSKFrequencyDeviation@frequencyDeviation 0071  
                          ??_INT1_DefaultInterruptHandler 0001  
                               __size_of_ValidateDataRate 0014  
                                                   _randx 0056  
                          LORAWAN_RxDone@frmPayloadLength 03B1  
                           ValidateChannelMaskCntl@result 0064  
                                      __CFG_MCLRE$EXTMCLR 000000  
                                                   _srand 77AE  
                                        UpdateDataRange@i 0067  
                                LORAWAN_RxDone@joinAccept 03AF  
                                  _UpdateJoinSuccessState 4554  
                                                   main@x 00F5  
                                          ?_INT2_CallBack 0001  
                                _INT1_SetInterruptHandler 77FC  
                                              _ComputeMic 698E  
                                 __end_of_TMR1_Initialize 6CCE  
                                  UpdateCfList@joinAccept 0070  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                                 RADIO_WriteFrequency@num 0079  
                          __size_of_UpdateCurrentDataRate 0008  
                          __size_of_UpdateChannelIdStatus 0106  
                              PrepareSessionKeys@appNonce 0070  
                                  UpdateChannelIdStatus@i 0067  
                           __end_of_UpdateCurrentDataRate 785A  
                            __size_of_RADIO_FSKPacketSent 0192  
                           __end_of_UpdateChannelIdStatus 48B8  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                          ?_INT3_CallBack 0001  
                                UpdateFrequency@channelId 0068  
                                                   status 000FD8  
                                      _MacExecuteCommands 2E04  
                                UpdateCfList@channelIndex 0079  
                                     __size_of_RADIO_DIO0 0064  
                                     __size_of_RADIO_DIO1 003A  
                                     __size_of_RADIO_DIO2 0048  
                                     __size_of_RADIO_DIO3 0018  
                                     __size_of_RADIO_DIO4 0018  
                                     __size_of_RADIO_DIO5 0018  
                      PrepareJoinRequestFrame@bufferIndex 00EA  
                                         _TMR1_WriteTimer 7602  
                       TMR_OverrideRemaining@oldReloadVal 0074  
                                     LORAWAN_RxDone@fPort 03A0  
                                __size_of_RADIO_WriteMode 00D8  
                                       __end_of_AESEncode 242A  
                                     __size_of_RADIO_Init 0196  
                        __end_of_RADIO_WriteConfiguration 182C  
                            __size_of_RADIO_SetIQInverted 000A  
                               __size_ofi2_TMR1_ReadTimer 0020  
                               RADIO_WriteMode@dioMapping 006C  
                                         __initialization 5C40  
                            __size_ofi2_SwTimersInterrupt 00EE  
                                        LORAWAN_Send@port 00E1  
                             __size_of_DIO1_ISR_Lora_Init 0006  
                                     ?_MacExecuteCommands 007A  
                                       _SPI2_Exchange8bit 7772  
                                            __end_of_main 52D6  
                              AssembleEncryptionBlock@dir 0075  
                                            __end_of_rand 6ACE  
                                       ?_TMR_GetDeltaTime 006A  
                                           AESCmac@padded 0130  
                                __end_of_RADIO_ReadRandom 5FF2  
                                        _SetJoinFailState 726C  
                                 RADIO_WriteMode@blocking 006A  
                                    _UpdateJoinInProgress 7654  
                                    _ExecuteRxTimingSetup 73AC  
                               __size_of_UpdateDLSettings 001A  
                                      ?_SPI2_Exchange8bit 0001  
                               __size_of_ValidateRxOffset 0014  
                             ?_INTERRUPT_InterruptManager 0001  
                                      ??_TMR_GetDeltaTime 006E  
                                           AESCmac@output 00CE  
                            __end_of_RADIO_SetOutputPower 7862  
                                               ??_AESCmac 00D3  
                                          ??_RADIO_SetCRC 0064  
                                  MacExecuteCommands@done 007F  
                                 InitDefault868Channels@i 006E  
                                                  ??_main 00F3  
                                                  ??_rand 0072  
                                          ??_RADIO_RxDone 00ED  
                                          ??_RADIO_TxDone 00D0  
                                           __activetblptr 000002  
                                  ?_RADIO_SetLoRaSyncWord 0001  
                                  __end_of_RxJoinResponse 78AE  
                       __end_of_LORAWAN_LinkCheckCallback 4184  
                          __end_of_SetReceptionNotOkState 63FE  
                             __end_of_UpdateReceiveDelays 6BB2  
                         __end_of_AssembleEncryptionBlock 58EE  
                                __size_of_SPI2_Initialize 000C  
                                  ??_SystemBlockingWaitMs 0068  
                                        ??_StartReTxTimer 0094  
                                     ??_SPI2_Exchange8bit 0064  
                        CountfOptsLength@macCommandLength 006A  
                                      EncodeShiftRow@temp 0066  
                                ??_InitDefault868Channels 006E  
                             __size_of_RADIO_RegisterRead 0026  
                                       ?_HALSPICSDeassert 0001  
                                        ?_SwTimersExecute 0001  
                                           _TMR_SwapTimer 6E92  
                                              _RxDataDone 78F6  
                                          _EnableChannels 76FC  
                               ??_PrepareJoinRequestFrame 00E3  
                                          _HALSPICSAssert 78E4  
                                    ??_MacExecuteCommands 007D  
                                             ?_CheckFlags 0064  
                                 LORAWAN_TxDone@timeOnAir 009E  
                                              _ExtractMic 6D10  
                                                  ?_flash 0001  
                         __size_of_SearchAvailableChannel 00E0  
                                      ??_HALSPICSDeassert 0064  
                                  _HALResetPinOutputValue 773A  
                                        ___llmod@dividend 0064  
                                                  ?_srand 0075  
                  __end_of_LORAWAN_ReceiveWindow1Callback 5AFC  
                 __size_of_LORAWAN_ReceiveWindow1Callback 00AE  
                          _LORAWAN_ReceiveWindow1Callback 5A4E  
                                _RADIO_FSKPacketSent$1071 00D8  
                                                  _ANSELA 000E92  
                                                  _ANSELB 000E9A  
                                                  _ANSELD 000EA7  
                                                  _ANSELE 000EAF  
                                                  _ANSELF 000EB4  
                                                  _ANSELG 000EBC  
                                         _ValidateTxPower 7416  
                                                  _T1GATE 000FD1  
                                                  _T1GCON 000FD0  
                                 SwTimerReadValue@timerId 0093  
                                 TMR1_WriteTimer@timerVal 0064  
                                          _ExecuteLinkAdr 356C  
                                                  _ODCONA 000E90  
                                                  _ODCONB 000E98  
                                                  _ODCONC 000EA0  
                                                  _ODCOND 000EA5  
                                                  _ODCONE 000EAD  
                                                  _ODCONF 000EB2  
                                                  _ODCONG 000EBA  
                                                  _ODCONH 000EBF  
                                                  _RD5PPS 000E6F  
                                                  _RD6PPS 000E70  
                                          __CFG_WDTCCS$SC 000000  
                  __end_of_LORAWAN_ReceiveWindow2Callback 5614  
                 __size_of_LORAWAN_ReceiveWindow2Callback 00C8  
                          _LORAWAN_ReceiveWindow2Callback 554C  
                                                  i2l2510 0046  
                                                  i2l1368 7630  
                                                  i2l2512 0052  
                                                  i2l2514 0062  
                                                  i2l2508 003A  
                                                  i2l2518 006C  
                           __size_of_RADIO_SetFSKSyncWord 002C  
                                                  i2l9876 4F02  
                                                  i2l9878 4F52  
                                                  _OSCFRQ 000E49  
                                       ??_RADIO_GetStatus 0064  
                        __size_of_ValidateChannelMaskCntl 0018  
                         __size_of_InitDefault433Channels 0066  
                                                  _TRISC0 007C18  
                                           ?_LORAWAN_Init 00A4  
                                           ?_LORAWAN_Join 0001  
                        AssembleEncryptionBlock@firstByte 0073  
                                           ?_LORAWAN_Send 00E1  
                         __size_of_AutomaticReplyCallback 001E  
                              __size_of_LORAWAN_RxTimeout 02B6  
                                       ?_ExecuteDevStatus 0064  
                              __end_of_DIO0_ISR_Lora_Init 78A8  
                                __size_ofi2_TMR_SwapTimer 003E  
                                       ExecuteLinkAdr@ptr 0071  
                           __size_of_RADIO_WriteFrequency 00DC  
                                                  _STable 7E6D  
                             RADIO_WriteFrequency@num_mod 0075  
                                     LORAWAN_TxDone@delta 00C3  
                                          __CFG_PWRTE$OFF 000000  
                             __size_of_ComputeSessionKeys 007E  
                                               AESCmac@k1 0110  
                                               AESCmac@k2 0100  
                               __end_of_SPI2_Exchange8bit 7784  
                                     LORAWAN_TxDone@found 00C2  
                                         _CheckMcastFlags 61DC  
                                     LORAWAN_TxDone@minim 00CB  
                                      ??_ExecuteDevStatus 0066  
                                                  _Random 7438  
                                          __CFG_XINST$OFF 000000  
                                     LORAWAN_TxDone@ticks 00C7  
                      SearchAvailableChannel@randomNumber 0083  
                    __end_of_TMR1_DefaultInterruptHandler 78FA  
                   __size_of_TMR1_DefaultInterruptHandler 0002  
                            _TMR1_DefaultInterruptHandler 78F8  
                                             ?_GetRx1Freq 0064  
                           ValidateDataRange@dataRangeNew 0067  
                                 _RADIO_FHSSChangeChannel 7194  
                                               ??___abdiv 0065  
                                                  ___lmul 5DEE  
                                  ?_RADIO_WriteFSKBitRate 0071  
                                 __end_of_TMR1_StartTimer 78DC  
                                   ?_UpdateJoinInProgress 0001  
                             ?_LORAWAN_LinkCheckConfigure 0094  
                                   ?_ExecuteRxTimingSetup 0069  
                                          __CFG_STVREN$ON 000000  
                                    _FindSmallestDataRate 5AFC  
                                               ??___lldiv 006C  
                                               ??___llmod 006C  
                                               ??___lwmod 0076  
                      RADIO_SetChannelFrequency@frequency 0064  
                                         StartReTxTimer@i 009C  
                               ExecuteRxParamSetupReq@ptr 0070  
                                  __size_of_LORAWAN_Reset 015E  
                                                  _memcpy 68E6  
                                                  _memset 72C0  
                                                  clear_0 5C88  
                                                  clear_1 5C9A  
                                                  clear_2 5CA6  
                                                  clear_3 5CB2  
                                                  clear_4 5CBE  
                                                  clear_5 5CCA  
                                 SwTimerIsRunning@timerId 0064  
                                                  flash@x 0065  
                             __size_of_DIO5_ISR_Lora_Init 0006  
                                             ?_FillSubKey 0064  
                                       ?_SwTimerIsRunning 0001  
                                       ?_ExecuteLinkCheck 0064  
                                         ?_RxJoinResponse 0001  
                                 __size_of_EncodeShiftRow 0162  
                                  __end_of_EnableChannels 7712  
                              ??_RADIO_UnhandledInterrupt 0068  
                                            ??_HALSPISend 0065  
                    __end_of_INT2_DefaultInterruptHandler 7900  
                   __size_of_INT2_DefaultInterruptHandler 0002  
                            _INT2_DefaultInterruptHandler 78FE  
                                            __pdataCOMRAM 0056  
                                  __end_of_HALSPICSAssert 78E8  
                       __size_of_RADIO_SetSpreadingFactor 0008  
                            __size_of_ValidateChannelMask 0038  
                                           ??_SwTimerStop 0064  
                                         ??_INT1_CallBack 0001  
                                       ??_SystemTimerInit 0064  
                               ?_RADIO_SetSpreadingFactor 0001  
                                       ?_SwTimerReadValue 008B  
                                      ??_SwTimerIsRunning 0064  
                                          ?_TMR_SwapTimer 006A  
                                       ?_ExecuteDutyCycle 0064  
                                      ??_ExecuteLinkCheck 0066  
                                            __mediumconst 7E6C  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 0075  
                                         ??_INT2_CallBack 0001  
                                      ??_SwTimerReadValue 008F  
                                         _UpdateDataRange 4AB6  
                                  __end_of_ExecuteLinkAdr 371E  
                                      ??_ExecuteDutyCycle 0066  
              IOCBF4_SetInterruptHandler@InterruptHandler 0064  
                TMR1_SetInterruptHandler@InterruptHandler 0064  
                INT3_SetInterruptHandler@InterruptHandler 0064  
                INT0_SetInterruptHandler@InterruptHandler 0064  
                INT2_SetInterruptHandler@InterruptHandler 0064  
                INT1_SetInterruptHandler@InterruptHandler 0064  
                      __end_of_LORAWAN_SetChannelIdStatus 6FF6  
                              _LORAWAN_SetChannelIdStatus 6FBE  
                                        ?_PIN_MANAGER_IOC 0001  
                                           AESEncode@aux1 008D  
                                           AESEncode@aux2 008C  
                                           AESEncode@aux3 008E  
                                 __end_of_TMR1_WriteTimer 761E  
                                   __end_of_SwTimerCreate 62BE  
                                            ??_IOCBF4_ISR 0001  
                          ??_SelectChannelForTransmission 0085  
                                             ?_ComputeMic 00DA  
                           __size_of_INTERRUPT_Initialize 0004  
                                         ??_INT3_CallBack 0001  
                                   __end_of_TMR1_CallBack 7570  
                               ExecuteDutyCycle@maxDCycle 0069  
                                       ??_RADIO_RxTimeout 00AE  
                                        ?_TMR1_Initialize 0001  
                             UpdateFrequency@frequencyNew 0064  
                                       _SYSTEM_Initialize 75CA  
                        __size_of_CreateAllSoftwareTimers 0052  
                                 __size_of_GenerateSubkey 0102  
                                          ??_LORAWAN_Init 00A8  
                                          ??_LORAWAN_Join 00EC  
                                          ??_LORAWAN_Send 00E5  
                          __size_of_RADIO_FSKPayloadReady 009E  
                                              __accesstop 0060  
                                 __end_of__initialization 5CD0  
                           __end_of_RADIO_FSKPayloadReady 5C40  
                                          _RADIO_Transmit 2FF4  
                                               ?_INT1_ISR 0001  
                                               ?_INT2_ISR 0001  
                                               ?_INT3_ISR 0001  
                                    LORAWAN_RxDone@buffer 016B  
                                  RADIO_ReadRandom@retVal 0072  
                                        _ConfigureRadioRx 733A  
                                    __size_of_RADIO_Reset 0034  
                                        _ConfigureRadioTx 6D52  
                                     ExecuteDevStatus@ptr 0064  
                        ??_UpdateReceiveWindow2Parameters 0069  
                         ?_UpdateReceiveWindow2Parameters 0064  
                                      ?_SYSTEM_Initialize 0001  
                                    LORAWAN_RxDone@packet 03A9  
                                          _maxPayloadSize 7F6D  
                           RADIO_SetLoRaSyncWord@syncWord 0064  
                                           ___rparam_used 000001  
                              ValidateChannelId@channelId 0066  
                               ExecuteLinkAdr@channelMask 0074  
                               __size_of_LORAWAN_GetState 0008  
                                      __end_of_HALSPISend 7842  
                                          __pcstackCOMRAM 0001  
                                              ___inthi_sp 0754  
                                  _SearchAvailableChannel 4F64  
                                 ValidateChannelId@result 0065  
                                   ?_FindSmallestDataRate 0001  
                                            __pidataBANK1 70CC  
                                     ??_SYSTEM_Initialize 0068  
                              __end_of_DIO4_ISR_Lora_Init 78F2  
                                               ?_TMR1_ISR 0001  
                                     __size_of_CheckFlags 005E  
                           ?_TMR1_DefaultInterruptHandler 0001  
                                _RADIO_WriteConfiguration 13B4  
                                           __end_of_flash 6C8A  
                                       ??_RADIO_WriteMode 006B  
                                         _spreadingFactor 7F9B  
                               __size_of_LORAWAN_Mainloop 003C  
                                        ??_EncKeySchedule 0065  
                                __end_of_RADIO_WritePower 554C  
                                 ?_ExecuteRxParamSetupReq 0070  
                                           __end_of_srand 77BC  
                                       LORAWAN_RxDone@hdr 03B2  
                                            ??_RADIO_DIO0 00EF  
                                            ??_RADIO_DIO1 00AE  
                                            ??_RADIO_DIO2 007D  
                                            ??_RADIO_DIO3 0069  
                                            ??_RADIO_DIO4 0069  
                                            ??_RADIO_DIO5 0069  
                                  _InitDefault433Channels 64CE  
                                         _UpdateFrequency 6F84  
                                  _AutomaticReplyCallback 74DA  
                                      __end_of_IOCBF4_ISR 73AC  
                                ??_INTERRUPT_GetDioStatus 0064  
                                            ??_RADIO_Init 0083  
                               SwTimerSetCallback@timerId 0067  
                              LORAWAN_RxDone@channelIndex 03A1  
                          AssembleEncryptionBlock@blockId 0072  
                             __size_of_EXT_INT_Initialize 0056  
                                         _UpdateDutyCycle 70FE  
                                         ?_EnableChannels 006E  
                                 ??_TMR_OverrideRemaining 0070  
                                 __end_of_ValidateTxPower 7438  
                                         ?_HALSPICSAssert 0001  
                                      _DIO3_ISR_Lora_Init 78F2  
                            __end_of_HALResetPinMakeInput 78F0  
                                 __size_of_TMR1_ReadTimer 0020  
                        __end_of_INT2_SetInterruptHandler 77FC  
                                        RADIO_DIO0@opMode 00F2  
                             RADIO_RegisterRead@readValue 0067  
                                             ?_RxDataDone 0064  
                      __end_of_IncludeMacCommandsResponse 2138  
                              _IncludeMacCommandsResponse 1E46  
                           ?_INT2_DefaultInterruptHandler 0001  
                         __size_of_InitDefault868Channels 0066  
                                UpdateCfList@bufferLength 0074  
                             ?_IOCBF4_SetInterruptHandler 0064  
                                   LORAWAN_Send@confirmed 00E7  
                                             ?_ExtractMic 006E  
                                                 ??_flash 0064  
                                         ?_ExecuteLinkAdr 0071  
                                        _ValidateDataRate 7726  
                         LORAWAN_GetMaxPayloadSize@result 006E  
                                     __size_of_GetRx1Freq 0012  
                               __end_of_SYSTEM_Initialize 75E6  
                      __size_of_RADIO_SetChannelFrequency 0082  
                                                 ??_srand 0077  
                                  __end_of_RADIO_Transmit 31E2  
                                       ??_SPI2_Initialize 0064  
                                     ?_DIO3_ISR_Lora_Init 0001  
                                           _LORAWAN_Reset 3ECE  
                              ?_RADIO_SetChannelFrequency 0064  
                                              __pbssBANK1 016E  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                                              __pbssBANK4 0400  
                                     __end_of_SwTimerStop 7602  
                              ?_SetCallbackSoftwareTimers 0001  
                                 __end_of_CheckMcastFlags 624E  
                                  __end_of_maxPayloadSize 7F75  
                                              ??_INT1_ISR 0001  
                                              ??_INT2_ISR 0001  
                                              ??_INT3_ISR 0001  
                                      SwTimersInterrupt@i 008A  
                                    _RADIO_SetOutputPower 785A  
                                              __pnvCOMRAM 005E  
                                    __end_of_RADIO_SetCRC 7824  
                                 ??_HALResetPinMakeOutput 0064  
                                    __end_of_RADIO_RxDone 547E  
                              __end_of_RADIO_RxFSKTimeout 7064  
                                    __end_of_RADIO_TxDone 3D6C  
                                     __size_of_FillSubKey 004A  
                                      __end_of_RADIO_DIO0 6598  
                                      __end_of_RADIO_DIO1 6F84  
                                      __end_of_RADIO_DIO2 6C44  
                                      __end_of_RADIO_DIO3 76CE  
                                      __end_of_RADIO_DIO4 76B6  
                                      __end_of_RADIO_DIO5 769E  
                               ??_RADIO_FHSSChangeChannel 007D  
                             __size_of_SwTimerSetCallback 0032  
                               RADIO_SetOutputPower@power 0064  
                              __size_of_SPI2_Exchange8bit 0012  
                                      __end_of_RADIO_Init 3A50  
                       __size_of_LORAWAN_SetDeviceAddress 0018  
                         ?_LORAWAN_EnterContinuousReceive 0001  
                        ??_LORAWAN_EnterContinuousReceive 009E  
                                                 ?_Random 0077  
                                       ?_CountfOptsLength 0001  
                               ?_LORAWAN_SetDeviceAddress 0064  
                                        i2_TMR1_ReadTimer 74BA  
                                          FillSubKey@size 0068  
                                         _EnableChannels1 6838  
                                __size_of_HALDIO5PinValue 0006  
                            __size_of_RADIO_RegisterWrite 001E  
                                  ??_UpdateJoinInProgress 0064  
                        __size_of_AssembleEncryptionBlock 00B2  
                                  ??_ExecuteRxTimingSetup 006B  
                                        FillSubKey@source 0064  
            SelectChannelForTransmission@transmissionType 0085  
                                                 ?___lmul 0064  
                  AssembleEncryptionBlock@multicastStatus 0074  
                          __end_of_ExecuteRxParamSetupReq 4420  
                                      ??_CountfOptsLength 0064  
                                        ?_TMR1_StartTimer 0001  
                                      EncryptFRMPayload@i 00B8  
                                      EncryptFRMPayload@j 00B9  
                                      EncryptFRMPayload@k 00B7  
                                              ??_TMR1_ISR 0028  
                                         __CFG_PPS1WAY$ON 000000  
                                       ??i2_TMR_SwapTimer 0009  
                                    ??_DIO3_ISR_Lora_Init 0064  
                                        _UpdateDLSettings 763A  
                                        _ValidateRxOffset 7712  
                                                 ?_memcpy 0064  
                                                 ?_memset 0064  
                                          ___lmul@product 006C  
                                       _TMR_ISR_Lora_Init 77C8  
                        ??_IOCBF4_DefaultInterruptHandler 0001  
                         ?_IOCBF4_DefaultInterruptHandler 0001  
                                          _SSP2DATPPSbits 000E1D  
                                  RADIO_RegisterWrite@reg 0067  
                                     __size_of_ComputeMic 0052  
                                  RADIO_Transmit@regValue 00A3  
                            __size_of_RADIO_SetModulation 0008  
                                     _RADIO_FSKPacketSent 3A50  
                                                 _AESCmac 182C  
                                  ComputeMic@bufferLength 00DE  
                                 __end_of_UpdateDataRange 4BAC  
                                         ??_TMR_SwapTimer 006C  
                                RADIO_WriteFSKBitRate@num 0075  
                                      ?_TMR_ISR_Lora_Init 0001  
                              ??_INT1_SetInterruptHandler 0066  
                                                 i2l10534 6EDC  
                                                 i2l10552 4CBE  
                                                 i2l10562 4D70  
                                                 i2l10564 4D72  
                                                 i2l10558 4D0E  
                                                 i2l16382 73A6  
                                    EncryptFRMPayload@dir 00A7  
                                      _RADIO_GetPacketSnr 78AE  
                                    EncryptFRMPayload@key 00AC  
                                   __end_of_UpdateTxPower 7852  
                                     _RADIO_SetIQInverted 7810  
                                                 _OSCCON1 000E43  
                                                 _OSCCON3 000E45  
                                 __size_of_ConfigureRadio 007C  
                                                 _OSCTUNE 000E48  
                             __size_ofi2_TMR_GetDeltaTime 00EC  
                                     i2_SwTimersInterrupt 4C9E  
                                                 _SSP2ADD 000ED6  
                                                 _PPSLOCK 000DEF  
                                                 _SSP2BUF 000ED5  
                                     ??_TMR_ISR_Lora_Init 0066  
                                       __end_of_bandwidth 7F94  
                  UpdateReceiveWindow2Parameters@dataRate 0068  
                                __end_of_SetJoinFailState 7296  
                                          ?_LORAWAN_Reset 0001  
                            RADIO_WriteMode@newModulation 0069  
                                  ValidateDataRate@result 0065  
                                        ?_TMR1_WriteTimer 0064  
                                     ?_RADIO_GetPacketSnr 0001  
                                         ___abdiv@divisor 0064  
                                         ?_RADIO_Transmit 0094  
                                 _ValidateChannelMaskCntl 76CE  
                                         ___abdiv@counter 0065  
                                     StartReTxTimer@minim 0098  
                              AssemblePacket@bufferLength 0169  
                            PrepareSessionKeys@sessionKey 006E  
                                    ?_RADIO_FSKPacketSent 0001  
                                   TMR_SwapTimer@timerVal 006A  
                       __end_of_RADIO_SetChannelFrequency 5EF6  
                             PrepareJoinRequestFrame@iCtr 00EB  
                       __end_of_SetCallbackSoftwareTimers 5788  
                                   ?_RADIO_SetOutputPower 0001  
                               _AckRetransmissionCallback 49BA  
                             PrepareJoinRequestFrame@mhdr 00E9  
                                  __size_of_AESEncodeLoRa 0028  
                       __size_of_INT0_SetInterruptHandler 0002  
                           __size_of_LORAWAN_PlatformInit 0020  
                       __size_of_INT3_SetInterruptHandler 000A  
                               ?_INT0_SetInterruptHandler 0064  
                               ?_INT3_SetInterruptHandler 0064  
                                          _ticksAccounted 0034  
                                           ?_SwTimerStart 0001  
                                              AESCmac@key 00CC  
                                              AESCmac@ptr 0160  
                                 __end_of_spreadingFactor 7FA2  
                           UpdateCurrentDataRate@valueNew 0064  
                                                 __Hparam 0000  
                                    ?_RADIO_SetIQInverted 0001  
                              PrepareJoinRequestFrame@mic 00E5  
                                  _InitDefault868Channels 6468  
                                RADIO_RegisterWrite@value 0066  
                                                 __Lparam 0000  
                                  ??_FindSmallestDataRate 0064  
                                LORAWAN_Send@bufferLength 00E4  
                                   _StopAllSoftwareTimers 6ACE  
                                         __size_of_Random 0022  
                              __CFG_RSTOSC$HFINTOSC_64MHZ 000000  
                                    ?i2_SwTimersInterrupt 0017  
                                 __end_of_UpdateFrequency 6FBE  
                                     AssemblePacket@fCtrl 00DE  
                                                 ___abdiv 693C  
                                     __size_of_RxDataDone 0002  
                                              AESEncode@i 008F  
                                               _AESEncode 2138  
                                  ValidateRxOffset@result 0065  
                               __end_of_TMR_ISR_Lora_Init 77D4  
                                         __size_of___lmul 0086  
                             __size_of_DIO2_ISR_Lora_Init 0006  
                                 __end_of_UpdateDutyCycle 7130  
                                                 ___lldiv 6166  
                                     __size_of_ExtractMic 0042  
                                    ??_RADIO_GetPacketSnr 0064  
                                                 ___llmod 665E  
                                       ?_RADIO_ReadRandom 0070  
                                                 ___lwmod 6E54  
                               SwTimerIsRunning@isRunning 0065  
                                 ??_RADIO_SetLoRaSyncWord 0064  
                                    ValidateChannelMask@i 0066  
                                                 __pcinit 5C40  
                      __size_of_LORAWAN_GetMaxPayloadSize 0040  
                                                 _appSKey 01CF  
                                         __size_of_memcpy 0056  
                              __end_of_RADIO_ReceiveStart 2E04  
                                   RADIO_Init@radioBuffer 007D  
                                         __size_of_memset 002A  
                                                 __ramtop 0800  
                        EncryptFRMPayload@multicastStatus 00B1  
                                      ??_RADIO_ReadRandom 0072  
                              ?_LORAWAN_GetMaxPayloadSize 0001  
           RADIO_SetFrequencyHopPeriod@frequencyHopPeriod 0064  
                                                 __ptext0 51FC  
                                                 __ptext1 71EE  
                                                 __ptext2 6C44  
                                                 __ptext3 75CA  
                                                 __ptext4 6C8A  
                                                 __ptext5 78D8  
                                                 __ptext6 77BC  
                                                 __ptext7 5044  
                                                 __ptext8 77D4  
                                                 __ptext9 774E  
                                    __end_of_LORAWAN_Init 67DC  
                                    __end_of_LORAWAN_Join 5D66  
                                    __end_of_LORAWAN_Send 56D2  
                                           _DIO0_ISR_Lora 000000  
                          ??_TMR1_DefaultInterruptHandler 0001  
                         RADIO_SetFSKSyncWord@syncWordLen 0070  
                                          _EncodeShiftRow 3D6C  
                              ExecuteNewChannel@frequency 0073  
                         __size_of_INTERRUPT_GetDioStatus 000E  
                                               _T1CONbits 000FCF  
                      SelectChannelForTransmission@result 0086  
                                 __size_of_LORAWAN_RxDone 0A9E  
                                   _OSCILLATOR_Initialize 774E  
                          __end_of_UpdateJoinSuccessState 4686  
                                 __size_of_LORAWAN_TxDone 0880  
                              __end_of_RADIO_SetBandwidth 787A  
                                         _RADIO_GetStatus 78B4  
                                        ?_ValidateTxPower 0001  
                                 ?_HALResetPinOutputValue 0001  
                            __end_of_macEndDevCmdReplyLen 7F9B  
                       __size_of_TMR1_SetInterruptHandler 000A  
                                           _DIO1_ISR_Lora 000000  
                                             _SwTimerStop 75E6  
                                                 _payload 01BB  
                                ??_PIN_MANAGER_Initialize 0066  
                               ?_TMR1_SetInterruptHandler 0064  
                                                 _nwkSKey 01DF  
                                               _IOCBFbits 000E93  
                             IncludeMacCommandsResponse@i 006E  
                                           ?_UpdateCfList 0070  
                                       _ExecuteNewChannel 33AA  
                                               _IOCBNbits 000E94  
                                               _IOCBPbits 000E95  
                             __size_of_PrepareSessionKeys 007C  
                                            ??_CheckFlags 0066  
                           RADIO_SetModulation@modulation 0064  
                                 UpdateDLSettings@dlRx2Dr 0065  
                               __size_of_TMR_GetDeltaTime 00EC  
                                          main@timeToSend 00F4  
                                           _DIO2_ISR_Lora 000000  
                              __size_of_SYSTEM_Initialize 001C  
                    __end_of_LORAWAN_SetNetworkSessionKey 7242  
                   __size_of_LORAWAN_SetNetworkSessionKey 002A  
                            _LORAWAN_SetNetworkSessionKey 7218  
                                      ?_ExecuteNewChannel 0070  
                                              _sendPacket 71EE  
                              RADIO_WriteMode@currentMode 006D  
                                        ComputeMic@buffer 00DC  
                                    end_of_initialization 5CD0  
                                 _CreateAllSoftwareTimers 69E0  
                                     SwTimerCreate@retVal 0064  
                                _INT2_SetInterruptHandler 77F2  
                                   ??_RADIO_FSKPacketSent 00D0  
                                          _GenerateSubkey 48B8  
                                   _RADIO_WatchdogTimeout 6CCE  
                          ??_INT2_DefaultInterruptHandler 0001  
                                              _modulation 7F75  
                                        ?_CheckMcastFlags 0064  
                                  ExtractMic@bufferLength 0070  
                                                 memcpy@d 006A  
                                                 memcpy@n 0068  
                                                 memcpy@s 006C  
                                 __end_of_EnableChannels1 6890  
                                                 memset@c 0066  
                                                 memset@n 0068  
                                                 memset@p 006A  
                               _LORAWAN_LinkCheckCallback 402C  
                                           __Lmediumconst 7E6C  
                                          ??_SwTimerStart 008B  
                                     ??_ExecuteNewChannel 0072  
                                               i2u1099_40 6EEC  
                                   _UpdateCurrentDataRate 7852  
                                   _UpdateChannelIdStatus 47B2  
                                 ??_RADIO_WriteFSKBitRate 0075  
                                   ??_RADIO_SetIQInverted 0064  
                              __end_of_DIO1_ISR_Lora_Init 78A2  
                                         ___lldiv@divisor 0068  
                                     _ValidateChannelMask 6FF6  
                                              _ticksAdded 0038  
                             HALResetPinOutputValue@value 0064  
                                EncodeShiftRow@stateTable 0064  
                                               i2u1972_48 7392  
                                               i2u1973_40 73EA  
                               __size_of_HALSPICSDeassert 0004  
                                ValidateDataRate@dataRate 0064  
                                         ___lldiv@counter 0070  
                                           _DIO5_ISR_Lora 000000  
                             TMR_OverrideRemaining@tmrVal 0072  
                                   ??i2_SwTimersInterrupt 001B  
                                ExecuteLinkAdr@redundancy 0077  
                                       GenerateSubkey@key 00A4  
                                        _LORAWAN_GetState 787A  
                                    _HALResetPinMakeInput 78EC  
                                            ??_GetRx1Freq 0068  
                           UpdateDLSettings@dlRx1DrOffset 0064  
                              LORAWAN_Init@RxJoinResponse 00A6  
                              LORAWAN_RxDone@bufferLength 016D  
                        __end_of_RADIO_SetSpreadingFactor 786A  
                      AssembleEncryptionBlock@bufferIndex 0076  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                              ?_AESEncode 006A  
                                         _SystemTimerInit 788A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                        ??_RxJoinResponse 0064  
                                        _LORAWAN_Mainloop 6F0E  
                            __end_of_RADIO_SetFSKSyncWord 71EE  
                                      LORAWAN_Join@result 00ED  
                                      __end_of_CheckFlags 677E  
                               ValidateTxPower@txPowerNew 0065  
                                   __CFG_WDTCPS$WDTCPS_31 000000  
                                          AESEncode@block 006A  
                       SearchAvailableChannel@maxChannels 0082  
                                  __end_of_EncodeShiftRow 3ECE  
                                      _DIO0_ISR_Lora_Init 78A2  
                                       ??_HALDIO5PinValue 0064  
                                   _INT1_InterruptHandler 01EF  
                                               _PORTBbits 000F8A  
                                            ??_FillSubKey 0069  
                                        RxDataDone@status 0067  
                            SwTimersInterrupt@timeElapsed 0082  
                                           _AESEncodeLoRa 7312  
                               __size_of_ExecuteDevStatus 000A  
                            __end_of_RADIO_WriteFrequency 51FC  
                              __end_of_RADIO_RegisterRead 7386  
                       __end_of_LORAWAN_GetMaxPayloadSize 6E16  
                          __end_of_HALResetPinOutputValue 774E  
                                        ?_UpdateDataRange 0064  
                                __end_of_ConfigureRadioRx 7360  
                                __end_of_ConfigureRadioTx 6D94  
                                         _RADIO_RxTimeout 72EA  
                          UpdateChannelIdStatus@channelId 0066  
                               __end_of_ExecuteNewChannel 356C  
                                        EnableChannels1@i 006D  
                                 __size_of_AssemblePacket 02FE  
                                    ?_ValidateChannelMask 0064  
                                       _SwTimerSetTimeout 6D94  
                                          _TMR1_ReadTimer 749A  
                                          ??_UpdateCfList 0072  
                                              _txPower868 7FA2  
                                     ?_DIO0_ISR_Lora_Init 0001  
                                         ??_LORAWAN_Reset 00A3  
                           __size_of_SystemBlockingWaitMs 002A  
                               ??_ValidateChannelMaskCntl 0064  
                                      ?_SwTimerSetTimeout 0071  
                             __size_of_MacExecuteCommands 01F0  
                                    ExecuteNewChannel@ptr 0070  
                                ??_UpdateMinMaxChDataRate 0064  
                                  __end_of_GenerateSubkey 49BA  
                                           RADIO_RxDone@i 00EE  
                                   __size_of_RADIO_SetCRC 000A  
                                 AssemblePacket@macCmdIdx 00DF  
                             ?_LORAWAN_SetChannelIdStatus 0068  
                                        __CFG_FEXTOSC$OFF 000000  
                                          _localDioStatus 0174  
                                      __end_of_GetRx1Freq 7772  
                                   __size_of_RADIO_RxDone 00D0  
                                            ??_ComputeMic 00DF  
                            __size_of_UpdateReceiveDelays 004A  
                                   __size_of_RADIO_TxDone 018A  
                                  ??_RADIO_SetOutputPower 0064  
                         EncryptFRMPayload@macBufferIndex 00AE  
                           ?_LORAWAN_SetNetworkSessionKey 006E  
                                 UpdateMinMaxChDataRate@i 0065  
                                 LORAWAN_Reset@ismBandNew 00A3  
                               __size_of_SwTimerIsRunning 0020  
                              __end_of_ComputeSessionKeys 5F74  
                                     ??_SwTimerSetTimeout 0075  
                                __size_of_SwTimersExecute 00B0  
                               __size_of_ExecuteLinkCheck 0032  
                                  _INTERRUPT_GetDioStatus 77A0  
                                         _RADIO_WriteMode 52D6  
                              ??_RADIO_WriteConfiguration 007F  
                                   SPI2_Exchange8bit@data 0064  
                                 ?_SearchAvailableChannel 0079  
                               __size_of_SwTimerReadValue 003E  
                             RADIO_FSKPacketSent@irqFlags 00DC  
                               __size_of_ExecuteDutyCycle 004E  
                                  ?_StopAllSoftwareTimers 0001  
                                 AssemblePacket@confirmed 00DC  
                                      __end_of_FillSubKey 6BFC  
                                 _AssembleEncryptionBlock 583C  
                                       __size_of_INT1_ISR 0006  
                                       __size_of_INT2_ISR 0006  
                                       __size_of_INT3_ISR 0006  
                                    ??_DIO0_ISR_Lora_Init 0066  
                                   ?_HALResetPinMakeInput 0001  
                                          __end_of_STable 7F6D  
                                     AESEncodeLoRa@useKey 0094  
                              SwTimerSetCallback@callback 0064  
                LORAWAN_SetDeviceAddress@deviceAddressNew 0064  
                                        ?_UpdateFrequency 0064  
                                      LORAWAN_Send@buffer 00E2  
                                          __end_of_Random 745A  
                                 ?_InitDefault433Channels 0001  
                              __size_of_TMR_ISR_Lora_Init 000C  
                                __end_of_ValidateDataRate 773A  
                            __end_of_INTERRUPT_Initialize 78E0  
                          EnableChannels1@channelMaskCntl 006A  
                          EnableChannels1@channelIndexMax 006C  
                          EnableChannels1@channelIndexMin 006B  
                     LORAWAN_SetChannelIdStatus@channelId 006A  
                                        ?_UpdateDutyCycle 0064  
                            _INT0_DefaultInterruptHandler 000000  
                              __end_of_DIO5_ISR_Lora_Init 7896  
                                 __end_of_RADIO_GetStatus 78BA  
                                          __end_of___lmul 5E74  
                                      LORAWAN_Send@result 00E6  
                                        ??_EnableChannels 0071  
                               i2TMR1_WriteTimer@timerVal 0001  
                                           ?_TMR_ISR_lora 0001  
                                        ??_HALSPICSAssert 0064  
                     TMR_OverrideRemaining@ticksRemaining 006C  
                                       ?_RADIO_WritePower 0001  
                                           __pidataCOMRAM 7842  
                                         ?_EncodeShiftRow 0064  
                                          ?_AESEncodeLoRa 0090  
                                       __size_of_TMR1_ISR 0024  
                                      __end_of_ComputeMic 69E0  
                                               Random@max 0077  
                                          __end_of_memcpy 693C  
                                  ?_OSCILLATOR_Initialize 0001  
                               __end_of_SwTimerSetTimeout 6DD6  
                                  __end_of_TMR1_ReadTimer 74BA  
                                          __end_of_memset 72EA  
                                         _SPI2_Initialize 77BC  
                                ?_PrepareJoinRequestFrame 0001  
                                      ??_RADIO_WritePower 0068  
                                            _RADIO_SetCRC 781A  
                                   ??_ValidateChannelMask 0066  
                                        ??_ExecuteLinkAdr 0073  
                                   UpdateCfList@frequency 0075  
                                            _RADIO_RxDone 53AE  
                                            _RADIO_TxDone 3BE2  
LORAWAN_SetApplicationSessionKey@applicationSessionKeyNew 006E  
                                     start_initialization 5C40  
                                          _ConfigureRadio 606E  
                                      LORAWAN_RxDone@mhdr 03A2  
                                      LORAWAN_RxDone@temp 03A8  
                                            ??_RxDataDone 0068  
                                      _DIO4_ISR_Lora_Init 78F0  
                                __end_ofi2_TMR1_ReadTimer 74DA  
                          __size_of_TMR_OverrideRemaining 007C  
                                     _RADIO_RegisterWrite 7534  
                                            AESCmac@mLast 0120  
                               ??_CreateAllSoftwareTimers 0065  
                                    RxDataDone@dataLength 0066  
                         __size_of_PIN_MANAGER_Initialize 00DC  
                    __end_of_INT3_DefaultInterruptHandler 78FE  
                   __size_of_INT3_DefaultInterruptHandler 0002  
                            _INT3_DefaultInterruptHandler 78FC  
                           __end_of_TMR_OverrideRemaining 6166  
                             ?_IncludeMacCommandsResponse 0064  
                                   __end_of_INT1_CallBack 75CA  
                                            ??_ExtractMic 0072  
                    EncryptFRMPayload@bufferToBeEncrypted 00AF  
                                            AESCmac@input 00D0  
                        __end_of_LORAWAN_SetDeviceAddress 7686  
                                         ?_GenerateSubkey 00A4  
                            ?_RADIO_SetFrequencyHopPeriod 0064  
                                         LORAWAN_TxDone@i 00CF  
                                             ?_sendPacket 0001  
                                   LORAWAN_Init@RxPayload 00A4  
                     AssembleEncryptionBlock@frameCounter 006E  
                                 i2TMR_SwapTimer@timerVal 0007  
                                   __end_of_INT2_CallBack 75AC  
                                           ??_RADIO_Reset 0069  
                                __end_of_UpdateDLSettings 7654  
                              SwTimerStart@ticksRemaining 008F  
                                  RADIO_WriteMode@newMode 006E  
                                __end_of_ValidateRxOffset 7726  
                             ??_RADIO_SetChannelFrequency 0068  
                             ??_SetCallbackSoftwareTimers 0068  
                                     ?_DIO4_ISR_Lora_Init 0001  
                                     _RADIO_SetModulation 786A  
                           ExecuteNewChannel@channelIndex 0077  
                          __end_of_SearchAvailableChannel 5044  
                                        ?_EnableChannels1 0068  
                                   __end_of_INT3_CallBack 758E  
                                         i2_TMR_SwapTimer 6ED0  
                                 __size_of_StartReTxTimer 0134  
                                  ?_UpdateCurrentDataRate 0001  
                                  ?_UpdateChannelIdStatus 0064  
                                         ___llmod@divisor 0068  
                              MacExecuteCommands@fOptsLen 007C  
                                 __end_of_SystemTimerInit 7890  
                          UpdateChannelIdStatus@statusNew 0064  
                       __size_of_RADIO_UnhandledInterrupt 0022  
                                         ___llmod@counter 006C  
                                            _JoinedServer 0172  
                                     TMR_SwapTimer@oldVal 0040  
                               ?_RADIO_UnhandledInterrupt 0001  
                                __size_of_PIN_MANAGER_IOC 0008  
                                     TMR_SwapTimer@retVal 0042  
                                   _RADIO_FSKPayloadReady 5BA2  
                          __size_of_HALResetPinMakeOutput 0004  
                           __end_of_HALResetPinMakeOutput 78EC  
                                                ??_Random 0079  
                                                AESCmac@i 0165  
                                                AESCmac@j 0164  
                                        __CFG_LPBOREN$OFF 000000  
                                                AESCmac@n 0163  
                                                AESCmac@x 0150  
                                                AESCmac@y 0140  
                              SwTimerReadValue@ticksCount 008F  
                                    ?_RADIO_RegisterWrite 0066  
                          __end_of_InitDefault433Channels 6534  
                          __end_of_AutomaticReplyCallback 74F8  
                                     RADIO_Init@frequency 007F  
                                __size_of_TMR1_Initialize 0044  
                                    _macEndDevCmdReplyLen 7F94  
                                                ??___lmul 006C  
                                             ??_AESEncode 006D  
                       RADIO_WriteConfiguration@tempValue 0082  
                                   __size_of_LORAWAN_Init 005E  
                      __size_of_AckRetransmissionCallback 00FC  
                                   __size_of_LORAWAN_Join 008C  
                                   __size_of_LORAWAN_Send 00BE  
                                 __end_of_RADIO_RxTimeout 7312  
                                MacExecuteCommands@buffer 007A  
                                      __end_of_RxDataDone 78F8  
                                ??_SetReceptionNotOkState 009E  
                                          ??_TMR_ISR_lora 0028  
                                             __pdataBANK1 01BD  
                                       _ValidateDataRange 7064  
                                      __end_of_ExtractMic 6D52  
                i2SwTimersInterrupt@ticksToNextTimerEvent 0023  
                  SwTimersInterrupt@ticksToNextTimerEvent 0086  
                                                ??_memcpy 006A  
                                  __size_of_SwTimerCreate 0070  
                                                ??_memset 006A  
                                    ??_DIO4_ISR_Lora_Init 0064  
                              __end_of_EXT_INT_Initialize 68E6  
                                       _ValidateChannelId 74F8  
                                    ?_RADIO_SetModulation 0001  
                                _RADIO_SetSpreadingFactor 7862  
                                      _RADIO_RxFSKTimeout 702E  
                                                ?_AESCmac 00CC  
                                  __size_of_TMR1_CallBack 001E  
                                      ?_ValidateDataRange 0001  
                                ValidateRxOffset@rxOffset 0064  
                                            AESEncode@aux 008B  
                                            AESEncode@key 0075  
                                  TMR_GetDeltaTime@retVal 0030  
                                         ?_TMR1_ReadTimer 0064  
                                  __end_of_ConfigureRadio 60EA  
                                          _LORAWAN_RxDone 0096  
                                      ?_ValidateChannelId 0064  
                                  TMR_GetDeltaTime@tmrVal 003E  
                                          _LORAWAN_TxDone 0B34  
                              __size_of_ExecuteNewChannel 01C2  
              LORAWAN_GetMaxPayloadSize@macCommandsLength 006D  
                                    __end_of_SwTimerStart 5DEE  
                  __end_of_LORAWAN_EnterContinuousReceive 6468  
                 __size_of_LORAWAN_EnterContinuousReceive 006A  
                          _LORAWAN_EnterContinuousReceive 63FE  
                                             __pbssBIGRAM 04E0  
                                   TMR1_ISR@CountCallBack 003C  
                               __size_of_CountfOptsLength 00B0  
                                       CountfOptsLength@i 006B  
                                             __pbssCOMRAM 0030  
                              __end_of_DefaultChannels433 7FD2  
                              __end_of_DefaultChannels868 7FFC  
                                        ??_RADIO_Transmit 0097  
                        __end_of_INT0_SetInterruptHandler 78F6  
                                      LORAWAN_RxTimeout@i 00AD  
                        __end_of_INT3_SetInterruptHandler 77F2  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK3 03A0  
                                     ??_ValidateDataRange 0066  
                                        _TMR_GetDeltaTime 4D8C  
                           EnableChannels@channelMaskCntl 0070  
                                 __end_of_RADIO_WriteMode 53AE  
                 __end_of_UnconfirmedTransmissionCallback 632A  
                __size_of_UnconfirmedTransmissionCallback 006C  
                         _UnconfirmedTransmissionCallback 62BE  
                                 SearchAvailableChannel@i 0084  
                                     ??_ValidateChannelId 0065  
                                   RADIO_RegisterRead@reg 0066  
                                 _RADIO_ReceiveStart$1055 009A  
                         __size_of_UpdateMinMaxChDataRate 00B4  
                           ?_INT3_DefaultInterruptHandler 0001  
                     LORAWAN_SetChannelIdStatus@statusNew 0068  
                                               _aesBuffer 01AB  
                                 INTERRUPT_GetDioStatus@a 0064  
                  __end_of_IOCBF4_DefaultInterruptHandler 78FC  
                 __size_of_IOCBF4_DefaultInterruptHandler 0002  
                          _IOCBF4_DefaultInterruptHandler 78FA  
                                       ?_SetJoinFailState 0001  
                                     SwTimerStart@timerId 0093  
                           ??_RADIO_SetFrequencyHopPeriod 0066  
                                    _RADIO_SetFSKSyncWord 71C2  
                             RADIO_SetBandwidth@bandwidth 0064  
                              __end_of_SwTimerSetCallback 7194  
       __end_of_ResetParametersForUnconfirmedTransmission 7792  
      __size_of_ResetParametersForUnconfirmedTransmission 000E  
              ?_ResetParametersForUnconfirmedTransmission 0001  
             ??_ResetParametersForUnconfirmedTransmission 0064  
               _ResetParametersForUnconfirmedTransmission 7784  
                               ??_AssembleEncryptionBlock 0075  
                                   _INT2_InterruptHandler 01F1  
                                               _bandwidth 7F8D  
                                      ??_SetJoinFailState 0064  
                                 ?_InitDefault868Channels 0001  
                                            _LORAWAN_Init 677E  
                                            _LORAWAN_Join 5CDA  
                                            _LORAWAN_Send 5614  
                                  RADIO_FSKPayloadReady@i 00EE  
                                       _ValidateFrequency 67DC  
                                               __pnvBANK1 01EF  
                                  ??_HALResetPinMakeInput 0064  
                                    _RADIO_WriteFrequency 5120  
                                         FillSubKey@carry 006A  
                                        _HALSPICSDeassert 78E0  
                          ??_LORAWAN_SetNetworkSessionKey 0070  
                                     __end_of_RADIO_Reset 70CC  
                                   ??_RADIO_RegisterWrite 0067  
                                  _PIN_MANAGER_Initialize 5044  
                                           FillSubKey@key 0066  
                                      ?_ValidateFrequency 0064  
                                    __end_of_UpdateCfList 33AA  
                     RADIO_WriteFSKFrequencyDeviation@num 0075  
                               EnableChannels@channelMask 006E  
                                               _macBuffer 04E0  
                                               _dioStatus 0048  
                               __end_of_ValidateDataRange 7098  
                           RADIO_FSKPayloadReady@irqFlags 00ED  
                                       _SwTimersInterrupt 4BAC  
                                       ??_SwTimersExecute 00E8  
                                               __pintcode 0008  
                                                ?___abdiv 0064  
                        __end_of_TMR1_SetInterruptHandler 77E8  
                                           __pmediumconst 7E6C  
                                 RADIO_Transmit@bufferLen 0096  
                                 __end_of_SPI2_Initialize 77C8  
                                               __ptext100 6D10  
                                               __ptext101 5EF6  
                                               __ptext110 63FE  
                                               __ptext102 5FF2  
                               __end_of_ValidateChannelId 7516  
                                               __ptext111 78F6  
                                               __ptext103 61DC  
                                               __ptext200 6ED0  
                                               __ptext120 7654  
                                               __ptext112 7784  
                                               __ptext104 6720  
                                               __ptext201 761E  
                                               __ptext121 66C0  
                                               __ptext113 7792  
                                               __ptext105 3A50  
                                               __ptext210 78FC  
                                               __ptext202 4C9E  
                                               __ptext130 7824  
                                               __ptext122 4F64  
                                               __ptext114 78BA  
                                               __ptext106 0B34  
                                               __ptext211 78CC  
                                               __ptext203 4E78  
                                               __ptext131 71C2  
                                               __ptext123 6D52  
                                               __ptext115 7516  
                                               __ptext107 6E16  
                                               __ptext212 758E  
                                               __ptext204 74BA  
                                               __ptext140 7438  
                                               __ptext132 5E74  
                                               __ptext124 785A  
                                               __ptext116 2C04  
                                               __ptext108 747A  
                                               __ptext213 78FE  
                                               __ptext205 7882  
                                               __ptext141 6A80  
                                               __ptext133 7872  
                                               __ptext125 7810  
                                               __ptext117 733A  
                                               __ptext109 78B4  
                                               __ptext214 78D2  
                                               __ptext206 7386  
                                               __ptext150 3D6C  
                                               __ptext142 5DEE  
                                               __ptext134 2FF4  
                                               __ptext126 781A  
                                               __ptext118 77A0  
                                               __ptext215 75AC  
                                               __ptext207 78FA  
                                               __ptext151 29C8  
                                               __ptext143 6E54  
                                               __ptext135 13B4  
                                               __ptext127 606E  
                                               __ptext119 5CDA  
                                               __ptext216 7900  
                                               __ptext208 78C6  
                                               __ptext160 38BA  
                                               __ptext152 677E  
                                               __ptext144 698E  
                                               __ptext136 547E  
                                               __ptext128 7862  
                                               __ptext217 0000  
                                               __ptext209 7570  
                                               __ptext161 7162  
                                               __ptext153 77AE  
                                               __ptext145 182C  
                                               __ptext137 6598  
                                               __ptext129 786A  
                                               __ptext170 78E0  
                                               __ptext162 52D6  
                                               __ptext154 56D2  
                                               __ptext146 48B8  
                                               __ptext138 65FC  
                                               __ptext171 78E4  
                                               __ptext163 7360  
                                               __ptext155 5F74  
                                               __ptext147 6BB2  
                                               __ptext139 4686  
                                               __ptext180 5D66  
                                               __ptext172 7098  
                                               __ptext164 78C0  
                                               __ptext156 3ECE  
                                               __ptext148 7312  
                                               __ptext181 60EA  
                                               __ptext173 7296  
                                               __ptext165 5120  
                                               __ptext157 5788  
                                               __ptext149 2138  
                                               __ptext190 72C0  
                                               __ptext182 6E92  
                                               __ptext174 773A  
                                               __ptext166 665E  
                                               __ptext158 6ACE  
                                               __ptext191 68E6  
                                               __ptext183 7602  
                                               __ptext175 78E8  
                                               __ptext167 7534  
                                               __ptext159 782E  
                                               __ptext192 69E0  
                                               __ptext184 4BAC  
                                               __ptext176 78EC  
                                               __ptext168 7838  
                                               __ptext193 624E  
                                               __ptext185 4D8C  
                                               __ptext177 371E  
                                               __ptext169 7772  
                                               __ptext194 787A  
                                               __ptext186 749A  
                                               __ptext178 6166  
                                               __ptext187 6D94  
                                               __ptext179 75E6  
                                               __ptext196 73D0  
                                               __ptext188 6468  
                                               __ptext197 7552  
                                               __ptext189 64CE  
                                               __ptext198 78F8  
                                               __ptext199 6B1C  
                                       _EncryptFRMPayload 4184  
                                                ?___lldiv 0064  
                            RADIO_FSKPacketSent@timeOnAir 00D4  
                           __size_of_UpdateJoinInProgress 001A  
                                                ?___llmod 0064  
                           __size_of_ExecuteRxTimingSetup 0024  
                                         ??_AESEncodeLoRa 0094  
                SelectChannelForTransmission@channelIndex 0087  
                         __end_of_PrepareJoinRequestFrame 47B2  
                                                ?___lwmod 0072  
                                      ?_SwTimersInterrupt 007A  
                               _RADIO_SetChannelFrequency 5E74  
                             __size_of_DIO3_ISR_Lora_Init 0002  
                   IncludeMacCommandsResponse@bufferIndex 006F  
                               _SetCallbackSoftwareTimers 56D2  
                                      ConfigureRadio@freq 0071  
                                   ??_RADIO_SetModulation 0064  
                                        ?_RADIO_GetStatus 0001  
                                     __size_of_sendPacket 002A  
                                  __end_of_LORAWAN_RxDone 0B34  
                                     ??_ValidateFrequency 0068  
                                  __end_of_LORAWAN_TxDone 13B4  
                                      ?_EncryptFRMPayload 00A4  
                            ??_INTERRUPT_InterruptManager 0028  
                            __end_of_LORAWAN_PlatformInit 747A  
                          __size_of_RADIO_SetLoRaSyncWord 000A  
                                    GenerateSubkey@F17044 01BD  
                                        _ExecuteDevStatus 7806  
                           __end_of_RADIO_SetLoRaSyncWord 7838  
                  IncludeMacCommandsResponse@pBufferIndex 0066  
                              __size_of_SwTimerSetTimeout 0042  
                             ??_LORAWAN_GetMaxPayloadSize 006C  
                          LORAWAN_LinkCheckConfigure@iCtr 00A2  
                        ExecuteRxParamSetupReq@dlSettings 0076  
                                          _AssemblePacket 1B48  
                                         ?_ConfigureRadio 0071  
                               AssemblePacket@bufferIndex 00E0  
                              ??_INT2_SetInterruptHandler 0066  
                              __end_ofi2_TMR_GetDeltaTime 4F64  
                                __size_of_TMR1_StartTimer 0004  
                                     ??_SwTimersInterrupt 007E  
                                    RADIO_DIO0@dioMapping 00F1  
                                       _DutyCycleCallback 242A  
                                 InitDefault433Channels@i 006E  
                                   __end_of_TMR_SwapTimer 6ED0  
                                            ?_SwTimerStop 0001  
                                     ??_EncryptFRMPayload 00B2  
                                __end_of_LORAWAN_GetState 7882  
                                 __end_ofi2_TMR_SwapTimer 6F0E  
                                 __size_of_EncKeySchedule 023C  
                                      AssemblePacket@mhdr 00DD  
                                      AssemblePacket@port 0166  
                                          __size_of_flash 0046  
                               __size_of_RADIO_ReadRandom 007E  
                                ConfigureRadioRx@dataRate 007A  
                                      _RADIO_ReceiveStart 2C04  
                                          __size_of_srand 000E  
                                __end_of_LORAWAN_Mainloop 6F4A  
                                   ?_RADIO_SetFSKSyncWord 006E  
                                    _INTERRUPT_Initialize 78DC  
                                           _SwTimerCreate 624E  
                          __end_of_InitDefault868Channels 64CE  
                     IncludeMacCommandsResponse@macBuffer 0064  
                                ?_RADIO_FHSSChangeChannel 0001  
                           ValidateFrequency@frequencyNew 0064  
                                           _TMR1_CallBack 7552  
                               __end_of_ValidateFrequency 6838  
                                        _SwTimerIsRunning 747A  
                                        _ExecuteLinkCheck 7130  
                                    i2SwTimersInterrupt@i 0027  
                                                _INT1_ISR 78D2  
                                _LORAWAN_SetDeviceAddress 766E  
                                                _INT2_ISR 78CC  
                                       EncKeySchedule@key 0064  
                                                _INT3_ISR 78C6  
                                      _RADIO_SetBandwidth 7872  
                                                _LATCbits 000F7B  
                                  ?_RADIO_FSKPayloadReady 0001  
                       __size_of_INT1_SetInterruptHandler 000A  
                                    __end_of_rxWindowSize 7F8D  
                                   ?_RADIO_WriteFrequency 0071  
                               ?_INT1_SetInterruptHandler 0064  
                                        ?_SystemTimerInit 0001  
                                               _reloadVal 0044  
                                     ?_RADIO_ReceiveStart 0094  
                                                _PIE0bits 000E29  
                                        _SwTimerReadValue 6E16  
                                        _ExecuteDutyCycle 6A32  
                                                _PIE5bits 000E2E  
                                         _HALDIO5PinValue 78C0  
                                    RADIO_DIO1@dioMapping 00AF  
                               __end_of_SwTimersInterrupt 4C9E  
                                __size_of_TMR1_WriteTimer 001C  
                                      AESEncode@masterKey 006C  
                     __size_of_INTERRUPT_InterruptManager 0086  
                              __end_of_DIO2_ISR_Lora_Init 789C  
                                                _PIR0bits 000E33  
                                        GenerateSubkey@k1 00A6  
                                        GenerateSubkey@k2 00A8  
                                    ConfigureRadioRx@freq 0076  
                               __end_of_EncryptFRMPayload 42D8  
                                                _PIR5bits 000E38  
                          __size_of_RADIO_WriteFSKBitRate 0062  
                                UpdateReceiveDelays@delay 0068  
                               LORAWAN_RxDone@bufferIndex 03A7  
                                  __size_of_UpdateTxPower 0008  
                           __end_of_RADIO_WriteFSKBitRate 665E  
                                    ConfigureRadioTx@freq 0076  
                                         RxDataDone@pData 0064  
                             UpdateDataRange@dataRangeNew 0064  
                                     ?_RADIO_SetBandwidth 0001  
                      SearchAvailableChannel@channelIndex 007A  
                                               _rxPayload 016E  
                                  _UpdateMinMaxChDataRate 5788  
                           EncryptFRMPayload@bufferLength 00A6  
                                 ValidateDataRange@result 0066  
                                                _SSP2CON1 000ED9  
                             UpdateDutyCycle@dutyCycleNew 0064  
              ValidateChannelId@allowedForDefaultChannels 0064  
                           __size_of_FindSmallestDataRate 00A6  
                                                _TMR1_ISR 73D0  
                                ConfigureRadioTx@dataRate 007A  
                    __size_of_RADIO_SetFrequencyHopPeriod 000A  
                                   ValidateTxPower@result 0064  
                                        ?_RADIO_RxTimeout 0001  
                     __size_of_IncludeMacCommandsResponse 02F2  
                                                _SSP2STAT 000ED8  
                            ??_LORAWAN_LinkCheckConfigure 0096  
                                       ??_PIN_MANAGER_IOC 0001  
                             __size_of_RADIO_GetPacketSnr 0006  
                                     _UpdateReceiveDelays 6B68  
                                             _INT0PPSbits 000DF0  
                         __size_of_SetReceptionNotOkState 006A  
                                             _INT1PPSbits 000DF1  
                                  __end_of_AssemblePacket 1E46  
                                         ?_LORAWAN_RxDone 016B  
                                             _INT2PPSbits 000DF2  
                                         ?_LORAWAN_TxDone 009E  
                                       ??_TMR1_Initialize 0066  
                                             _INT3PPSbits 000DF3  
                                        ___abdiv@dividend 0068  
                                      _DIO1_ISR_Lora_Init 789C  
                               __end_of_DutyCycleCallback 2712  
                                        __size_of_AESCmac 031C  
                                    ??_RADIO_ReceiveStart 0096  
                                 ValidateFrequency@result 0068  
                              __end_of_PrepareSessionKeys 606E  
                                       ?_ConfigureRadioRx 0076  
                                       ?_ConfigureRadioTx 0076  
                                    RADIO_DIO2@dioMapping 007E  
                                      AESEncodeLoRa@block 0090  
                                                _Channels 0400  
                             __end_of_RADIO_FSKPacketSent 3BE2  
                 RADIO_SetSpreadingFactor@spreadingFactor 0064  
                                      ??_ConfigureRadioRx 007A  
                                      ??_ConfigureRadioTx 007A  
                                    ??_RADIO_SetBandwidth 0064  
                                     ?_DIO1_ISR_Lora_Init 0001  
                           RADIO_SetIQInverted@iqInverted 0064  
                                        ?_RADIO_WriteMode 0069  
                               LORAWAN_RxDone@computedMic 03AB  
                                       ___lmul@multiplier 0064  
                                          ?_SwTimerCreate 0001  
                                               copy_data0 5C54  
                                               copy_data1 5C74  
                                   ?_INTERRUPT_Initialize 0001  
                                 ?_INTERRUPT_GetDioStatus 0001  
                                    ?_UpdateReceiveDelays 0001  
                                     _EncKeySchedule$3767 0068  
                                _INT0_SetInterruptHandler 78F4  
                             __end_of_RADIO_SetIQInverted 781A  
                                          ?_TMR1_CallBack 0001  
                                _INT3_SetInterruptHandler 77E8  
                                    __end_of_TMR_ISR_lora 6B68  
                                             _RADIO_Reset 7098  
                                     ExecuteLinkCheck@ptr 0064  
                          i2SwTimersInterrupt@timeElapsed 001F  
                                      _RADIO_RegisterRead 7360  
                                __size_of_ValidateTxPower 0022  
                                 ??_StopAllSoftwareTimers 0065  
                                          _StartReTxTimer 4420  
                             __end_ofi2_SwTimersInterrupt 4D8C  
                               _LORAWAN_GetMaxPayloadSize 6DD6  
                              LORAWAN_RxDone@extractedMic 03A3  
                                             AESCmac@flag 0162  
                           EncryptFRMPayload@frameCounter 00A8  
                                      CheckMcastFlags@hdr 0064  
                                             AESCmac@size 00D2  
                                SwTimerSetTimeout@timerId 0079  
                                SwTimerSetTimeout@timeout 0071  
                                   RADIO_WriteMode@opMode 006F  
                          ??_INT3_DefaultInterruptHandler 0001  
                                ??_ExecuteRxParamSetupReq 0072  
                     __size_of_LORAWAN_LinkCheckConfigure 019C  
                                        ___abdiv@quotient 0067  
                 UpdateReceiveWindow2Parameters@frequency 0064  
                                                __Hrparam 0000  
                                     ?_RADIO_RegisterRead 0001  
                            __end_of_SystemBlockingWaitMs 72C0  
                  ValidateChannelMaskCntl@channelMaskCntl 0065  
                                       i2_TMR1_WriteTimer 761E  
                                                __Lrparam 0000  
                                        ??_EncodeShiftRow 0066  
                                    ??_DIO1_ISR_Lora_Init 0066  
                                __size_of_CheckMcastFlags 0072  
                                      __CFG_BOREN$SBORDIS 000000  
                                   TMR1_ReadTimer@readVal 0068  
                              __size_of_ValidateDataRange 0034  
                               _ticksToScheduledInterrupt 005A  
                            ValidateDataRange@dataRateMax 0068  
                            ValidateDataRange@dataRateMin 0069  
                              __size_of_ValidateChannelId 001E  
                                        ?_SPI2_Initialize 0001  
                                      ?i2_TMR1_WriteTimer 0001  
                                        __size_of___abdiv 0052  
                                 ??_OSCILLATOR_Initialize 0064  
                                       ?_ValidateDataRate 0001  
                                      _ComputeSessionKeys 5EF6  
                                   __size_of_SwTimerStart 0088  
                                        __size_of___lldiv 0076  
                                        __size_of___llmod 0062  
                                        __size_of___lwmod 003E  
                                         ?_AssemblePacket 0166  
                                    AssemblePacket@buffer 0167  
                                        SwTimersExecute@i 00EC  
                                      ??_ValidateDataRate 0064  
                                   _INT3_InterruptHandler 01F3  
                                _TMR1_SetInterruptHandler 77DE  
                                             _radioBuffer 05EF  
                                     ??i2_TMR1_WriteTimer 0003  
         __end_of_ResetParametersForConfirmedTransmission 77A0  
        __size_of_ResetParametersForConfirmedTransmission 000E  
                ?_ResetParametersForConfirmedTransmission 0001  
               ??_ResetParametersForConfirmedTransmission 0064  
                 _ResetParametersForConfirmedTransmission 7792  
                                   _TMR1_InterruptHandler 01F7  
                                        ??_GenerateSubkey 00AA  
                                        _CountfOptsLength 599E  
                                              _HALSPISend 7838  
                                     ?_ComputeSessionKeys 00A4  
                                          _rxWindowOffset 7F7D  
                      RADIO_UnhandledInterrupt@modulation 0068  
                                 _IOCBF4_InterruptHandler 01F5  
                              __end_of_MacExecuteCommands 2FF4  
                                    ??_RADIO_RegisterRead 0066  
                        __end_of_RADIO_UnhandledInterrupt 7416  
                                           _UpdateTxPower 784A  
                                    RADIO_Transmit@buffer 0094  
                         __end_of_RADIO_FHSSChangeChannel 71C2  
                                         _allocatedTimers 0173  
                          __end_of_INTERRUPT_GetDioStatus 77AE  
                                       ?i2_TMR1_ReadTimer 0001  
                                      _DIO5_ISR_Lora_Init 7890  
                                                __ptext10 745A  
                                                __ptext11 77C8  
                                                __ptext20 78DC  
                                                __ptext12 77DE  
                                                __ptext21 6890  
                                                __ptext13 788A  
                                                __ptext30 58EE  
                                                __ptext22 77E8  
                                                __ptext14 7890  
                                                __ptext31 242A  
                                                __ptext23 77F2  
                                                __ptext15 78F0  
                                                __ptext40 62BE  
                                                __ptext32 4554  
                                                __ptext24 77FC  
                                                __ptext16 78F2  
                                                __ptext41 7760  
                                                __ptext33 74DA  
                                                __ptext25 78F4  
                                                __ptext17 7896  
                                                __ptext50 73F4  
                                                __ptext42 7686  
                                                __ptext34 49BA  
                                                __ptext26 7218  
                                                __ptext18 789C  
                                                __ptext51 3BE2  
                                                __ptext43 769E  
                                                __ptext35 402C  
                                                __ptext27 766E  
                                                __ptext19 78A2  
                                                __ptext60 4420  
                                                __ptext52 53AE  
                                                __ptext44 76B6  
                                                __ptext36 5A4E  
                                                __ptext28 7242  
                                                __ptext61 6394  
                                                __ptext53 693C  
                                                __ptext45 6BFC  
                                                __ptext37 554C  
                                                __ptext29 6F0E  
                                                __ptext70 33AA  
                                                __ptext62 726C  
                                                __ptext54 5BA2  
                                                __ptext46 6F4A  
                                                __ptext38 6CCE  
                                        ?i2_TMR_SwapTimer 0007  
                                                __ptext71 67DC  
                                                __ptext63 78A8  
                                                __ptext55 2712  
                                                __ptext47 72EA  
                                                __ptext39 702E  
                                                __ptext80 7416  
                                                __ptext72 7064  
                                                __ptext64 2E04  
                                                __ptext56 0096  
                                                __ptext48 7194  
                                                __ptext81 7726  
                                                __ptext73 6F84  
                                                __ptext65 73AC  
                                                __ptext57 632A  
                                                __ptext49 6534  
                                                __ptext90 7806  
                                                __ptext82 76CE  
                                                __ptext74 70FE  
                                                __ptext66 6B68  
                                                __ptext58 763A  
                                                __ptext91 5614  
                                                __ptext83 6FF6  
                                                __ptext75 4AB6  
                                                __ptext67 42D8  
                                                __ptext59 31E2  
                                                __ptext92 6DD6  
                                                __ptext84 784A  
                                                __ptext76 6FBE  
                                                __ptext68 7712  
                                                __ptext93 1B48  
                                                __ptext85 7852  
                                                __ptext77 74F8  
                                                __ptext69 76E6  
                                                __ptext94 1E46  
                                                __ptext86 76FC  
                                                __ptext78 7130  
                                                __ptext95 78AE  
                                                __ptext87 6838  
                                                __ptext79 356C  
                                                __ptext96 5AFC  
                                                __ptext88 47B2  
                                                __ptext97 4184  
                                                __ptext89 6A32  
                                                __ptext98 583C  
                                                __ptext99 599E  
                                 ExecuteRxTimingSetup@ptr 0069  
                                  ??_RADIO_SetFSKSyncWord 0070  
                            ??_IOCBF4_SetInterruptHandler 0066  
                                   ??_UpdateReceiveDelays 0064  
                                   __end_of_LORAWAN_Reset 402C  
                                            ??_sendPacket 00E8  
                                  __end_of_StartReTxTimer 4554  
                                 ??_UpdateCurrentDataRate 0064  
                                 ??_UpdateChannelIdStatus 0065  
                                __size_of_UpdateDataRange 00F6  
                                  _SetReceptionNotOkState 6394  
                                            _SSP2CON1bits 000ED9  
                                       ??_TMR1_StartTimer 0064  
                                      ??i2_TMR1_ReadTimer 0003  
                               __size_of_RADIO_WritePower 00CE  
                                 __end_of_HALDIO5PinValue 78C6  
                                              _IOCBF4_ISR 7386  
                                       ?_UpdateDLSettings 0064  
                                  ConfigureRadio@dataRate 0075  
                                       ?_ValidateRxOffset 0001  
                              __size_of_ValidateFrequency 005C  
                        __size_of_PrepareJoinRequestFrame 012C  
                                           CheckFlags@hdr 0064  
                                  ??_RADIO_WriteFrequency 0075  
                                   __size_of_UpdateCfList 01C8  
                                     ?_DIO5_ISR_Lora_Init 0001  
                           __size_of_RADIO_SetOutputPower 0008  
                                           __size_of_main 00DA  
                                           __size_of_rand 004E  
                                       _RADIO_ReceiveStop 7516  
                                      ??_UpdateDLSettings 0065  
                                    _LORAWAN_PlatformInit 745A  
                                         _FskSyncWordBuff 7FFC  
                                      ??_ValidateRxOffset 0064  
                               __end_ofi2_TMR1_WriteTimer 763A  
               IncludeMacCommandsResponse@bIncludeInFopts 0067  
                                    ??_ComputeSessionKeys 00A6  
                                           _timerOverflow 0049  
                                    __CFG_WDTCWS$WDTCWS_7 000000  
                                            _SwTimerStart 5D66  
                              __size_of_SwTimersInterrupt 00F2  
                                      ?_RADIO_ReceiveStop 0001  
                                      __CFG_BORV$VBOR_190 000000  
                              ??_RADIO_SetSpreadingFactor 0064  
                                   RADIO_TxDone@timeOnAir 00D4  
                          ValidateChannelMask@channelMask 0064  
                             __size_of_DIO0_ISR_Lora_Init 0006  
                              __size_of_EncryptFRMPayload 0154  
                                         GenerateSubkey@i 00CB  
                                         GenerateSubkey@l 00BB  
                                 PrepareSessionKeys@index 0074  
                                __end_of_TMR_GetDeltaTime 4E78  
                                      SwTimerStop@timerId 0064  
                                                _swTimers 0300  
                                        ??_TMR1_ReadTimer 0066  
        LORAWAN_SetNetworkSessionKey@networkSessionKeyNew 006E  
                                    RADIO_RxDone@irqFlags 00ED  
                             __end_of_ValidateChannelMask 702E  
                                           UpdateCfList@i 007A  
                      __end_of_INTERRUPT_InterruptManager 008E  
                              _INTERRUPT_InterruptManager 0008  
                                     ??_RADIO_ReceiveStop 0070  
                             PrepareSessionKeys@networkId 0072  
                                       _RADIO_ReleaseData 78BA  
                                       ??_TMR1_WriteTimer 0066  
                                      __end_of_sendPacket 7218  
                                              _RADIO_DIO0 6534  
                                              _RADIO_DIO1 6F4A  
                                              _RADIO_DIO2 6BFC  
                                              _RADIO_DIO3 76B6  
                                              _RADIO_DIO4 769E  
                                              _RADIO_DIO5 7686  
                                            _SSP2STATbits 000ED8  
                                    ??_DIO5_ISR_Lora_Init 0066  
                    __end_of_INT1_DefaultInterruptHandler 7902  
                   __size_of_INT1_DefaultInterruptHandler 0002  
                            _INT1_DefaultInterruptHandler 7900  
                       __size_of_RADIO_WriteConfiguration 0478  
                                  __end_of_rxWindowOffset 7F85  
                             PIN_MANAGER_Initialize@state 0066  
                     __size_of_IOCBF4_SetInterruptHandler 000A  
                              __size_of_DutyCycleCallback 02E8  
                                 EncryptFRMPayload@buffer 00A4  
                                      ?_RADIO_ReleaseData 0001  
                               ?_RADIO_WriteConfiguration 007D  
                                      __end_of_modulation 7F7D  
                                              _RADIO_Init 38BA  
                         ExecuteRxParamSetupReq@frequency 0072  
                                __size_of_UpdateFrequency 003A  
                                ?_ValidateChannelMaskCntl 0001  
                                           __roundCounter 0047  
                                              _INTCONbits 000FF2  
                                 ConfigureRadioTx@txPower 007B  
                                __end_of_HALSPICSDeassert 78E4  
                                __size_of_UpdateDutyCycle 0032  
                                          ?_UpdateTxPower 0001  
                                                memcpy@d1 0064  
                                                memcpy@s1 0066  
                                          _EncKeySchedule 29C8  
                      __size_of_SetCallbackSoftwareTimers 00B6  
                                 __size_of_RxJoinResponse 0006  
                                         ??_SwTimerCreate 0064  
                                     ExecuteDutyCycle@ptr 0064  
                                            _UpdateCfList 31E2  
                                     ??_RADIO_ReleaseData 0064  
                                  ??_INTERRUPT_Initialize 0064  
                                                memset@p1 0064  
                                         ??_TMR1_CallBack 0028  
                                    __size_of_SwTimerStop 001C  
                                        _RADIO_ReadRandom 5F74  
                                       _RADIO_TxDone$1067 00D8  
                                      _EXT_INT_Initialize 6890  
                                         ?_StartReTxTimer 0001  
                                   _TMR_OverrideRemaining 60EA  
                                                intlevel2 0000  
                          RADIO_ReceiveStart@rxWindowSize 0094  
                               __end_of_RADIO_ReceiveStop 7534  
                                         _SwTimersExecute 58EE  
                     SwTimerSetCallback@callbackParameter 0066  
                                             FillSubKey@i 006B  
                           RADIO_WriteFrequency@frequency 0071  
                                        ___lwmod@dividend 0072  
                                   ?_LORAWAN_PlatformInit 0001  
                                        ___lldiv@dividend 0064  
                                __end_of_ExecuteDevStatus 7810  
                                 ?_PIN_MANAGER_Initialize 0001  
                                      _DefaultChannels433 7FA8  
                                      _DefaultChannels868 7FD2  
                                       __CFG_CLKOUTEN$OFF 000000  
                                     ?_EXT_INT_Initialize 0001  
                                            ___abdiv@sign 0066  
                                UpdateDutyCycle@channelId 0066  
                                  GenerateSubkey@const_Rb 00AB  
                                             _PPSLOCKbits 000DEF  
                         __size_of_ExecuteRxParamSetupReq 0148  
                               UpdateJoinInProgress@state 0064  
                                       ??_ValidateTxPower 0064  
                                     _LORAWAN_TxDone$1948 00BA  
                                     _LORAWAN_TxDone$1949 00BE  
                      __end_of_LORAWAN_LinkCheckConfigure 38BA  
                               __end_of_RADIO_ReleaseData 78C0  
                              _LORAWAN_LinkCheckConfigure 371E  
                                __size_of_EnableChannels1 0058  
                                      __end_of_txPower868 7FA8  
                                   _HALResetPinMakeOutput 78E8  
                                ??_HALResetPinOutputValue 0064  
                                  __size_of_INT1_CallBack 001E  
                               RADIO_WriteConfiguration@i 0081  
                               ExecuteRxTimingSetup@delay 006B  
                                        AESEncodeLoRa@key 0092  
                               __size_of_SetJoinFailState 002A  
                        LORAWAN_LinkCheckConfigure@period 0094  
                                        ??_ConfigureRadio 0075  
                                      _SwTimerSetCallback 7162  
             __end_of_UpdateRetransmissionAckTimeoutState 6394  
            __size_of_UpdateRetransmissionAckTimeoutState 006A  
                    ?_UpdateRetransmissionAckTimeoutState 0001  
                   ??_UpdateRetransmissionAckTimeoutState 0094  
                     _UpdateRetransmissionAckTimeoutState 632A  
                                       RADIO_ReadRandom@i 0074  
                            SearchAvailableChannel@result 0081  
                                   RADIO_WritePower@paDac 0069  
                                  __size_of_INT2_CallBack 001E  
                             __size_of_DIO4_ISR_Lora_Init 0002  
                                          _AESEncode$3781 0085  
                                          _AESEncode$3782 0087  
                                          _AESEncode$3783 0089  
                                __end_of_SwTimerIsRunning 749A  
                                       ??_CheckMcastFlags 0066  
                                __end_of_ExecuteLinkCheck 7162  
                                   RADIO_WritePower@power 006A  
                                ?_CreateAllSoftwareTimers 0001  
                        RADIO_WriteMode@currentModulation 006B  
                                    ??_EXT_INT_Initialize 0066  
                            RADIO_SetFSKSyncWord@syncWord 006E  
                                  __size_of_INT3_CallBack 001E  
                                            _rxWindowSize 7F85  
                                  __end_of_EncKeySchedule 2C04  
                           ?_INT1_DefaultInterruptHandler 0001  
                                     ?_SwTimerSetCallback 0064  
                                __end_of_SwTimerReadValue 6E54  
                                        ___lldiv@quotient 006C  
                                             ?_HALSPISend 0001  
                                __end_of_ExecuteDutyCycle 6A80  
                                         ___lwmod@divisor 0074  
                  __end_of_UpdateReceiveWindow2Parameters 76FC  
                 __size_of_UpdateReceiveWindow2Parameters 0016  
                          _UpdateReceiveWindow2Parameters 76E6  
                                 UpdateTxPower@txPowerNew 0064  
                                         ___lwmod@counter 0076  
                         _LORAWAN_LinkCheckConfigure$3285 009E  
                        __end_of_INT1_SetInterruptHandler 7806  
                            FindSmallestDataRate@dataRate 0067  
                           LORAWAN_Join@activationTypeNew 00EE  
                                   __size_of_TMR_ISR_lora 004C  
                              ??_LORAWAN_SetDeviceAddress 0068  
                                    _SystemBlockingWaitMs 7296  
                                   FindSmallestDataRate@i 0066  
                      ComputeSessionKeys@joinAcceptBuffer 00A4  
                                 __size_of_EnableChannels 0016  
                                       ?_LORAWAN_GetState 0001  
                            __end_of_UpdateJoinInProgress 766E  
                            __end_of_ExecuteRxTimingSetup 73D0  
                                 __size_of_HALSPICSAssert 0004  
                                 __end_of_FskSyncWordBuff 7FFF  
                __end_of_RADIO_WriteFSKFrequencyDeviation 65FC  
               __size_of_RADIO_WriteFSKFrequencyDeviation 0064  
                      ??_RADIO_WriteFSKFrequencyDeviation 0075  
                       ?_RADIO_WriteFSKFrequencyDeviation 0071  
                        _RADIO_WriteFSKFrequencyDeviation 6598  
                __end_of_LORAWAN_SetApplicationSessionKey 726C  
               __size_of_LORAWAN_SetApplicationSessionKey 002A  
                      ??_LORAWAN_SetApplicationSessionKey 0070  
                       ?_LORAWAN_SetApplicationSessionKey 006E  
                        _LORAWAN_SetApplicationSessionKey 7242  
                                        ExtractMic@buffer 006E  
                                 ??_RADIO_FSKPayloadReady 00ED  
                                UpdateDataRange@channelId 0066  
                                             ?_IOCBF4_ISR 0001  
                                      ??_LORAWAN_GetState 0064  
                                _RADIO_UnhandledInterrupt 73F4  
                                        ?_HALDIO5PinValue 0001  
                          __end_of_PIN_MANAGER_Initialize 5120  
                                       ?_LORAWAN_Mainloop 0001  
                             __end_of_RADIO_RegisterWrite 7552  
                                 __size_of_ExecuteLinkAdr 01B2  
                            RADIO_WriteFSKBitRate@bitRate 0071  
                                      i2_TMR_GetDeltaTime 4E78  
                                         RADIO_SetCRC@crc 0064  
                                         _PIN_MANAGER_IOC 7882  
                                     RADIO_WritePower@ocp 0068  
                                      ??_LORAWAN_Mainloop 00F3  
                              __size_ofi2_TMR1_WriteTimer 001C  
                                    ??_SwTimerSetCallback 0067  
                                       ??_UpdateDataRange 0065  
                                 ?_UpdateMinMaxChDataRate 0001  
                                         _TMR1_Initialize 6C8A  
                        RADIO_WriteConfiguration@regValue 0086  
                                 i2TMR1_ReadTimer@readVal 0005  
                                      _RadioConfiguration 0175  
                                           ExtractMic@mic 0074  
                                       _LORAWAN_RxTimeout 2712  
                             __end_of_RADIO_SetModulation 7872  
                           __size_of_HALResetPinMakeInput 0004  
                             __size_of_RADIO_RxFSKTimeout 0036  
                                        ??_LORAWAN_RxDone 00E8  
                                     ?i2_TMR_GetDeltaTime 0007  
